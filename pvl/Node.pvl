/*
 * A simple LinkedList implementation.
 */
class Node {
  Node next;
  int val;

  resource state() = Perm(val, 1) ** Perm(next, 1) ** next->state();

  requires state();
  seq<int> contents() =
    unfolding state() in (
    next == null
      ? seq<int>{val}
      : seq<int>{val} + next.contents()
    );

  requires next->state();
  ensures  state();
  ensures  unfolding state() in (this.val == val && this.next == next);
  ensures  contents() == (seq<int>{val} + (next == null ? seq<int>{} : \old(next.contents()))); 
  Node(int val, Node next) {
    this.val = val;
    this.next = next;
    fold state();
  }

  requires state() ** n != null ** n.state();
  ensures  state();
  ensures contents() == (\old(contents()) + \old(n.contents()));
  void append(Node n) {
    unfold state();

    if (next == null) {
      next = n;
    } else {
      next.append(n);
    }

    fold state();
  }
}
