class Queue {
	Node first;
	Node last;

	Queue() {
		
	}

	void linkLast(int val) {
		Node l = last;
		Node newNode = new Node(l, val, null);
		last = newNode;
		if (l == null) {
			first = newNode;
		} else {
			l.next = newNode;
		}
	}

	int unlinkFirst(Node f) {
		// assert f == first && f != null;
		int element = f.item;
		Node next = f.next;
		f.item = null; // <-- assign null to int?
		f.next = null;
		first = next;
		if (next == null) {
			last = null;
		} else {
			next.prev = null;
		}
		return element;
	}
	   
		int peek() {
			Node f = first;
			return (f == null) ? null : f.item;
		}

		   int poll() {
			Node f = first;
			return (f == null) ? null : unlinkFirst(f);
		   }

		boolean offer(int val) {
			linkLast(val);
			return true;
		}
	}

	class Node {
		Node next;
		Node 
		int item;

		Node(Node prev, int item, Node next)
		{
			this.item = item;
			this.next = next;
			this.prev = prev;
		}
	}
}
