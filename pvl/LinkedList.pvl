class LinkedList {
  
  Node first;

  Integer nullInt;

  resource state() = Perm(first, 1) ** first->state();

  ensures state();
  LinkedList() {
    nullInt = null;
    first = null;
    fold state();
  }

  requires Perm(first, 1) ** first.state();
  ensures Perm(first, 1) ** first != null ** first.state(); 

  ensures \old(first) != null ==> first.contents() == \old(first.contents()) + seq<int>{val};
  ensures \old(first) == null ==> first.contents() == seq<int>{val};
  void linkLast(int val) {
    if (first == null) {
      first = new Node(val, null);
    } else {
      first.append(new Node(val, null));
    }
  }

/*
  requires f != null ** f.state();
  ensures \result == \old(f.item);
  Integer unlinkFirst(Node f) {
    // assert f == first && f != null;
  Integer element = f.item;
    Node next = f.next;
    f.item = null;
    f.next = null;
    first = next;
    if (next == null) {
      last = null;
    }
    return element;
  }
  
     
  Integer peek() {
    Node f = first;
    if (f == null) {
      return nullInt;
    } else {
      return f.item;
    }
  }
  
  Integer poll() {
    Node f = first;
    if (f == null) {
      return nullInt;
    } else {
      return unlinkFirst(f);
    }
  }
  
  boolean offer(Integer val) {
    linkLast(val);
    return true;
  }
*/
}

class Integer {
  int val;

  resource state() = Perm(val, 1);

  ensures state();
  Integer(int val) {
    this.val = val;
    fold state();
  }
}

class Node {
  Node next;
  int val;

  resource state() = Perm(val, 1) ** Perm(next, 1) ** next->state();

  requires state();
  seq<int> contents() =
    unfolding state() in (
    next == null
      ? seq<int>{val}
      : seq<int>{val} + next.contents()
    );

  requires next->state();
  ensures state() ** unfolding state() in (this.val == val && this.next == next);
  ensures contents() == (seq<int>{val} + (next == null ? seq<int>{} : \old(next.contents()))); 
  Node(int val, Node next) {
    this.val = val;
    this.next = next;
    fold state();
  }

  requires state() ** n != null ** n.state();
  ensures state();
  ensures contents() == (\old(contents()) + \old(n.contents()));
  void append(Node n) {
    unfold state();

    if (next == null) {
      next = n;
    } else {
      next.append(n);
    }

    fold state();
  }
}
