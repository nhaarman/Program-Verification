class OfferPeekWorker {

    resource state() = Value(queue) ** queue.state();
    BlockingQueue queue;

    requires queue.state();
    ensures state();
    OfferPeekWorker(BlockingQueue queue) {
        this.queue = queue;
        fold state();
    }

    requires state();
    ensures state();
    void run() {
        boolean b = queue.offer(1);
        Integer i = queue.peek();
    }
}

class PutWorker {

    resource state() = Value(queue) ** queue.state();
    BlockingQueue queue;

    requires queue.state();
    ensures state();
    PutWorker(BlockingQueue queue) {
        this.queue = queue;
        fold state();
    }

    requires state();
    ensures state();
    void run() {
        queue.put(1);
    }
}

class PutPollWorker {

    resource state() = Value(queue) ** queue.state();
    BlockingQueue queue;

    requires queue.state();
    ensures state();
    PutPollWorker
    (BlockingQueue queue) {
        this.queue = queue;
        fold state();
    }

    requires state();
    ensures state();
    void run() {
        queue.put(2);
        Integer i = queue.poll();
    }
}

class TakeWorker {

    resource state() = Value(queue) ** queue.state();
    BlockingQueue queue;

    requires queue.state();
    ensures state();
    TakeWorker(BlockingQueue queue) {
        this.queue = queue;
        fold state();
    }

    requires state();
    ensures state();
    void run() {
        int i = queue.take();
    }
}

class OfferWorker {

    resource state() = Value(queue) ** queue.state();
    BlockingQueue queue;

    requires queue.state();
    ensures state();
    OfferWorker(BlockingQueue queue) {
        this.queue = queue;
        fold state();
    }

    requires state();
    ensures state();
    void run() {
      boolean b = queue.offer(7);
    }

}


class Test {

  void testEmpty() {
    BlockingQueue queue = new BlockingQueue(10);
  
    Integer i = queue.peek();
    Integer j = queue.poll();
  }

  void testFillAndEmpty() {
    BlockingQueue queue = new BlockingQueue(10);
    boolean b;

    b = queue.offer(3);
    b = queue.offer(5);
    Integer m = queue.poll();
    b = queue.offer(7);
    Integer n = queue.poll();
    Integer o = queue.poll();
    Integer p = queue.poll();
  }

  void testFillAndPeek() {
    BlockingQueue queue = new BlockingQueue(10);
    boolean b;

    b = queue.offer(3);
    b = queue.offer(5);

    Integer i = queue.peek();
    Integer j = queue.peek();
  }

  void testFullAndFill() {
    BlockingQueue queue = new BlockingQueue(3);
    boolean b;

    queue.put(1);
    queue.put(2);
    queue.put(3);
    b = queue.offer(4);
  }

  void test1() {
    BlockingQueue queue = new BlockingQueue(2);

    OfferPeekWorker t1 = new OfferPeekWorker(queue);
    OfferPeekWorker t2 = new OfferPeekWorker(queue);

    fork t1;
    fork t2;
    join t1;
    join t2;
  }

  void test2() {
    BlockingQueue queue = new BlockingQueue(2);

    PutWorker t1 = new PutWorker(queue);
    PutPollWorker t2 = new PutPollWorker(queue);

    fork t1;
    fork t2;
    join t1;
    join t2;
  }

  void test3() {
    BlockingQueue queue = new BlockingQueue(2);

    PutWorker t1 = new PutWorker(queue);
    TakeWorker t2 = new TakeWorker(queue);

    fork t1;
    fork t2;
    join t1;
    join t2;
  }
  
  void test4() {
    BlockingQueue queue = new BlockingQueue(10);
    
    PutWorker t1 = new PutWorker(queue);
    TakeWorker t2 = new TakeWorker(queue);
    PutWorker t3 = new PutWorker(queue);
    PutWorker t4 = new PutWorker(queue);
    TakeWorker t5 = new TakeWorker(queue);
    
    fork t1;
    fork t2;
    fork t3;
    fork t4;
    fork t5;
    
    join t1;
    join t2;
    join t3;
    join t4;
    join t5;
  }
}

