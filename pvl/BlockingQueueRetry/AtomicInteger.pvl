class AtomicInteger
{
	int val;
	int ghostVal;

	resource lock_invariant() = Perm(val, 1) ** val == ghostVal;

	resource state() = Perm(ghostVal,1);

	ensures state() ** this.ghostVal == val;
	AtomicInteger(int val)
	{	
		this.val = val;
		this.ghostVal = this.val;
		fold state();
	}

	requires state();
	ensures state() ** unfolding state() in (\result == ghostVal);
	int get() {
		lock this;
		int res = this.val;
		unlock this;
		return res;
	}

	requires state();
	ensures state() ** \result == ghostVal-1;
	int getAndIncrement() {
		lock this;
		int res = val;
		val = val+1;
		ghostVal = val;
		unlock this;
		return res;
	}	

	requires state();
	ensures state() ** \result == ghostVal+1;
	int getAndDecrement() {
		lock this;
		int res = val;
		val = val-1;
		ghostVal = val;
		unlock this;
		return res;
	}	
}

	/*
	
		get()
		getAndIncrement();
		getAndDecrement();
	*/
