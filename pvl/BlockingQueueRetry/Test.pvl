class LBQThread1a {

    resource state() = Value(queue) ** queue.state();
    BlockingQueue queue;

    requires queue.state();
    ensures state();
    LBQThread1a(BlockingQueue queue) {
        this.queue = queue;
        fold state();
    }

    requires state();
    ensures state();
    void run() {
        boolean b = queue.offer(1);
        Integer i = queue.peek();
    }
}

class LBQThread1b {

    resource state() = Value(queue) ** queue.state();
    BlockingQueue queue;

    requires queue.state();
    ensures state();
    LBQThread1a(BlockingQueue queue) {
        this.queue = queue;
        fold state();
    }

    requires state();
    ensures state();
    void run() {
        boolean b = queue.offer(2);
        Integer i = queue.peek();
    }
}

class LBQThread2a {

    resource state() = Value(queue) ** queue.state();
    BlockingQueue queue;

    requires queue.state();
    ensures state();
    LBQThread1a(BlockingQueue queue) {
        this.queue = queue;
        fold state();
    }

    requires state();
    ensures state();
    void run() {
        queue.put(1);
    }
}

class LBQThread2b {

    resource state() = Value(queue) ** queue.state();
    BlockingQueue queue;

    requires queue.state();
    ensures state();
    LBQThread1a(BlockingQueue queue) {
        this.queue = queue;
        fold state();
    }

    requires state();
    ensures state();
    void run() {
        queue.put(2);
        Integer i = queue.poll();
    }
}

class LBQThread3a {
    resource state() = Value(queue) ** queue.state();
    BlockingQueue queue;

    requires queue.state();
    ensures state();
    LBQThread1a(BlockingQueue queue) {
        this.queue = queue;
        fold state();
    }

    requires state();
    ensures state();
    void run() {
        queue.put(1);
    }
}

class LBQThread3b {

    resource state() = Value(queue) ** queue.state();
    BlockingQueue queue;

    requires queue.state();
    ensures state();
    LBQThread1a(BlockingQueue queue) {
        this.queue = queue;
        fold state();
    }

    requires state();
    ensures state();
    void run() {
        int i = queue.take();
    }
}

class Test {

    void testEmpty() {
        BlockingQueue queue = new BlockingQueue(10);
        
        Integer i = queue.peek();
        assert i == null;

        Integer j = queue.poll();
        assert j == null;
  }
/*
  void testFillAndEmpty() {
    BlockingQueue queue = new BlockingQueue(10);
    boolean b;

    b = queue.offer(3);
    assert b == true;

    b = queue.offer(5);
    assert b == true;
    
    Integer m = queue.poll();
    assert m.val == 3;

    b = queue.offer(7);
    assert b == true;
    
    Integer n = queue.poll();
    assert n.val == 5;

    Integer o = queue.poll();
    assert o.val == 7;

    Integer p = queue.poll();
    assert p == null;
  }

  void testFillAndPeek() {
    BlockingQueue queue = new BlockingQueue(10);
    boolean b;

    b = queue.offer(3);
    assert b == true;

    b = queue.offer(5);
    assert b == true;

    Integer i = queue.peek();
    assert i.val == 3;

    Integer j = queue.peek();
    assert j.val == 3;
  }

  void testFullAndFill() {
    BlockingQueue queue = new BlockingQueue(3);
    boolean b;

    queue.put(1);
    queue.put(2);
    queue.put(3);
    b = queue.offer(4);
    assert b == false;

  }

  void test1() 
  {
    BlockingQueue queue = new BlockingQueue(2);

    LBQThread1a t1 = new LBQThread1a(queue);
    LBQThread1b t2 = new LBQThread1b(queue);

    fork t1;
    fork t2;
    join t1;
    join t2;

  }

  void test2() {
     BlockingQueue queue = new BlockingQueue(2);

    LBQThread2a t1 = new LBQThread2a(queue);
    LBQThread2b t2 = new LBQThread2b(queue);

    fork t1;
    fork t2;
    join t1;
    join t2;
  }

  void test3() {
    BlockingQueue queue = new BlockingQueue(2);

    LBQThread3a t1 = new LBQThread3a(queue);
    LBQThread3b t2 = new LBQThread3b(queue);

    fork t1;
    fork t2;
    join t1;
    join t2;
  }
*/
}
