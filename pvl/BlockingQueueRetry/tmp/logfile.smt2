(get-info :version)
; (:version "4.3.2")
; Input file is <unknown>
; Started: 2015-07-01 20:37:55
; Silicon.buildVersion: 0.1-SNAPSHOT 407b787e33ff+ default 2015/06/10 17:01:19
; ------------------------------------------------------------
; Preamble start
; 
; ; /z3config.smt2
(set-option :print-success true) ; Boogie: false
(set-option :global-decls true) ; Boogie: default
(set-option :auto_config false) ; Usually a good idea
(set-option :smt.mbqi false)
(set-option :model.v2 true)
(set-option :smt.phase_selection 0)
(set-option :smt.restart_strategy 0)
(set-option :smt.restart_factor |1.5|)
(set-option :smt.arith.random_initial_value true)
(set-option :smt.case_split 3)
(set-option :smt.delay_units true)
(set-option :smt.delay_units_threshold 16)
(set-option :nnf.sk_hack true)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.qi.cost "(+ weight generation)")
(set-option :type_check true)
(set-option :smt.bv.reflect true)
(set-option :smt.soft_timeout 30000)
; 
; ; /preamble.smt2
(declare-datatypes () ((
    $Snap $Snap.unit
    ($Snap.combine ($Snap.first $Snap) ($Snap.second $Snap)))))
(declare-sort $Ref)
(declare-const $Ref.null $Ref)
(define-sort $Perm () Real)
(define-const $Perm.Write $Perm 1.0)
(define-const $Perm.No $Perm 0.0)
(define-fun $Perm.isValidVar ((p $Perm)) Bool
	(<= $Perm.No p))
(define-fun $Perm.isReadVar ((p $Perm) (ub $Perm)) Bool
    (and ($Perm.isValidVar p)
         (not (= p $Perm.No))
         (< p $Perm.Write)))
(define-fun $Perm.min ((p1 $Perm) (p2 $Perm)) Real
    (ite (<= p1 p2) p1 p2))
(define-fun $Math.min ((a Int) (b Int)) Int
    (ite (<= a b) a b))
(define-fun $Math.clip ((a Int)) Int
    (ite (< a 0) 0 a))
(push) ; 1
(declare-sort $Seq<Int>)
; /dafny_axioms/sequences_declarations_dafny.smt2 [Int]
(declare-fun $Seq.length ($Seq<Int>) Int)
(declare-fun $Seq.empty<Int> () $Seq<Int>)
(declare-fun $Seq.singleton (Int) $Seq<Int>)
(declare-fun $Seq.build ($Seq<Int> Int) $Seq<Int>)
(declare-fun $Seq.index ($Seq<Int> Int) Int)
(declare-fun $Seq.append ($Seq<Int> $Seq<Int>) $Seq<Int>)
(declare-fun $Seq.update ($Seq<Int> Int Int) $Seq<Int>)
(declare-fun $Seq.contains ($Seq<Int> Int) Bool)
(declare-fun $Seq.take ($Seq<Int> Int) $Seq<Int>)
(declare-fun $Seq.drop ($Seq<Int> Int) $Seq<Int>)
(declare-fun $Seq.equal ($Seq<Int> $Seq<Int>) Bool)
(declare-fun $Seq.sameuntil ($Seq<Int> $Seq<Int> Int) Bool)
; /dafny_axioms/sequences_int_declarations_dafny.smt2
(declare-fun $Seq.range (Int Int) $Seq<Int>)
(assert true)
; /dafny_axioms/sequences_axioms_dafny.smt2 [Int]
(assert (forall ((s $Seq<Int>) ) (! (<= 0 ($Seq.length s))
  :pattern ( ($Seq.length s))
  )))
(assert (= ($Seq.length $Seq.empty<Int>) 0))
(assert (forall ((s $Seq<Int>) ) (! (=> (= ($Seq.length s) 0) (= s $Seq.empty<Int>))
  :pattern ( ($Seq.length s))
  )))
(assert (forall ((t Int) ) (! (= ($Seq.length ($Seq.singleton t)) 1)
  :pattern ( ($Seq.length ($Seq.singleton t)))
  )))
(assert (forall ((s $Seq<Int>) (v Int) ) (! (= ($Seq.length ($Seq.build s v)) (+ 1 ($Seq.length s)))
  :pattern ( ($Seq.length ($Seq.build s v)))
  )))
(assert (forall ((s $Seq<Int>) (i Int) (v Int) ) (! (and
  (=> (= i ($Seq.length s)) (= ($Seq.index ($Seq.build s v) i) v))
  (=> (not (= i ($Seq.length s))) (= ($Seq.index ($Seq.build s v) i) ($Seq.index s i))))
  :pattern ( ($Seq.index ($Seq.build s v) i))
  )))
(assert (forall ((s0 $Seq<Int>) (s1 $Seq<Int>) ) (! (= ($Seq.length ($Seq.append s0 s1)) (+ ($Seq.length s0) ($Seq.length s1)))
  :pattern ( ($Seq.length ($Seq.append s0 s1)))
  )))
(assert (forall ((t Int) ) (! (= ($Seq.index ($Seq.singleton t) 0) t)
  :pattern ( ($Seq.index ($Seq.singleton t) 0))
  )))
(assert (forall ((s0 $Seq<Int>) (s1 $Seq<Int>) (n Int) ) (! (and
  (=> (< n ($Seq.length s0)) (= ($Seq.index ($Seq.append s0 s1) n) ($Seq.index s0 n)))
  (=> (<= ($Seq.length s0) n) (= ($Seq.index ($Seq.append s0 s1) n) ($Seq.index s1 (- n ($Seq.length s0))))))
  :pattern ( ($Seq.index ($Seq.append s0 s1) n))
  )))
(assert (forall ((s $Seq<Int>) (i Int) (v Int) ) (! (=> (and
  (<= 0 i)
  (< i ($Seq.length s))) (= ($Seq.length ($Seq.update s i v)) ($Seq.length s)))
  :pattern ( ($Seq.length ($Seq.update s i v)))
  )))
(assert (forall ((s $Seq<Int>) (i Int) (v Int) (n Int) ) (! (=> (and
  (<= 0 n)
  (< n ($Seq.length s))) (and
  (=> (= i n) (= ($Seq.index ($Seq.update s i v) n) v))
  (=> (not (= i n)) (= ($Seq.index ($Seq.update s i v) n) ($Seq.index s n)))))
  :pattern ( ($Seq.index ($Seq.update s i v) n))
  )))
(assert (forall ((s $Seq<Int>) (x Int) ) (! (and
  (=> ($Seq.contains s x) (exists ((i Int) ) (! (and
  (<= 0 i)
  (< i ($Seq.length s))
  (= ($Seq.index s i) x))
  :pattern ( ($Seq.index s i))
  )))
  (=> (exists ((i Int) ) (! (and
  (<= 0 i)
  (< i ($Seq.length s))
  (= ($Seq.index s i) x))
  :pattern ( ($Seq.index s i))
  )) ($Seq.contains s x)))
  :pattern ( ($Seq.contains s x))
  )))
(assert (forall ((x Int) ) (! (not ($Seq.contains $Seq.empty<Int> x))
  :pattern ( ($Seq.contains $Seq.empty<Int> x))
  )))
(assert (forall ((s0 $Seq<Int>) (s1 $Seq<Int>) (x Int) ) (! (and
  (=> ($Seq.contains ($Seq.append s0 s1) x) (or
  ($Seq.contains s0 x)
  ($Seq.contains s1 x)))
  (=> (or
  ($Seq.contains s0 x)
  ($Seq.contains s1 x)) ($Seq.contains ($Seq.append s0 s1) x)))
  :pattern ( ($Seq.contains ($Seq.append s0 s1) x))
  )))
(assert (forall ((s $Seq<Int>) (v Int) (x Int) ) (! (and
  (=> ($Seq.contains ($Seq.build s v) x) (or
  (= v x)
  ($Seq.contains s x)))
  (=> (or
  (= v x)
  ($Seq.contains s x)) ($Seq.contains ($Seq.build s v) x)))
  :pattern ( ($Seq.contains ($Seq.build s v) x))
  )))
(assert (forall ((s $Seq<Int>) (n Int) (x Int) ) (! (and
  (=> ($Seq.contains ($Seq.take s n) x) (exists ((i Int) ) (! (and
  (<= 0 i)
  (< i n)
  (< i ($Seq.length s))
  (= ($Seq.index s i) x))
  :pattern ( ($Seq.index s i))
  )))
  (=> (exists ((i Int) ) (! (and
  (<= 0 i)
  (< i n)
  (< i ($Seq.length s))
  (= ($Seq.index s i) x))
  :pattern ( ($Seq.index s i))
  )) ($Seq.contains ($Seq.take s n) x)))
  :pattern ( ($Seq.contains ($Seq.take s n) x))
  )))
(assert (forall ((s $Seq<Int>) (n Int) (x Int) ) (! (and
  (=> ($Seq.contains ($Seq.drop s n) x) (exists ((i Int) ) (! (and
  (<= 0 n)
  (<= n i)
  (< i ($Seq.length s))
  (= ($Seq.index s i) x))
  :pattern ( ($Seq.index s i))
  )))
  (=> (exists ((i Int) ) (! (and
  (<= 0 n)
  (<= n i)
  (< i ($Seq.length s))
  (= ($Seq.index s i) x))
  :pattern ( ($Seq.index s i))
  )) ($Seq.contains ($Seq.drop s n) x)))
  :pattern ( ($Seq.contains ($Seq.drop s n) x))
  )))
(assert (forall ((s0 $Seq<Int>) (s1 $Seq<Int>) ) (! (and
  (=> ($Seq.equal s0 s1) (and
  (= ($Seq.length s0) ($Seq.length s1))
  (forall ((j Int) ) (! (=> (and
  (<= 0 j)
  (< j ($Seq.length s0))) (= ($Seq.index s0 j) ($Seq.index s1 j)))
  :pattern ( ($Seq.index s0 j))
  :pattern ( ($Seq.index s1 j))
  ))))
  (=> (and
  (= ($Seq.length s0) ($Seq.length s1))
  (forall ((j Int) ) (! (=> (and
  (<= 0 j)
  (< j ($Seq.length s0))) (= ($Seq.index s0 j) ($Seq.index s1 j)))
  :pattern ( ($Seq.index s0 j))
  :pattern ( ($Seq.index s1 j))
  ))) ($Seq.equal s0 s1)))
  :pattern ( ($Seq.equal s0 s1))
  )))
(assert (forall ((a $Seq<Int>) (b $Seq<Int>) ) (! (=> ($Seq.equal a b) (= a b))
  :pattern ( ($Seq.equal a b))
  )))
(assert (forall ((s0 $Seq<Int>) (s1 $Seq<Int>) (n Int) ) (! (and
  (=> ($Seq.sameuntil s0 s1 n) (forall ((j Int) ) (! (=> (and
  (<= 0 j)
  (< j n)) (= ($Seq.index s0 j) ($Seq.index s1 j)))
  :pattern ( ($Seq.index s0 j))
  :pattern ( ($Seq.index s1 j))
  )))
  (=> (forall ((j Int) ) (! (=> (and
  (<= 0 j)
  (< j n)) (= ($Seq.index s0 j) ($Seq.index s1 j)))
  :pattern ( ($Seq.index s0 j))
  :pattern ( ($Seq.index s1 j))
  )) ($Seq.sameuntil s0 s1 n)))
  :pattern ( ($Seq.sameuntil s0 s1 n))
  )))
(assert (forall ((s $Seq<Int>) (n Int) ) (! (=> (<= 0 n) (and
  (=> (<= n ($Seq.length s)) (= ($Seq.length ($Seq.take s n)) n))
  (=> (< ($Seq.length s) n) (= ($Seq.length ($Seq.take s n)) ($Seq.length s)))))
  :pattern ( ($Seq.length ($Seq.take s n)))
  )))
(assert (forall ((s $Seq<Int>) (n Int) (j Int) ) (! (=> (and
  (<= 0 j)
  (< j n)
  (< j ($Seq.length s))) (= ($Seq.index ($Seq.take s n) j) ($Seq.index s j)))
  :pattern ( ($Seq.index ($Seq.take s n) j))
  )))
(assert (forall ((s $Seq<Int>) (n Int) ) (! (=> (<= 0 n) (and
  (=> (<= n ($Seq.length s)) (= ($Seq.length ($Seq.drop s n)) (- ($Seq.length s) n)))
  (=> (< ($Seq.length s) n) (= ($Seq.length ($Seq.drop s n)) 0))))
  :pattern ( ($Seq.length ($Seq.drop s n)))
  )))
(assert (forall ((s $Seq<Int>) (n Int) (j Int) ) (! (=> (and
  (<= 0 n)
  (<= 0 j)
  (< j (- ($Seq.length s) n))) (= ($Seq.index ($Seq.drop s n) j) ($Seq.index s (+ j n))))
  :pattern ( ($Seq.index ($Seq.drop s n) j))
  )))
(assert (forall ((s $Seq<Int>) (i Int) (v Int) (n Int) ) (! (=> (and
  (<= 0 i)
  (< i n)
  (<= n ($Seq.length s))) (= ($Seq.take ($Seq.update s i v) n) ($Seq.update ($Seq.take s n) i v)))
  :pattern ( ($Seq.take ($Seq.update s i v) n))
  )))
(assert (forall ((s $Seq<Int>) (i Int) (v Int) (n Int) ) (! (=> (and
  (<= n i)
  (< i ($Seq.length s))) (= ($Seq.take ($Seq.update s i v) n) ($Seq.take s n)))
  :pattern ( ($Seq.take ($Seq.update s i v) n))
  )))
(assert (forall ((s $Seq<Int>) (i Int) (v Int) (n Int) ) (! (=> (and
  (<= 0 n)
  (<= n i)
  (< i ($Seq.length s))) (= ($Seq.drop ($Seq.update s i v) n) ($Seq.update ($Seq.drop s n) (- i n) v)))
  :pattern ( ($Seq.drop ($Seq.update s i v) n))
  )))
(assert (forall ((s $Seq<Int>) (i Int) (v Int) (n Int) ) (! (=> (and
  (<= 0 i)
  (< i n)
  (< n ($Seq.length s))) (= ($Seq.drop ($Seq.update s i v) n) ($Seq.drop s n)))
  :pattern ( ($Seq.drop ($Seq.update s i v) n))
  )))
(assert (forall ((s $Seq<Int>) (v Int) (n Int) ) (! (=> (and
  (<= 0 n)
  (<= n ($Seq.length s))) (= ($Seq.drop ($Seq.build s v) n) ($Seq.build ($Seq.drop s n) v)))
  :pattern ( ($Seq.drop ($Seq.build s v) n))
  )))
(assert (forall ((s $Seq<Int>) (n Int) ) (! (=> (= n 0) (= ($Seq.drop s n) s))
  :pattern ( ($Seq.drop s n))
  )))
(assert (forall ((s $Seq<Int>) (n Int) ) (! (=> (= n 0) (= ($Seq.take s n) $Seq.empty<Int>))
  :pattern ( ($Seq.take s n))
  )))
(assert (forall ((s $Seq<Int>) (m Int) (n Int) ) (! (=> (and
  (<= 0 m)
  (<= 0 n)
  (<= (+ m n) ($Seq.length s))) (= ($Seq.drop ($Seq.drop s m) n) ($Seq.drop s (+ m n))))
  :pattern ( ($Seq.drop ($Seq.drop s m) n))
  )))
(assert (forall ((x Int) (y Int)) (!
  (iff
    ($Seq.contains ($Seq.singleton x) y)
    (= x y))
  :pattern (($Seq.contains ($Seq.singleton x) y))
  )))
; /dafny_axioms/sequences_int_axioms_dafny.smt2
(assert (forall ((min Int) (max Int) ) (! (and
  (=> (< min max) (= ($Seq.length ($Seq.range min max)) (- max min)))
  (=> (<= max min) (= ($Seq.length ($Seq.range min max)) 0)))
   :pattern ( ($Seq.length ($Seq.range min max)))
  )))
(assert (forall ((min Int) (max Int) (j Int) ) (! (=> (and
  (<= 0 j)
  (< j (- max min))) (= ($Seq.index ($Seq.range min max) j) (+ min j)))
   :pattern ( ($Seq.index ($Seq.range min max) j))
  )))
(assert (forall ((min Int) (max Int) (v Int) ) (! (and
  (=> ($Seq.contains ($Seq.range min max) v) (and
  (<= min v)
  (< v max)))
  (=> (and
  (<= min v)
  (< v max)) ($Seq.contains ($Seq.range min max) v)))
   :pattern ( ($Seq.contains ($Seq.range min max) v))
  )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.$PermTo$Snap ($Perm) $Snap)
(declare-fun $SortWrappers.$SnapTo$Perm ($Snap) $Perm)
(assert (forall ((x $Perm)) (!
    (= x ($SortWrappers.$SnapTo$Perm($SortWrappers.$PermTo$Snap x)))
    :pattern (($SortWrappers.$PermTo$Snap x))
    )))
(declare-fun $SortWrappers.$RefTo$Snap ($Ref) $Snap)
(declare-fun $SortWrappers.$SnapTo$Ref ($Snap) $Ref)
(assert (forall ((x $Ref)) (!
    (= x ($SortWrappers.$SnapTo$Ref($SortWrappers.$RefTo$Snap x)))
    :pattern (($SortWrappers.$RefTo$Snap x))
    )))
(declare-fun $SortWrappers.BoolTo$Snap (Bool) $Snap)
(declare-fun $SortWrappers.$SnapToBool ($Snap) Bool)
(assert (forall ((x Bool)) (!
    (= x ($SortWrappers.$SnapToBool($SortWrappers.BoolTo$Snap x)))
    :pattern (($SortWrappers.BoolTo$Snap x))
    )))
(declare-fun $SortWrappers.IntTo$Snap (Int) $Snap)
(declare-fun $SortWrappers.$SnapToInt ($Snap) Int)
(assert (forall ((x Int)) (!
    (= x ($SortWrappers.$SnapToInt($SortWrappers.IntTo$Snap x)))
    :pattern (($SortWrappers.IntTo$Snap x))
    )))
; Declaring additional sort wrappers
(declare-fun $SortWrappers.$Seq<Int>To$Snap ($Seq<Int>) $Snap)
(declare-fun $SortWrappers.$SnapTo$Seq<Int> ($Snap) $Seq<Int>)
(assert (forall ((x $Seq<Int>)) (!
    (= x ($SortWrappers.$SnapTo$Seq<Int>($SortWrappers.$Seq<Int>To$Snap x)))
    :pattern (($SortWrappers.$Seq<Int>To$Snap x))
    )))
; Preamble end
; ------------------------------------------------------------
(declare-const diz@1 $Ref)
(declare-const diz@2 $Ref)
; ------------------------------------------------------------
; Declaring program functions
(declare-const s@$ $Snap)
(declare-fun $Node__contents ($Snap $Ref) $Seq<Int>)
(declare-fun $Node__contents$ ($Snap $Ref) $Seq<Int>)
(declare-fun $BlockingQueue__contents ($Snap $Ref) $Seq<Int>)
(declare-fun $BlockingQueue__contents$ ($Snap $Ref) $Seq<Int>)
; ---------- FUNCTION Node__contents (specs well-defined) ----------
(declare-const result@3 $Seq<Int>)
(push) ; 2
; [eval] diz != null
(assert (not (= diz@1 $Ref.null)))
(pop) ; 2
(assert (forall ((s@$ $Snap) (diz@1 $Ref)) (!
  ($Seq.equal ($Node__contents$ s@$ diz@1) ($Node__contents s@$ diz@1))
  :pattern (($Node__contents s@$ diz@1)))))
(assert true)
; ---------- FUNCTION Node__contents----------
(declare-const result@4 $Seq<Int>)
(push) ; 2
; [eval] diz != null
(assert (not (= diz@1 $Ref.null)))
; [eval] (unfolding acc(Node__state(diz), write) in (diz.Node__next == null ? Seq(diz.Node__val) : Seq(diz.Node__val) ++ Node__contents(diz.Node__next)))
(declare-const $k@5 $Perm)
(assert ($Perm.isValidVar $k@5))
(assert ($Perm.isReadVar $k@5 $Perm.Write))
; [eval] diz.Node__next != null
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.second ($Snap.first ($Snap.second s@$))))
  $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 3
(push) ; 3
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.second ($Snap.first ($Snap.second s@$))))
    $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 3
(push) ; 3
; [then-branch 1] Second(First(Second(s@$))) != Null
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.second ($Snap.first ($Snap.second s@$))))
    $Ref.null)))
; [eval] (diz.Node__next == null ? Seq(diz.Node__val) : Seq(diz.Node__val) ++ Node__contents(diz.Node__next))
; [eval] diz.Node__next == null
(push) ; 4
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.second ($Snap.first ($Snap.second s@$))))
  $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 4
; [dead then-branch 2] Second(First(Second(s@$))) == Null
(push) ; 4
; [else-branch 2] Second(First(Second(s@$))) != Null
; [eval] Seq(diz.Node__val) ++ Node__contents(diz.Node__next)
; [eval] Seq(diz.Node__val)
(push) ; 5
(assert (not (not (= $k@5 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@5 $Perm.No)))
(assert (=
  ($Seq.length
    ($Seq.singleton ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second s@$))))))
  1))
; [eval] Node__contents(diz.Node__next)
; [eval] diz.Node__next != null
(pop) ; 4
(assert (ite
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.second ($Snap.first ($Snap.second s@$))))
    $Ref.null)
  true
  (and
    (=
      ($Seq.length
        ($Seq.singleton ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second s@$))))))
      1)
    (not (= $k@5 $Perm.No)))))
(declare-const $deadThen@6 $Seq<Int>)
(pop) ; 3
(push) ; 3
; [else-branch 1] Second(First(Second(s@$))) == Null
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.second ($Snap.first ($Snap.second s@$))))
  $Ref.null))
; [eval] (diz.Node__next == null ? Seq(diz.Node__val) : Seq(diz.Node__val) ++ Node__contents(diz.Node__next))
; [eval] diz.Node__next == null
(push) ; 4
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.second ($Snap.first ($Snap.second s@$))))
    $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 4
(push) ; 4
; [then-branch 3] Second(First(Second(s@$))) == Null
; [eval] Seq(diz.Node__val)
(push) ; 5
(assert (not (not (= $k@5 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@5 $Perm.No)))
(assert (=
  ($Seq.length
    ($Seq.singleton ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second s@$))))))
  1))
(pop) ; 4
; [dead else-branch 3] Second(First(Second(s@$))) != Null
(assert (ite
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.second ($Snap.first ($Snap.second s@$))))
    $Ref.null)
  (and
    (=
      ($Seq.length
        ($Seq.singleton ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second s@$))))))
      1)
    (not (= $k@5 $Perm.No)))
  true))
(declare-const $deadElse@7 $Seq<Int>)
(pop) ; 3
(declare-fun joinedIn@8 () $Seq<Int>)
(assert (implies
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.second ($Snap.first ($Snap.second s@$))))
    $Ref.null)
  (and
    (ite
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.second ($Snap.first ($Snap.second s@$))))
        $Ref.null)
      (and
        (=
          ($Seq.length
            ($Seq.singleton ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second s@$))))))
          1)
        (not (= $k@5 $Perm.No)))
      true)
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.second ($Snap.first ($Snap.second s@$))))
      $Ref.null)
    ($Perm.isReadVar $k@5 $Perm.Write)
    ($Perm.isValidVar $k@5))))
(assert (implies
  (not
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.second ($Snap.first ($Snap.second s@$))))
      $Ref.null))
  (and
    (ite
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.second ($Snap.first ($Snap.second s@$))))
        $Ref.null)
      true
      (and
        (=
          ($Seq.length
            ($Seq.singleton ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second s@$))))))
          1)
        (not (= $k@5 $Perm.No))))
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.second ($Snap.first ($Snap.second s@$))))
        $Ref.null))
    ($Perm.isReadVar $k@5 $Perm.Write)
    ($Perm.isValidVar $k@5))))
(assert (and
  (implies
    (=
      ($SortWrappers.$SnapTo$Ref ($Snap.second ($Snap.first ($Snap.second s@$))))
      $Ref.null)
    ($Seq.equal
      joinedIn@8
      (ite
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.second ($Snap.first ($Snap.second s@$))))
          $Ref.null)
        ($Seq.singleton ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second s@$)))))
        $deadElse@7)))
  (implies
    (not
      (=
        ($SortWrappers.$SnapTo$Ref ($Snap.second ($Snap.first ($Snap.second s@$))))
        $Ref.null))
    ($Seq.equal
      joinedIn@8
      (ite
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.second ($Snap.first ($Snap.second s@$))))
          $Ref.null)
        $deadThen@6
        ($Seq.append
          ($Seq.singleton ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second s@$)))))
          ($Node__contents ($Snap.combine
            $Snap.unit
            ($Snap.second ($Snap.second s@$))) ($SortWrappers.$SnapTo$Ref ($Snap.second ($Snap.first ($Snap.second s@$)))))))))))
(pop) ; 2
(assert (forall ((s@$ $Snap) (diz@1 $Ref)) (!
  (implies
    (not (= diz@1 $Ref.null))
    ($Seq.equal
      ($Node__contents s@$ diz@1)
      (ite
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.second ($Snap.first ($Snap.second s@$))))
          $Ref.null)
        ($Seq.singleton ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second s@$)))))
        ($Seq.append
          ($Seq.singleton ($SortWrappers.$SnapToInt ($Snap.first ($Snap.first ($Snap.second s@$)))))
          ($Node__contents$ ($Snap.combine
            $Snap.unit
            ($Snap.second ($Snap.second s@$))) ($SortWrappers.$SnapTo$Ref ($Snap.second ($Snap.first ($Snap.second s@$)))))))))
  :pattern (($Node__contents s@$ diz@1)))))
; ---------- FUNCTION BlockingQueue__contents (specs well-defined) ----------
(declare-const result@9 $Seq<Int>)
(push) ; 2
; [eval] diz != null
(assert (not (= diz@2 $Ref.null)))
(declare-const $k@10 $Perm)
(assert ($Perm.isValidVar $k@10))
(assert ($Perm.isReadVar $k@10 $Perm.Write))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 3
(assert (not (not (= $k@10 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 3
(assert (not (= $k@10 $Perm.No)))
(assert (>
  ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first ($Snap.first ($Snap.first ($Snap.first ($Snap.first ($Snap.first ($Snap.first s@$)))))))))
  0))
(declare-const $k@11 $Perm)
(assert ($Perm.isValidVar $k@11))
(assert ($Perm.isReadVar $k@11 $Perm.Write))
; [eval] diz.BlockingQueue__count != null
(push) ; 3
(assert (not (not (= $k@11 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 3
(assert (not (= $k@11 $Perm.No)))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.second ($Snap.first ($Snap.first ($Snap.first ($Snap.first ($Snap.first s@$)))))))
    $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.second ($Snap.first ($Snap.first ($Snap.first s@$)))))
  $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 3
(push) ; 3
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.second ($Snap.first ($Snap.first ($Snap.first s@$)))))
    $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 3
(push) ; 3
; [then-branch 4] Second(First(First(First(s@$)))) != Null
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.second ($Snap.first ($Snap.first ($Snap.first s@$)))))
    $Ref.null)))
(declare-const $k@12 $Perm)
(assert ($Perm.isValidVar $k@12))
(assert ($Perm.isReadVar $k@12 $Perm.Write))
(declare-const $k@13 $Perm)
(assert ($Perm.isValidVar $k@13))
(assert ($Perm.isReadVar $k@13 $Perm.Write))
(pop) ; 3
(push) ; 3
; [else-branch 4] Second(First(First(First(s@$)))) == Null
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.second ($Snap.first ($Snap.first ($Snap.first s@$)))))
  $Ref.null))
(declare-const $k@14 $Perm)
(assert ($Perm.isValidVar $k@14))
(assert ($Perm.isReadVar $k@14 $Perm.Write))
(declare-const $k@15 $Perm)
(assert ($Perm.isValidVar $k@15))
(assert ($Perm.isReadVar $k@15 $Perm.Write))
(pop) ; 3
(pop) ; 2
(assert (forall ((s@$ $Snap) (diz@2 $Ref)) (!
  ($Seq.equal
    ($BlockingQueue__contents$ s@$ diz@2)
    ($BlockingQueue__contents s@$ diz@2))
  :pattern (($BlockingQueue__contents s@$ diz@2)))))
(assert true)
; ---------- FUNCTION BlockingQueue__contents----------
(declare-const result@16 $Seq<Int>)
(push) ; 2
; [eval] diz != null
(assert (not (= diz@2 $Ref.null)))
(declare-const $k@17 $Perm)
(assert ($Perm.isValidVar $k@17))
(assert ($Perm.isReadVar $k@17 $Perm.Write))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 3
(assert (not (not (= $k@17 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 3
(assert (not (= $k@17 $Perm.No)))
(assert (>
  ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first ($Snap.first ($Snap.first ($Snap.first ($Snap.first ($Snap.first ($Snap.first s@$)))))))))
  0))
(declare-const $k@18 $Perm)
(assert ($Perm.isValidVar $k@18))
(assert ($Perm.isReadVar $k@18 $Perm.Write))
; [eval] diz.BlockingQueue__count != null
(push) ; 3
(assert (not (not (= $k@18 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 3
(assert (not (= $k@18 $Perm.No)))
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.second ($Snap.first ($Snap.first ($Snap.first ($Snap.first ($Snap.first s@$)))))))
    $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 3
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.second ($Snap.first ($Snap.first ($Snap.first s@$)))))
  $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 3
(push) ; 3
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.second ($Snap.first ($Snap.first ($Snap.first s@$)))))
    $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 3
(push) ; 3
; [then-branch 5] Second(First(First(First(s@$)))) != Null
(assert (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.second ($Snap.first ($Snap.first ($Snap.first s@$)))))
    $Ref.null)))
(declare-const $k@19 $Perm)
(assert ($Perm.isValidVar $k@19))
(assert ($Perm.isReadVar $k@19 $Perm.Write))
(declare-const $k@20 $Perm)
(assert ($Perm.isValidVar $k@20))
(assert ($Perm.isReadVar $k@20 $Perm.Write))
; [eval] (diz.BlockingQueue__first == null ? Seq[Int]() : Node__contents(diz.BlockingQueue__first))
; [eval] diz.BlockingQueue__first == null
(push) ; 4
(assert (not (=
  ($SortWrappers.$SnapTo$Ref ($Snap.second ($Snap.first ($Snap.first ($Snap.first s@$)))))
  $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 4
; [dead then-branch 6] Second(First(First(First(s@$)))) == Null
(push) ; 4
; [else-branch 6] Second(First(First(First(s@$)))) != Null
; [eval] Node__contents(diz.BlockingQueue__first)
; [eval] diz.BlockingQueue__first != null
(pop) ; 4
(declare-const $deadThen@21 $Seq<Int>)
(pop) ; 3
(push) ; 3
; [else-branch 5] Second(First(First(First(s@$)))) == Null
(assert (=
  ($SortWrappers.$SnapTo$Ref ($Snap.second ($Snap.first ($Snap.first ($Snap.first s@$)))))
  $Ref.null))
(declare-const $k@22 $Perm)
(assert ($Perm.isValidVar $k@22))
(assert ($Perm.isReadVar $k@22 $Perm.Write))
(declare-const $k@23 $Perm)
(assert ($Perm.isValidVar $k@23))
(assert ($Perm.isReadVar $k@23 $Perm.Write))
; [eval] (diz.BlockingQueue__first == null ? Seq[Int]() : Node__contents(diz.BlockingQueue__first))
; [eval] diz.BlockingQueue__first == null
(push) ; 4
(assert (not (not
  (=
    ($SortWrappers.$SnapTo$Ref ($Snap.second ($Snap.first ($Snap.first ($Snap.first s@$)))))
    $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 4
(push) ; 4
; [then-branch 7] Second(First(First(First(s@$)))) == Null
; [eval] Seq[Int]()
(pop) ; 4
; [dead else-branch 7] Second(First(First(First(s@$)))) != Null
(declare-const $deadElse@24 $Seq<Int>)
(pop) ; 3
(pop) ; 2
(assert (forall ((s@$ $Snap) (diz@2 $Ref)) (!
  (implies
    (and
      (and
        (not (= diz@2 $Ref.null))
        (>
          ($SortWrappers.$SnapToInt ($Snap.second ($Snap.first ($Snap.first ($Snap.first ($Snap.first ($Snap.first ($Snap.first ($Snap.first s@$)))))))))
          0))
      (not
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.second ($Snap.first ($Snap.first ($Snap.first ($Snap.first ($Snap.first s@$)))))))
          $Ref.null)))
    ($Seq.equal
      ($BlockingQueue__contents s@$ diz@2)
      (ite
        (=
          ($SortWrappers.$SnapTo$Ref ($Snap.second ($Snap.first ($Snap.first ($Snap.first s@$)))))
          $Ref.null)
        $Seq.empty<Int>
        ($Node__contents ($Snap.combine
          $Snap.unit
          ($Snap.second ($Snap.first ($Snap.first s@$)))) ($SortWrappers.$SnapTo$Ref ($Snap.second ($Snap.first ($Snap.first ($Snap.first s@$)))))))))
  :pattern (($BlockingQueue__contents s@$ diz@2)))))
; ---------- Node__state ----------
(declare-const diz@25 $Ref)
(push) ; 2
(declare-const $t@26 $Snap)
(declare-const $t@27 $Snap)
(declare-const $t@28 $Snap)
(assert (= $t@26 ($Snap.combine $t@27 $t@28)))
(declare-const $t@29 Int)
(declare-const $t@30 $Ref)
(assert (=
  $t@27
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@29)
    ($SortWrappers.$RefTo$Snap $t@30))))
(assert (not (= diz@25 $Ref.null)))
(declare-const $k@31 $Perm)
(assert ($Perm.isValidVar $k@31))
(assert ($Perm.isReadVar $k@31 $Perm.Write))
; [eval] diz.Node__next != null
(push) ; 3
(assert (not (= $t@30 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 3
(push) ; 3
(assert (not (not (= $t@30 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 3
(push) ; 3
; [then-branch 8] $t@30 != Null
(assert (not (= $t@30 $Ref.null)))
(pop) ; 3
(push) ; 3
; [else-branch 8] $t@30 == Null
(assert (= $t@30 $Ref.null))
(pop) ; 3
(pop) ; 2
; ---------- AtomicInteger__lock_held ----------
(declare-const diz@32 $Ref)
; ---------- Lock__lock_held ----------
(declare-const diz@33 $Ref)
; ---------- LBQThread1a__joinToken ----------
(declare-const diz@34 $Ref)
; ---------- LBQThread1b__joinToken ----------
(declare-const diz@35 $Ref)
; ---------- LBQThread2a__joinToken ----------
(declare-const diz@36 $Ref)
; ---------- LBQThread2b__joinToken ----------
(declare-const diz@37 $Ref)
; ---------- LBQThread3a__joinToken ----------
(declare-const diz@38 $Ref)
; ---------- LBQThread3b__joinToken ----------
(declare-const diz@39 $Ref)
; ---------- Node__Node ----------
(declare-const val@40 Int)
(declare-const next@41 $Ref)
(declare-const sys__result@42 $Ref)
(declare-const diz@43 $Ref)
(declare-const __flatten_1@44 Int)
(declare-const __flatten_2@45 $Ref)
(declare-const __flatten_97@46 Int)
(declare-const __flatten_98@47 $Ref)
(push) ; 2
; [eval] next != null
(push) ; 3
(assert (not (= next@41 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 3
(push) ; 3
(assert (not (not (= next@41 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 3
(push) ; 3
; [then-branch 9] next@41 != Null
(assert (not (= next@41 $Ref.null)))
(declare-const $t@48 $Snap)
(push) ; 4
; [eval] sys__result != null
(assert (not (= sys__result@42 $Ref.null)))
(declare-const $t@49 $Snap)
; [eval] (unfolding acc(Node__state(sys__result), write) in (sys__result.Node__val == val) && (sys__result.Node__next == next))
(declare-const $t@50 $Snap)
(declare-const $t@51 $Snap)
(assert (= $t@49 ($Snap.combine $t@50 $t@51)))
(declare-const $t@52 Int)
(declare-const $t@53 $Ref)
(assert (=
  $t@50
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@52)
    ($SortWrappers.$RefTo$Snap $t@53))))
(declare-const $k@54 $Perm)
(assert ($Perm.isValidVar $k@54))
(assert ($Perm.isReadVar $k@54 $Perm.Write))
; [eval] sys__result.Node__next != null
(push) ; 5
(assert (not (= $t@53 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
(assert (not (not (= $t@53 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
; [then-branch 10] $t@53 != Null
(assert (not (= $t@53 $Ref.null)))
; [eval] (sys__result.Node__val == val) && (sys__result.Node__next == next)
; [eval] sys__result.Node__val == val
(push) ; 6
(assert (not (not (= $k@54 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= $k@54 $Perm.No)))
(push) ; 6
(push) ; 7
(assert (not (not (= $t@52 val@40))))
(check-sat)
; unknown
; 0.00s
(pop) ; 7
(push) ; 7
(assert (not (= $t@52 val@40)))
(check-sat)
; unknown
; 0.00s
(pop) ; 7
(push) ; 7
; [then-branch 11] $t@52 == val@40
(assert (= $t@52 val@40))
; [eval] sys__result.Node__next == next
(pop) ; 7
(push) ; 7
; [else-branch 11] $t@52 != val@40
(assert (not (= $t@52 val@40)))
(pop) ; 7
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch 10] $t@53 == Null
(assert (= $t@53 $Ref.null))
; [eval] (sys__result.Node__val == val) && (sys__result.Node__next == next)
; [eval] sys__result.Node__val == val
(push) ; 6
(assert (not (not (= $k@54 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= $k@54 $Perm.No)))
(push) ; 6
(push) ; 7
(assert (not (not (= $t@52 val@40))))
(check-sat)
; unknown
; 0.00s
(pop) ; 7
(push) ; 7
(assert (not (= $t@52 val@40)))
(check-sat)
; unknown
; 0.00s
(pop) ; 7
(push) ; 7
; [then-branch 12] $t@52 == val@40
(assert (= $t@52 val@40))
; [eval] sys__result.Node__next == next
(pop) ; 7
(push) ; 7
; [else-branch 12] $t@52 != val@40
(assert (not (= $t@52 val@40)))
(pop) ; 7
(pop) ; 6
(pop) ; 5
(declare-fun joinedIn@55 () Bool)
(assert (implies
  (= $t@53 $Ref.null)
  (and
    (not (= $k@54 $Perm.No))
    (= $t@53 $Ref.null)
    ($Perm.isReadVar $k@54 $Perm.Write)
    ($Perm.isValidVar $k@54)
    (=
      $t@50
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $t@52)
        ($SortWrappers.$RefTo$Snap $t@53)))
    (= $t@49 ($Snap.combine $t@50 $t@51)))))
(assert (implies
  (not (= $t@53 $Ref.null))
  (and
    (not (= $k@54 $Perm.No))
    (not (= $t@53 $Ref.null))
    ($Perm.isReadVar $k@54 $Perm.Write)
    ($Perm.isValidVar $k@54)
    (=
      $t@50
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $t@52)
        ($SortWrappers.$RefTo$Snap $t@53)))
    (= $t@49 ($Snap.combine $t@50 $t@51)))))
(assert (and
  (implies
    (= $t@53 $Ref.null)
    (= joinedIn@55 (and (= $t@52 val@40) (= $t@53 next@41))))
  (implies
    (not (= $t@53 $Ref.null))
    (= joinedIn@55 (and (= $t@52 val@40) (= $t@53 next@41))))))
(assert joinedIn@55)
; [eval] Node__contents(sys__result) == Seq(val) ++ (next == null ? Seq[Int]() : old(Node__contents(next)))
; [eval] Node__contents(sys__result)
; [eval] sys__result != null
; [eval] Seq(val) ++ (next == null ? Seq[Int]() : old(Node__contents(next)))
; [eval] Seq(val)
(assert (= ($Seq.length ($Seq.singleton val@40)) 1))
; [eval] (next == null ? Seq[Int]() : old(Node__contents(next)))
; [eval] next == null
(push) ; 5
(assert (not (= next@41 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
; [dead then-branch 13] next@41 == Null
(push) ; 5
; [else-branch 13] next@41 != Null
; [eval] old(Node__contents(next))
; [eval] Node__contents(next)
; [eval] next != null
(pop) ; 5
(declare-const $deadThen@56 $Seq<Int>)
(assert ($Seq.equal
  ($Node__contents ($Snap.combine $Snap.unit $t@49) sys__result@42)
  ($Seq.append
    ($Seq.singleton val@40)
    (ite
      (= next@41 $Ref.null)
      $deadThen@56
      ($Node__contents ($Snap.combine $Snap.unit $t@48) next@41)))))
(pop) ; 4
(push) ; 4
; [exec]
; diz := new(Node__next, Node__val)
(declare-const diz@57 $Ref)
(assert (not (= diz@57 $Ref.null)))
(declare-const Node__next@58 $Ref)
(declare-const Node__val@59 Int)
(assert (and
  (not (= next@41 diz@57))
  (not (= sys__result@42 diz@57))
  (not (= __flatten_2@45 diz@57))
  (not (= __flatten_98@47 diz@57))
  (not (= Node__next@58 diz@57))))
; [exec]
; __flatten_1 := val
; [exec]
; __flatten_97 := __flatten_1
; [exec]
; diz.Node__val := __flatten_97
; [exec]
; __flatten_2 := next
; [exec]
; __flatten_98 := __flatten_2
; [exec]
; diz.Node__next := __flatten_98
; [exec]
; fold acc(Node__state(diz), write)
(declare-const $k@60 $Perm)
(assert ($Perm.isValidVar $k@60))
(assert ($Perm.isReadVar $k@60 $Perm.Write))
(push) ; 5
(assert (not (or (= $k@60 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (< $k@60 $Perm.Write))
; [eval] diz.Node__next != null
(push) ; 5
(assert (not (= next@41 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
; [then-branch 14] next@41 != Null
; [exec]
; sys__result := diz
; [exec]
; assert (sys__result != null) && acc(Node__state(sys__result), write) && (unfolding acc(Node__state(sys__result), write) in (sys__result.Node__val == val) && (sys__result.Node__next == next)) && (Node__contents(sys__result) == Seq(val) ++ (next == null ? Seq[Int]() : old(Node__contents(next))))
; [eval] sys__result != null
; [eval] (unfolding acc(Node__state(sys__result), write) in (sys__result.Node__val == val) && (sys__result.Node__next == next))
(declare-const $t@61 $Snap)
(declare-const $t@62 $Snap)
(assert (=
  ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap val@40)
      ($SortWrappers.$RefTo$Snap next@41))
    $t@48)
  ($Snap.combine $t@61 $t@62)))
(declare-const $t@63 Int)
(declare-const $t@64 $Ref)
(assert (=
  $t@61
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@63)
    ($SortWrappers.$RefTo$Snap $t@64))))
(declare-const $k@65 $Perm)
(assert ($Perm.isValidVar $k@65))
(assert ($Perm.isReadVar $k@65 $Perm.Write))
(assert (implies (< $Perm.No (- $Perm.Write $k@60)) (= $t@63 val@40)))
; [eval] sys__result.Node__next != null
(push) ; 6
(assert (not (= $t@64 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 6
(push) ; 6
(assert (not (not (= $t@64 $Ref.null))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(push) ; 6
; [then-branch 15] $t@64 != Null
(assert (not (= $t@64 $Ref.null)))
; [eval] (sys__result.Node__val == val) && (sys__result.Node__next == next)
; [eval] sys__result.Node__val == val
(push) ; 7
(assert (not (not (= (+ (- $Perm.Write $k@60) $k@65) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (not (= (+ (- $Perm.Write $k@60) $k@65) $Perm.No)))
(push) ; 7
(push) ; 8
(assert (not (not (= $t@63 val@40))))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (= $t@63 val@40)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(push) ; 8
; [then-branch 16] $t@63 == val@40
(assert (= $t@63 val@40))
; [eval] sys__result.Node__next == next
(pop) ; 8
; [dead else-branch 16] $t@63 != val@40
(pop) ; 7
(pop) ; 6
; [dead else-branch 15] $t@64 == Null
(assert (not (= $t@64 $Ref.null)))
(assert (not (= (+ (- $Perm.Write $k@60) $k@65) $Perm.No)))
(push) ; 6
(assert (not (and (= $t@63 val@40) (= $t@64 next@41))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (and (= $t@63 val@40) (= $t@64 next@41)))
; [eval] Node__contents(sys__result) == Seq(val) ++ (next == null ? Seq[Int]() : old(Node__contents(next)))
; [eval] Node__contents(sys__result)
; [eval] sys__result != null
; [eval] Seq(val) ++ (next == null ? Seq[Int]() : old(Node__contents(next)))
; [eval] Seq(val)
(assert (= ($Seq.length ($Seq.singleton val@40)) 1))
; [eval] (next == null ? Seq[Int]() : old(Node__contents(next)))
; [eval] next == null
(push) ; 6
(assert (not (= next@41 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 6
; [dead then-branch 17] next@41 == Null
(push) ; 6
; [else-branch 17] next@41 != Null
; [eval] old(Node__contents(next))
; [eval] Node__contents(next)
; [eval] next != null
(pop) ; 6
(declare-const $deadThen@66 $Seq<Int>)
(push) ; 6
(assert (not ($Seq.equal
  ($Node__contents ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap val@40)
        ($SortWrappers.$RefTo$Snap next@41))
      $t@48)) diz@57)
  ($Seq.append
    ($Seq.singleton val@40)
    (ite
      (= next@41 $Ref.null)
      $deadThen@66
      ($Node__contents ($Snap.combine $Snap.unit $t@48) next@41))))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert ($Seq.equal
  ($Node__contents ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap val@40)
        ($SortWrappers.$RefTo$Snap next@41))
      $t@48)) diz@57)
  ($Seq.append
    ($Seq.singleton val@40)
    (ite
      (= next@41 $Ref.null)
      $deadThen@66
      ($Node__contents ($Snap.combine $Snap.unit $t@48) next@41)))))
; [exec]
; inhale false
(pop) ; 5
; [dead else-branch 14] next@41 == Null
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch 9] next@41 == Null
(assert (= next@41 $Ref.null))
(push) ; 4
; [eval] sys__result != null
(assert (not (= sys__result@42 $Ref.null)))
(declare-const $t@67 $Snap)
; [eval] (unfolding acc(Node__state(sys__result), write) in (sys__result.Node__val == val) && (sys__result.Node__next == next))
(declare-const $t@68 $Snap)
(declare-const $t@69 $Snap)
(assert (= $t@67 ($Snap.combine $t@68 $t@69)))
(declare-const $t@70 Int)
(declare-const $t@71 $Ref)
(assert (=
  $t@68
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@70)
    ($SortWrappers.$RefTo$Snap $t@71))))
(declare-const $k@72 $Perm)
(assert ($Perm.isValidVar $k@72))
(assert ($Perm.isReadVar $k@72 $Perm.Write))
; [eval] sys__result.Node__next != null
(push) ; 5
(assert (not (= $t@71 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
(assert (not (not (= $t@71 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
; [then-branch 18] $t@71 != Null
(assert (not (= $t@71 $Ref.null)))
; [eval] (sys__result.Node__val == val) && (sys__result.Node__next == next)
; [eval] sys__result.Node__val == val
(push) ; 6
(assert (not (not (= $k@72 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= $k@72 $Perm.No)))
(push) ; 6
(push) ; 7
(assert (not (not (= $t@70 val@40))))
(check-sat)
; unknown
; 0.00s
(pop) ; 7
(push) ; 7
(assert (not (= $t@70 val@40)))
(check-sat)
; unknown
; 0.00s
(pop) ; 7
(push) ; 7
; [then-branch 19] $t@70 == val@40
(assert (= $t@70 val@40))
; [eval] sys__result.Node__next == next
(pop) ; 7
(push) ; 7
; [else-branch 19] $t@70 != val@40
(assert (not (= $t@70 val@40)))
(pop) ; 7
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch 18] $t@71 == Null
(assert (= $t@71 $Ref.null))
; [eval] (sys__result.Node__val == val) && (sys__result.Node__next == next)
; [eval] sys__result.Node__val == val
(push) ; 6
(assert (not (not (= $k@72 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= $k@72 $Perm.No)))
(push) ; 6
(push) ; 7
(assert (not (not (= $t@70 val@40))))
(check-sat)
; unknown
; 0.00s
(pop) ; 7
(push) ; 7
(assert (not (= $t@70 val@40)))
(check-sat)
; unknown
; 0.00s
(pop) ; 7
(push) ; 7
; [then-branch 20] $t@70 == val@40
(assert (= $t@70 val@40))
; [eval] sys__result.Node__next == next
(pop) ; 7
(push) ; 7
; [else-branch 20] $t@70 != val@40
(assert (not (= $t@70 val@40)))
(pop) ; 7
(pop) ; 6
(pop) ; 5
(declare-fun joinedIn@73 () Bool)
(assert (implies
  (= $t@71 $Ref.null)
  (and
    (not (= $k@72 $Perm.No))
    (= $t@71 $Ref.null)
    ($Perm.isReadVar $k@72 $Perm.Write)
    ($Perm.isValidVar $k@72)
    (=
      $t@68
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $t@70)
        ($SortWrappers.$RefTo$Snap $t@71)))
    (= $t@67 ($Snap.combine $t@68 $t@69)))))
(assert (implies
  (not (= $t@71 $Ref.null))
  (and
    (not (= $k@72 $Perm.No))
    (not (= $t@71 $Ref.null))
    ($Perm.isReadVar $k@72 $Perm.Write)
    ($Perm.isValidVar $k@72)
    (=
      $t@68
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $t@70)
        ($SortWrappers.$RefTo$Snap $t@71)))
    (= $t@67 ($Snap.combine $t@68 $t@69)))))
(assert (and
  (implies
    (= $t@71 $Ref.null)
    (= joinedIn@73 (and (= $t@70 val@40) (= $t@71 next@41))))
  (implies
    (not (= $t@71 $Ref.null))
    (= joinedIn@73 (and (= $t@70 val@40) (= $t@71 next@41))))))
(assert joinedIn@73)
; [eval] Node__contents(sys__result) == Seq(val) ++ (next == null ? Seq[Int]() : old(Node__contents(next)))
; [eval] Node__contents(sys__result)
; [eval] sys__result != null
; [eval] Seq(val) ++ (next == null ? Seq[Int]() : old(Node__contents(next)))
; [eval] Seq(val)
(assert (= ($Seq.length ($Seq.singleton val@40)) 1))
; [eval] (next == null ? Seq[Int]() : old(Node__contents(next)))
; [eval] next == null
(push) ; 5
(assert (not (not (= next@41 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
; [then-branch 21] next@41 == Null
; [eval] Seq[Int]()
(pop) ; 5
; [dead else-branch 21] next@41 != Null
(declare-const $deadElse@74 $Seq<Int>)
(assert ($Seq.equal
  ($Node__contents ($Snap.combine $Snap.unit $t@67) sys__result@42)
  ($Seq.append
    ($Seq.singleton val@40)
    (ite (= next@41 $Ref.null) $Seq.empty<Int> $deadElse@74))))
(pop) ; 4
(push) ; 4
; [exec]
; diz := new(Node__next, Node__val)
(declare-const diz@75 $Ref)
(assert (not (= diz@75 $Ref.null)))
(declare-const Node__next@76 $Ref)
(declare-const Node__val@77 Int)
(assert (and
  (not (= next@41 diz@75))
  (not (= sys__result@42 diz@75))
  (not (= __flatten_2@45 diz@75))
  (not (= __flatten_98@47 diz@75))
  (not (= Node__next@76 diz@75))))
; [exec]
; __flatten_1 := val
; [exec]
; __flatten_97 := __flatten_1
; [exec]
; diz.Node__val := __flatten_97
; [exec]
; __flatten_2 := next
; [exec]
; __flatten_98 := __flatten_2
; [exec]
; diz.Node__next := __flatten_98
; [exec]
; fold acc(Node__state(diz), write)
(declare-const $k@78 $Perm)
(assert ($Perm.isValidVar $k@78))
(assert ($Perm.isReadVar $k@78 $Perm.Write))
(push) ; 5
(assert (not (or (= $k@78 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (< $k@78 $Perm.Write))
; [eval] diz.Node__next != null
(push) ; 5
(assert (not (not (= next@41 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
; [dead then-branch 22] next@41 != Null
(push) ; 5
; [else-branch 22] next@41 == Null
; [exec]
; sys__result := diz
; [exec]
; assert (sys__result != null) && acc(Node__state(sys__result), write) && (unfolding acc(Node__state(sys__result), write) in (sys__result.Node__val == val) && (sys__result.Node__next == next)) && (Node__contents(sys__result) == Seq(val) ++ (next == null ? Seq[Int]() : old(Node__contents(next))))
; [eval] sys__result != null
; [eval] (unfolding acc(Node__state(sys__result), write) in (sys__result.Node__val == val) && (sys__result.Node__next == next))
(declare-const $t@79 $Snap)
(declare-const $t@80 $Snap)
(assert (=
  ($Snap.combine
    ($Snap.combine
      ($SortWrappers.IntTo$Snap val@40)
      ($SortWrappers.$RefTo$Snap next@41))
    $Snap.unit)
  ($Snap.combine $t@79 $t@80)))
(declare-const $t@81 Int)
(declare-const $t@82 $Ref)
(assert (=
  $t@79
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@81)
    ($SortWrappers.$RefTo$Snap $t@82))))
(declare-const $k@83 $Perm)
(assert ($Perm.isValidVar $k@83))
(assert ($Perm.isReadVar $k@83 $Perm.Write))
(assert (implies (< $Perm.No (- $Perm.Write $k@78)) (= $t@81 val@40)))
; [eval] sys__result.Node__next != null
(push) ; 6
(assert (not (= $t@82 $Ref.null)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(push) ; 6
(assert (not (not (= $t@82 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 6
; [dead then-branch 23] $t@82 != Null
(push) ; 6
; [else-branch 23] $t@82 == Null
(assert (= $t@82 $Ref.null))
; [eval] (sys__result.Node__val == val) && (sys__result.Node__next == next)
; [eval] sys__result.Node__val == val
(push) ; 7
(assert (not (not (= (+ (- $Perm.Write $k@78) $k@83) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (not (= (+ (- $Perm.Write $k@78) $k@83) $Perm.No)))
(push) ; 7
(push) ; 8
(assert (not (not (= $t@81 val@40))))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (= $t@81 val@40)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(push) ; 8
; [then-branch 24] $t@81 == val@40
(assert (= $t@81 val@40))
; [eval] sys__result.Node__next == next
(pop) ; 8
; [dead else-branch 24] $t@81 != val@40
(pop) ; 7
(pop) ; 6
(assert (= $t@82 $Ref.null))
(assert (not (= (+ (- $Perm.Write $k@78) $k@83) $Perm.No)))
(push) ; 6
(assert (not (and (= $t@81 val@40) (= $t@82 next@41))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (and (= $t@81 val@40) (= $t@82 next@41)))
; [eval] Node__contents(sys__result) == Seq(val) ++ (next == null ? Seq[Int]() : old(Node__contents(next)))
; [eval] Node__contents(sys__result)
; [eval] sys__result != null
; [eval] Seq(val) ++ (next == null ? Seq[Int]() : old(Node__contents(next)))
; [eval] Seq(val)
(assert (= ($Seq.length ($Seq.singleton val@40)) 1))
; [eval] (next == null ? Seq[Int]() : old(Node__contents(next)))
; [eval] next == null
(push) ; 6
(assert (not (not (= next@41 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 6
(push) ; 6
; [then-branch 25] next@41 == Null
; [eval] Seq[Int]()
(pop) ; 6
; [dead else-branch 25] next@41 != Null
(declare-const $deadElse@84 $Seq<Int>)
(push) ; 6
(assert (not ($Seq.equal
  ($Node__contents ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap val@40)
        ($SortWrappers.$RefTo$Snap next@41))
      $Snap.unit)) diz@75)
  ($Seq.append
    ($Seq.singleton val@40)
    (ite (= next@41 $Ref.null) $Seq.empty<Int> $deadElse@84)))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert ($Seq.equal
  ($Node__contents ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap val@40)
        ($SortWrappers.$RefTo$Snap next@41))
      $Snap.unit)) diz@75)
  ($Seq.append
    ($Seq.singleton val@40)
    (ite (= next@41 $Ref.null) $Seq.empty<Int> $deadElse@84))))
; [exec]
; inhale false
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
; ---------- Node__append ----------
(declare-const diz@85 $Ref)
(declare-const n@86 $Ref)
(declare-const __flatten_3@87 $Ref)
(declare-const __flatten_99@88 $Ref)
(push) ; 2
; [eval] diz != null
(assert (not (= diz@85 $Ref.null)))
(declare-const $t@89 $Snap)
; [eval] n != null
(assert (not (= n@86 $Ref.null)))
(declare-const $t@90 $Snap)
(push) ; 3
(assert (not (= diz@85 n@86)))
(check-sat)
; unknown
; 0.00s
(pop) ; 3
(push) ; 3
(declare-const $t@91 $Snap)
; [eval] Node__contents(diz) == old(Node__contents(diz)) ++ old(Node__contents(n))
; [eval] Node__contents(diz)
; [eval] diz != null
; [eval] old(Node__contents(diz)) ++ old(Node__contents(n))
; [eval] old(Node__contents(diz))
; [eval] Node__contents(diz)
; [eval] diz != null
; [eval] old(Node__contents(n))
; [eval] Node__contents(n)
; [eval] n != null
(assert ($Seq.equal
  ($Node__contents ($Snap.combine $Snap.unit $t@91) diz@85)
  ($Seq.append
    ($Node__contents ($Snap.combine $Snap.unit $t@89) diz@85)
    ($Node__contents ($Snap.combine $Snap.unit $t@90) n@86))))
(pop) ; 3
(push) ; 3
; [exec]
; unfold acc(Node__state(diz), write)
(declare-const $t@92 $Snap)
(declare-const $t@93 $Snap)
(assert (= $t@89 ($Snap.combine $t@92 $t@93)))
(declare-const $t@94 Int)
(declare-const $t@95 $Ref)
(assert (=
  $t@92
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@94)
    ($SortWrappers.$RefTo$Snap $t@95))))
(declare-const $k@96 $Perm)
(assert ($Perm.isValidVar $k@96))
(assert ($Perm.isReadVar $k@96 $Perm.Write))
; [eval] diz.Node__next != null
(push) ; 4
(assert (not (= $t@95 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 4
(push) ; 4
(assert (not (not (= $t@95 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 4
(push) ; 4
; [then-branch 26] $t@95 != Null
(assert (not (= $t@95 $Ref.null)))
(push) ; 5
(assert (not (= n@86 $t@95)))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
; [eval] diz.Node__next == null
(push) ; 5
(assert (not (= $t@95 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
; [dead then-branch 27] $t@95 == Null
(push) ; 5
; [else-branch 27] $t@95 != Null
(pop) ; 5
; [eval] !(diz.Node__next == null)
; [eval] diz.Node__next == null
(push) ; 5
(assert (not (= $t@95 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
; [then-branch 28] $t@95 != Null
; [exec]
; Node__append(diz.Node__next, n)
; [eval] diz != null
; [eval] n != null
(declare-const $t@97 $Snap)
(declare-const $t@98 $Snap)
(assert (= $t@97 ($Snap.combine $t@98 $Snap.unit)))
; [eval] Node__contents(diz) == old(Node__contents(diz)) ++ old(Node__contents(n))
; [eval] Node__contents(diz)
; [eval] diz != null
; [eval] old(Node__contents(diz)) ++ old(Node__contents(n))
; [eval] old(Node__contents(diz))
; [eval] Node__contents(diz)
; [eval] diz != null
; [eval] old(Node__contents(n))
; [eval] Node__contents(n)
; [eval] n != null
(assert ($Seq.equal
  ($Node__contents ($Snap.combine $Snap.unit $t@98) $t@95)
  ($Seq.append
    ($Node__contents ($Snap.combine $Snap.unit $t@93) $t@95)
    ($Node__contents ($Snap.combine $Snap.unit $t@90) n@86))))
; [exec]
; fold acc(Node__state(diz), write)
(declare-const $k@99 $Perm)
(assert ($Perm.isValidVar $k@99))
(assert ($Perm.isReadVar $k@99 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@99 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(push) ; 6
(assert (not (not (= $k@96 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= $k@96 $Perm.No)))
(assert (< $k@99 $k@96))
; [eval] diz.Node__next != null
(push) ; 6
(assert (not (= $t@95 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 6
(push) ; 6
; [then-branch 29] $t@95 != Null
; [eval] Node__contents(diz) == old(Node__contents(diz)) ++ old(Node__contents(n))
; [eval] Node__contents(diz)
; [eval] diz != null
; [eval] old(Node__contents(diz)) ++ old(Node__contents(n))
; [eval] old(Node__contents(diz))
; [eval] Node__contents(diz)
; [eval] diz != null
; [eval] old(Node__contents(n))
; [eval] Node__contents(n)
; [eval] n != null
(push) ; 7
(assert (not ($Seq.equal
  ($Node__contents ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $t@94)
        ($SortWrappers.$RefTo$Snap $t@95))
      $t@98)) diz@85)
  ($Seq.append
    ($Node__contents ($Snap.combine $Snap.unit $t@89) diz@85)
    ($Node__contents ($Snap.combine $Snap.unit $t@90) n@86)))))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert ($Seq.equal
  ($Node__contents ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $t@94)
        ($SortWrappers.$RefTo$Snap $t@95))
      $t@98)) diz@85)
  ($Seq.append
    ($Node__contents ($Snap.combine $Snap.unit $t@89) diz@85)
    ($Node__contents ($Snap.combine $Snap.unit $t@90) n@86))))
(pop) ; 6
; [dead else-branch 29] $t@95 == Null
(pop) ; 5
; [dead else-branch 28] $t@95 == Null
(pop) ; 4
(push) ; 4
; [else-branch 26] $t@95 == Null
(assert (= $t@95 $Ref.null))
; [eval] diz.Node__next == null
(push) ; 5
(assert (not (not (= $t@95 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
; [then-branch 30] $t@95 == Null
; [exec]
; __flatten_3 := n
; [exec]
; __flatten_99 := __flatten_3
; [exec]
; diz.Node__next := __flatten_99
; [exec]
; fold acc(Node__state(diz), write)
(declare-const $k@100 $Perm)
(assert ($Perm.isValidVar $k@100))
(assert ($Perm.isReadVar $k@100 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@100 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(push) ; 6
(assert (not (not (= $k@96 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= $k@96 $Perm.No)))
(assert (< $k@100 $k@96))
; [eval] diz.Node__next != null
(push) ; 6
(assert (not (= n@86 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 6
(push) ; 6
; [then-branch 31] n@86 != Null
; [eval] Node__contents(diz) == old(Node__contents(diz)) ++ old(Node__contents(n))
; [eval] Node__contents(diz)
; [eval] diz != null
; [eval] old(Node__contents(diz)) ++ old(Node__contents(n))
; [eval] old(Node__contents(diz))
; [eval] Node__contents(diz)
; [eval] diz != null
; [eval] old(Node__contents(n))
; [eval] Node__contents(n)
; [eval] n != null
(push) ; 7
(assert (not ($Seq.equal
  ($Node__contents ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $t@94)
        ($SortWrappers.$RefTo$Snap n@86))
      $t@90)) diz@85)
  ($Seq.append
    ($Node__contents ($Snap.combine $Snap.unit $t@89) diz@85)
    ($Node__contents ($Snap.combine $Snap.unit $t@90) n@86)))))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert ($Seq.equal
  ($Node__contents ($Snap.combine
    $Snap.unit
    ($Snap.combine
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $t@94)
        ($SortWrappers.$RefTo$Snap n@86))
      $t@90)) diz@85)
  ($Seq.append
    ($Node__contents ($Snap.combine $Snap.unit $t@89) diz@85)
    ($Node__contents ($Snap.combine $Snap.unit $t@90) n@86))))
(pop) ; 6
; [dead else-branch 31] n@86 == Null
(pop) ; 5
; [dead else-branch 30] $t@95 != Null
; [eval] !(diz.Node__next == null)
; [eval] diz.Node__next == null
(push) ; 5
(assert (not (not (= $t@95 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
; [dead then-branch 32] $t@95 != Null
(push) ; 5
; [else-branch 32] $t@95 == Null
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
; ---------- AtomicInteger__AtomicInteger ----------
(declare-const val@101 Int)
(declare-const sys__result@102 $Ref)
(declare-const diz@103 $Ref)
(declare-const __flatten_5@104 Int)
(declare-const __flatten_101@105 Int)
(push) ; 2
(push) ; 3
; [eval] sys__result != null
(assert (not (= sys__result@102 $Ref.null)))
(pop) ; 3
(push) ; 3
; [exec]
; diz := new(AtomicInteger__val)
(declare-const diz@106 $Ref)
(assert (not (= diz@106 $Ref.null)))
(declare-const AtomicInteger__val@107 Int)
(assert (not (= sys__result@102 diz@106)))
; [exec]
; __flatten_5 := val
; [exec]
; __flatten_101 := __flatten_5
; [exec]
; diz.AtomicInteger__val := __flatten_101
; [exec]
; exhale acc(diz.AtomicInteger__val, write)
; [exec]
; sys__result := diz
; [exec]
; assert sys__result != null
; [eval] sys__result != null
; [exec]
; inhale false
(pop) ; 3
(pop) ; 2
; ---------- AtomicInteger__getAndIncrement ----------
(declare-const diz@108 $Ref)
(declare-const sys__result@109 Int)
(declare-const res@110 Int)
(declare-const __flatten_6@111 Int)
(declare-const __flatten_7@112 Int)
(declare-const __flatten_102@113 Int)
(push) ; 2
; [eval] diz != null
(assert (not (= diz@108 $Ref.null)))
(push) ; 3
(pop) ; 3
(push) ; 3
; [exec]
; inhale acc(diz.AtomicInteger__val, write)
(declare-const $t@114 Int)
; [exec]
; inhale acc(AtomicInteger__lock_held(diz), write)
(declare-const $t@115 $Snap)
; [exec]
; res := diz.AtomicInteger__val
; [exec]
; __flatten_6 := diz.AtomicInteger__val + 1
; [eval] diz.AtomicInteger__val + 1
; [exec]
; __flatten_102 := __flatten_6
; [exec]
; diz.AtomicInteger__val := __flatten_102
; [exec]
; exhale acc(AtomicInteger__lock_held(diz), write)
; [exec]
; exhale acc(diz.AtomicInteger__val, write)
; [exec]
; __flatten_7 := res
; [exec]
; sys__result := __flatten_7
; [exec]
; assert true
(push) ; 4
(pop) ; 4
; [exec]
; inhale false
(pop) ; 3
(pop) ; 2
; ---------- AtomicInteger__getAndDecrement ----------
(declare-const diz@116 $Ref)
(declare-const sys__result@117 Int)
(declare-const res@118 Int)
(declare-const __flatten_8@119 Int)
(declare-const __flatten_9@120 Int)
(declare-const __flatten_103@121 Int)
(push) ; 2
; [eval] diz != null
(assert (not (= diz@116 $Ref.null)))
(push) ; 3
(pop) ; 3
(push) ; 3
; [exec]
; inhale acc(diz.AtomicInteger__val, write)
(declare-const $t@122 Int)
; [exec]
; inhale acc(AtomicInteger__lock_held(diz), write)
(declare-const $t@123 $Snap)
; [exec]
; res := diz.AtomicInteger__val
; [exec]
; __flatten_8 := diz.AtomicInteger__val - 1
; [eval] diz.AtomicInteger__val - 1
; [exec]
; __flatten_103 := __flatten_8
; [exec]
; diz.AtomicInteger__val := __flatten_103
; [exec]
; exhale acc(AtomicInteger__lock_held(diz), write)
; [exec]
; exhale acc(diz.AtomicInteger__val, write)
; [exec]
; __flatten_9 := res
; [exec]
; sys__result := __flatten_9
; [exec]
; assert true
(push) ; 4
(pop) ; 4
; [exec]
; inhale false
(pop) ; 3
(pop) ; 2
; ---------- AtomicInteger__get ----------
(declare-const diz@124 $Ref)
(declare-const sys__result@125 Int)
(declare-const res@126 Int)
(declare-const __flatten_10@127 Int)
(push) ; 2
; [eval] diz != null
(assert (not (= diz@124 $Ref.null)))
(push) ; 3
(pop) ; 3
(push) ; 3
; [exec]
; inhale acc(diz.AtomicInteger__val, write)
(declare-const $t@128 Int)
; [exec]
; inhale acc(AtomicInteger__lock_held(diz), write)
(declare-const $t@129 $Snap)
; [exec]
; res := diz.AtomicInteger__val
; [exec]
; exhale acc(AtomicInteger__lock_held(diz), write)
; [exec]
; exhale acc(diz.AtomicInteger__val, write)
; [exec]
; __flatten_10 := res
; [exec]
; sys__result := __flatten_10
; [exec]
; assert true
(push) ; 4
(pop) ; 4
; [exec]
; inhale false
(pop) ; 3
(pop) ; 2
; ---------- Integer__Integer ----------
(declare-const val@130 Int)
(declare-const sys__result@131 $Ref)
(declare-const diz@132 $Ref)
(declare-const __flatten_11@133 Int)
(declare-const __flatten_104@134 Int)
(push) ; 2
(push) ; 3
; [eval] sys__result != null
(assert (not (= sys__result@131 $Ref.null)))
(declare-const $k@135 $Perm)
(assert ($Perm.isValidVar $k@135))
(assert ($Perm.isReadVar $k@135 $Perm.Write))
(declare-const $t@136 Int)
; [eval] sys__result.Integer__val == val
(push) ; 4
(assert (not (not (= $k@135 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 4
(assert (not (= $k@135 $Perm.No)))
(assert (= $t@136 val@130))
(pop) ; 3
(push) ; 3
; [exec]
; diz := new(Integer__val)
(declare-const diz@137 $Ref)
(assert (not (= diz@137 $Ref.null)))
(declare-const Integer__val@138 Int)
(assert (not (= sys__result@131 diz@137)))
; [exec]
; __flatten_11 := val
; [exec]
; __flatten_104 := __flatten_11
; [exec]
; diz.Integer__val := __flatten_104
; [exec]
; sys__result := diz
; [exec]
; assert (sys__result != null) && acc(sys__result.Integer__val, wildcard) && (sys__result.Integer__val == val)
; [eval] sys__result != null
(declare-const $k@139 $Perm)
(assert ($Perm.isValidVar $k@139))
(assert ($Perm.isReadVar $k@139 $Perm.Write))
(push) ; 4
(assert (not (or (= $k@139 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 4
(assert (< $k@139 $Perm.Write))
; [eval] sys__result.Integer__val == val
; [exec]
; inhale false
(pop) ; 3
(pop) ; 2
; ---------- Lock__Lock ----------
(declare-const sys__result@140 $Ref)
(declare-const diz@141 $Ref)
(push) ; 2
(push) ; 3
; [eval] sys__result != null
(assert (not (= sys__result@140 $Ref.null)))
(pop) ; 3
(push) ; 3
; [exec]
; diz := new()
(declare-const diz@142 $Ref)
(assert (not (= diz@142 $Ref.null)))
(assert (not (= sys__result@140 diz@142)))
; [exec]
; exhale true
; [exec]
; sys__result := diz
; [exec]
; assert sys__result != null
; [eval] sys__result != null
; [exec]
; inhale false
(pop) ; 3
(pop) ; 2
; ---------- BlockingQueue__BlockingQueue ----------
(declare-const capacity@143 Int)
(declare-const sys__result@144 $Ref)
(declare-const diz@145 $Ref)
(declare-const __flatten_12@146 $Ref)
(declare-const __flatten_13@147 $Ref)
(declare-const __flatten_14@148 $Ref)
(declare-const __flatten_15@149 $Ref)
(declare-const __flatten_16@150 Int)
(declare-const __flatten_17@151 $Ref)
(declare-const __flatten_18@152 $Ref)
(declare-const __flatten_106@153 $Ref)
(declare-const __flatten_108@154 $Ref)
(declare-const __flatten_109@155 Int)
(declare-const __flatten_111@156 $Ref)
(push) ; 2
; [eval] capacity > 0
(assert (> capacity@143 0))
(push) ; 3
; [eval] sys__result != null
(assert (not (= sys__result@144 $Ref.null)))
(declare-const $k@157 $Perm)
(assert ($Perm.isValidVar $k@157))
(assert ($Perm.isReadVar $k@157 $Perm.Write))
(declare-const $t@158 Int)
; [eval] sys__result.BlockingQueue__capacity > 0
(push) ; 4
(assert (not (not (= $k@157 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 4
(assert (not (= $k@157 $Perm.No)))
(assert (> $t@158 0))
(declare-const $k@159 $Perm)
(assert ($Perm.isValidVar $k@159))
(assert ($Perm.isReadVar $k@159 $Perm.Write))
(declare-const $t@160 $Ref)
; [eval] sys__result.BlockingQueue__count != null
(push) ; 4
(assert (not (not (= $k@159 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 4
(assert (not (= $k@159 $Perm.No)))
(assert (not (= $t@160 $Ref.null)))
(declare-const $t@161 $Ref)
; [eval] sys__result.BlockingQueue__first != null
(push) ; 4
(assert (not (= $t@161 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 4
(push) ; 4
(assert (not (not (= $t@161 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 4
(push) ; 4
; [then-branch 33] $t@161 != Null
(assert (not (= $t@161 $Ref.null)))
(declare-const $t@162 $Snap)
(declare-const $k@163 $Perm)
(assert ($Perm.isValidVar $k@163))
(assert ($Perm.isReadVar $k@163 $Perm.Write))
(declare-const $t@164 $Ref)
(declare-const $k@165 $Perm)
(assert ($Perm.isValidVar $k@165))
(assert ($Perm.isReadVar $k@165 $Perm.Write))
(declare-const $t@166 $Ref)
; [eval] sys__result.BlockingQueue__capacity == capacity
(assert (= $t@158 capacity@143))
; [eval] sys__result.BlockingQueue__first == null
(assert (= $t@161 $Ref.null))
(pop) ; 4
(push) ; 4
; [else-branch 33] $t@161 == Null
(assert (= $t@161 $Ref.null))
(declare-const $k@167 $Perm)
(assert ($Perm.isValidVar $k@167))
(assert ($Perm.isReadVar $k@167 $Perm.Write))
(declare-const $t@168 $Ref)
(declare-const $k@169 $Perm)
(assert ($Perm.isValidVar $k@169))
(assert ($Perm.isReadVar $k@169 $Perm.Write))
(declare-const $t@170 $Ref)
; [eval] sys__result.BlockingQueue__capacity == capacity
(assert (= $t@158 capacity@143))
; [eval] sys__result.BlockingQueue__first == null
(pop) ; 4
(pop) ; 3
(push) ; 3
; [exec]
; diz := new(BlockingQueue__capacity, BlockingQueue__count, BlockingQueue__first, BlockingQueue__putLock, BlockingQueue__takeLock)
(declare-const diz@171 $Ref)
(assert (not (= diz@171 $Ref.null)))
(declare-const BlockingQueue__capacity@172 Int)
(declare-const BlockingQueue__count@173 $Ref)
(declare-const BlockingQueue__first@174 $Ref)
(declare-const BlockingQueue__putLock@175 $Ref)
(declare-const BlockingQueue__takeLock@176 $Ref)
(assert (and
  (not (= sys__result@144 diz@171))
  (not (= __flatten_12@146 diz@171))
  (not (= __flatten_13@147 diz@171))
  (not (= __flatten_14@148 diz@171))
  (not (= __flatten_15@149 diz@171))
  (not (= __flatten_17@151 diz@171))
  (not (= __flatten_18@152 diz@171))
  (not (= __flatten_106@153 diz@171))
  (not (= __flatten_108@154 diz@171))
  (not (= __flatten_111@156 diz@171))
  (not (= BlockingQueue__count@173 diz@171))
  (not (= BlockingQueue__first@174 diz@171))
  (not (= BlockingQueue__putLock@175 diz@171))
  (not (= BlockingQueue__takeLock@176 diz@171))))
; [exec]
; __flatten_13 := Lock__Lock()
(declare-const sys__result@177 $Ref)
; [eval] sys__result != null
(assert (not (= sys__result@177 $Ref.null)))
; [exec]
; __flatten_12 := __flatten_13
; [exec]
; __flatten_106 := __flatten_12
; [exec]
; diz.BlockingQueue__putLock := __flatten_106
; [exec]
; __flatten_15 := Lock__Lock()
(declare-const sys__result@178 $Ref)
; [eval] sys__result != null
(assert (not (= sys__result@178 $Ref.null)))
; [exec]
; __flatten_14 := __flatten_15
; [exec]
; __flatten_108 := __flatten_14
; [exec]
; diz.BlockingQueue__takeLock := __flatten_108
; [exec]
; __flatten_16 := capacity
; [exec]
; __flatten_109 := __flatten_16
; [exec]
; diz.BlockingQueue__capacity := __flatten_109
; [exec]
; diz.BlockingQueue__first := null
; [exec]
; __flatten_18 := AtomicInteger__AtomicInteger(0)
(declare-const sys__result@179 $Ref)
; [eval] sys__result != null
(assert (not (= sys__result@179 $Ref.null)))
; [exec]
; __flatten_17 := __flatten_18
; [exec]
; __flatten_111 := __flatten_17
; [exec]
; diz.BlockingQueue__count := __flatten_111
; [exec]
; sys__result := diz
; [exec]
; assert (sys__result != null) && acc(sys__result.BlockingQueue__capacity, wildcard) && (sys__result.BlockingQueue__capacity > 0) && acc(sys__result.BlockingQueue__count, wildcard) && (sys__result.BlockingQueue__count != null) && acc(sys__result.BlockingQueue__first, write) && ((sys__result.BlockingQueue__first != null) ==> acc(Node__state(sys__result.BlockingQueue__first), write)) && acc(sys__result.BlockingQueue__putLock, wildcard) && acc(sys__result.BlockingQueue__takeLock, wildcard) && (sys__result.BlockingQueue__capacity == capacity) && (sys__result.BlockingQueue__first == null)
; [eval] sys__result != null
(declare-const $k@180 $Perm)
(assert ($Perm.isValidVar $k@180))
(assert ($Perm.isReadVar $k@180 $Perm.Write))
(push) ; 4
(assert (not (or (= $k@180 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 4
(assert (< $k@180 $Perm.Write))
; [eval] sys__result.BlockingQueue__capacity > 0
(declare-const $k@181 $Perm)
(assert ($Perm.isValidVar $k@181))
(assert ($Perm.isReadVar $k@181 $Perm.Write))
(push) ; 4
(assert (not (or (= $k@181 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 4
(assert (< $k@181 $Perm.Write))
; [eval] sys__result.BlockingQueue__count != null
; [eval] sys__result.BlockingQueue__first != null
(push) ; 4
(assert (not false))
(check-sat)
; unknown
; 0.00s
(pop) ; 4
; [dead then-branch 34] False
(push) ; 4
; [else-branch 34] True
(declare-const $k@182 $Perm)
(assert ($Perm.isValidVar $k@182))
(assert ($Perm.isReadVar $k@182 $Perm.Write))
(push) ; 5
(assert (not (or (= $k@182 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (< $k@182 $Perm.Write))
(declare-const $k@183 $Perm)
(assert ($Perm.isValidVar $k@183))
(assert ($Perm.isReadVar $k@183 $Perm.Write))
(push) ; 5
(assert (not (or (= $k@183 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (< $k@183 $Perm.Write))
; [eval] sys__result.BlockingQueue__capacity == capacity
; [eval] sys__result.BlockingQueue__first == null
; [exec]
; inhale false
(pop) ; 4
(pop) ; 3
(pop) ; 2
; ---------- BlockingQueue__put ----------
(declare-const diz@184 $Ref)
(declare-const val@185 Int)
(declare-const currentCount@186 Int)
(declare-const __flatten_19@187 Int)
(declare-const __flatten_20@188 Int)
(declare-const c@189 Int)
(declare-const __flatten_22@190 Int)
(push) ; 2
; [eval] diz != null
(assert (not (= diz@184 $Ref.null)))
(declare-const $k@191 $Perm)
(assert ($Perm.isValidVar $k@191))
(assert ($Perm.isReadVar $k@191 $Perm.Write))
(declare-const $t@192 Int)
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 3
(assert (not (not (= $k@191 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 3
(assert (not (= $k@191 $Perm.No)))
(assert (> $t@192 0))
(declare-const $k@193 $Perm)
(assert ($Perm.isValidVar $k@193))
(assert ($Perm.isReadVar $k@193 $Perm.Write))
(declare-const $t@194 $Ref)
; [eval] diz.BlockingQueue__count != null
(push) ; 3
(assert (not (not (= $k@193 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 3
(assert (not (= $k@193 $Perm.No)))
(assert (not (= $t@194 $Ref.null)))
(declare-const $t@195 $Ref)
; [eval] diz.BlockingQueue__first != null
(push) ; 3
(assert (not (= $t@195 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 3
(push) ; 3
(assert (not (not (= $t@195 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 3
(push) ; 3
; [then-branch 35] $t@195 != Null
(assert (not (= $t@195 $Ref.null)))
(declare-const $t@196 $Snap)
(declare-const $k@197 $Perm)
(assert ($Perm.isValidVar $k@197))
(assert ($Perm.isReadVar $k@197 $Perm.Write))
(declare-const $t@198 $Ref)
(declare-const $k@199 $Perm)
(assert ($Perm.isValidVar $k@199))
(assert ($Perm.isReadVar $k@199 $Perm.Write))
(declare-const $t@200 $Ref)
(push) ; 4
(declare-const $k@201 $Perm)
(assert ($Perm.isValidVar $k@201))
(assert ($Perm.isReadVar $k@201 $Perm.Write))
(declare-const $t@202 Int)
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 5
(assert (not (not (= $k@201 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@201 $Perm.No)))
(assert (> $t@202 0))
(declare-const $k@203 $Perm)
(assert ($Perm.isValidVar $k@203))
(assert ($Perm.isReadVar $k@203 $Perm.Write))
(declare-const $t@204 $Ref)
; [eval] diz.BlockingQueue__count != null
(push) ; 5
(assert (not (not (= $k@203 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@203 $Perm.No)))
(assert (not (= $t@204 $Ref.null)))
(declare-const $t@205 $Ref)
; [eval] diz.BlockingQueue__first != null
(push) ; 5
(assert (not (= $t@205 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
(assert (not (not (= $t@205 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
; [then-branch 36] $t@205 != Null
(assert (not (= $t@205 $Ref.null)))
(declare-const $t@206 $Snap)
(declare-const $k@207 $Perm)
(assert ($Perm.isValidVar $k@207))
(assert ($Perm.isReadVar $k@207 $Perm.Write))
(declare-const $t@208 $Ref)
(declare-const $k@209 $Perm)
(assert ($Perm.isValidVar $k@209))
(assert ($Perm.isReadVar $k@209 $Perm.Write))
(declare-const $t@210 $Ref)
(pop) ; 5
(push) ; 5
; [else-branch 36] $t@205 == Null
(assert (= $t@205 $Ref.null))
(declare-const $k@211 $Perm)
(assert ($Perm.isValidVar $k@211))
(assert ($Perm.isReadVar $k@211 $Perm.Write))
(declare-const $t@212 $Ref)
(declare-const $k@213 $Perm)
(assert ($Perm.isValidVar $k@213))
(assert ($Perm.isReadVar $k@213 $Perm.Write))
(declare-const $t@214 $Ref)
(pop) ; 5
(pop) ; 4
(push) ; 4
; [exec]
; inhale true
; [exec]
; inhale acc(Lock__lock_held(diz.BlockingQueue__putLock), write)
(push) ; 5
(assert (not (not (= $k@197 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@197 $Perm.No)))
(declare-const $t@215 $Snap)
; [exec]
; __flatten_19 := AtomicInteger__get(diz.BlockingQueue__count)
; [eval] diz != null
(declare-const sys__result@216 Int)
; [exec]
; currentCount := __flatten_19
; loop at <no position>
(declare-const currentCount@217 Int)
(declare-const __flatten_20@218 Int)
(push) ; 5
; Verify loop body
(declare-const $t@219 $Snap)
(declare-const $t@220 $Snap)
(assert (= $t@219 ($Snap.combine $t@220 $Snap.unit)))
(declare-const $t@221 $Snap)
(assert (= $t@220 ($Snap.combine $t@221 $Snap.unit)))
(declare-const $t@222 $Snap)
(declare-const $t@223 $Ref)
(assert (= $t@221 ($Snap.combine $t@222 ($SortWrappers.$RefTo$Snap $t@223))))
(declare-const $t@224 $Snap)
(declare-const $t@225 Int)
(assert (= $t@222 ($Snap.combine $t@224 ($SortWrappers.IntTo$Snap $t@225))))
(declare-const $t@226 $Ref)
(declare-const $t@227 $Snap)
(assert (= $t@224 ($Snap.combine ($SortWrappers.$RefTo$Snap $t@226) $t@227)))
(declare-const $k@228 $Perm)
(assert ($Perm.isValidVar $k@228))
(assert ($Perm.isReadVar $k@228 $Perm.Write))
(push) ; 6
(assert (not (not (= $k@228 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= $k@228 $Perm.No)))
(declare-const $k@229 $Perm)
(assert ($Perm.isValidVar $k@229))
(assert ($Perm.isReadVar $k@229 $Perm.Write))
(declare-const $k@230 $Perm)
(assert ($Perm.isValidVar $k@230))
(assert ($Perm.isReadVar $k@230 $Perm.Write))
; [eval] diz.BlockingQueue__count != null
(push) ; 6
(assert (not (not (= $k@230 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= $k@230 $Perm.No)))
(assert (not (= $t@223 $Ref.null)))
; [eval] currentCount == diz.BlockingQueue__capacity
(push) ; 6
(assert (not (not (= $k@229 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= $k@229 $Perm.No)))
(assert (= currentCount@217 $t@225))
(check-sat)
; unknown
; [exec]
; exhale true
; [exec]
; assert acc(Lock__lock_held(diz.BlockingQueue__putLock), write)
; [exec]
; inhale true
; [exec]
; __flatten_20 := AtomicInteger__get(diz.BlockingQueue__count)
; [eval] diz != null
(declare-const sys__result@231 Int)
; [exec]
; currentCount := __flatten_20
(declare-const $k@232 $Perm)
(assert ($Perm.isValidVar $k@232))
(assert ($Perm.isReadVar $k@232 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@232 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (< $k@232 $k@228))
(declare-const $k@233 $Perm)
(assert ($Perm.isValidVar $k@233))
(assert ($Perm.isReadVar $k@233 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@233 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (< $k@233 $k@229))
(declare-const $k@234 $Perm)
(assert ($Perm.isValidVar $k@234))
(assert ($Perm.isReadVar $k@234 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@234 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (< $k@234 $k@230))
; [eval] diz.BlockingQueue__count != null
(pop) ; 5
(push) ; 5
; Establish loop invariant
(declare-const $k@235 $Perm)
(assert ($Perm.isValidVar $k@235))
(assert ($Perm.isReadVar $k@235 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@235 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (< $k@235 $k@197))
(declare-const $k@236 $Perm)
(assert ($Perm.isValidVar $k@236))
(assert ($Perm.isReadVar $k@236 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@236 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (< $k@236 $k@191))
(declare-const $k@237 $Perm)
(assert ($Perm.isValidVar $k@237))
(assert ($Perm.isReadVar $k@237 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@237 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (< $k@237 $k@193))
; [eval] diz.BlockingQueue__count != null
; Continue after loop
(declare-const $t@238 $Snap)
(declare-const $t@239 $Snap)
(assert (= $t@238 ($Snap.combine $t@239 $Snap.unit)))
(declare-const $t@240 $Snap)
(assert (= $t@239 ($Snap.combine $t@240 $Snap.unit)))
(declare-const $t@241 $Snap)
(declare-const $t@242 $Ref)
(assert (= $t@240 ($Snap.combine $t@241 ($SortWrappers.$RefTo$Snap $t@242))))
(declare-const $t@243 $Snap)
(declare-const $t@244 Int)
(assert (= $t@241 ($Snap.combine $t@243 ($SortWrappers.IntTo$Snap $t@244))))
(declare-const $t@245 $Ref)
(declare-const $t@246 $Snap)
(assert (= $t@243 ($Snap.combine ($SortWrappers.$RefTo$Snap $t@245) $t@246)))
(declare-const $k@247 $Perm)
(assert ($Perm.isValidVar $k@247))
(assert ($Perm.isReadVar $k@247 $Perm.Write))
(assert (implies (< $Perm.No (- $k@197 $k@235)) (= $t@245 $t@198)))
(push) ; 6
(assert (not (not (= (+ (- $k@197 $k@235) $k@247) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= (+ (- $k@197 $k@235) $k@247) $Perm.No)))
(declare-const $k@248 $Perm)
(assert ($Perm.isValidVar $k@248))
(assert ($Perm.isReadVar $k@248 $Perm.Write))
(assert (implies (< $Perm.No (- $k@191 $k@236)) (= $t@244 $t@192)))
(declare-const $k@249 $Perm)
(assert ($Perm.isValidVar $k@249))
(assert ($Perm.isReadVar $k@249 $Perm.Write))
(assert (implies (< $Perm.No (- $k@193 $k@237)) (= $t@242 $t@194)))
; [eval] diz.BlockingQueue__count != null
(push) ; 6
(assert (not (not (= (+ (- $k@193 $k@237) $k@249) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= (+ (- $k@193 $k@237) $k@249) $Perm.No)))
(assert (not (= $t@242 $Ref.null)))
; [eval] !(currentCount == diz.BlockingQueue__capacity)
; [eval] currentCount == diz.BlockingQueue__capacity
(push) ; 6
(assert (not (not (= (+ (- $k@191 $k@236) $k@248) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= (+ (- $k@191 $k@236) $k@248) $Perm.No)))
(assert (not (= currentCount@217 $t@244)))
(check-sat)
; unknown
; [exec]
; BlockingQueue__linkLast(diz, val)
; [eval] diz != null
(declare-const $k@250 $Perm)
(assert ($Perm.isValidVar $k@250))
(assert ($Perm.isReadVar $k@250 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@250 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (< $k@250 (+ (- $k@191 $k@236) $k@248)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 6
(assert (not (> $t@244 0)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (> $t@244 0))
(declare-const $k@251 $Perm)
(assert ($Perm.isValidVar $k@251))
(assert ($Perm.isReadVar $k@251 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@251 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (< $k@251 (+ (- $k@193 $k@237) $k@249)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 6
(assert (not (= $t@195 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 6
(push) ; 6
; [then-branch 37] $t@195 != Null
(declare-const $k@252 $Perm)
(assert ($Perm.isValidVar $k@252))
(assert ($Perm.isReadVar $k@252 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@252 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@252 (+ (- $k@197 $k@235) $k@247)))
(declare-const $k@253 $Perm)
(assert ($Perm.isValidVar $k@253))
(assert ($Perm.isReadVar $k@253 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@253 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(push) ; 7
(assert (not (not (= $k@199 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (not (= $k@199 $Perm.No)))
(assert (< $k@253 $k@199))
(declare-const $t@254 $Snap)
(declare-const $t@255 $Snap)
(assert (= $t@254 ($Snap.combine $t@255 $Snap.unit)))
(declare-const $t@256 $Snap)
(assert (= $t@255 ($Snap.combine $t@256 $Snap.unit)))
(declare-const $t@257 $Snap)
(assert (= $t@256 ($Snap.combine $t@257 $Snap.unit)))
(declare-const $t@258 $Snap)
(declare-const $t@259 $Ref)
(assert (= $t@257 ($Snap.combine $t@258 ($SortWrappers.$RefTo$Snap $t@259))))
(declare-const $t@260 $Snap)
(declare-const $t@261 $Ref)
(assert (= $t@258 ($Snap.combine $t@260 ($SortWrappers.$RefTo$Snap $t@261))))
(declare-const $t@262 $Snap)
(declare-const $t@263 $Snap)
(assert (= $t@260 ($Snap.combine $t@262 $t@263)))
(declare-const $t@264 $Snap)
(declare-const $t@265 $Ref)
(assert (= $t@262 ($Snap.combine $t@264 ($SortWrappers.$RefTo$Snap $t@265))))
(declare-const $t@266 $Snap)
(assert (= $t@264 ($Snap.combine $t@266 $Snap.unit)))
(declare-const $t@267 Int)
(declare-const $t@268 $Ref)
(assert (=
  $t@266
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@267)
    ($SortWrappers.$RefTo$Snap $t@268))))
(declare-const $t@269 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@267)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@269) $Snap.unit)))
(declare-const $k@270 $Perm)
(assert ($Perm.isValidVar $k@270))
(assert ($Perm.isReadVar $k@270 $Perm.Write))
(assert (implies (< $Perm.No (- (+ (- $k@191 $k@236) $k@248) $k@250)) (= $t@269 $t@244)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 7
(assert (not (not (= (+ (- (+ (- $k@191 $k@236) $k@248) $k@250) $k@270) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (not (= (+ (- (+ (- $k@191 $k@236) $k@248) $k@250) $k@270) $Perm.No)))
(assert (> $t@269 0))
(declare-const $k@271 $Perm)
(assert ($Perm.isValidVar $k@271))
(assert ($Perm.isReadVar $k@271 $Perm.Write))
(assert (implies (< $Perm.No (- (+ (- $k@193 $k@237) $k@249) $k@251)) (= $t@268 $t@242)))
; [eval] diz.BlockingQueue__count != null
(push) ; 7
(assert (not (not (= (+ (- (+ (- $k@193 $k@237) $k@249) $k@251) $k@271) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (not (= (+ (- (+ (- $k@193 $k@237) $k@249) $k@251) $k@271) $Perm.No)))
(assert (not (= $t@268 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 7
(assert (not (= $t@265 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 7
(push) ; 7
(assert (not (not (= $t@265 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 7
(push) ; 7
; [then-branch 38] $t@265 != Null
(assert (not (= $t@265 $Ref.null)))
(declare-const $k@272 $Perm)
(assert ($Perm.isValidVar $k@272))
(assert ($Perm.isReadVar $k@272 $Perm.Write))
(assert (implies (< $Perm.No (- (+ (- $k@197 $k@235) $k@247) $k@252)) (= $t@261 $t@245)))
(declare-const $k@273 $Perm)
(assert ($Perm.isValidVar $k@273))
(assert ($Perm.isReadVar $k@273 $Perm.Write))
(assert (implies (< $Perm.No (- $k@199 $k@253)) (= $t@259 $t@200)))
; [eval] diz.BlockingQueue__first != null
; [eval] (old(|BlockingQueue__contents(diz)|) == 0) ==> (BlockingQueue__contents(diz) == Seq(val))
; [eval] old(|BlockingQueue__contents(diz)|) == 0
; [eval] old(|BlockingQueue__contents(diz)|)
; [eval] |BlockingQueue__contents(diz)|
; [eval] BlockingQueue__contents(diz)
; [eval] diz != null
(declare-const $k@274 $Perm)
(assert ($Perm.isValidVar $k@274))
(assert ($Perm.isReadVar $k@274 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@274 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (< $k@274 (+ (- $k@191 $k@236) $k@248)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@275 $Perm)
(assert ($Perm.isValidVar $k@275))
(assert ($Perm.isReadVar $k@275 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@275 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (< $k@275 (+ (- $k@193 $k@237) $k@249)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 8
(assert (not (= $t@195 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
(push) ; 8
; [then-branch 39] $t@195 != Null
(declare-const $k@276 $Perm)
(assert ($Perm.isValidVar $k@276))
(assert ($Perm.isReadVar $k@276 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@276 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@276 (+ (- $k@197 $k@235) $k@247)))
(declare-const $k@277 $Perm)
(assert ($Perm.isValidVar $k@277))
(assert ($Perm.isReadVar $k@277 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@277 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@277 $k@199))
(pop) ; 8
; [dead else-branch 39] $t@195 == Null
(assert ($Perm.isValidVar $k@276))
(assert ($Perm.isReadVar $k@276 $Perm.Write))
(assert (< $k@276 (+ (- $k@197 $k@235) $k@247)))
(assert ($Perm.isValidVar $k@277))
(assert ($Perm.isReadVar $k@277 $Perm.Write))
(assert (< $k@277 $k@199))
(push) ; 8
(push) ; 9
(assert (not (not
  (=
    ($Seq.length
      ($BlockingQueue__contents ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine
                    ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@244))
                    $Snap.unit)
                  ($SortWrappers.$RefTo$Snap $t@242))
                $Snap.unit)
              ($SortWrappers.$RefTo$Snap $t@195))
            $t@196)
          ($SortWrappers.$RefTo$Snap $t@245))
        ($SortWrappers.$RefTo$Snap $t@200)) diz@184))
    0))))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(push) ; 9
(assert (not (=
  ($Seq.length
    ($BlockingQueue__contents ($Snap.combine
      ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@244))
                  $Snap.unit)
                ($SortWrappers.$RefTo$Snap $t@242))
              $Snap.unit)
            ($SortWrappers.$RefTo$Snap $t@195))
          $t@196)
        ($SortWrappers.$RefTo$Snap $t@245))
      ($SortWrappers.$RefTo$Snap $t@200)) diz@184))
  0)))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
; [dead then-branch 40] |BlockingQueue__contents(diz@184;((((((((_, $t@244), _), $t@242), _), $t@195), $t@196), $t@245), $t@200))| == 0
(push) ; 9
; [else-branch 40] |BlockingQueue__contents(diz@184;((((((((_, $t@244), _), $t@242), _), $t@195), $t@196), $t@245), $t@200))| != 0
(assert (not
  (=
    ($Seq.length
      ($BlockingQueue__contents ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine
                    ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@244))
                    $Snap.unit)
                  ($SortWrappers.$RefTo$Snap $t@242))
                $Snap.unit)
              ($SortWrappers.$RefTo$Snap $t@195))
            $t@196)
          ($SortWrappers.$RefTo$Snap $t@245))
        ($SortWrappers.$RefTo$Snap $t@200)) diz@184))
    0)))
(pop) ; 9
(pop) ; 8
; [eval] (old(|BlockingQueue__contents(diz)|) != 0) ==> (BlockingQueue__contents(diz) == old(BlockingQueue__contents(diz)) ++ Seq(val))
; [eval] old(|BlockingQueue__contents(diz)|) != 0
; [eval] old(|BlockingQueue__contents(diz)|)
; [eval] |BlockingQueue__contents(diz)|
; [eval] BlockingQueue__contents(diz)
; [eval] diz != null
(declare-const $k@278 $Perm)
(assert ($Perm.isValidVar $k@278))
(assert ($Perm.isReadVar $k@278 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@278 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (< $k@278 (+ (- $k@191 $k@236) $k@248)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@279 $Perm)
(assert ($Perm.isValidVar $k@279))
(assert ($Perm.isReadVar $k@279 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@279 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (< $k@279 (+ (- $k@193 $k@237) $k@249)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 8
(assert (not (= $t@195 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
(push) ; 8
; [then-branch 41] $t@195 != Null
(declare-const $k@280 $Perm)
(assert ($Perm.isValidVar $k@280))
(assert ($Perm.isReadVar $k@280 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@280 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@280 (+ (- $k@197 $k@235) $k@247)))
(declare-const $k@281 $Perm)
(assert ($Perm.isValidVar $k@281))
(assert ($Perm.isReadVar $k@281 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@281 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@281 $k@199))
(pop) ; 8
; [dead else-branch 41] $t@195 == Null
(assert ($Perm.isValidVar $k@280))
(assert ($Perm.isReadVar $k@280 $Perm.Write))
(assert (< $k@280 (+ (- $k@197 $k@235) $k@247)))
(assert ($Perm.isValidVar $k@281))
(assert ($Perm.isReadVar $k@281 $Perm.Write))
(assert (< $k@281 $k@199))
(push) ; 8
(push) ; 9
(assert (not (=
  ($Seq.length
    ($BlockingQueue__contents ($Snap.combine
      ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@244))
                  $Snap.unit)
                ($SortWrappers.$RefTo$Snap $t@242))
              $Snap.unit)
            ($SortWrappers.$RefTo$Snap $t@195))
          $t@196)
        ($SortWrappers.$RefTo$Snap $t@245))
      ($SortWrappers.$RefTo$Snap $t@200)) diz@184))
  0)))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
(push) ; 9
(assert (not (not
  (=
    ($Seq.length
      ($BlockingQueue__contents ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine
                    ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@244))
                    $Snap.unit)
                  ($SortWrappers.$RefTo$Snap $t@242))
                $Snap.unit)
              ($SortWrappers.$RefTo$Snap $t@195))
            $t@196)
          ($SortWrappers.$RefTo$Snap $t@245))
        ($SortWrappers.$RefTo$Snap $t@200)) diz@184))
    0))))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(push) ; 9
; [then-branch 42] |BlockingQueue__contents(diz@184;((((((((_, $t@244), _), $t@242), _), $t@195), $t@196), $t@245), $t@200))| != 0
(assert (not
  (=
    ($Seq.length
      ($BlockingQueue__contents ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine
                    ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@244))
                    $Snap.unit)
                  ($SortWrappers.$RefTo$Snap $t@242))
                $Snap.unit)
              ($SortWrappers.$RefTo$Snap $t@195))
            $t@196)
          ($SortWrappers.$RefTo$Snap $t@245))
        ($SortWrappers.$RefTo$Snap $t@200)) diz@184))
    0)))
; [eval] BlockingQueue__contents(diz) == old(BlockingQueue__contents(diz)) ++ Seq(val)
; [eval] BlockingQueue__contents(diz)
; [eval] diz != null
(declare-const $k@282 $Perm)
(assert ($Perm.isValidVar $k@282))
(assert ($Perm.isReadVar $k@282 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@282 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (< $k@282 (+ (- (+ (- $k@191 $k@236) $k@248) $k@250) $k@270)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@283 $Perm)
(assert ($Perm.isValidVar $k@283))
(assert ($Perm.isReadVar $k@283 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@283 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (< $k@283 (+ (- (+ (- $k@193 $k@237) $k@249) $k@251) $k@271)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 10
(assert (not (= $t@265 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 10
(push) ; 10
; [then-branch 43] $t@265 != Null
(declare-const $k@284 $Perm)
(assert ($Perm.isValidVar $k@284))
(assert ($Perm.isReadVar $k@284 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@284 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(push) ; 11
(assert (not (not (= (+ (- (+ (- $k@197 $k@235) $k@247) $k@252) $k@272) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (not (= (+ (- (+ (- $k@197 $k@235) $k@247) $k@252) $k@272) $Perm.No)))
(assert (< $k@284 (+ (- (+ (- $k@197 $k@235) $k@247) $k@252) $k@272)))
(declare-const $k@285 $Perm)
(assert ($Perm.isValidVar $k@285))
(assert ($Perm.isReadVar $k@285 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@285 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(push) ; 11
(assert (not (not (= (+ (- $k@199 $k@253) $k@273) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (not (= (+ (- $k@199 $k@253) $k@273) $Perm.No)))
(assert (< $k@285 (+ (- $k@199 $k@253) $k@273)))
(pop) ; 10
; [dead else-branch 43] $t@265 == Null
(assert ($Perm.isValidVar $k@284))
(assert ($Perm.isReadVar $k@284 $Perm.Write))
(assert (not (= (+ (- (+ (- $k@197 $k@235) $k@247) $k@252) $k@272) $Perm.No)))
(assert (< $k@284 (+ (- (+ (- $k@197 $k@235) $k@247) $k@252) $k@272)))
(assert ($Perm.isValidVar $k@285))
(assert ($Perm.isReadVar $k@285 $Perm.Write))
(assert (not (= (+ (- $k@199 $k@253) $k@273) $Perm.No)))
(assert (< $k@285 (+ (- $k@199 $k@253) $k@273)))
; [eval] old(BlockingQueue__contents(diz)) ++ Seq(val)
; [eval] old(BlockingQueue__contents(diz))
; [eval] BlockingQueue__contents(diz)
; [eval] diz != null
(declare-const $k@286 $Perm)
(assert ($Perm.isValidVar $k@286))
(assert ($Perm.isReadVar $k@286 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@286 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (< $k@286 (+ (- $k@191 $k@236) $k@248)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@287 $Perm)
(assert ($Perm.isValidVar $k@287))
(assert ($Perm.isReadVar $k@287 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@287 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (< $k@287 (+ (- $k@193 $k@237) $k@249)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 10
(assert (not (= $t@195 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 10
(push) ; 10
; [then-branch 44] $t@195 != Null
(declare-const $k@288 $Perm)
(assert ($Perm.isValidVar $k@288))
(assert ($Perm.isReadVar $k@288 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@288 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (< $k@288 (+ (- $k@197 $k@235) $k@247)))
(declare-const $k@289 $Perm)
(assert ($Perm.isValidVar $k@289))
(assert ($Perm.isReadVar $k@289 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@289 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (< $k@289 $k@199))
(pop) ; 10
; [dead else-branch 44] $t@195 == Null
(assert ($Perm.isValidVar $k@288))
(assert ($Perm.isReadVar $k@288 $Perm.Write))
(assert (< $k@288 (+ (- $k@197 $k@235) $k@247)))
(assert ($Perm.isValidVar $k@289))
(assert ($Perm.isReadVar $k@289 $Perm.Write))
(assert (< $k@289 $k@199))
; [eval] Seq(val)
(assert (= ($Seq.length ($Seq.singleton val@185)) 1))
(pop) ; 9
; [dead else-branch 42] |BlockingQueue__contents(diz@184;((((((((_, $t@244), _), $t@242), _), $t@195), $t@196), $t@245), $t@200))| == 0
(pop) ; 8
(assert ($Perm.isValidVar $k@282))
(assert ($Perm.isReadVar $k@282 $Perm.Write))
(assert (< $k@282 (+ (- (+ (- $k@191 $k@236) $k@248) $k@250) $k@270)))
(assert ($Perm.isValidVar $k@283))
(assert ($Perm.isReadVar $k@283 $Perm.Write))
(assert (< $k@283 (+ (- (+ (- $k@193 $k@237) $k@249) $k@251) $k@271)))
(assert ($Perm.isValidVar $k@284))
(assert ($Perm.isReadVar $k@284 $Perm.Write))
(assert (not (= (+ (- (+ (- $k@197 $k@235) $k@247) $k@252) $k@272) $Perm.No)))
(assert (< $k@284 (+ (- (+ (- $k@197 $k@235) $k@247) $k@252) $k@272)))
(assert ($Perm.isValidVar $k@285))
(assert ($Perm.isReadVar $k@285 $Perm.Write))
(assert (not (= (+ (- $k@199 $k@253) $k@273) $Perm.No)))
(assert (< $k@285 (+ (- $k@199 $k@253) $k@273)))
(assert ($Perm.isValidVar $k@286))
(assert ($Perm.isReadVar $k@286 $Perm.Write))
(assert (< $k@286 (+ (- $k@191 $k@236) $k@248)))
(assert ($Perm.isValidVar $k@287))
(assert ($Perm.isReadVar $k@287 $Perm.Write))
(assert (< $k@287 (+ (- $k@193 $k@237) $k@249)))
(assert ($Perm.isValidVar $k@288))
(assert ($Perm.isReadVar $k@288 $Perm.Write))
(assert (< $k@288 (+ (- $k@197 $k@235) $k@247)))
(assert ($Perm.isValidVar $k@289))
(assert ($Perm.isReadVar $k@289 $Perm.Write))
(assert (< $k@289 $k@199))
(assert (= ($Seq.length ($Seq.singleton val@185)) 1))
(assert (implies
  (not
    (=
      ($Seq.length
        ($BlockingQueue__contents ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine
                    ($Snap.combine
                      ($Snap.combine
                        $Snap.unit
                        ($SortWrappers.IntTo$Snap $t@244))
                      $Snap.unit)
                    ($SortWrappers.$RefTo$Snap $t@242))
                  $Snap.unit)
                ($SortWrappers.$RefTo$Snap $t@195))
              $t@196)
            ($SortWrappers.$RefTo$Snap $t@245))
          ($SortWrappers.$RefTo$Snap $t@200)) diz@184))
      0))
  ($Seq.equal
    ($BlockingQueue__contents ($Snap.combine
      ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@269))
                  $Snap.unit)
                ($SortWrappers.$RefTo$Snap $t@268))
              $Snap.unit)
            ($SortWrappers.$RefTo$Snap $t@265))
          $t@263)
        ($SortWrappers.$RefTo$Snap $t@261))
      ($SortWrappers.$RefTo$Snap $t@259)) diz@184)
    ($Seq.append
      ($BlockingQueue__contents ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine
                    ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@244))
                    $Snap.unit)
                  ($SortWrappers.$RefTo$Snap $t@242))
                $Snap.unit)
              ($SortWrappers.$RefTo$Snap $t@195))
            $t@196)
          ($SortWrappers.$RefTo$Snap $t@245))
        ($SortWrappers.$RefTo$Snap $t@200)) diz@184)
      ($Seq.singleton val@185)))))
; [exec]
; __flatten_22 := AtomicInteger__getAndIncrement(diz.BlockingQueue__count)
; [eval] diz != null
(declare-const sys__result@290 Int)
; [exec]
; c := __flatten_22
; [eval] c + 1 < diz.BlockingQueue__capacity
; [eval] c + 1
(push) ; 8
(assert (not (not (< (+ sys__result@290 1) $t@269))))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (< (+ sys__result@290 1) $t@269)))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
(push) ; 8
; [then-branch 45] sys__result@290 + 1 < $t@269
(assert (< (+ sys__result@290 1) $t@269))
; [exec]
; assert acc(Lock__lock_held(diz.BlockingQueue__putLock), write)
(push) ; 9
(assert (not (= $t@245 $t@261)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
; [exec]
; exhale acc(Lock__lock_held(diz.BlockingQueue__putLock), write)
(push) ; 9
(assert (not (= $t@245 $t@261)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
; [exec]
; exhale true
; [eval] c == 0
(push) ; 9
(assert (not (not (= sys__result@290 0))))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
(push) ; 9
(assert (not (= sys__result@290 0)))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
(push) ; 9
; [then-branch 46] sys__result@290 == 0
(assert (= sys__result@290 0))
; [exec]
; inhale true
; [exec]
; inhale acc(Lock__lock_held(diz.BlockingQueue__takeLock), write)
(declare-const $t@291 $Snap)
; [exec]
; assert acc(Lock__lock_held(diz.BlockingQueue__takeLock), write)
; [exec]
; exhale acc(Lock__lock_held(diz.BlockingQueue__takeLock), write)
; [exec]
; exhale true
(declare-const $k@292 $Perm)
(assert ($Perm.isValidVar $k@292))
(assert ($Perm.isReadVar $k@292 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@292 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (< $k@292 (+ (- (+ (- $k@191 $k@236) $k@248) $k@250) $k@270)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@293 $Perm)
(assert ($Perm.isValidVar $k@293))
(assert ($Perm.isReadVar $k@293 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@293 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (< $k@293 (+ (- (+ (- $k@193 $k@237) $k@249) $k@251) $k@271)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 10
(assert (not (= $t@265 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 10
(push) ; 10
; [then-branch 47] $t@265 != Null
(declare-const $k@294 $Perm)
(assert ($Perm.isValidVar $k@294))
(assert ($Perm.isReadVar $k@294 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@294 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (< $k@294 (+ (- (+ (- $k@197 $k@235) $k@247) $k@252) $k@272)))
(declare-const $k@295 $Perm)
(assert ($Perm.isValidVar $k@295))
(assert ($Perm.isReadVar $k@295 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@295 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (< $k@295 (+ (- $k@199 $k@253) $k@273)))
(pop) ; 10
; [dead else-branch 47] $t@265 == Null
(pop) ; 9
(push) ; 9
; [else-branch 46] sys__result@290 != 0
(assert (not (= sys__result@290 0)))
(pop) ; 9
; [eval] !(c == 0)
; [eval] c == 0
(push) ; 9
(assert (not (= sys__result@290 0)))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
(push) ; 9
(assert (not (not (= sys__result@290 0))))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
(push) ; 9
; [then-branch 48] sys__result@290 != 0
(assert (not (= sys__result@290 0)))
(declare-const $k@296 $Perm)
(assert ($Perm.isValidVar $k@296))
(assert ($Perm.isReadVar $k@296 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@296 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (< $k@296 (+ (- (+ (- $k@191 $k@236) $k@248) $k@250) $k@270)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@297 $Perm)
(assert ($Perm.isValidVar $k@297))
(assert ($Perm.isReadVar $k@297 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@297 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (< $k@297 (+ (- (+ (- $k@193 $k@237) $k@249) $k@251) $k@271)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 10
(assert (not (= $t@265 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 10
(push) ; 10
; [then-branch 49] $t@265 != Null
(declare-const $k@298 $Perm)
(assert ($Perm.isValidVar $k@298))
(assert ($Perm.isReadVar $k@298 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@298 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (< $k@298 (+ (- (+ (- $k@197 $k@235) $k@247) $k@252) $k@272)))
(declare-const $k@299 $Perm)
(assert ($Perm.isValidVar $k@299))
(assert ($Perm.isReadVar $k@299 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@299 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (< $k@299 (+ (- $k@199 $k@253) $k@273)))
(pop) ; 10
; [dead else-branch 49] $t@265 == Null
(pop) ; 9
(push) ; 9
; [else-branch 48] sys__result@290 == 0
(assert (= sys__result@290 0))
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch 45] !sys__result@290 + 1 < $t@269
(assert (not (< (+ sys__result@290 1) $t@269)))
(pop) ; 8
; [eval] !(c + 1 < diz.BlockingQueue__capacity)
; [eval] c + 1 < diz.BlockingQueue__capacity
; [eval] c + 1
(push) ; 8
(assert (not (< (+ sys__result@290 1) $t@269)))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (< (+ sys__result@290 1) $t@269))))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
(push) ; 8
; [then-branch 50] !sys__result@290 + 1 < $t@269
(assert (not (< (+ sys__result@290 1) $t@269)))
; [exec]
; exhale acc(Lock__lock_held(diz.BlockingQueue__putLock), write)
(push) ; 9
(assert (not (= $t@245 $t@261)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
; [exec]
; exhale true
; [eval] c == 0
(push) ; 9
(assert (not (not (= sys__result@290 0))))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
(push) ; 9
(assert (not (= sys__result@290 0)))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
(push) ; 9
; [then-branch 51] sys__result@290 == 0
(assert (= sys__result@290 0))
; [exec]
; inhale true
; [exec]
; inhale acc(Lock__lock_held(diz.BlockingQueue__takeLock), write)
(declare-const $t@300 $Snap)
; [exec]
; assert acc(Lock__lock_held(diz.BlockingQueue__takeLock), write)
; [exec]
; exhale acc(Lock__lock_held(diz.BlockingQueue__takeLock), write)
; [exec]
; exhale true
(declare-const $k@301 $Perm)
(assert ($Perm.isValidVar $k@301))
(assert ($Perm.isReadVar $k@301 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@301 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (< $k@301 (+ (- (+ (- $k@191 $k@236) $k@248) $k@250) $k@270)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@302 $Perm)
(assert ($Perm.isValidVar $k@302))
(assert ($Perm.isReadVar $k@302 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@302 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (< $k@302 (+ (- (+ (- $k@193 $k@237) $k@249) $k@251) $k@271)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 10
(assert (not (= $t@265 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 10
(push) ; 10
; [then-branch 52] $t@265 != Null
(declare-const $k@303 $Perm)
(assert ($Perm.isValidVar $k@303))
(assert ($Perm.isReadVar $k@303 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@303 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (< $k@303 (+ (- (+ (- $k@197 $k@235) $k@247) $k@252) $k@272)))
(declare-const $k@304 $Perm)
(assert ($Perm.isValidVar $k@304))
(assert ($Perm.isReadVar $k@304 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@304 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (< $k@304 (+ (- $k@199 $k@253) $k@273)))
(pop) ; 10
; [dead else-branch 52] $t@265 == Null
(pop) ; 9
(push) ; 9
; [else-branch 51] sys__result@290 != 0
(assert (not (= sys__result@290 0)))
(pop) ; 9
; [eval] !(c == 0)
; [eval] c == 0
(push) ; 9
(assert (not (= sys__result@290 0)))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
(push) ; 9
(assert (not (not (= sys__result@290 0))))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
(push) ; 9
; [then-branch 53] sys__result@290 != 0
(assert (not (= sys__result@290 0)))
(declare-const $k@305 $Perm)
(assert ($Perm.isValidVar $k@305))
(assert ($Perm.isReadVar $k@305 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@305 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (< $k@305 (+ (- (+ (- $k@191 $k@236) $k@248) $k@250) $k@270)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@306 $Perm)
(assert ($Perm.isValidVar $k@306))
(assert ($Perm.isReadVar $k@306 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@306 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (< $k@306 (+ (- (+ (- $k@193 $k@237) $k@249) $k@251) $k@271)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 10
(assert (not (= $t@265 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 10
(push) ; 10
; [then-branch 54] $t@265 != Null
(declare-const $k@307 $Perm)
(assert ($Perm.isValidVar $k@307))
(assert ($Perm.isReadVar $k@307 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@307 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (< $k@307 (+ (- (+ (- $k@197 $k@235) $k@247) $k@252) $k@272)))
(declare-const $k@308 $Perm)
(assert ($Perm.isValidVar $k@308))
(assert ($Perm.isReadVar $k@308 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@308 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (< $k@308 (+ (- $k@199 $k@253) $k@273)))
(pop) ; 10
; [dead else-branch 54] $t@265 == Null
(pop) ; 9
(push) ; 9
; [else-branch 53] sys__result@290 == 0
(assert (= sys__result@290 0))
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch 50] sys__result@290 + 1 < $t@269
(assert (< (+ sys__result@290 1) $t@269))
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch 38] $t@265 == Null
(assert (= $t@265 $Ref.null))
(declare-const $k@309 $Perm)
(assert ($Perm.isValidVar $k@309))
(assert ($Perm.isReadVar $k@309 $Perm.Write))
(assert (implies (< $Perm.No (- (+ (- $k@197 $k@235) $k@247) $k@252)) (= $t@261 $t@245)))
(declare-const $k@310 $Perm)
(assert ($Perm.isValidVar $k@310))
(assert ($Perm.isReadVar $k@310 $Perm.Write))
(assert (implies (< $Perm.No (- $k@199 $k@253)) (= $t@259 $t@200)))
; [eval] diz.BlockingQueue__first != null
(assert (not (= $t@265 $Ref.null)))
; [eval] (old(|BlockingQueue__contents(diz)|) == 0) ==> (BlockingQueue__contents(diz) == Seq(val))
; [eval] old(|BlockingQueue__contents(diz)|) == 0
; [eval] old(|BlockingQueue__contents(diz)|)
; [eval] |BlockingQueue__contents(diz)|
; [eval] BlockingQueue__contents(diz)
; [eval] diz != null
(declare-const $k@311 $Perm)
(assert ($Perm.isValidVar $k@311))
(assert ($Perm.isReadVar $k@311 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@311 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (< $k@311 (+ (- $k@191 $k@236) $k@248)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@312 $Perm)
(assert ($Perm.isValidVar $k@312))
(assert ($Perm.isReadVar $k@312 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@312 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (< $k@312 (+ (- $k@193 $k@237) $k@249)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 8
(assert (not (= $t@195 $Ref.null)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
; [dead then-branch 55] $t@195 != Null
; [dead else-branch 55] $t@195 == Null
(pop) ; 7
(pop) ; 6
; [dead else-branch 37] $t@195 == Null
(pop) ; 5
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch 35] $t@195 == Null
(assert (= $t@195 $Ref.null))
(declare-const $k@313 $Perm)
(assert ($Perm.isValidVar $k@313))
(assert ($Perm.isReadVar $k@313 $Perm.Write))
(declare-const $t@314 $Ref)
(declare-const $k@315 $Perm)
(assert ($Perm.isValidVar $k@315))
(assert ($Perm.isReadVar $k@315 $Perm.Write))
(declare-const $t@316 $Ref)
(push) ; 4
(declare-const $k@317 $Perm)
(assert ($Perm.isValidVar $k@317))
(assert ($Perm.isReadVar $k@317 $Perm.Write))
(declare-const $t@318 Int)
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 5
(assert (not (not (= $k@317 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@317 $Perm.No)))
(assert (> $t@318 0))
(declare-const $k@319 $Perm)
(assert ($Perm.isValidVar $k@319))
(assert ($Perm.isReadVar $k@319 $Perm.Write))
(declare-const $t@320 $Ref)
; [eval] diz.BlockingQueue__count != null
(push) ; 5
(assert (not (not (= $k@319 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@319 $Perm.No)))
(assert (not (= $t@320 $Ref.null)))
(declare-const $t@321 $Ref)
; [eval] diz.BlockingQueue__first != null
(push) ; 5
(assert (not (= $t@321 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
(assert (not (not (= $t@321 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
; [then-branch 56] $t@321 != Null
(assert (not (= $t@321 $Ref.null)))
(declare-const $t@322 $Snap)
(declare-const $k@323 $Perm)
(assert ($Perm.isValidVar $k@323))
(assert ($Perm.isReadVar $k@323 $Perm.Write))
(declare-const $t@324 $Ref)
(declare-const $k@325 $Perm)
(assert ($Perm.isValidVar $k@325))
(assert ($Perm.isReadVar $k@325 $Perm.Write))
(declare-const $t@326 $Ref)
(pop) ; 5
(push) ; 5
; [else-branch 56] $t@321 == Null
(assert (= $t@321 $Ref.null))
(declare-const $k@327 $Perm)
(assert ($Perm.isValidVar $k@327))
(assert ($Perm.isReadVar $k@327 $Perm.Write))
(declare-const $t@328 $Ref)
(declare-const $k@329 $Perm)
(assert ($Perm.isValidVar $k@329))
(assert ($Perm.isReadVar $k@329 $Perm.Write))
(declare-const $t@330 $Ref)
(pop) ; 5
(pop) ; 4
(push) ; 4
; [exec]
; inhale true
; [exec]
; inhale acc(Lock__lock_held(diz.BlockingQueue__putLock), write)
(push) ; 5
(assert (not (not (= $k@313 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@313 $Perm.No)))
(declare-const $t@331 $Snap)
; [exec]
; __flatten_19 := AtomicInteger__get(diz.BlockingQueue__count)
; [eval] diz != null
(declare-const sys__result@332 Int)
; [exec]
; currentCount := __flatten_19
; loop at <no position>
(declare-const currentCount@333 Int)
(declare-const __flatten_20@334 Int)
(push) ; 5
; Verify loop body
(declare-const $t@335 $Snap)
(declare-const $t@336 $Snap)
(assert (= $t@335 ($Snap.combine $t@336 $Snap.unit)))
(declare-const $t@337 $Snap)
(assert (= $t@336 ($Snap.combine $t@337 $Snap.unit)))
(declare-const $t@338 $Snap)
(declare-const $t@339 $Ref)
(assert (= $t@337 ($Snap.combine $t@338 ($SortWrappers.$RefTo$Snap $t@339))))
(declare-const $t@340 $Snap)
(declare-const $t@341 Int)
(assert (= $t@338 ($Snap.combine $t@340 ($SortWrappers.IntTo$Snap $t@341))))
(declare-const $t@342 $Ref)
(declare-const $t@343 $Snap)
(assert (= $t@340 ($Snap.combine ($SortWrappers.$RefTo$Snap $t@342) $t@343)))
(declare-const $k@344 $Perm)
(assert ($Perm.isValidVar $k@344))
(assert ($Perm.isReadVar $k@344 $Perm.Write))
(push) ; 6
(assert (not (not (= $k@344 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= $k@344 $Perm.No)))
(declare-const $k@345 $Perm)
(assert ($Perm.isValidVar $k@345))
(assert ($Perm.isReadVar $k@345 $Perm.Write))
(declare-const $k@346 $Perm)
(assert ($Perm.isValidVar $k@346))
(assert ($Perm.isReadVar $k@346 $Perm.Write))
; [eval] diz.BlockingQueue__count != null
(push) ; 6
(assert (not (not (= $k@346 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= $k@346 $Perm.No)))
(assert (not (= $t@339 $Ref.null)))
; [eval] currentCount == diz.BlockingQueue__capacity
(push) ; 6
(assert (not (not (= $k@345 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= $k@345 $Perm.No)))
(assert (= currentCount@333 $t@341))
(check-sat)
; unknown
; [exec]
; exhale true
; [exec]
; assert acc(Lock__lock_held(diz.BlockingQueue__putLock), write)
; [exec]
; inhale true
; [exec]
; __flatten_20 := AtomicInteger__get(diz.BlockingQueue__count)
; [eval] diz != null
(declare-const sys__result@347 Int)
; [exec]
; currentCount := __flatten_20
(declare-const $k@348 $Perm)
(assert ($Perm.isValidVar $k@348))
(assert ($Perm.isReadVar $k@348 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@348 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (< $k@348 $k@344))
(declare-const $k@349 $Perm)
(assert ($Perm.isValidVar $k@349))
(assert ($Perm.isReadVar $k@349 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@349 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (< $k@349 $k@345))
(declare-const $k@350 $Perm)
(assert ($Perm.isValidVar $k@350))
(assert ($Perm.isReadVar $k@350 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@350 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (< $k@350 $k@346))
; [eval] diz.BlockingQueue__count != null
(pop) ; 5
(push) ; 5
; Establish loop invariant
(declare-const $k@351 $Perm)
(assert ($Perm.isValidVar $k@351))
(assert ($Perm.isReadVar $k@351 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@351 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (< $k@351 $k@313))
(declare-const $k@352 $Perm)
(assert ($Perm.isValidVar $k@352))
(assert ($Perm.isReadVar $k@352 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@352 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (< $k@352 $k@191))
(declare-const $k@353 $Perm)
(assert ($Perm.isValidVar $k@353))
(assert ($Perm.isReadVar $k@353 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@353 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (< $k@353 $k@193))
; [eval] diz.BlockingQueue__count != null
; Continue after loop
(declare-const $t@354 $Snap)
(declare-const $t@355 $Snap)
(assert (= $t@354 ($Snap.combine $t@355 $Snap.unit)))
(declare-const $t@356 $Snap)
(assert (= $t@355 ($Snap.combine $t@356 $Snap.unit)))
(declare-const $t@357 $Snap)
(declare-const $t@358 $Ref)
(assert (= $t@356 ($Snap.combine $t@357 ($SortWrappers.$RefTo$Snap $t@358))))
(declare-const $t@359 $Snap)
(declare-const $t@360 Int)
(assert (= $t@357 ($Snap.combine $t@359 ($SortWrappers.IntTo$Snap $t@360))))
(declare-const $t@361 $Ref)
(declare-const $t@362 $Snap)
(assert (= $t@359 ($Snap.combine ($SortWrappers.$RefTo$Snap $t@361) $t@362)))
(declare-const $k@363 $Perm)
(assert ($Perm.isValidVar $k@363))
(assert ($Perm.isReadVar $k@363 $Perm.Write))
(assert (implies (< $Perm.No (- $k@313 $k@351)) (= $t@361 $t@314)))
(push) ; 6
(assert (not (not (= (+ (- $k@313 $k@351) $k@363) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= (+ (- $k@313 $k@351) $k@363) $Perm.No)))
(declare-const $k@364 $Perm)
(assert ($Perm.isValidVar $k@364))
(assert ($Perm.isReadVar $k@364 $Perm.Write))
(assert (implies (< $Perm.No (- $k@191 $k@352)) (= $t@360 $t@192)))
(declare-const $k@365 $Perm)
(assert ($Perm.isValidVar $k@365))
(assert ($Perm.isReadVar $k@365 $Perm.Write))
(assert (implies (< $Perm.No (- $k@193 $k@353)) (= $t@358 $t@194)))
; [eval] diz.BlockingQueue__count != null
(push) ; 6
(assert (not (not (= (+ (- $k@193 $k@353) $k@365) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= (+ (- $k@193 $k@353) $k@365) $Perm.No)))
(assert (not (= $t@358 $Ref.null)))
; [eval] !(currentCount == diz.BlockingQueue__capacity)
; [eval] currentCount == diz.BlockingQueue__capacity
(push) ; 6
(assert (not (not (= (+ (- $k@191 $k@352) $k@364) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= (+ (- $k@191 $k@352) $k@364) $Perm.No)))
(assert (not (= currentCount@333 $t@360)))
(check-sat)
; unknown
; [exec]
; BlockingQueue__linkLast(diz, val)
; [eval] diz != null
(declare-const $k@366 $Perm)
(assert ($Perm.isValidVar $k@366))
(assert ($Perm.isReadVar $k@366 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@366 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (< $k@366 (+ (- $k@191 $k@352) $k@364)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 6
(assert (not (> $t@360 0)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (> $t@360 0))
(declare-const $k@367 $Perm)
(assert ($Perm.isValidVar $k@367))
(assert ($Perm.isReadVar $k@367 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@367 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (< $k@367 (+ (- $k@193 $k@353) $k@365)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 6
(assert (not (not (= $t@195 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 6
; [dead then-branch 57] $t@195 != Null
(push) ; 6
; [else-branch 57] $t@195 == Null
(declare-const $k@368 $Perm)
(assert ($Perm.isValidVar $k@368))
(assert ($Perm.isReadVar $k@368 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@368 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@368 (+ (- $k@313 $k@351) $k@363)))
(declare-const $k@369 $Perm)
(assert ($Perm.isValidVar $k@369))
(assert ($Perm.isReadVar $k@369 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@369 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(push) ; 7
(assert (not (not (= $k@315 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (not (= $k@315 $Perm.No)))
(assert (< $k@369 $k@315))
(declare-const $t@370 $Snap)
(declare-const $t@371 $Snap)
(assert (= $t@370 ($Snap.combine $t@371 $Snap.unit)))
(declare-const $t@372 $Snap)
(assert (= $t@371 ($Snap.combine $t@372 $Snap.unit)))
(declare-const $t@373 $Snap)
(assert (= $t@372 ($Snap.combine $t@373 $Snap.unit)))
(declare-const $t@374 $Snap)
(declare-const $t@375 $Ref)
(assert (= $t@373 ($Snap.combine $t@374 ($SortWrappers.$RefTo$Snap $t@375))))
(declare-const $t@376 $Snap)
(declare-const $t@377 $Ref)
(assert (= $t@374 ($Snap.combine $t@376 ($SortWrappers.$RefTo$Snap $t@377))))
(declare-const $t@378 $Snap)
(declare-const $t@379 $Snap)
(assert (= $t@376 ($Snap.combine $t@378 $t@379)))
(declare-const $t@380 $Snap)
(declare-const $t@381 $Ref)
(assert (= $t@378 ($Snap.combine $t@380 ($SortWrappers.$RefTo$Snap $t@381))))
(declare-const $t@382 $Snap)
(assert (= $t@380 ($Snap.combine $t@382 $Snap.unit)))
(declare-const $t@383 Int)
(declare-const $t@384 $Ref)
(assert (=
  $t@382
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@383)
    ($SortWrappers.$RefTo$Snap $t@384))))
(declare-const $t@385 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@383)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@385) $Snap.unit)))
(declare-const $k@386 $Perm)
(assert ($Perm.isValidVar $k@386))
(assert ($Perm.isReadVar $k@386 $Perm.Write))
(assert (implies (< $Perm.No (- (+ (- $k@191 $k@352) $k@364) $k@366)) (= $t@385 $t@360)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 7
(assert (not (not (= (+ (- (+ (- $k@191 $k@352) $k@364) $k@366) $k@386) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (not (= (+ (- (+ (- $k@191 $k@352) $k@364) $k@366) $k@386) $Perm.No)))
(assert (> $t@385 0))
(declare-const $k@387 $Perm)
(assert ($Perm.isValidVar $k@387))
(assert ($Perm.isReadVar $k@387 $Perm.Write))
(assert (implies (< $Perm.No (- (+ (- $k@193 $k@353) $k@365) $k@367)) (= $t@384 $t@358)))
; [eval] diz.BlockingQueue__count != null
(push) ; 7
(assert (not (not (= (+ (- (+ (- $k@193 $k@353) $k@365) $k@367) $k@387) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (not (= (+ (- (+ (- $k@193 $k@353) $k@365) $k@367) $k@387) $Perm.No)))
(assert (not (= $t@384 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 7
(assert (not (= $t@381 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 7
(push) ; 7
(assert (not (not (= $t@381 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 7
(push) ; 7
; [then-branch 58] $t@381 != Null
(assert (not (= $t@381 $Ref.null)))
(declare-const $k@388 $Perm)
(assert ($Perm.isValidVar $k@388))
(assert ($Perm.isReadVar $k@388 $Perm.Write))
(assert (implies (< $Perm.No (- (+ (- $k@313 $k@351) $k@363) $k@368)) (= $t@377 $t@361)))
(declare-const $k@389 $Perm)
(assert ($Perm.isValidVar $k@389))
(assert ($Perm.isReadVar $k@389 $Perm.Write))
(assert (implies (< $Perm.No (- $k@315 $k@369)) (= $t@375 $t@316)))
; [eval] diz.BlockingQueue__first != null
; [eval] (old(|BlockingQueue__contents(diz)|) == 0) ==> (BlockingQueue__contents(diz) == Seq(val))
; [eval] old(|BlockingQueue__contents(diz)|) == 0
; [eval] old(|BlockingQueue__contents(diz)|)
; [eval] |BlockingQueue__contents(diz)|
; [eval] BlockingQueue__contents(diz)
; [eval] diz != null
(declare-const $k@390 $Perm)
(assert ($Perm.isValidVar $k@390))
(assert ($Perm.isReadVar $k@390 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@390 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (< $k@390 (+ (- $k@191 $k@352) $k@364)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@391 $Perm)
(assert ($Perm.isValidVar $k@391))
(assert ($Perm.isReadVar $k@391 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@391 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (< $k@391 (+ (- $k@193 $k@353) $k@365)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 8
(assert (not (not (= $t@195 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
; [dead then-branch 59] $t@195 != Null
(push) ; 8
; [else-branch 59] $t@195 == Null
(declare-const $k@392 $Perm)
(assert ($Perm.isValidVar $k@392))
(assert ($Perm.isReadVar $k@392 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@392 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@392 (+ (- $k@313 $k@351) $k@363)))
(declare-const $k@393 $Perm)
(assert ($Perm.isValidVar $k@393))
(assert ($Perm.isReadVar $k@393 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@393 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@393 $k@315))
(pop) ; 8
(assert ($Perm.isValidVar $k@392))
(assert ($Perm.isReadVar $k@392 $Perm.Write))
(assert (< $k@392 (+ (- $k@313 $k@351) $k@363)))
(assert ($Perm.isValidVar $k@393))
(assert ($Perm.isReadVar $k@393 $Perm.Write))
(assert (< $k@393 $k@315))
(push) ; 8
(push) ; 9
(assert (not (not
  (=
    ($Seq.length
      ($BlockingQueue__contents ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine
                    ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@360))
                    $Snap.unit)
                  ($SortWrappers.$RefTo$Snap $t@358))
                $Snap.unit)
              ($SortWrappers.$RefTo$Snap $t@195))
            $Snap.unit)
          ($SortWrappers.$RefTo$Snap $t@361))
        ($SortWrappers.$RefTo$Snap $t@316)) diz@184))
    0))))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
(push) ; 9
(assert (not (=
  ($Seq.length
    ($BlockingQueue__contents ($Snap.combine
      ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@360))
                  $Snap.unit)
                ($SortWrappers.$RefTo$Snap $t@358))
              $Snap.unit)
            ($SortWrappers.$RefTo$Snap $t@195))
          $Snap.unit)
        ($SortWrappers.$RefTo$Snap $t@361))
      ($SortWrappers.$RefTo$Snap $t@316)) diz@184))
  0)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(push) ; 9
; [then-branch 60] |BlockingQueue__contents(diz@184;((((((((_, $t@360), _), $t@358), _), $t@195), _), $t@361), $t@316))| == 0
(assert (=
  ($Seq.length
    ($BlockingQueue__contents ($Snap.combine
      ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@360))
                  $Snap.unit)
                ($SortWrappers.$RefTo$Snap $t@358))
              $Snap.unit)
            ($SortWrappers.$RefTo$Snap $t@195))
          $Snap.unit)
        ($SortWrappers.$RefTo$Snap $t@361))
      ($SortWrappers.$RefTo$Snap $t@316)) diz@184))
  0))
; [eval] BlockingQueue__contents(diz) == Seq(val)
; [eval] BlockingQueue__contents(diz)
; [eval] diz != null
(declare-const $k@394 $Perm)
(assert ($Perm.isValidVar $k@394))
(assert ($Perm.isReadVar $k@394 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@394 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (< $k@394 (+ (- (+ (- $k@191 $k@352) $k@364) $k@366) $k@386)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@395 $Perm)
(assert ($Perm.isValidVar $k@395))
(assert ($Perm.isReadVar $k@395 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@395 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (< $k@395 (+ (- (+ (- $k@193 $k@353) $k@365) $k@367) $k@387)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 10
(assert (not (= $t@381 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 10
(push) ; 10
; [then-branch 61] $t@381 != Null
(declare-const $k@396 $Perm)
(assert ($Perm.isValidVar $k@396))
(assert ($Perm.isReadVar $k@396 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@396 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(push) ; 11
(assert (not (not (= (+ (- (+ (- $k@313 $k@351) $k@363) $k@368) $k@388) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (not (= (+ (- (+ (- $k@313 $k@351) $k@363) $k@368) $k@388) $Perm.No)))
(assert (< $k@396 (+ (- (+ (- $k@313 $k@351) $k@363) $k@368) $k@388)))
(declare-const $k@397 $Perm)
(assert ($Perm.isValidVar $k@397))
(assert ($Perm.isReadVar $k@397 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@397 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(push) ; 11
(assert (not (not (= (+ (- $k@315 $k@369) $k@389) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (not (= (+ (- $k@315 $k@369) $k@389) $Perm.No)))
(assert (< $k@397 (+ (- $k@315 $k@369) $k@389)))
(pop) ; 10
; [dead else-branch 61] $t@381 == Null
(assert ($Perm.isValidVar $k@396))
(assert ($Perm.isReadVar $k@396 $Perm.Write))
(assert (not (= (+ (- (+ (- $k@313 $k@351) $k@363) $k@368) $k@388) $Perm.No)))
(assert (< $k@396 (+ (- (+ (- $k@313 $k@351) $k@363) $k@368) $k@388)))
(assert ($Perm.isValidVar $k@397))
(assert ($Perm.isReadVar $k@397 $Perm.Write))
(assert (not (= (+ (- $k@315 $k@369) $k@389) $Perm.No)))
(assert (< $k@397 (+ (- $k@315 $k@369) $k@389)))
; [eval] Seq(val)
(assert (= ($Seq.length ($Seq.singleton val@185)) 1))
(pop) ; 9
; [dead else-branch 60] |BlockingQueue__contents(diz@184;((((((((_, $t@360), _), $t@358), _), $t@195), _), $t@361), $t@316))| != 0
(pop) ; 8
(assert ($Perm.isValidVar $k@394))
(assert ($Perm.isReadVar $k@394 $Perm.Write))
(assert (< $k@394 (+ (- (+ (- $k@191 $k@352) $k@364) $k@366) $k@386)))
(assert ($Perm.isValidVar $k@395))
(assert ($Perm.isReadVar $k@395 $Perm.Write))
(assert (< $k@395 (+ (- (+ (- $k@193 $k@353) $k@365) $k@367) $k@387)))
(assert ($Perm.isValidVar $k@396))
(assert ($Perm.isReadVar $k@396 $Perm.Write))
(assert (not (= (+ (- (+ (- $k@313 $k@351) $k@363) $k@368) $k@388) $Perm.No)))
(assert (< $k@396 (+ (- (+ (- $k@313 $k@351) $k@363) $k@368) $k@388)))
(assert ($Perm.isValidVar $k@397))
(assert ($Perm.isReadVar $k@397 $Perm.Write))
(assert (not (= (+ (- $k@315 $k@369) $k@389) $Perm.No)))
(assert (< $k@397 (+ (- $k@315 $k@369) $k@389)))
(assert (= ($Seq.length ($Seq.singleton val@185)) 1))
(assert (implies
  (=
    ($Seq.length
      ($BlockingQueue__contents ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine
                    ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@360))
                    $Snap.unit)
                  ($SortWrappers.$RefTo$Snap $t@358))
                $Snap.unit)
              ($SortWrappers.$RefTo$Snap $t@195))
            $Snap.unit)
          ($SortWrappers.$RefTo$Snap $t@361))
        ($SortWrappers.$RefTo$Snap $t@316)) diz@184))
    0)
  ($Seq.equal
    ($BlockingQueue__contents ($Snap.combine
      ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@385))
                  $Snap.unit)
                ($SortWrappers.$RefTo$Snap $t@384))
              $Snap.unit)
            ($SortWrappers.$RefTo$Snap $t@381))
          $t@379)
        ($SortWrappers.$RefTo$Snap $t@377))
      ($SortWrappers.$RefTo$Snap $t@375)) diz@184)
    ($Seq.singleton val@185))))
; [eval] (old(|BlockingQueue__contents(diz)|) != 0) ==> (BlockingQueue__contents(diz) == old(BlockingQueue__contents(diz)) ++ Seq(val))
; [eval] old(|BlockingQueue__contents(diz)|) != 0
; [eval] old(|BlockingQueue__contents(diz)|)
; [eval] |BlockingQueue__contents(diz)|
; [eval] BlockingQueue__contents(diz)
; [eval] diz != null
(declare-const $k@398 $Perm)
(assert ($Perm.isValidVar $k@398))
(assert ($Perm.isReadVar $k@398 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@398 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (< $k@398 (+ (- $k@191 $k@352) $k@364)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@399 $Perm)
(assert ($Perm.isValidVar $k@399))
(assert ($Perm.isReadVar $k@399 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@399 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (< $k@399 (+ (- $k@193 $k@353) $k@365)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 8
(assert (not (not (= $t@195 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
; [dead then-branch 62] $t@195 != Null
(push) ; 8
; [else-branch 62] $t@195 == Null
(declare-const $k@400 $Perm)
(assert ($Perm.isValidVar $k@400))
(assert ($Perm.isReadVar $k@400 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@400 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@400 (+ (- $k@313 $k@351) $k@363)))
(declare-const $k@401 $Perm)
(assert ($Perm.isValidVar $k@401))
(assert ($Perm.isReadVar $k@401 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@401 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@401 $k@315))
(pop) ; 8
(assert ($Perm.isValidVar $k@400))
(assert ($Perm.isReadVar $k@400 $Perm.Write))
(assert (< $k@400 (+ (- $k@313 $k@351) $k@363)))
(assert ($Perm.isValidVar $k@401))
(assert ($Perm.isReadVar $k@401 $Perm.Write))
(assert (< $k@401 $k@315))
(push) ; 8
(push) ; 9
(assert (not (=
  ($Seq.length
    ($BlockingQueue__contents ($Snap.combine
      ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@360))
                  $Snap.unit)
                ($SortWrappers.$RefTo$Snap $t@358))
              $Snap.unit)
            ($SortWrappers.$RefTo$Snap $t@195))
          $Snap.unit)
        ($SortWrappers.$RefTo$Snap $t@361))
      ($SortWrappers.$RefTo$Snap $t@316)) diz@184))
  0)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(push) ; 9
(assert (not (not
  (=
    ($Seq.length
      ($BlockingQueue__contents ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine
                    ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@360))
                    $Snap.unit)
                  ($SortWrappers.$RefTo$Snap $t@358))
                $Snap.unit)
              ($SortWrappers.$RefTo$Snap $t@195))
            $Snap.unit)
          ($SortWrappers.$RefTo$Snap $t@361))
        ($SortWrappers.$RefTo$Snap $t@316)) diz@184))
    0))))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
; [dead then-branch 63] |BlockingQueue__contents(diz@184;((((((((_, $t@360), _), $t@358), _), $t@195), _), $t@361), $t@316))| != 0
(push) ; 9
; [else-branch 63] |BlockingQueue__contents(diz@184;((((((((_, $t@360), _), $t@358), _), $t@195), _), $t@361), $t@316))| == 0
(assert (=
  ($Seq.length
    ($BlockingQueue__contents ($Snap.combine
      ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@360))
                  $Snap.unit)
                ($SortWrappers.$RefTo$Snap $t@358))
              $Snap.unit)
            ($SortWrappers.$RefTo$Snap $t@195))
          $Snap.unit)
        ($SortWrappers.$RefTo$Snap $t@361))
      ($SortWrappers.$RefTo$Snap $t@316)) diz@184))
  0))
(pop) ; 9
(pop) ; 8
; [exec]
; __flatten_22 := AtomicInteger__getAndIncrement(diz.BlockingQueue__count)
; [eval] diz != null
(declare-const sys__result@402 Int)
; [exec]
; c := __flatten_22
; [eval] c + 1 < diz.BlockingQueue__capacity
; [eval] c + 1
(push) ; 8
(assert (not (not (< (+ sys__result@402 1) $t@385))))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (< (+ sys__result@402 1) $t@385)))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
(push) ; 8
; [then-branch 64] sys__result@402 + 1 < $t@385
(assert (< (+ sys__result@402 1) $t@385))
; [exec]
; assert acc(Lock__lock_held(diz.BlockingQueue__putLock), write)
(push) ; 9
(assert (not (= $t@361 $t@377)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
; [exec]
; exhale acc(Lock__lock_held(diz.BlockingQueue__putLock), write)
(push) ; 9
(assert (not (= $t@361 $t@377)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
; [exec]
; exhale true
; [eval] c == 0
(push) ; 9
(assert (not (not (= sys__result@402 0))))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
(push) ; 9
(assert (not (= sys__result@402 0)))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
(push) ; 9
; [then-branch 65] sys__result@402 == 0
(assert (= sys__result@402 0))
; [exec]
; inhale true
; [exec]
; inhale acc(Lock__lock_held(diz.BlockingQueue__takeLock), write)
(declare-const $t@403 $Snap)
; [exec]
; assert acc(Lock__lock_held(diz.BlockingQueue__takeLock), write)
; [exec]
; exhale acc(Lock__lock_held(diz.BlockingQueue__takeLock), write)
; [exec]
; exhale true
(declare-const $k@404 $Perm)
(assert ($Perm.isValidVar $k@404))
(assert ($Perm.isReadVar $k@404 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@404 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (< $k@404 (+ (- (+ (- $k@191 $k@352) $k@364) $k@366) $k@386)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@405 $Perm)
(assert ($Perm.isValidVar $k@405))
(assert ($Perm.isReadVar $k@405 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@405 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (< $k@405 (+ (- (+ (- $k@193 $k@353) $k@365) $k@367) $k@387)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 10
(assert (not (= $t@381 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 10
(push) ; 10
; [then-branch 66] $t@381 != Null
(declare-const $k@406 $Perm)
(assert ($Perm.isValidVar $k@406))
(assert ($Perm.isReadVar $k@406 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@406 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (< $k@406 (+ (- (+ (- $k@313 $k@351) $k@363) $k@368) $k@388)))
(declare-const $k@407 $Perm)
(assert ($Perm.isValidVar $k@407))
(assert ($Perm.isReadVar $k@407 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@407 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (< $k@407 (+ (- $k@315 $k@369) $k@389)))
(pop) ; 10
; [dead else-branch 66] $t@381 == Null
(pop) ; 9
(push) ; 9
; [else-branch 65] sys__result@402 != 0
(assert (not (= sys__result@402 0)))
(pop) ; 9
; [eval] !(c == 0)
; [eval] c == 0
(push) ; 9
(assert (not (= sys__result@402 0)))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
(push) ; 9
(assert (not (not (= sys__result@402 0))))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
(push) ; 9
; [then-branch 67] sys__result@402 != 0
(assert (not (= sys__result@402 0)))
(declare-const $k@408 $Perm)
(assert ($Perm.isValidVar $k@408))
(assert ($Perm.isReadVar $k@408 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@408 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (< $k@408 (+ (- (+ (- $k@191 $k@352) $k@364) $k@366) $k@386)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@409 $Perm)
(assert ($Perm.isValidVar $k@409))
(assert ($Perm.isReadVar $k@409 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@409 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (< $k@409 (+ (- (+ (- $k@193 $k@353) $k@365) $k@367) $k@387)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 10
(assert (not (= $t@381 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 10
(push) ; 10
; [then-branch 68] $t@381 != Null
(declare-const $k@410 $Perm)
(assert ($Perm.isValidVar $k@410))
(assert ($Perm.isReadVar $k@410 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@410 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (< $k@410 (+ (- (+ (- $k@313 $k@351) $k@363) $k@368) $k@388)))
(declare-const $k@411 $Perm)
(assert ($Perm.isValidVar $k@411))
(assert ($Perm.isReadVar $k@411 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@411 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (< $k@411 (+ (- $k@315 $k@369) $k@389)))
(pop) ; 10
; [dead else-branch 68] $t@381 == Null
(pop) ; 9
(push) ; 9
; [else-branch 67] sys__result@402 == 0
(assert (= sys__result@402 0))
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch 64] !sys__result@402 + 1 < $t@385
(assert (not (< (+ sys__result@402 1) $t@385)))
(pop) ; 8
; [eval] !(c + 1 < diz.BlockingQueue__capacity)
; [eval] c + 1 < diz.BlockingQueue__capacity
; [eval] c + 1
(push) ; 8
(assert (not (< (+ sys__result@402 1) $t@385)))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (< (+ sys__result@402 1) $t@385))))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
(push) ; 8
; [then-branch 69] !sys__result@402 + 1 < $t@385
(assert (not (< (+ sys__result@402 1) $t@385)))
; [exec]
; exhale acc(Lock__lock_held(diz.BlockingQueue__putLock), write)
(push) ; 9
(assert (not (= $t@361 $t@377)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
; [exec]
; exhale true
; [eval] c == 0
(push) ; 9
(assert (not (not (= sys__result@402 0))))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
(push) ; 9
(assert (not (= sys__result@402 0)))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
(push) ; 9
; [then-branch 70] sys__result@402 == 0
(assert (= sys__result@402 0))
; [exec]
; inhale true
; [exec]
; inhale acc(Lock__lock_held(diz.BlockingQueue__takeLock), write)
(declare-const $t@412 $Snap)
; [exec]
; assert acc(Lock__lock_held(diz.BlockingQueue__takeLock), write)
; [exec]
; exhale acc(Lock__lock_held(diz.BlockingQueue__takeLock), write)
; [exec]
; exhale true
(declare-const $k@413 $Perm)
(assert ($Perm.isValidVar $k@413))
(assert ($Perm.isReadVar $k@413 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@413 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (< $k@413 (+ (- (+ (- $k@191 $k@352) $k@364) $k@366) $k@386)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@414 $Perm)
(assert ($Perm.isValidVar $k@414))
(assert ($Perm.isReadVar $k@414 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@414 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (< $k@414 (+ (- (+ (- $k@193 $k@353) $k@365) $k@367) $k@387)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 10
(assert (not (= $t@381 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 10
(push) ; 10
; [then-branch 71] $t@381 != Null
(declare-const $k@415 $Perm)
(assert ($Perm.isValidVar $k@415))
(assert ($Perm.isReadVar $k@415 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@415 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (< $k@415 (+ (- (+ (- $k@313 $k@351) $k@363) $k@368) $k@388)))
(declare-const $k@416 $Perm)
(assert ($Perm.isValidVar $k@416))
(assert ($Perm.isReadVar $k@416 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@416 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (< $k@416 (+ (- $k@315 $k@369) $k@389)))
(pop) ; 10
; [dead else-branch 71] $t@381 == Null
(pop) ; 9
(push) ; 9
; [else-branch 70] sys__result@402 != 0
(assert (not (= sys__result@402 0)))
(pop) ; 9
; [eval] !(c == 0)
; [eval] c == 0
(push) ; 9
(assert (not (= sys__result@402 0)))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
(push) ; 9
(assert (not (not (= sys__result@402 0))))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
(push) ; 9
; [then-branch 72] sys__result@402 != 0
(assert (not (= sys__result@402 0)))
(declare-const $k@417 $Perm)
(assert ($Perm.isValidVar $k@417))
(assert ($Perm.isReadVar $k@417 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@417 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (< $k@417 (+ (- (+ (- $k@191 $k@352) $k@364) $k@366) $k@386)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@418 $Perm)
(assert ($Perm.isValidVar $k@418))
(assert ($Perm.isReadVar $k@418 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@418 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (< $k@418 (+ (- (+ (- $k@193 $k@353) $k@365) $k@367) $k@387)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 10
(assert (not (= $t@381 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 10
(push) ; 10
; [then-branch 73] $t@381 != Null
(declare-const $k@419 $Perm)
(assert ($Perm.isValidVar $k@419))
(assert ($Perm.isReadVar $k@419 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@419 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (< $k@419 (+ (- (+ (- $k@313 $k@351) $k@363) $k@368) $k@388)))
(declare-const $k@420 $Perm)
(assert ($Perm.isValidVar $k@420))
(assert ($Perm.isReadVar $k@420 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@420 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (< $k@420 (+ (- $k@315 $k@369) $k@389)))
(pop) ; 10
; [dead else-branch 73] $t@381 == Null
(pop) ; 9
(push) ; 9
; [else-branch 72] sys__result@402 == 0
(assert (= sys__result@402 0))
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch 69] sys__result@402 + 1 < $t@385
(assert (< (+ sys__result@402 1) $t@385))
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch 58] $t@381 == Null
(assert (= $t@381 $Ref.null))
(declare-const $k@421 $Perm)
(assert ($Perm.isValidVar $k@421))
(assert ($Perm.isReadVar $k@421 $Perm.Write))
(assert (implies (< $Perm.No (- (+ (- $k@313 $k@351) $k@363) $k@368)) (= $t@377 $t@361)))
(declare-const $k@422 $Perm)
(assert ($Perm.isValidVar $k@422))
(assert ($Perm.isReadVar $k@422 $Perm.Write))
(assert (implies (< $Perm.No (- $k@315 $k@369)) (= $t@375 $t@316)))
; [eval] diz.BlockingQueue__first != null
(assert (not (= $t@381 $Ref.null)))
; [eval] (old(|BlockingQueue__contents(diz)|) == 0) ==> (BlockingQueue__contents(diz) == Seq(val))
; [eval] old(|BlockingQueue__contents(diz)|) == 0
; [eval] old(|BlockingQueue__contents(diz)|)
; [eval] |BlockingQueue__contents(diz)|
; [eval] BlockingQueue__contents(diz)
; [eval] diz != null
(declare-const $k@423 $Perm)
(assert ($Perm.isValidVar $k@423))
(assert ($Perm.isReadVar $k@423 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@423 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (< $k@423 (+ (- $k@191 $k@352) $k@364)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@424 $Perm)
(assert ($Perm.isValidVar $k@424))
(assert ($Perm.isReadVar $k@424 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@424 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (< $k@424 (+ (- $k@193 $k@353) $k@365)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 8
(assert (not (not (= $t@195 $Ref.null))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
; [dead then-branch 74] $t@195 != Null
; [dead else-branch 74] $t@195 == Null
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
; ---------- BlockingQueue__take ----------
(declare-const diz@425 $Ref)
(declare-const sys__result@426 Int)
(declare-const currentCount@427 Int)
(declare-const __flatten_23@428 Int)
(declare-const __flatten_24@429 Int)
(declare-const x@430 Int)
(declare-const __flatten_25@431 Int)
(declare-const c@432 Int)
(declare-const __flatten_26@433 Int)
(declare-const __flatten_27@434 Int)
(push) ; 2
; [eval] diz != null
(assert (not (= diz@425 $Ref.null)))
(declare-const $k@435 $Perm)
(assert ($Perm.isValidVar $k@435))
(assert ($Perm.isReadVar $k@435 $Perm.Write))
(declare-const $t@436 Int)
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 3
(assert (not (not (= $k@435 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 3
(assert (not (= $k@435 $Perm.No)))
(assert (> $t@436 0))
(declare-const $k@437 $Perm)
(assert ($Perm.isValidVar $k@437))
(assert ($Perm.isReadVar $k@437 $Perm.Write))
(declare-const $t@438 $Ref)
; [eval] diz.BlockingQueue__count != null
(push) ; 3
(assert (not (not (= $k@437 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 3
(assert (not (= $k@437 $Perm.No)))
(assert (not (= $t@438 $Ref.null)))
(declare-const $t@439 $Ref)
; [eval] diz.BlockingQueue__first != null
(push) ; 3
(assert (not (= $t@439 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 3
(push) ; 3
(assert (not (not (= $t@439 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 3
(push) ; 3
; [then-branch 75] $t@439 != Null
(assert (not (= $t@439 $Ref.null)))
(declare-const $t@440 $Snap)
(declare-const $k@441 $Perm)
(assert ($Perm.isValidVar $k@441))
(assert ($Perm.isReadVar $k@441 $Perm.Write))
(declare-const $t@442 $Ref)
(declare-const $k@443 $Perm)
(assert ($Perm.isValidVar $k@443))
(assert ($Perm.isReadVar $k@443 $Perm.Write))
(declare-const $t@444 $Ref)
(push) ; 4
(declare-const $k@445 $Perm)
(assert ($Perm.isValidVar $k@445))
(assert ($Perm.isReadVar $k@445 $Perm.Write))
(declare-const $t@446 Int)
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 5
(assert (not (not (= $k@445 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@445 $Perm.No)))
(assert (> $t@446 0))
(declare-const $k@447 $Perm)
(assert ($Perm.isValidVar $k@447))
(assert ($Perm.isReadVar $k@447 $Perm.Write))
(declare-const $t@448 $Ref)
; [eval] diz.BlockingQueue__count != null
(push) ; 5
(assert (not (not (= $k@447 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@447 $Perm.No)))
(assert (not (= $t@448 $Ref.null)))
(declare-const $t@449 $Ref)
; [eval] diz.BlockingQueue__first != null
(push) ; 5
(assert (not (= $t@449 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
(assert (not (not (= $t@449 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
; [then-branch 76] $t@449 != Null
(assert (not (= $t@449 $Ref.null)))
(declare-const $t@450 $Snap)
(declare-const $k@451 $Perm)
(assert ($Perm.isValidVar $k@451))
(assert ($Perm.isReadVar $k@451 $Perm.Write))
(declare-const $t@452 $Ref)
(declare-const $k@453 $Perm)
(assert ($Perm.isValidVar $k@453))
(assert ($Perm.isReadVar $k@453 $Perm.Write))
(declare-const $t@454 $Ref)
(pop) ; 5
(push) ; 5
; [else-branch 76] $t@449 == Null
(assert (= $t@449 $Ref.null))
(declare-const $k@455 $Perm)
(assert ($Perm.isValidVar $k@455))
(assert ($Perm.isReadVar $k@455 $Perm.Write))
(declare-const $t@456 $Ref)
(declare-const $k@457 $Perm)
(assert ($Perm.isValidVar $k@457))
(assert ($Perm.isReadVar $k@457 $Perm.Write))
(declare-const $t@458 $Ref)
(pop) ; 5
(pop) ; 4
(push) ; 4
; [exec]
; inhale true
; [exec]
; inhale acc(Lock__lock_held(diz.BlockingQueue__takeLock), write)
(push) ; 5
(assert (not (not (= $k@443 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@443 $Perm.No)))
(declare-const $t@459 $Snap)
; [exec]
; __flatten_23 := AtomicInteger__get(diz.BlockingQueue__count)
; [eval] diz != null
(declare-const sys__result@460 Int)
; [exec]
; currentCount := __flatten_23
; loop at <no position>
(declare-const currentCount@461 Int)
(declare-const __flatten_24@462 Int)
(push) ; 5
; Verify loop body
(declare-const $t@463 $Snap)
(declare-const $t@464 $Snap)
(assert (= $t@463 ($Snap.combine $t@464 $Snap.unit)))
(declare-const $t@465 $Snap)
(assert (= $t@464 ($Snap.combine $t@465 $Snap.unit)))
(declare-const $t@466 $Snap)
(declare-const $t@467 $Ref)
(assert (= $t@465 ($Snap.combine $t@466 ($SortWrappers.$RefTo$Snap $t@467))))
(declare-const $t@468 $Ref)
(declare-const $t@469 $Snap)
(assert (= $t@466 ($Snap.combine ($SortWrappers.$RefTo$Snap $t@468) $t@469)))
(declare-const $k@470 $Perm)
(assert ($Perm.isValidVar $k@470))
(assert ($Perm.isReadVar $k@470 $Perm.Write))
(push) ; 6
(assert (not (not (= $k@470 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= $k@470 $Perm.No)))
(declare-const $k@471 $Perm)
(assert ($Perm.isValidVar $k@471))
(assert ($Perm.isReadVar $k@471 $Perm.Write))
; [eval] diz.BlockingQueue__count != null
(push) ; 6
(assert (not (not (= $k@471 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= $k@471 $Perm.No)))
(assert (not (= $t@467 $Ref.null)))
; [eval] currentCount == 0
(assert (= currentCount@461 0))
(check-sat)
; unknown
; [exec]
; exhale true
; [exec]
; assert acc(Lock__lock_held(diz.BlockingQueue__takeLock), write)
; [exec]
; inhale true
; [exec]
; __flatten_24 := AtomicInteger__get(diz.BlockingQueue__count)
; [eval] diz != null
(declare-const sys__result@472 Int)
; [exec]
; currentCount := __flatten_24
(declare-const $k@473 $Perm)
(assert ($Perm.isValidVar $k@473))
(assert ($Perm.isReadVar $k@473 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@473 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (< $k@473 $k@470))
(declare-const $k@474 $Perm)
(assert ($Perm.isValidVar $k@474))
(assert ($Perm.isReadVar $k@474 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@474 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (< $k@474 $k@471))
; [eval] diz.BlockingQueue__count != null
(pop) ; 5
(push) ; 5
; Establish loop invariant
(declare-const $k@475 $Perm)
(assert ($Perm.isValidVar $k@475))
(assert ($Perm.isReadVar $k@475 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@475 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (< $k@475 $k@443))
(declare-const $k@476 $Perm)
(assert ($Perm.isValidVar $k@476))
(assert ($Perm.isReadVar $k@476 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@476 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (< $k@476 $k@437))
; [eval] diz.BlockingQueue__count != null
; Continue after loop
(declare-const $t@477 $Snap)
(declare-const $t@478 $Snap)
(assert (= $t@477 ($Snap.combine $t@478 $Snap.unit)))
(declare-const $t@479 $Snap)
(assert (= $t@478 ($Snap.combine $t@479 $Snap.unit)))
(declare-const $t@480 $Snap)
(declare-const $t@481 $Ref)
(assert (= $t@479 ($Snap.combine $t@480 ($SortWrappers.$RefTo$Snap $t@481))))
(declare-const $t@482 $Ref)
(declare-const $t@483 $Snap)
(assert (= $t@480 ($Snap.combine ($SortWrappers.$RefTo$Snap $t@482) $t@483)))
(declare-const $k@484 $Perm)
(assert ($Perm.isValidVar $k@484))
(assert ($Perm.isReadVar $k@484 $Perm.Write))
(assert (implies (< $Perm.No (- $k@443 $k@475)) (= $t@482 $t@444)))
(push) ; 6
(assert (not (not (= (+ (- $k@443 $k@475) $k@484) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= (+ (- $k@443 $k@475) $k@484) $Perm.No)))
(declare-const $k@485 $Perm)
(assert ($Perm.isValidVar $k@485))
(assert ($Perm.isReadVar $k@485 $Perm.Write))
(assert (implies (< $Perm.No (- $k@437 $k@476)) (= $t@481 $t@438)))
; [eval] diz.BlockingQueue__count != null
(push) ; 6
(assert (not (not (= (+ (- $k@437 $k@476) $k@485) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= (+ (- $k@437 $k@476) $k@485) $Perm.No)))
(assert (not (= $t@481 $Ref.null)))
; [eval] !(currentCount == 0)
; [eval] currentCount == 0
(assert (not (= currentCount@461 0)))
(check-sat)
; unknown
; [exec]
; inhale diz.BlockingQueue__first != null
; [eval] diz.BlockingQueue__first != null
; [exec]
; __flatten_25 := BlockingQueue__unlinkFirst(diz)
; [eval] diz != null
(declare-const $k@486 $Perm)
(assert ($Perm.isValidVar $k@486))
(assert ($Perm.isReadVar $k@486 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@486 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (< $k@486 $k@435))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@487 $Perm)
(assert ($Perm.isValidVar $k@487))
(assert ($Perm.isReadVar $k@487 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@487 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (< $k@487 (+ (- $k@437 $k@476) $k@485)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 6
(assert (not (= $t@439 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 6
(push) ; 6
; [then-branch 77] $t@439 != Null
(declare-const $k@488 $Perm)
(assert ($Perm.isValidVar $k@488))
(assert ($Perm.isReadVar $k@488 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@488 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(push) ; 7
(assert (not (not (= $k@441 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (not (= $k@441 $Perm.No)))
(assert (< $k@488 $k@441))
(declare-const $k@489 $Perm)
(assert ($Perm.isValidVar $k@489))
(assert ($Perm.isReadVar $k@489 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@489 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@489 (+ (- $k@443 $k@475) $k@484)))
; [eval] diz.BlockingQueue__first != null
(declare-const sys__result@490 Int)
(declare-const $t@491 $Snap)
(declare-const $t@492 $Snap)
(assert (= $t@491 ($Snap.combine $t@492 $Snap.unit)))
(declare-const $t@493 $Snap)
(assert (= $t@492 ($Snap.combine $t@493 $Snap.unit)))
(declare-const $t@494 $Snap)
(declare-const $t@495 $Ref)
(assert (= $t@493 ($Snap.combine $t@494 ($SortWrappers.$RefTo$Snap $t@495))))
(declare-const $t@496 $Snap)
(declare-const $t@497 $Ref)
(assert (= $t@494 ($Snap.combine $t@496 ($SortWrappers.$RefTo$Snap $t@497))))
(declare-const $t@498 $Snap)
(declare-const $t@499 $Snap)
(assert (= $t@496 ($Snap.combine $t@498 $t@499)))
(declare-const $t@500 $Snap)
(declare-const $t@501 $Ref)
(assert (= $t@498 ($Snap.combine $t@500 ($SortWrappers.$RefTo$Snap $t@501))))
(declare-const $t@502 $Snap)
(assert (= $t@500 ($Snap.combine $t@502 $Snap.unit)))
(declare-const $t@503 Int)
(declare-const $t@504 $Ref)
(assert (=
  $t@502
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@503)
    ($SortWrappers.$RefTo$Snap $t@504))))
(declare-const $t@505 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@503)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@505) $Snap.unit)))
(declare-const $k@506 $Perm)
(assert ($Perm.isValidVar $k@506))
(assert ($Perm.isReadVar $k@506 $Perm.Write))
(assert (implies (< $Perm.No (- $k@435 $k@486)) (= $t@505 $t@436)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 7
(assert (not (not (= (+ (- $k@435 $k@486) $k@506) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (not (= (+ (- $k@435 $k@486) $k@506) $Perm.No)))
(assert (> $t@505 0))
(declare-const $k@507 $Perm)
(assert ($Perm.isValidVar $k@507))
(assert ($Perm.isReadVar $k@507 $Perm.Write))
(assert (implies (< $Perm.No (- (+ (- $k@437 $k@476) $k@485) $k@487)) (= $t@504 $t@481)))
; [eval] diz.BlockingQueue__count != null
(push) ; 7
(assert (not (not (= (+ (- (+ (- $k@437 $k@476) $k@485) $k@487) $k@507) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (not (= (+ (- (+ (- $k@437 $k@476) $k@485) $k@487) $k@507) $Perm.No)))
(assert (not (= $t@504 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 7
(assert (not (= $t@501 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 7
(push) ; 7
(assert (not (not (= $t@501 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 7
(push) ; 7
; [then-branch 78] $t@501 != Null
(assert (not (= $t@501 $Ref.null)))
(declare-const $k@508 $Perm)
(assert ($Perm.isValidVar $k@508))
(assert ($Perm.isReadVar $k@508 $Perm.Write))
(assert (implies (< $Perm.No (- $k@441 $k@488)) (= $t@497 $t@442)))
(declare-const $k@509 $Perm)
(assert ($Perm.isValidVar $k@509))
(assert ($Perm.isReadVar $k@509 $Perm.Write))
(assert (implies (< $Perm.No (- (+ (- $k@443 $k@475) $k@484) $k@489)) (= $t@495 $t@482)))
; [eval] sys__result == old(BlockingQueue__contents(diz)[0])
; [eval] old(BlockingQueue__contents(diz)[0])
; [eval] BlockingQueue__contents(diz)[0]
; [eval] BlockingQueue__contents(diz)
; [eval] diz != null
(declare-const $k@510 $Perm)
(assert ($Perm.isValidVar $k@510))
(assert ($Perm.isReadVar $k@510 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@510 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (< $k@510 $k@435))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@511 $Perm)
(assert ($Perm.isValidVar $k@511))
(assert ($Perm.isReadVar $k@511 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@511 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (< $k@511 (+ (- $k@437 $k@476) $k@485)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 8
(assert (not (= $t@439 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
(push) ; 8
; [then-branch 79] $t@439 != Null
(declare-const $k@512 $Perm)
(assert ($Perm.isValidVar $k@512))
(assert ($Perm.isReadVar $k@512 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@512 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@512 $k@441))
(declare-const $k@513 $Perm)
(assert ($Perm.isValidVar $k@513))
(assert ($Perm.isReadVar $k@513 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@513 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@513 (+ (- $k@443 $k@475) $k@484)))
(pop) ; 8
; [dead else-branch 79] $t@439 == Null
(assert ($Perm.isValidVar $k@512))
(assert ($Perm.isReadVar $k@512 $Perm.Write))
(assert (< $k@512 $k@441))
(assert ($Perm.isValidVar $k@513))
(assert ($Perm.isReadVar $k@513 $Perm.Write))
(assert (< $k@513 (+ (- $k@443 $k@475) $k@484)))
(assert (=
  sys__result@490
  ($Seq.index
    ($BlockingQueue__contents ($Snap.combine
      ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@436))
                  $Snap.unit)
                ($SortWrappers.$RefTo$Snap $t@481))
              $Snap.unit)
            ($SortWrappers.$RefTo$Snap $t@439))
          $t@440)
        ($SortWrappers.$RefTo$Snap $t@442))
      ($SortWrappers.$RefTo$Snap $t@482)) diz@425)
    0)))
; [eval] BlockingQueue__contents(diz) == old(BlockingQueue__contents(diz)[1..])
; [eval] BlockingQueue__contents(diz)
; [eval] diz != null
(declare-const $k@514 $Perm)
(assert ($Perm.isValidVar $k@514))
(assert ($Perm.isReadVar $k@514 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@514 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (< $k@514 (+ (- $k@435 $k@486) $k@506)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@515 $Perm)
(assert ($Perm.isValidVar $k@515))
(assert ($Perm.isReadVar $k@515 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@515 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (< $k@515 (+ (- (+ (- $k@437 $k@476) $k@485) $k@487) $k@507)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 8
(assert (not (= $t@501 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
(push) ; 8
; [then-branch 80] $t@501 != Null
(declare-const $k@516 $Perm)
(assert ($Perm.isValidVar $k@516))
(assert ($Perm.isReadVar $k@516 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@516 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(push) ; 9
(assert (not (not (= (+ (- $k@441 $k@488) $k@508) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (not (= (+ (- $k@441 $k@488) $k@508) $Perm.No)))
(assert (< $k@516 (+ (- $k@441 $k@488) $k@508)))
(declare-const $k@517 $Perm)
(assert ($Perm.isValidVar $k@517))
(assert ($Perm.isReadVar $k@517 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@517 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(push) ; 9
(assert (not (not (= (+ (- (+ (- $k@443 $k@475) $k@484) $k@489) $k@509) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (not (= (+ (- (+ (- $k@443 $k@475) $k@484) $k@489) $k@509) $Perm.No)))
(assert (< $k@517 (+ (- (+ (- $k@443 $k@475) $k@484) $k@489) $k@509)))
(pop) ; 8
; [dead else-branch 80] $t@501 == Null
(assert ($Perm.isValidVar $k@516))
(assert ($Perm.isReadVar $k@516 $Perm.Write))
(assert (not (= (+ (- $k@441 $k@488) $k@508) $Perm.No)))
(assert (< $k@516 (+ (- $k@441 $k@488) $k@508)))
(assert ($Perm.isValidVar $k@517))
(assert ($Perm.isReadVar $k@517 $Perm.Write))
(assert (not (= (+ (- (+ (- $k@443 $k@475) $k@484) $k@489) $k@509) $Perm.No)))
(assert (< $k@517 (+ (- (+ (- $k@443 $k@475) $k@484) $k@489) $k@509)))
; [eval] old(BlockingQueue__contents(diz)[1..])
; [eval] BlockingQueue__contents(diz)[1..]
; [eval] BlockingQueue__contents(diz)
; [eval] diz != null
(declare-const $k@518 $Perm)
(assert ($Perm.isValidVar $k@518))
(assert ($Perm.isReadVar $k@518 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@518 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (< $k@518 $k@435))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@519 $Perm)
(assert ($Perm.isValidVar $k@519))
(assert ($Perm.isReadVar $k@519 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@519 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (< $k@519 (+ (- $k@437 $k@476) $k@485)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 8
(assert (not (= $t@439 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
(push) ; 8
; [then-branch 81] $t@439 != Null
(declare-const $k@520 $Perm)
(assert ($Perm.isValidVar $k@520))
(assert ($Perm.isReadVar $k@520 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@520 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@520 $k@441))
(declare-const $k@521 $Perm)
(assert ($Perm.isValidVar $k@521))
(assert ($Perm.isReadVar $k@521 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@521 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@521 (+ (- $k@443 $k@475) $k@484)))
(pop) ; 8
; [dead else-branch 81] $t@439 == Null
(assert ($Perm.isValidVar $k@520))
(assert ($Perm.isReadVar $k@520 $Perm.Write))
(assert (< $k@520 $k@441))
(assert ($Perm.isValidVar $k@521))
(assert ($Perm.isReadVar $k@521 $Perm.Write))
(assert (< $k@521 (+ (- $k@443 $k@475) $k@484)))
(assert ($Seq.equal
  ($BlockingQueue__contents ($Snap.combine
    ($Snap.combine
      ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@505))
                $Snap.unit)
              ($SortWrappers.$RefTo$Snap $t@504))
            $Snap.unit)
          ($SortWrappers.$RefTo$Snap $t@501))
        $t@499)
      ($SortWrappers.$RefTo$Snap $t@497))
    ($SortWrappers.$RefTo$Snap $t@495)) diz@425)
  ($Seq.drop
    ($BlockingQueue__contents ($Snap.combine
      ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@436))
                  $Snap.unit)
                ($SortWrappers.$RefTo$Snap $t@481))
              $Snap.unit)
            ($SortWrappers.$RefTo$Snap $t@439))
          $t@440)
        ($SortWrappers.$RefTo$Snap $t@442))
      ($SortWrappers.$RefTo$Snap $t@482)) diz@425)
    1)))
; [exec]
; x := __flatten_25
; [exec]
; __flatten_26 := AtomicInteger__getAndDecrement(diz.BlockingQueue__count)
; [eval] diz != null
(declare-const sys__result@522 Int)
; [exec]
; c := __flatten_26
; [eval] c > 1
(push) ; 8
(assert (not (not (> sys__result@522 1))))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (> sys__result@522 1)))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
(push) ; 8
; [then-branch 82] sys__result@522 > 1
(assert (> sys__result@522 1))
; [exec]
; assert acc(Lock__lock_held(diz.BlockingQueue__takeLock), write)
(push) ; 9
(assert (not (= $t@482 $t@495)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
; [exec]
; exhale acc(Lock__lock_held(diz.BlockingQueue__takeLock), write)
(push) ; 9
(assert (not (= $t@482 $t@495)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
; [exec]
; exhale true
; [eval] c == diz.BlockingQueue__capacity
(push) ; 9
(assert (not (not (= sys__result@522 $t@505))))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
(push) ; 9
(assert (not (= sys__result@522 $t@505)))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
(push) ; 9
; [then-branch 83] sys__result@522 == $t@505
(assert (= sys__result@522 $t@505))
; [exec]
; inhale true
; [exec]
; inhale acc(Lock__lock_held(diz.BlockingQueue__putLock), write)
(declare-const $t@523 $Snap)
; [exec]
; assert acc(Lock__lock_held(diz.BlockingQueue__putLock), write)
; [exec]
; exhale acc(Lock__lock_held(diz.BlockingQueue__putLock), write)
; [exec]
; exhale true
; [exec]
; __flatten_27 := x
; [exec]
; sys__result := __flatten_27
; [exec]
; assert acc(diz.BlockingQueue__capacity, wildcard) && (diz.BlockingQueue__capacity > 0) && acc(diz.BlockingQueue__count, wildcard) && (diz.BlockingQueue__count != null) && acc(diz.BlockingQueue__first, write) && ((diz.BlockingQueue__first != null) ==> acc(Node__state(diz.BlockingQueue__first), write)) && acc(diz.BlockingQueue__putLock, wildcard) && acc(diz.BlockingQueue__takeLock, wildcard)
(declare-const $k@524 $Perm)
(assert ($Perm.isValidVar $k@524))
(assert ($Perm.isReadVar $k@524 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@524 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (< $k@524 (+ (- $k@435 $k@486) $k@506)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@525 $Perm)
(assert ($Perm.isValidVar $k@525))
(assert ($Perm.isReadVar $k@525 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@525 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (< $k@525 (+ (- (+ (- $k@437 $k@476) $k@485) $k@487) $k@507)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 10
(assert (not (= $t@501 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 10
(push) ; 10
; [then-branch 84] $t@501 != Null
(declare-const $k@526 $Perm)
(assert ($Perm.isValidVar $k@526))
(assert ($Perm.isReadVar $k@526 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@526 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (< $k@526 (+ (- $k@441 $k@488) $k@508)))
(declare-const $k@527 $Perm)
(assert ($Perm.isValidVar $k@527))
(assert ($Perm.isReadVar $k@527 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@527 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (< $k@527 (+ (- (+ (- $k@443 $k@475) $k@484) $k@489) $k@509)))
; [exec]
; inhale false
(pop) ; 10
; [dead else-branch 84] $t@501 == Null
(pop) ; 9
(push) ; 9
; [else-branch 83] sys__result@522 != $t@505
(assert (not (= sys__result@522 $t@505)))
(pop) ; 9
; [eval] !(c == diz.BlockingQueue__capacity)
; [eval] c == diz.BlockingQueue__capacity
(push) ; 9
(assert (not (= sys__result@522 $t@505)))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
(push) ; 9
(assert (not (not (= sys__result@522 $t@505))))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
(push) ; 9
; [then-branch 85] sys__result@522 != $t@505
(assert (not (= sys__result@522 $t@505)))
; [exec]
; __flatten_27 := x
; [exec]
; sys__result := __flatten_27
; [exec]
; assert acc(diz.BlockingQueue__capacity, wildcard) && (diz.BlockingQueue__capacity > 0) && acc(diz.BlockingQueue__count, wildcard) && (diz.BlockingQueue__count != null) && acc(diz.BlockingQueue__first, write) && ((diz.BlockingQueue__first != null) ==> acc(Node__state(diz.BlockingQueue__first), write)) && acc(diz.BlockingQueue__putLock, wildcard) && acc(diz.BlockingQueue__takeLock, wildcard)
(declare-const $k@528 $Perm)
(assert ($Perm.isValidVar $k@528))
(assert ($Perm.isReadVar $k@528 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@528 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (< $k@528 (+ (- $k@435 $k@486) $k@506)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@529 $Perm)
(assert ($Perm.isValidVar $k@529))
(assert ($Perm.isReadVar $k@529 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@529 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (< $k@529 (+ (- (+ (- $k@437 $k@476) $k@485) $k@487) $k@507)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 10
(assert (not (= $t@501 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 10
(push) ; 10
; [then-branch 86] $t@501 != Null
(declare-const $k@530 $Perm)
(assert ($Perm.isValidVar $k@530))
(assert ($Perm.isReadVar $k@530 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@530 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (< $k@530 (+ (- $k@441 $k@488) $k@508)))
(declare-const $k@531 $Perm)
(assert ($Perm.isValidVar $k@531))
(assert ($Perm.isReadVar $k@531 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@531 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (< $k@531 (+ (- (+ (- $k@443 $k@475) $k@484) $k@489) $k@509)))
; [exec]
; inhale false
(pop) ; 10
; [dead else-branch 86] $t@501 == Null
(pop) ; 9
(push) ; 9
; [else-branch 85] sys__result@522 == $t@505
(assert (= sys__result@522 $t@505))
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch 82] !sys__result@522 > 1
(assert (not (> sys__result@522 1)))
(pop) ; 8
; [eval] !(c > 1)
; [eval] c > 1
(push) ; 8
(assert (not (> sys__result@522 1)))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (> sys__result@522 1))))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
(push) ; 8
; [then-branch 87] !sys__result@522 > 1
(assert (not (> sys__result@522 1)))
; [exec]
; exhale acc(Lock__lock_held(diz.BlockingQueue__takeLock), write)
(push) ; 9
(assert (not (= $t@482 $t@495)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
; [exec]
; exhale true
; [eval] c == diz.BlockingQueue__capacity
(push) ; 9
(assert (not (not (= sys__result@522 $t@505))))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
(push) ; 9
(assert (not (= sys__result@522 $t@505)))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
(push) ; 9
; [then-branch 88] sys__result@522 == $t@505
(assert (= sys__result@522 $t@505))
; [exec]
; inhale true
; [exec]
; inhale acc(Lock__lock_held(diz.BlockingQueue__putLock), write)
(declare-const $t@532 $Snap)
; [exec]
; assert acc(Lock__lock_held(diz.BlockingQueue__putLock), write)
; [exec]
; exhale acc(Lock__lock_held(diz.BlockingQueue__putLock), write)
; [exec]
; exhale true
; [exec]
; __flatten_27 := x
; [exec]
; sys__result := __flatten_27
; [exec]
; assert acc(diz.BlockingQueue__capacity, wildcard) && (diz.BlockingQueue__capacity > 0) && acc(diz.BlockingQueue__count, wildcard) && (diz.BlockingQueue__count != null) && acc(diz.BlockingQueue__first, write) && ((diz.BlockingQueue__first != null) ==> acc(Node__state(diz.BlockingQueue__first), write)) && acc(diz.BlockingQueue__putLock, wildcard) && acc(diz.BlockingQueue__takeLock, wildcard)
(declare-const $k@533 $Perm)
(assert ($Perm.isValidVar $k@533))
(assert ($Perm.isReadVar $k@533 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@533 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (< $k@533 (+ (- $k@435 $k@486) $k@506)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@534 $Perm)
(assert ($Perm.isValidVar $k@534))
(assert ($Perm.isReadVar $k@534 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@534 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (< $k@534 (+ (- (+ (- $k@437 $k@476) $k@485) $k@487) $k@507)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 10
(assert (not (= $t@501 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 10
(push) ; 10
; [then-branch 89] $t@501 != Null
(declare-const $k@535 $Perm)
(assert ($Perm.isValidVar $k@535))
(assert ($Perm.isReadVar $k@535 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@535 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (< $k@535 (+ (- $k@441 $k@488) $k@508)))
(declare-const $k@536 $Perm)
(assert ($Perm.isValidVar $k@536))
(assert ($Perm.isReadVar $k@536 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@536 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (< $k@536 (+ (- (+ (- $k@443 $k@475) $k@484) $k@489) $k@509)))
; [exec]
; inhale false
(pop) ; 10
; [dead else-branch 89] $t@501 == Null
(pop) ; 9
(push) ; 9
; [else-branch 88] sys__result@522 != $t@505
(assert (not (= sys__result@522 $t@505)))
(pop) ; 9
; [eval] !(c == diz.BlockingQueue__capacity)
; [eval] c == diz.BlockingQueue__capacity
(push) ; 9
(assert (not (= sys__result@522 $t@505)))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
(push) ; 9
(assert (not (not (= sys__result@522 $t@505))))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
(push) ; 9
; [then-branch 90] sys__result@522 != $t@505
(assert (not (= sys__result@522 $t@505)))
; [exec]
; __flatten_27 := x
; [exec]
; sys__result := __flatten_27
; [exec]
; assert acc(diz.BlockingQueue__capacity, wildcard) && (diz.BlockingQueue__capacity > 0) && acc(diz.BlockingQueue__count, wildcard) && (diz.BlockingQueue__count != null) && acc(diz.BlockingQueue__first, write) && ((diz.BlockingQueue__first != null) ==> acc(Node__state(diz.BlockingQueue__first), write)) && acc(diz.BlockingQueue__putLock, wildcard) && acc(diz.BlockingQueue__takeLock, wildcard)
(declare-const $k@537 $Perm)
(assert ($Perm.isValidVar $k@537))
(assert ($Perm.isReadVar $k@537 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@537 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (< $k@537 (+ (- $k@435 $k@486) $k@506)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@538 $Perm)
(assert ($Perm.isValidVar $k@538))
(assert ($Perm.isReadVar $k@538 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@538 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (< $k@538 (+ (- (+ (- $k@437 $k@476) $k@485) $k@487) $k@507)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 10
(assert (not (= $t@501 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 10
(push) ; 10
; [then-branch 91] $t@501 != Null
(declare-const $k@539 $Perm)
(assert ($Perm.isValidVar $k@539))
(assert ($Perm.isReadVar $k@539 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@539 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (< $k@539 (+ (- $k@441 $k@488) $k@508)))
(declare-const $k@540 $Perm)
(assert ($Perm.isValidVar $k@540))
(assert ($Perm.isReadVar $k@540 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@540 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (< $k@540 (+ (- (+ (- $k@443 $k@475) $k@484) $k@489) $k@509)))
; [exec]
; inhale false
(pop) ; 10
; [dead else-branch 91] $t@501 == Null
(pop) ; 9
(push) ; 9
; [else-branch 90] sys__result@522 == $t@505
(assert (= sys__result@522 $t@505))
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch 87] sys__result@522 > 1
(assert (> sys__result@522 1))
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch 78] $t@501 == Null
(assert (= $t@501 $Ref.null))
(declare-const $k@541 $Perm)
(assert ($Perm.isValidVar $k@541))
(assert ($Perm.isReadVar $k@541 $Perm.Write))
(assert (implies (< $Perm.No (- $k@441 $k@488)) (= $t@497 $t@442)))
(declare-const $k@542 $Perm)
(assert ($Perm.isValidVar $k@542))
(assert ($Perm.isReadVar $k@542 $Perm.Write))
(assert (implies (< $Perm.No (- (+ (- $k@443 $k@475) $k@484) $k@489)) (= $t@495 $t@482)))
; [eval] sys__result == old(BlockingQueue__contents(diz)[0])
; [eval] old(BlockingQueue__contents(diz)[0])
; [eval] BlockingQueue__contents(diz)[0]
; [eval] BlockingQueue__contents(diz)
; [eval] diz != null
(declare-const $k@543 $Perm)
(assert ($Perm.isValidVar $k@543))
(assert ($Perm.isReadVar $k@543 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@543 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (< $k@543 $k@435))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@544 $Perm)
(assert ($Perm.isValidVar $k@544))
(assert ($Perm.isReadVar $k@544 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@544 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (< $k@544 (+ (- $k@437 $k@476) $k@485)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 8
(assert (not (= $t@439 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
(push) ; 8
; [then-branch 92] $t@439 != Null
(declare-const $k@545 $Perm)
(assert ($Perm.isValidVar $k@545))
(assert ($Perm.isReadVar $k@545 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@545 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@545 $k@441))
(declare-const $k@546 $Perm)
(assert ($Perm.isValidVar $k@546))
(assert ($Perm.isReadVar $k@546 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@546 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@546 (+ (- $k@443 $k@475) $k@484)))
(pop) ; 8
; [dead else-branch 92] $t@439 == Null
(assert ($Perm.isValidVar $k@545))
(assert ($Perm.isReadVar $k@545 $Perm.Write))
(assert (< $k@545 $k@441))
(assert ($Perm.isValidVar $k@546))
(assert ($Perm.isReadVar $k@546 $Perm.Write))
(assert (< $k@546 (+ (- $k@443 $k@475) $k@484)))
(assert (=
  sys__result@490
  ($Seq.index
    ($BlockingQueue__contents ($Snap.combine
      ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@436))
                  $Snap.unit)
                ($SortWrappers.$RefTo$Snap $t@481))
              $Snap.unit)
            ($SortWrappers.$RefTo$Snap $t@439))
          $t@440)
        ($SortWrappers.$RefTo$Snap $t@442))
      ($SortWrappers.$RefTo$Snap $t@482)) diz@425)
    0)))
; [eval] BlockingQueue__contents(diz) == old(BlockingQueue__contents(diz)[1..])
; [eval] BlockingQueue__contents(diz)
; [eval] diz != null
(declare-const $k@547 $Perm)
(assert ($Perm.isValidVar $k@547))
(assert ($Perm.isReadVar $k@547 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@547 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (< $k@547 (+ (- $k@435 $k@486) $k@506)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@548 $Perm)
(assert ($Perm.isValidVar $k@548))
(assert ($Perm.isReadVar $k@548 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@548 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (< $k@548 (+ (- (+ (- $k@437 $k@476) $k@485) $k@487) $k@507)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 8
(assert (not (not (= $t@501 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
; [dead then-branch 93] $t@501 != Null
(push) ; 8
; [else-branch 93] $t@501 == Null
(declare-const $k@549 $Perm)
(assert ($Perm.isValidVar $k@549))
(assert ($Perm.isReadVar $k@549 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@549 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(push) ; 9
(assert (not (not (= (+ (- $k@441 $k@488) $k@541) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (not (= (+ (- $k@441 $k@488) $k@541) $Perm.No)))
(assert (< $k@549 (+ (- $k@441 $k@488) $k@541)))
(declare-const $k@550 $Perm)
(assert ($Perm.isValidVar $k@550))
(assert ($Perm.isReadVar $k@550 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@550 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(push) ; 9
(assert (not (not (= (+ (- (+ (- $k@443 $k@475) $k@484) $k@489) $k@542) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (not (= (+ (- (+ (- $k@443 $k@475) $k@484) $k@489) $k@542) $Perm.No)))
(assert (< $k@550 (+ (- (+ (- $k@443 $k@475) $k@484) $k@489) $k@542)))
(pop) ; 8
(assert ($Perm.isValidVar $k@549))
(assert ($Perm.isReadVar $k@549 $Perm.Write))
(assert (not (= (+ (- $k@441 $k@488) $k@541) $Perm.No)))
(assert (< $k@549 (+ (- $k@441 $k@488) $k@541)))
(assert ($Perm.isValidVar $k@550))
(assert ($Perm.isReadVar $k@550 $Perm.Write))
(assert (not (= (+ (- (+ (- $k@443 $k@475) $k@484) $k@489) $k@542) $Perm.No)))
(assert (< $k@550 (+ (- (+ (- $k@443 $k@475) $k@484) $k@489) $k@542)))
; [eval] old(BlockingQueue__contents(diz)[1..])
; [eval] BlockingQueue__contents(diz)[1..]
; [eval] BlockingQueue__contents(diz)
; [eval] diz != null
(declare-const $k@551 $Perm)
(assert ($Perm.isValidVar $k@551))
(assert ($Perm.isReadVar $k@551 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@551 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (< $k@551 $k@435))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@552 $Perm)
(assert ($Perm.isValidVar $k@552))
(assert ($Perm.isReadVar $k@552 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@552 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (< $k@552 (+ (- $k@437 $k@476) $k@485)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 8
(assert (not (= $t@439 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
(push) ; 8
; [then-branch 94] $t@439 != Null
(declare-const $k@553 $Perm)
(assert ($Perm.isValidVar $k@553))
(assert ($Perm.isReadVar $k@553 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@553 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@553 $k@441))
(declare-const $k@554 $Perm)
(assert ($Perm.isValidVar $k@554))
(assert ($Perm.isReadVar $k@554 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@554 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@554 (+ (- $k@443 $k@475) $k@484)))
(pop) ; 8
; [dead else-branch 94] $t@439 == Null
(assert ($Perm.isValidVar $k@553))
(assert ($Perm.isReadVar $k@553 $Perm.Write))
(assert (< $k@553 $k@441))
(assert ($Perm.isValidVar $k@554))
(assert ($Perm.isReadVar $k@554 $Perm.Write))
(assert (< $k@554 (+ (- $k@443 $k@475) $k@484)))
(assert ($Seq.equal
  ($BlockingQueue__contents ($Snap.combine
    ($Snap.combine
      ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@505))
                $Snap.unit)
              ($SortWrappers.$RefTo$Snap $t@504))
            $Snap.unit)
          ($SortWrappers.$RefTo$Snap $t@501))
        $Snap.unit)
      ($SortWrappers.$RefTo$Snap $t@497))
    ($SortWrappers.$RefTo$Snap $t@495)) diz@425)
  ($Seq.drop
    ($BlockingQueue__contents ($Snap.combine
      ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@436))
                  $Snap.unit)
                ($SortWrappers.$RefTo$Snap $t@481))
              $Snap.unit)
            ($SortWrappers.$RefTo$Snap $t@439))
          $t@440)
        ($SortWrappers.$RefTo$Snap $t@442))
      ($SortWrappers.$RefTo$Snap $t@482)) diz@425)
    1)))
; [exec]
; x := __flatten_25
; [exec]
; __flatten_26 := AtomicInteger__getAndDecrement(diz.BlockingQueue__count)
; [eval] diz != null
(declare-const sys__result@555 Int)
; [exec]
; c := __flatten_26
; [eval] c > 1
(push) ; 8
(assert (not (not (> sys__result@555 1))))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (> sys__result@555 1)))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
(push) ; 8
; [then-branch 95] sys__result@555 > 1
(assert (> sys__result@555 1))
; [exec]
; assert acc(Lock__lock_held(diz.BlockingQueue__takeLock), write)
(push) ; 9
(assert (not (= $t@482 $t@495)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
; [exec]
; exhale acc(Lock__lock_held(diz.BlockingQueue__takeLock), write)
(push) ; 9
(assert (not (= $t@482 $t@495)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
; [exec]
; exhale true
; [eval] c == diz.BlockingQueue__capacity
(push) ; 9
(assert (not (not (= sys__result@555 $t@505))))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
(push) ; 9
(assert (not (= sys__result@555 $t@505)))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
(push) ; 9
; [then-branch 96] sys__result@555 == $t@505
(assert (= sys__result@555 $t@505))
; [exec]
; inhale true
; [exec]
; inhale acc(Lock__lock_held(diz.BlockingQueue__putLock), write)
(declare-const $t@556 $Snap)
; [exec]
; assert acc(Lock__lock_held(diz.BlockingQueue__putLock), write)
; [exec]
; exhale acc(Lock__lock_held(diz.BlockingQueue__putLock), write)
; [exec]
; exhale true
; [exec]
; __flatten_27 := x
; [exec]
; sys__result := __flatten_27
; [exec]
; assert acc(diz.BlockingQueue__capacity, wildcard) && (diz.BlockingQueue__capacity > 0) && acc(diz.BlockingQueue__count, wildcard) && (diz.BlockingQueue__count != null) && acc(diz.BlockingQueue__first, write) && ((diz.BlockingQueue__first != null) ==> acc(Node__state(diz.BlockingQueue__first), write)) && acc(diz.BlockingQueue__putLock, wildcard) && acc(diz.BlockingQueue__takeLock, wildcard)
(declare-const $k@557 $Perm)
(assert ($Perm.isValidVar $k@557))
(assert ($Perm.isReadVar $k@557 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@557 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (< $k@557 (+ (- $k@435 $k@486) $k@506)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@558 $Perm)
(assert ($Perm.isValidVar $k@558))
(assert ($Perm.isReadVar $k@558 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@558 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (< $k@558 (+ (- (+ (- $k@437 $k@476) $k@485) $k@487) $k@507)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 10
(assert (not (not (= $t@501 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 10
; [dead then-branch 97] $t@501 != Null
(push) ; 10
; [else-branch 97] $t@501 == Null
(declare-const $k@559 $Perm)
(assert ($Perm.isValidVar $k@559))
(assert ($Perm.isReadVar $k@559 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@559 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (< $k@559 (+ (- $k@441 $k@488) $k@541)))
(declare-const $k@560 $Perm)
(assert ($Perm.isValidVar $k@560))
(assert ($Perm.isReadVar $k@560 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@560 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (< $k@560 (+ (- (+ (- $k@443 $k@475) $k@484) $k@489) $k@542)))
; [exec]
; inhale false
(pop) ; 10
(pop) ; 9
(push) ; 9
; [else-branch 96] sys__result@555 != $t@505
(assert (not (= sys__result@555 $t@505)))
(pop) ; 9
; [eval] !(c == diz.BlockingQueue__capacity)
; [eval] c == diz.BlockingQueue__capacity
(push) ; 9
(assert (not (= sys__result@555 $t@505)))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
(push) ; 9
(assert (not (not (= sys__result@555 $t@505))))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
(push) ; 9
; [then-branch 98] sys__result@555 != $t@505
(assert (not (= sys__result@555 $t@505)))
; [exec]
; __flatten_27 := x
; [exec]
; sys__result := __flatten_27
; [exec]
; assert acc(diz.BlockingQueue__capacity, wildcard) && (diz.BlockingQueue__capacity > 0) && acc(diz.BlockingQueue__count, wildcard) && (diz.BlockingQueue__count != null) && acc(diz.BlockingQueue__first, write) && ((diz.BlockingQueue__first != null) ==> acc(Node__state(diz.BlockingQueue__first), write)) && acc(diz.BlockingQueue__putLock, wildcard) && acc(diz.BlockingQueue__takeLock, wildcard)
(declare-const $k@561 $Perm)
(assert ($Perm.isValidVar $k@561))
(assert ($Perm.isReadVar $k@561 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@561 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (< $k@561 (+ (- $k@435 $k@486) $k@506)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@562 $Perm)
(assert ($Perm.isValidVar $k@562))
(assert ($Perm.isReadVar $k@562 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@562 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (< $k@562 (+ (- (+ (- $k@437 $k@476) $k@485) $k@487) $k@507)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 10
(assert (not (not (= $t@501 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 10
; [dead then-branch 99] $t@501 != Null
(push) ; 10
; [else-branch 99] $t@501 == Null
(declare-const $k@563 $Perm)
(assert ($Perm.isValidVar $k@563))
(assert ($Perm.isReadVar $k@563 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@563 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (< $k@563 (+ (- $k@441 $k@488) $k@541)))
(declare-const $k@564 $Perm)
(assert ($Perm.isValidVar $k@564))
(assert ($Perm.isReadVar $k@564 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@564 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (< $k@564 (+ (- (+ (- $k@443 $k@475) $k@484) $k@489) $k@542)))
; [exec]
; inhale false
(pop) ; 10
(pop) ; 9
(push) ; 9
; [else-branch 98] sys__result@555 == $t@505
(assert (= sys__result@555 $t@505))
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch 95] !sys__result@555 > 1
(assert (not (> sys__result@555 1)))
(pop) ; 8
; [eval] !(c > 1)
; [eval] c > 1
(push) ; 8
(assert (not (> sys__result@555 1)))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (> sys__result@555 1))))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
(push) ; 8
; [then-branch 100] !sys__result@555 > 1
(assert (not (> sys__result@555 1)))
; [exec]
; exhale acc(Lock__lock_held(diz.BlockingQueue__takeLock), write)
(push) ; 9
(assert (not (= $t@482 $t@495)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
; [exec]
; exhale true
; [eval] c == diz.BlockingQueue__capacity
(push) ; 9
(assert (not (not (= sys__result@555 $t@505))))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
(push) ; 9
(assert (not (= sys__result@555 $t@505)))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
(push) ; 9
; [then-branch 101] sys__result@555 == $t@505
(assert (= sys__result@555 $t@505))
; [exec]
; inhale true
; [exec]
; inhale acc(Lock__lock_held(diz.BlockingQueue__putLock), write)
(declare-const $t@565 $Snap)
; [exec]
; assert acc(Lock__lock_held(diz.BlockingQueue__putLock), write)
; [exec]
; exhale acc(Lock__lock_held(diz.BlockingQueue__putLock), write)
; [exec]
; exhale true
; [exec]
; __flatten_27 := x
; [exec]
; sys__result := __flatten_27
; [exec]
; assert acc(diz.BlockingQueue__capacity, wildcard) && (diz.BlockingQueue__capacity > 0) && acc(diz.BlockingQueue__count, wildcard) && (diz.BlockingQueue__count != null) && acc(diz.BlockingQueue__first, write) && ((diz.BlockingQueue__first != null) ==> acc(Node__state(diz.BlockingQueue__first), write)) && acc(diz.BlockingQueue__putLock, wildcard) && acc(diz.BlockingQueue__takeLock, wildcard)
(declare-const $k@566 $Perm)
(assert ($Perm.isValidVar $k@566))
(assert ($Perm.isReadVar $k@566 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@566 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (< $k@566 (+ (- $k@435 $k@486) $k@506)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@567 $Perm)
(assert ($Perm.isValidVar $k@567))
(assert ($Perm.isReadVar $k@567 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@567 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (< $k@567 (+ (- (+ (- $k@437 $k@476) $k@485) $k@487) $k@507)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 10
(assert (not (not (= $t@501 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 10
; [dead then-branch 102] $t@501 != Null
(push) ; 10
; [else-branch 102] $t@501 == Null
(declare-const $k@568 $Perm)
(assert ($Perm.isValidVar $k@568))
(assert ($Perm.isReadVar $k@568 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@568 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (< $k@568 (+ (- $k@441 $k@488) $k@541)))
(declare-const $k@569 $Perm)
(assert ($Perm.isValidVar $k@569))
(assert ($Perm.isReadVar $k@569 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@569 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (< $k@569 (+ (- (+ (- $k@443 $k@475) $k@484) $k@489) $k@542)))
; [exec]
; inhale false
(pop) ; 10
(pop) ; 9
(push) ; 9
; [else-branch 101] sys__result@555 != $t@505
(assert (not (= sys__result@555 $t@505)))
(pop) ; 9
; [eval] !(c == diz.BlockingQueue__capacity)
; [eval] c == diz.BlockingQueue__capacity
(push) ; 9
(assert (not (= sys__result@555 $t@505)))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
(push) ; 9
(assert (not (not (= sys__result@555 $t@505))))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
(push) ; 9
; [then-branch 103] sys__result@555 != $t@505
(assert (not (= sys__result@555 $t@505)))
; [exec]
; __flatten_27 := x
; [exec]
; sys__result := __flatten_27
; [exec]
; assert acc(diz.BlockingQueue__capacity, wildcard) && (diz.BlockingQueue__capacity > 0) && acc(diz.BlockingQueue__count, wildcard) && (diz.BlockingQueue__count != null) && acc(diz.BlockingQueue__first, write) && ((diz.BlockingQueue__first != null) ==> acc(Node__state(diz.BlockingQueue__first), write)) && acc(diz.BlockingQueue__putLock, wildcard) && acc(diz.BlockingQueue__takeLock, wildcard)
(declare-const $k@570 $Perm)
(assert ($Perm.isValidVar $k@570))
(assert ($Perm.isReadVar $k@570 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@570 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (< $k@570 (+ (- $k@435 $k@486) $k@506)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@571 $Perm)
(assert ($Perm.isValidVar $k@571))
(assert ($Perm.isReadVar $k@571 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@571 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (< $k@571 (+ (- (+ (- $k@437 $k@476) $k@485) $k@487) $k@507)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 10
(assert (not (not (= $t@501 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 10
; [dead then-branch 104] $t@501 != Null
(push) ; 10
; [else-branch 104] $t@501 == Null
(declare-const $k@572 $Perm)
(assert ($Perm.isValidVar $k@572))
(assert ($Perm.isReadVar $k@572 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@572 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (< $k@572 (+ (- $k@441 $k@488) $k@541)))
(declare-const $k@573 $Perm)
(assert ($Perm.isValidVar $k@573))
(assert ($Perm.isReadVar $k@573 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@573 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (< $k@573 (+ (- (+ (- $k@443 $k@475) $k@484) $k@489) $k@542)))
; [exec]
; inhale false
(pop) ; 10
(pop) ; 9
(push) ; 9
; [else-branch 103] sys__result@555 == $t@505
(assert (= sys__result@555 $t@505))
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch 100] sys__result@555 > 1
(assert (> sys__result@555 1))
(pop) ; 8
(pop) ; 7
(pop) ; 6
; [dead else-branch 77] $t@439 == Null
(pop) ; 5
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch 75] $t@439 == Null
(assert (= $t@439 $Ref.null))
(declare-const $k@574 $Perm)
(assert ($Perm.isValidVar $k@574))
(assert ($Perm.isReadVar $k@574 $Perm.Write))
(declare-const $t@575 $Ref)
(declare-const $k@576 $Perm)
(assert ($Perm.isValidVar $k@576))
(assert ($Perm.isReadVar $k@576 $Perm.Write))
(declare-const $t@577 $Ref)
(push) ; 4
(declare-const $k@578 $Perm)
(assert ($Perm.isValidVar $k@578))
(assert ($Perm.isReadVar $k@578 $Perm.Write))
(declare-const $t@579 Int)
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 5
(assert (not (not (= $k@578 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@578 $Perm.No)))
(assert (> $t@579 0))
(declare-const $k@580 $Perm)
(assert ($Perm.isValidVar $k@580))
(assert ($Perm.isReadVar $k@580 $Perm.Write))
(declare-const $t@581 $Ref)
; [eval] diz.BlockingQueue__count != null
(push) ; 5
(assert (not (not (= $k@580 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@580 $Perm.No)))
(assert (not (= $t@581 $Ref.null)))
(declare-const $t@582 $Ref)
; [eval] diz.BlockingQueue__first != null
(push) ; 5
(assert (not (= $t@582 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
(assert (not (not (= $t@582 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
; [then-branch 105] $t@582 != Null
(assert (not (= $t@582 $Ref.null)))
(declare-const $t@583 $Snap)
(declare-const $k@584 $Perm)
(assert ($Perm.isValidVar $k@584))
(assert ($Perm.isReadVar $k@584 $Perm.Write))
(declare-const $t@585 $Ref)
(declare-const $k@586 $Perm)
(assert ($Perm.isValidVar $k@586))
(assert ($Perm.isReadVar $k@586 $Perm.Write))
(declare-const $t@587 $Ref)
(pop) ; 5
(push) ; 5
; [else-branch 105] $t@582 == Null
(assert (= $t@582 $Ref.null))
(declare-const $k@588 $Perm)
(assert ($Perm.isValidVar $k@588))
(assert ($Perm.isReadVar $k@588 $Perm.Write))
(declare-const $t@589 $Ref)
(declare-const $k@590 $Perm)
(assert ($Perm.isValidVar $k@590))
(assert ($Perm.isReadVar $k@590 $Perm.Write))
(declare-const $t@591 $Ref)
(pop) ; 5
(pop) ; 4
(push) ; 4
; [exec]
; inhale true
; [exec]
; inhale acc(Lock__lock_held(diz.BlockingQueue__takeLock), write)
(push) ; 5
(assert (not (not (= $k@576 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@576 $Perm.No)))
(declare-const $t@592 $Snap)
; [exec]
; __flatten_23 := AtomicInteger__get(diz.BlockingQueue__count)
; [eval] diz != null
(declare-const sys__result@593 Int)
; [exec]
; currentCount := __flatten_23
; loop at <no position>
(declare-const currentCount@594 Int)
(declare-const __flatten_24@595 Int)
(push) ; 5
; Verify loop body
(declare-const $t@596 $Snap)
(declare-const $t@597 $Snap)
(assert (= $t@596 ($Snap.combine $t@597 $Snap.unit)))
(declare-const $t@598 $Snap)
(assert (= $t@597 ($Snap.combine $t@598 $Snap.unit)))
(declare-const $t@599 $Snap)
(declare-const $t@600 $Ref)
(assert (= $t@598 ($Snap.combine $t@599 ($SortWrappers.$RefTo$Snap $t@600))))
(declare-const $t@601 $Ref)
(declare-const $t@602 $Snap)
(assert (= $t@599 ($Snap.combine ($SortWrappers.$RefTo$Snap $t@601) $t@602)))
(declare-const $k@603 $Perm)
(assert ($Perm.isValidVar $k@603))
(assert ($Perm.isReadVar $k@603 $Perm.Write))
(push) ; 6
(assert (not (not (= $k@603 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= $k@603 $Perm.No)))
(declare-const $k@604 $Perm)
(assert ($Perm.isValidVar $k@604))
(assert ($Perm.isReadVar $k@604 $Perm.Write))
; [eval] diz.BlockingQueue__count != null
(push) ; 6
(assert (not (not (= $k@604 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= $k@604 $Perm.No)))
(assert (not (= $t@600 $Ref.null)))
; [eval] currentCount == 0
(assert (= currentCount@594 0))
(check-sat)
; unknown
; [exec]
; exhale true
; [exec]
; assert acc(Lock__lock_held(diz.BlockingQueue__takeLock), write)
; [exec]
; inhale true
; [exec]
; __flatten_24 := AtomicInteger__get(diz.BlockingQueue__count)
; [eval] diz != null
(declare-const sys__result@605 Int)
; [exec]
; currentCount := __flatten_24
(declare-const $k@606 $Perm)
(assert ($Perm.isValidVar $k@606))
(assert ($Perm.isReadVar $k@606 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@606 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (< $k@606 $k@603))
(declare-const $k@607 $Perm)
(assert ($Perm.isValidVar $k@607))
(assert ($Perm.isReadVar $k@607 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@607 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (< $k@607 $k@604))
; [eval] diz.BlockingQueue__count != null
(pop) ; 5
(push) ; 5
; Establish loop invariant
(declare-const $k@608 $Perm)
(assert ($Perm.isValidVar $k@608))
(assert ($Perm.isReadVar $k@608 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@608 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (< $k@608 $k@576))
(declare-const $k@609 $Perm)
(assert ($Perm.isValidVar $k@609))
(assert ($Perm.isReadVar $k@609 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@609 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (< $k@609 $k@437))
; [eval] diz.BlockingQueue__count != null
; Continue after loop
(declare-const $t@610 $Snap)
(declare-const $t@611 $Snap)
(assert (= $t@610 ($Snap.combine $t@611 $Snap.unit)))
(declare-const $t@612 $Snap)
(assert (= $t@611 ($Snap.combine $t@612 $Snap.unit)))
(declare-const $t@613 $Snap)
(declare-const $t@614 $Ref)
(assert (= $t@612 ($Snap.combine $t@613 ($SortWrappers.$RefTo$Snap $t@614))))
(declare-const $t@615 $Ref)
(declare-const $t@616 $Snap)
(assert (= $t@613 ($Snap.combine ($SortWrappers.$RefTo$Snap $t@615) $t@616)))
(declare-const $k@617 $Perm)
(assert ($Perm.isValidVar $k@617))
(assert ($Perm.isReadVar $k@617 $Perm.Write))
(assert (implies (< $Perm.No (- $k@576 $k@608)) (= $t@615 $t@577)))
(push) ; 6
(assert (not (not (= (+ (- $k@576 $k@608) $k@617) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= (+ (- $k@576 $k@608) $k@617) $Perm.No)))
(declare-const $k@618 $Perm)
(assert ($Perm.isValidVar $k@618))
(assert ($Perm.isReadVar $k@618 $Perm.Write))
(assert (implies (< $Perm.No (- $k@437 $k@609)) (= $t@614 $t@438)))
; [eval] diz.BlockingQueue__count != null
(push) ; 6
(assert (not (not (= (+ (- $k@437 $k@609) $k@618) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= (+ (- $k@437 $k@609) $k@618) $Perm.No)))
(assert (not (= $t@614 $Ref.null)))
; [eval] !(currentCount == 0)
; [eval] currentCount == 0
(assert (not (= currentCount@594 0)))
(check-sat)
; unknown
; [exec]
; inhale diz.BlockingQueue__first != null
; [eval] diz.BlockingQueue__first != null
(assert (not (= $t@439 $Ref.null)))
; [exec]
; __flatten_25 := BlockingQueue__unlinkFirst(diz)
; [eval] diz != null
(declare-const $k@619 $Perm)
(assert ($Perm.isValidVar $k@619))
(assert ($Perm.isReadVar $k@619 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@619 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (< $k@619 $k@435))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@620 $Perm)
(assert ($Perm.isValidVar $k@620))
(assert ($Perm.isReadVar $k@620 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@620 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (< $k@620 (+ (- $k@437 $k@609) $k@618)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
; [dead then-branch 106] $t@439 != Null
; [dead else-branch 106] $t@439 == Null
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
; ---------- BlockingQueue__offer ----------
(declare-const diz@621 $Ref)
(declare-const val@622 Int)
(declare-const sys__result@623 Bool)
(declare-const currentCount@624 Int)
(declare-const __flatten_28@625 Int)
(declare-const __flatten_29@626 Bool)
(declare-const c@627 Int)
(declare-const __flatten_30@628 Int)
(declare-const __flatten_32@629 Int)
(declare-const __flatten_33@630 Bool)
(push) ; 2
; [eval] diz != null
(assert (not (= diz@621 $Ref.null)))
(declare-const $k@631 $Perm)
(assert ($Perm.isValidVar $k@631))
(assert ($Perm.isReadVar $k@631 $Perm.Write))
(declare-const $t@632 Int)
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 3
(assert (not (not (= $k@631 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 3
(assert (not (= $k@631 $Perm.No)))
(assert (> $t@632 0))
(declare-const $k@633 $Perm)
(assert ($Perm.isValidVar $k@633))
(assert ($Perm.isReadVar $k@633 $Perm.Write))
(declare-const $t@634 $Ref)
; [eval] diz.BlockingQueue__count != null
(push) ; 3
(assert (not (not (= $k@633 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 3
(assert (not (= $k@633 $Perm.No)))
(assert (not (= $t@634 $Ref.null)))
(declare-const $t@635 $Ref)
; [eval] diz.BlockingQueue__first != null
(push) ; 3
(assert (not (= $t@635 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 3
(push) ; 3
(assert (not (not (= $t@635 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 3
(push) ; 3
; [then-branch 107] $t@635 != Null
(assert (not (= $t@635 $Ref.null)))
(declare-const $t@636 $Snap)
(declare-const $k@637 $Perm)
(assert ($Perm.isValidVar $k@637))
(assert ($Perm.isReadVar $k@637 $Perm.Write))
(declare-const $t@638 $Ref)
(declare-const $k@639 $Perm)
(assert ($Perm.isValidVar $k@639))
(assert ($Perm.isReadVar $k@639 $Perm.Write))
(declare-const $t@640 $Ref)
(push) ; 4
(declare-const $k@641 $Perm)
(assert ($Perm.isValidVar $k@641))
(assert ($Perm.isReadVar $k@641 $Perm.Write))
(declare-const $t@642 Int)
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 5
(assert (not (not (= $k@641 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@641 $Perm.No)))
(assert (> $t@642 0))
(declare-const $k@643 $Perm)
(assert ($Perm.isValidVar $k@643))
(assert ($Perm.isReadVar $k@643 $Perm.Write))
(declare-const $t@644 $Ref)
; [eval] diz.BlockingQueue__count != null
(push) ; 5
(assert (not (not (= $k@643 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@643 $Perm.No)))
(assert (not (= $t@644 $Ref.null)))
(declare-const $t@645 $Ref)
; [eval] diz.BlockingQueue__first != null
(push) ; 5
(assert (not (= $t@645 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
(assert (not (not (= $t@645 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
; [then-branch 108] $t@645 != Null
(assert (not (= $t@645 $Ref.null)))
(declare-const $t@646 $Snap)
(declare-const $k@647 $Perm)
(assert ($Perm.isValidVar $k@647))
(assert ($Perm.isReadVar $k@647 $Perm.Write))
(declare-const $t@648 $Ref)
(declare-const $k@649 $Perm)
(assert ($Perm.isValidVar $k@649))
(assert ($Perm.isReadVar $k@649 $Perm.Write))
(declare-const $t@650 $Ref)
(pop) ; 5
(push) ; 5
; [else-branch 108] $t@645 == Null
(assert (= $t@645 $Ref.null))
(declare-const $k@651 $Perm)
(assert ($Perm.isValidVar $k@651))
(assert ($Perm.isReadVar $k@651 $Perm.Write))
(declare-const $t@652 $Ref)
(declare-const $k@653 $Perm)
(assert ($Perm.isValidVar $k@653))
(assert ($Perm.isReadVar $k@653 $Perm.Write))
(declare-const $t@654 $Ref)
(pop) ; 5
(pop) ; 4
(push) ; 4
; [exec]
; __flatten_28 := AtomicInteger__get(diz.BlockingQueue__count)
; [eval] diz != null
(declare-const sys__result@655 Int)
; [exec]
; currentCount := __flatten_28
; [eval] currentCount == diz.BlockingQueue__capacity
(push) ; 5
(assert (not (not (= sys__result@655 $t@632))))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
(assert (not (= sys__result@655 $t@632)))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
; [then-branch 109] sys__result@655 == $t@632
(assert (= sys__result@655 $t@632))
; [exec]
; __flatten_29 := false
; [exec]
; sys__result := __flatten_29
; [exec]
; assert acc(diz.BlockingQueue__capacity, wildcard) && (diz.BlockingQueue__capacity > 0) && acc(diz.BlockingQueue__count, wildcard) && (diz.BlockingQueue__count != null) && acc(diz.BlockingQueue__first, write) && ((diz.BlockingQueue__first != null) ==> acc(Node__state(diz.BlockingQueue__first), write)) && acc(diz.BlockingQueue__putLock, wildcard) && acc(diz.BlockingQueue__takeLock, wildcard)
(declare-const $k@656 $Perm)
(assert ($Perm.isValidVar $k@656))
(assert ($Perm.isReadVar $k@656 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@656 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (< $k@656 $k@631))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@657 $Perm)
(assert ($Perm.isValidVar $k@657))
(assert ($Perm.isReadVar $k@657 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@657 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (< $k@657 $k@633))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 6
(assert (not (= $t@635 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 6
(push) ; 6
; [then-branch 110] $t@635 != Null
(declare-const $k@658 $Perm)
(assert ($Perm.isValidVar $k@658))
(assert ($Perm.isReadVar $k@658 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@658 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(push) ; 7
(assert (not (not (= $k@637 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (not (= $k@637 $Perm.No)))
(assert (< $k@658 $k@637))
(declare-const $k@659 $Perm)
(assert ($Perm.isValidVar $k@659))
(assert ($Perm.isReadVar $k@659 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@659 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(push) ; 7
(assert (not (not (= $k@639 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (not (= $k@639 $Perm.No)))
(assert (< $k@659 $k@639))
; [exec]
; inhale false
(pop) ; 6
; [dead else-branch 110] $t@635 == Null
(pop) ; 5
(push) ; 5
; [else-branch 109] sys__result@655 != $t@632
(assert (not (= sys__result@655 $t@632)))
(pop) ; 5
; [eval] !(currentCount == diz.BlockingQueue__capacity)
; [eval] currentCount == diz.BlockingQueue__capacity
(push) ; 5
(assert (not (= sys__result@655 $t@632)))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
(assert (not (not (= sys__result@655 $t@632))))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
; [then-branch 111] sys__result@655 != $t@632
(assert (not (= sys__result@655 $t@632)))
; [exec]
; inhale true
; [exec]
; inhale acc(Lock__lock_held(diz.BlockingQueue__putLock), write)
(push) ; 6
(assert (not (not (= $k@637 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= $k@637 $Perm.No)))
(declare-const $t@660 $Snap)
; [exec]
; c := -1
; [eval] -1
; [exec]
; __flatten_30 := AtomicInteger__get(diz.BlockingQueue__count)
; [eval] diz != null
(declare-const sys__result@661 Int)
; [exec]
; currentCount := __flatten_30
; [eval] currentCount < diz.BlockingQueue__capacity
(push) ; 6
(assert (not (not (< sys__result@661 $t@632))))
(check-sat)
; unknown
; 0.00s
(pop) ; 6
(push) ; 6
(assert (not (< sys__result@661 $t@632)))
(check-sat)
; unknown
; 0.00s
(pop) ; 6
(push) ; 6
; [then-branch 112] sys__result@661 < $t@632
(assert (< sys__result@661 $t@632))
; [exec]
; BlockingQueue__linkLast(diz, val)
; [eval] diz != null
(declare-const $k@662 $Perm)
(assert ($Perm.isValidVar $k@662))
(assert ($Perm.isReadVar $k@662 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@662 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@662 $k@631))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@663 $Perm)
(assert ($Perm.isValidVar $k@663))
(assert ($Perm.isReadVar $k@663 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@663 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@663 $k@633))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 7
(assert (not (= $t@635 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 7
(push) ; 7
; [then-branch 113] $t@635 != Null
(declare-const $k@664 $Perm)
(assert ($Perm.isValidVar $k@664))
(assert ($Perm.isReadVar $k@664 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@664 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (< $k@664 $k@637))
(declare-const $k@665 $Perm)
(assert ($Perm.isValidVar $k@665))
(assert ($Perm.isReadVar $k@665 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@665 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= $k@639 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= $k@639 $Perm.No)))
(assert (< $k@665 $k@639))
(declare-const $t@666 $Snap)
(declare-const $t@667 $Snap)
(assert (= $t@666 ($Snap.combine $t@667 $Snap.unit)))
(declare-const $t@668 $Snap)
(assert (= $t@667 ($Snap.combine $t@668 $Snap.unit)))
(declare-const $t@669 $Snap)
(assert (= $t@668 ($Snap.combine $t@669 $Snap.unit)))
(declare-const $t@670 $Snap)
(declare-const $t@671 $Ref)
(assert (= $t@669 ($Snap.combine $t@670 ($SortWrappers.$RefTo$Snap $t@671))))
(declare-const $t@672 $Snap)
(declare-const $t@673 $Ref)
(assert (= $t@670 ($Snap.combine $t@672 ($SortWrappers.$RefTo$Snap $t@673))))
(declare-const $t@674 $Snap)
(declare-const $t@675 $Snap)
(assert (= $t@672 ($Snap.combine $t@674 $t@675)))
(declare-const $t@676 $Snap)
(declare-const $t@677 $Ref)
(assert (= $t@674 ($Snap.combine $t@676 ($SortWrappers.$RefTo$Snap $t@677))))
(declare-const $t@678 $Snap)
(assert (= $t@676 ($Snap.combine $t@678 $Snap.unit)))
(declare-const $t@679 Int)
(declare-const $t@680 $Ref)
(assert (=
  $t@678
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@679)
    ($SortWrappers.$RefTo$Snap $t@680))))
(declare-const $t@681 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@679)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@681) $Snap.unit)))
(declare-const $k@682 $Perm)
(assert ($Perm.isValidVar $k@682))
(assert ($Perm.isReadVar $k@682 $Perm.Write))
(assert (implies (< $Perm.No (- $k@631 $k@662)) (= $t@681 $t@632)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 8
(assert (not (not (= (+ (- $k@631 $k@662) $k@682) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- $k@631 $k@662) $k@682) $Perm.No)))
(assert (> $t@681 0))
(declare-const $k@683 $Perm)
(assert ($Perm.isValidVar $k@683))
(assert ($Perm.isReadVar $k@683 $Perm.Write))
(assert (implies (< $Perm.No (- $k@633 $k@663)) (= $t@680 $t@634)))
; [eval] diz.BlockingQueue__count != null
(push) ; 8
(assert (not (not (= (+ (- $k@633 $k@663) $k@683) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- $k@633 $k@663) $k@683) $Perm.No)))
(assert (not (= $t@680 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 8
(assert (not (= $t@677 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= $t@677 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
(push) ; 8
; [then-branch 114] $t@677 != Null
(assert (not (= $t@677 $Ref.null)))
(declare-const $k@684 $Perm)
(assert ($Perm.isValidVar $k@684))
(assert ($Perm.isReadVar $k@684 $Perm.Write))
(assert (implies (< $Perm.No (- $k@637 $k@664)) (= $t@673 $t@638)))
(declare-const $k@685 $Perm)
(assert ($Perm.isValidVar $k@685))
(assert ($Perm.isReadVar $k@685 $Perm.Write))
(assert (implies (< $Perm.No (- $k@639 $k@665)) (= $t@671 $t@640)))
; [eval] diz.BlockingQueue__first != null
; [eval] (old(|BlockingQueue__contents(diz)|) == 0) ==> (BlockingQueue__contents(diz) == Seq(val))
; [eval] old(|BlockingQueue__contents(diz)|) == 0
; [eval] old(|BlockingQueue__contents(diz)|)
; [eval] |BlockingQueue__contents(diz)|
; [eval] BlockingQueue__contents(diz)
; [eval] diz != null
(declare-const $k@686 $Perm)
(assert ($Perm.isValidVar $k@686))
(assert ($Perm.isReadVar $k@686 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@686 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@686 $k@631))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@687 $Perm)
(assert ($Perm.isValidVar $k@687))
(assert ($Perm.isReadVar $k@687 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@687 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@687 $k@633))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 9
(assert (not (= $t@635 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
(push) ; 9
; [then-branch 115] $t@635 != Null
(declare-const $k@688 $Perm)
(assert ($Perm.isValidVar $k@688))
(assert ($Perm.isReadVar $k@688 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@688 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (< $k@688 $k@637))
(declare-const $k@689 $Perm)
(assert ($Perm.isValidVar $k@689))
(assert ($Perm.isReadVar $k@689 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@689 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (< $k@689 $k@639))
(pop) ; 9
; [dead else-branch 115] $t@635 == Null
(assert ($Perm.isValidVar $k@688))
(assert ($Perm.isReadVar $k@688 $Perm.Write))
(assert (< $k@688 $k@637))
(assert ($Perm.isValidVar $k@689))
(assert ($Perm.isReadVar $k@689 $Perm.Write))
(assert (< $k@689 $k@639))
(push) ; 9
(push) ; 10
(assert (not (not
  (=
    ($Seq.length
      ($BlockingQueue__contents ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine
                    ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@632))
                    $Snap.unit)
                  ($SortWrappers.$RefTo$Snap $t@634))
                $Snap.unit)
              ($SortWrappers.$RefTo$Snap $t@635))
            $t@636)
          ($SortWrappers.$RefTo$Snap $t@638))
        ($SortWrappers.$RefTo$Snap $t@640)) diz@621))
    0))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (=
  ($Seq.length
    ($BlockingQueue__contents ($Snap.combine
      ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@632))
                  $Snap.unit)
                ($SortWrappers.$RefTo$Snap $t@634))
              $Snap.unit)
            ($SortWrappers.$RefTo$Snap $t@635))
          $t@636)
        ($SortWrappers.$RefTo$Snap $t@638))
      ($SortWrappers.$RefTo$Snap $t@640)) diz@621))
  0)))
(check-sat)
; unknown
; 0.00s
(pop) ; 10
; [dead then-branch 116] |BlockingQueue__contents(diz@621;((((((((_, $t@632), _), $t@634), _), $t@635), $t@636), $t@638), $t@640))| == 0
(push) ; 10
; [else-branch 116] |BlockingQueue__contents(diz@621;((((((((_, $t@632), _), $t@634), _), $t@635), $t@636), $t@638), $t@640))| != 0
(assert (not
  (=
    ($Seq.length
      ($BlockingQueue__contents ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine
                    ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@632))
                    $Snap.unit)
                  ($SortWrappers.$RefTo$Snap $t@634))
                $Snap.unit)
              ($SortWrappers.$RefTo$Snap $t@635))
            $t@636)
          ($SortWrappers.$RefTo$Snap $t@638))
        ($SortWrappers.$RefTo$Snap $t@640)) diz@621))
    0)))
(pop) ; 10
(pop) ; 9
; [eval] (old(|BlockingQueue__contents(diz)|) != 0) ==> (BlockingQueue__contents(diz) == old(BlockingQueue__contents(diz)) ++ Seq(val))
; [eval] old(|BlockingQueue__contents(diz)|) != 0
; [eval] old(|BlockingQueue__contents(diz)|)
; [eval] |BlockingQueue__contents(diz)|
; [eval] BlockingQueue__contents(diz)
; [eval] diz != null
(declare-const $k@690 $Perm)
(assert ($Perm.isValidVar $k@690))
(assert ($Perm.isReadVar $k@690 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@690 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@690 $k@631))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@691 $Perm)
(assert ($Perm.isValidVar $k@691))
(assert ($Perm.isReadVar $k@691 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@691 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@691 $k@633))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 9
(assert (not (= $t@635 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
(push) ; 9
; [then-branch 117] $t@635 != Null
(declare-const $k@692 $Perm)
(assert ($Perm.isValidVar $k@692))
(assert ($Perm.isReadVar $k@692 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@692 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (< $k@692 $k@637))
(declare-const $k@693 $Perm)
(assert ($Perm.isValidVar $k@693))
(assert ($Perm.isReadVar $k@693 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@693 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (< $k@693 $k@639))
(pop) ; 9
; [dead else-branch 117] $t@635 == Null
(assert ($Perm.isValidVar $k@692))
(assert ($Perm.isReadVar $k@692 $Perm.Write))
(assert (< $k@692 $k@637))
(assert ($Perm.isValidVar $k@693))
(assert ($Perm.isReadVar $k@693 $Perm.Write))
(assert (< $k@693 $k@639))
(push) ; 9
(push) ; 10
(assert (not (=
  ($Seq.length
    ($BlockingQueue__contents ($Snap.combine
      ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@632))
                  $Snap.unit)
                ($SortWrappers.$RefTo$Snap $t@634))
              $Snap.unit)
            ($SortWrappers.$RefTo$Snap $t@635))
          $t@636)
        ($SortWrappers.$RefTo$Snap $t@638))
      ($SortWrappers.$RefTo$Snap $t@640)) diz@621))
  0)))
(check-sat)
; unknown
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not
  (=
    ($Seq.length
      ($BlockingQueue__contents ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine
                    ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@632))
                    $Snap.unit)
                  ($SortWrappers.$RefTo$Snap $t@634))
                $Snap.unit)
              ($SortWrappers.$RefTo$Snap $t@635))
            $t@636)
          ($SortWrappers.$RefTo$Snap $t@638))
        ($SortWrappers.$RefTo$Snap $t@640)) diz@621))
    0))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(push) ; 10
; [then-branch 118] |BlockingQueue__contents(diz@621;((((((((_, $t@632), _), $t@634), _), $t@635), $t@636), $t@638), $t@640))| != 0
(assert (not
  (=
    ($Seq.length
      ($BlockingQueue__contents ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine
                    ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@632))
                    $Snap.unit)
                  ($SortWrappers.$RefTo$Snap $t@634))
                $Snap.unit)
              ($SortWrappers.$RefTo$Snap $t@635))
            $t@636)
          ($SortWrappers.$RefTo$Snap $t@638))
        ($SortWrappers.$RefTo$Snap $t@640)) diz@621))
    0)))
; [eval] BlockingQueue__contents(diz) == old(BlockingQueue__contents(diz)) ++ Seq(val)
; [eval] BlockingQueue__contents(diz)
; [eval] diz != null
(declare-const $k@694 $Perm)
(assert ($Perm.isValidVar $k@694))
(assert ($Perm.isReadVar $k@694 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@694 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (< $k@694 (+ (- $k@631 $k@662) $k@682)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@695 $Perm)
(assert ($Perm.isValidVar $k@695))
(assert ($Perm.isReadVar $k@695 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@695 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (< $k@695 (+ (- $k@633 $k@663) $k@683)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 11
(assert (not (= $t@677 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 11
(push) ; 11
; [then-branch 119] $t@677 != Null
(declare-const $k@696 $Perm)
(assert ($Perm.isValidVar $k@696))
(assert ($Perm.isReadVar $k@696 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@696 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(push) ; 12
(assert (not (not (= (+ (- $k@637 $k@664) $k@684) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not (= (+ (- $k@637 $k@664) $k@684) $Perm.No)))
(assert (< $k@696 (+ (- $k@637 $k@664) $k@684)))
(declare-const $k@697 $Perm)
(assert ($Perm.isValidVar $k@697))
(assert ($Perm.isReadVar $k@697 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@697 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(push) ; 12
(assert (not (not (= (+ (- $k@639 $k@665) $k@685) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not (= (+ (- $k@639 $k@665) $k@685) $Perm.No)))
(assert (< $k@697 (+ (- $k@639 $k@665) $k@685)))
(pop) ; 11
; [dead else-branch 119] $t@677 == Null
(assert ($Perm.isValidVar $k@696))
(assert ($Perm.isReadVar $k@696 $Perm.Write))
(assert (not (= (+ (- $k@637 $k@664) $k@684) $Perm.No)))
(assert (< $k@696 (+ (- $k@637 $k@664) $k@684)))
(assert ($Perm.isValidVar $k@697))
(assert ($Perm.isReadVar $k@697 $Perm.Write))
(assert (not (= (+ (- $k@639 $k@665) $k@685) $Perm.No)))
(assert (< $k@697 (+ (- $k@639 $k@665) $k@685)))
; [eval] old(BlockingQueue__contents(diz)) ++ Seq(val)
; [eval] old(BlockingQueue__contents(diz))
; [eval] BlockingQueue__contents(diz)
; [eval] diz != null
(declare-const $k@698 $Perm)
(assert ($Perm.isValidVar $k@698))
(assert ($Perm.isReadVar $k@698 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@698 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (< $k@698 $k@631))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@699 $Perm)
(assert ($Perm.isValidVar $k@699))
(assert ($Perm.isReadVar $k@699 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@699 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (< $k@699 $k@633))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 11
(assert (not (= $t@635 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 11
(push) ; 11
; [then-branch 120] $t@635 != Null
(declare-const $k@700 $Perm)
(assert ($Perm.isValidVar $k@700))
(assert ($Perm.isReadVar $k@700 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@700 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (< $k@700 $k@637))
(declare-const $k@701 $Perm)
(assert ($Perm.isValidVar $k@701))
(assert ($Perm.isReadVar $k@701 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@701 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (< $k@701 $k@639))
(pop) ; 11
; [dead else-branch 120] $t@635 == Null
(assert ($Perm.isValidVar $k@700))
(assert ($Perm.isReadVar $k@700 $Perm.Write))
(assert (< $k@700 $k@637))
(assert ($Perm.isValidVar $k@701))
(assert ($Perm.isReadVar $k@701 $Perm.Write))
(assert (< $k@701 $k@639))
; [eval] Seq(val)
(assert (= ($Seq.length ($Seq.singleton val@622)) 1))
(pop) ; 10
; [dead else-branch 118] |BlockingQueue__contents(diz@621;((((((((_, $t@632), _), $t@634), _), $t@635), $t@636), $t@638), $t@640))| == 0
(pop) ; 9
(assert ($Perm.isValidVar $k@694))
(assert ($Perm.isReadVar $k@694 $Perm.Write))
(assert (< $k@694 (+ (- $k@631 $k@662) $k@682)))
(assert ($Perm.isValidVar $k@695))
(assert ($Perm.isReadVar $k@695 $Perm.Write))
(assert (< $k@695 (+ (- $k@633 $k@663) $k@683)))
(assert ($Perm.isValidVar $k@696))
(assert ($Perm.isReadVar $k@696 $Perm.Write))
(assert (not (= (+ (- $k@637 $k@664) $k@684) $Perm.No)))
(assert (< $k@696 (+ (- $k@637 $k@664) $k@684)))
(assert ($Perm.isValidVar $k@697))
(assert ($Perm.isReadVar $k@697 $Perm.Write))
(assert (not (= (+ (- $k@639 $k@665) $k@685) $Perm.No)))
(assert (< $k@697 (+ (- $k@639 $k@665) $k@685)))
(assert ($Perm.isValidVar $k@698))
(assert ($Perm.isReadVar $k@698 $Perm.Write))
(assert (< $k@698 $k@631))
(assert ($Perm.isValidVar $k@699))
(assert ($Perm.isReadVar $k@699 $Perm.Write))
(assert (< $k@699 $k@633))
(assert ($Perm.isValidVar $k@700))
(assert ($Perm.isReadVar $k@700 $Perm.Write))
(assert (< $k@700 $k@637))
(assert ($Perm.isValidVar $k@701))
(assert ($Perm.isReadVar $k@701 $Perm.Write))
(assert (< $k@701 $k@639))
(assert (= ($Seq.length ($Seq.singleton val@622)) 1))
(assert (implies
  (not
    (=
      ($Seq.length
        ($BlockingQueue__contents ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine
                    ($Snap.combine
                      ($Snap.combine
                        $Snap.unit
                        ($SortWrappers.IntTo$Snap $t@632))
                      $Snap.unit)
                    ($SortWrappers.$RefTo$Snap $t@634))
                  $Snap.unit)
                ($SortWrappers.$RefTo$Snap $t@635))
              $t@636)
            ($SortWrappers.$RefTo$Snap $t@638))
          ($SortWrappers.$RefTo$Snap $t@640)) diz@621))
      0))
  ($Seq.equal
    ($BlockingQueue__contents ($Snap.combine
      ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@681))
                  $Snap.unit)
                ($SortWrappers.$RefTo$Snap $t@680))
              $Snap.unit)
            ($SortWrappers.$RefTo$Snap $t@677))
          $t@675)
        ($SortWrappers.$RefTo$Snap $t@673))
      ($SortWrappers.$RefTo$Snap $t@671)) diz@621)
    ($Seq.append
      ($BlockingQueue__contents ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine
                    ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@632))
                    $Snap.unit)
                  ($SortWrappers.$RefTo$Snap $t@634))
                $Snap.unit)
              ($SortWrappers.$RefTo$Snap $t@635))
            $t@636)
          ($SortWrappers.$RefTo$Snap $t@638))
        ($SortWrappers.$RefTo$Snap $t@640)) diz@621)
      ($Seq.singleton val@622)))))
; [exec]
; __flatten_32 := AtomicInteger__getAndIncrement(diz.BlockingQueue__count)
; [eval] diz != null
(declare-const sys__result@702 Int)
; [exec]
; c := __flatten_32
; [eval] c + 1 < diz.BlockingQueue__capacity
; [eval] c + 1
(push) ; 9
(assert (not (not (< (+ sys__result@702 1) $t@681))))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
(push) ; 9
(assert (not (< (+ sys__result@702 1) $t@681)))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
(push) ; 9
; [then-branch 121] sys__result@702 + 1 < $t@681
(assert (< (+ sys__result@702 1) $t@681))
; [exec]
; assert acc(Lock__lock_held(diz.BlockingQueue__putLock), write)
(push) ; 10
(assert (not (= $t@638 $t@673)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
; [exec]
; exhale acc(Lock__lock_held(diz.BlockingQueue__putLock), write)
(push) ; 10
(assert (not (= $t@638 $t@673)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
; [exec]
; exhale true
; [eval] c == 0
(push) ; 10
(assert (not (not (= sys__result@702 0))))
(check-sat)
; unknown
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (= sys__result@702 0)))
(check-sat)
; unknown
; 0.00s
(pop) ; 10
(push) ; 10
; [then-branch 122] sys__result@702 == 0
(assert (= sys__result@702 0))
; [exec]
; inhale true
; [exec]
; inhale acc(Lock__lock_held(diz.BlockingQueue__takeLock), write)
(declare-const $t@703 $Snap)
; [exec]
; assert acc(Lock__lock_held(diz.BlockingQueue__takeLock), write)
; [exec]
; exhale acc(Lock__lock_held(diz.BlockingQueue__takeLock), write)
; [exec]
; exhale true
; [exec]
; __flatten_33 := c >= 0
; [eval] c >= 0
; [exec]
; sys__result := __flatten_33
; [exec]
; assert acc(diz.BlockingQueue__capacity, wildcard) && (diz.BlockingQueue__capacity > 0) && acc(diz.BlockingQueue__count, wildcard) && (diz.BlockingQueue__count != null) && acc(diz.BlockingQueue__first, write) && ((diz.BlockingQueue__first != null) ==> acc(Node__state(diz.BlockingQueue__first), write)) && acc(diz.BlockingQueue__putLock, wildcard) && acc(diz.BlockingQueue__takeLock, wildcard)
(declare-const $k@704 $Perm)
(assert ($Perm.isValidVar $k@704))
(assert ($Perm.isReadVar $k@704 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@704 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (< $k@704 (+ (- $k@631 $k@662) $k@682)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@705 $Perm)
(assert ($Perm.isValidVar $k@705))
(assert ($Perm.isReadVar $k@705 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@705 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (< $k@705 (+ (- $k@633 $k@663) $k@683)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 11
(assert (not (= $t@677 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 11
(push) ; 11
; [then-branch 123] $t@677 != Null
(declare-const $k@706 $Perm)
(assert ($Perm.isValidVar $k@706))
(assert ($Perm.isReadVar $k@706 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@706 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (< $k@706 (+ (- $k@637 $k@664) $k@684)))
(declare-const $k@707 $Perm)
(assert ($Perm.isValidVar $k@707))
(assert ($Perm.isReadVar $k@707 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@707 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (< $k@707 (+ (- $k@639 $k@665) $k@685)))
; [exec]
; inhale false
(pop) ; 11
; [dead else-branch 123] $t@677 == Null
(pop) ; 10
(push) ; 10
; [else-branch 122] sys__result@702 != 0
(assert (not (= sys__result@702 0)))
(pop) ; 10
; [eval] !(c == 0)
; [eval] c == 0
(push) ; 10
(assert (not (= sys__result@702 0)))
(check-sat)
; unknown
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= sys__result@702 0))))
(check-sat)
; unknown
; 0.00s
(pop) ; 10
(push) ; 10
; [then-branch 124] sys__result@702 != 0
(assert (not (= sys__result@702 0)))
; [exec]
; __flatten_33 := c >= 0
; [eval] c >= 0
; [exec]
; sys__result := __flatten_33
; [exec]
; assert acc(diz.BlockingQueue__capacity, wildcard) && (diz.BlockingQueue__capacity > 0) && acc(diz.BlockingQueue__count, wildcard) && (diz.BlockingQueue__count != null) && acc(diz.BlockingQueue__first, write) && ((diz.BlockingQueue__first != null) ==> acc(Node__state(diz.BlockingQueue__first), write)) && acc(diz.BlockingQueue__putLock, wildcard) && acc(diz.BlockingQueue__takeLock, wildcard)
(declare-const $k@708 $Perm)
(assert ($Perm.isValidVar $k@708))
(assert ($Perm.isReadVar $k@708 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@708 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (< $k@708 (+ (- $k@631 $k@662) $k@682)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@709 $Perm)
(assert ($Perm.isValidVar $k@709))
(assert ($Perm.isReadVar $k@709 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@709 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (< $k@709 (+ (- $k@633 $k@663) $k@683)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 11
(assert (not (= $t@677 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 11
(push) ; 11
; [then-branch 125] $t@677 != Null
(declare-const $k@710 $Perm)
(assert ($Perm.isValidVar $k@710))
(assert ($Perm.isReadVar $k@710 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@710 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (< $k@710 (+ (- $k@637 $k@664) $k@684)))
(declare-const $k@711 $Perm)
(assert ($Perm.isValidVar $k@711))
(assert ($Perm.isReadVar $k@711 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@711 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (< $k@711 (+ (- $k@639 $k@665) $k@685)))
; [exec]
; inhale false
(pop) ; 11
; [dead else-branch 125] $t@677 == Null
(pop) ; 10
(push) ; 10
; [else-branch 124] sys__result@702 == 0
(assert (= sys__result@702 0))
(pop) ; 10
(pop) ; 9
(push) ; 9
; [else-branch 121] !sys__result@702 + 1 < $t@681
(assert (not (< (+ sys__result@702 1) $t@681)))
(pop) ; 9
; [eval] !(c + 1 < diz.BlockingQueue__capacity)
; [eval] c + 1 < diz.BlockingQueue__capacity
; [eval] c + 1
(push) ; 9
(assert (not (< (+ sys__result@702 1) $t@681)))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
(push) ; 9
(assert (not (not (< (+ sys__result@702 1) $t@681))))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
(push) ; 9
; [then-branch 126] !sys__result@702 + 1 < $t@681
(assert (not (< (+ sys__result@702 1) $t@681)))
; [exec]
; exhale acc(Lock__lock_held(diz.BlockingQueue__putLock), write)
(push) ; 10
(assert (not (= $t@638 $t@673)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
; [exec]
; exhale true
; [eval] c == 0
(push) ; 10
(assert (not (not (= sys__result@702 0))))
(check-sat)
; unknown
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (= sys__result@702 0)))
(check-sat)
; unknown
; 0.00s
(pop) ; 10
(push) ; 10
; [then-branch 127] sys__result@702 == 0
(assert (= sys__result@702 0))
; [exec]
; inhale true
; [exec]
; inhale acc(Lock__lock_held(diz.BlockingQueue__takeLock), write)
(declare-const $t@712 $Snap)
; [exec]
; assert acc(Lock__lock_held(diz.BlockingQueue__takeLock), write)
; [exec]
; exhale acc(Lock__lock_held(diz.BlockingQueue__takeLock), write)
; [exec]
; exhale true
; [exec]
; __flatten_33 := c >= 0
; [eval] c >= 0
; [exec]
; sys__result := __flatten_33
; [exec]
; assert acc(diz.BlockingQueue__capacity, wildcard) && (diz.BlockingQueue__capacity > 0) && acc(diz.BlockingQueue__count, wildcard) && (diz.BlockingQueue__count != null) && acc(diz.BlockingQueue__first, write) && ((diz.BlockingQueue__first != null) ==> acc(Node__state(diz.BlockingQueue__first), write)) && acc(diz.BlockingQueue__putLock, wildcard) && acc(diz.BlockingQueue__takeLock, wildcard)
(declare-const $k@713 $Perm)
(assert ($Perm.isValidVar $k@713))
(assert ($Perm.isReadVar $k@713 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@713 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (< $k@713 (+ (- $k@631 $k@662) $k@682)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@714 $Perm)
(assert ($Perm.isValidVar $k@714))
(assert ($Perm.isReadVar $k@714 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@714 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (< $k@714 (+ (- $k@633 $k@663) $k@683)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 11
(assert (not (= $t@677 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 11
(push) ; 11
; [then-branch 128] $t@677 != Null
(declare-const $k@715 $Perm)
(assert ($Perm.isValidVar $k@715))
(assert ($Perm.isReadVar $k@715 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@715 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (< $k@715 (+ (- $k@637 $k@664) $k@684)))
(declare-const $k@716 $Perm)
(assert ($Perm.isValidVar $k@716))
(assert ($Perm.isReadVar $k@716 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@716 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (< $k@716 (+ (- $k@639 $k@665) $k@685)))
; [exec]
; inhale false
(pop) ; 11
; [dead else-branch 128] $t@677 == Null
(pop) ; 10
(push) ; 10
; [else-branch 127] sys__result@702 != 0
(assert (not (= sys__result@702 0)))
(pop) ; 10
; [eval] !(c == 0)
; [eval] c == 0
(push) ; 10
(assert (not (= sys__result@702 0)))
(check-sat)
; unknown
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= sys__result@702 0))))
(check-sat)
; unknown
; 0.00s
(pop) ; 10
(push) ; 10
; [then-branch 129] sys__result@702 != 0
(assert (not (= sys__result@702 0)))
; [exec]
; __flatten_33 := c >= 0
; [eval] c >= 0
; [exec]
; sys__result := __flatten_33
; [exec]
; assert acc(diz.BlockingQueue__capacity, wildcard) && (diz.BlockingQueue__capacity > 0) && acc(diz.BlockingQueue__count, wildcard) && (diz.BlockingQueue__count != null) && acc(diz.BlockingQueue__first, write) && ((diz.BlockingQueue__first != null) ==> acc(Node__state(diz.BlockingQueue__first), write)) && acc(diz.BlockingQueue__putLock, wildcard) && acc(diz.BlockingQueue__takeLock, wildcard)
(declare-const $k@717 $Perm)
(assert ($Perm.isValidVar $k@717))
(assert ($Perm.isReadVar $k@717 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@717 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (< $k@717 (+ (- $k@631 $k@662) $k@682)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@718 $Perm)
(assert ($Perm.isValidVar $k@718))
(assert ($Perm.isReadVar $k@718 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@718 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (< $k@718 (+ (- $k@633 $k@663) $k@683)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 11
(assert (not (= $t@677 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 11
(push) ; 11
; [then-branch 130] $t@677 != Null
(declare-const $k@719 $Perm)
(assert ($Perm.isValidVar $k@719))
(assert ($Perm.isReadVar $k@719 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@719 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (< $k@719 (+ (- $k@637 $k@664) $k@684)))
(declare-const $k@720 $Perm)
(assert ($Perm.isValidVar $k@720))
(assert ($Perm.isReadVar $k@720 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@720 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (< $k@720 (+ (- $k@639 $k@665) $k@685)))
; [exec]
; inhale false
(pop) ; 11
; [dead else-branch 130] $t@677 == Null
(pop) ; 10
(push) ; 10
; [else-branch 129] sys__result@702 == 0
(assert (= sys__result@702 0))
(pop) ; 10
(pop) ; 9
(push) ; 9
; [else-branch 126] sys__result@702 + 1 < $t@681
(assert (< (+ sys__result@702 1) $t@681))
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch 114] $t@677 == Null
(assert (= $t@677 $Ref.null))
(declare-const $k@721 $Perm)
(assert ($Perm.isValidVar $k@721))
(assert ($Perm.isReadVar $k@721 $Perm.Write))
(assert (implies (< $Perm.No (- $k@637 $k@664)) (= $t@673 $t@638)))
(declare-const $k@722 $Perm)
(assert ($Perm.isValidVar $k@722))
(assert ($Perm.isReadVar $k@722 $Perm.Write))
(assert (implies (< $Perm.No (- $k@639 $k@665)) (= $t@671 $t@640)))
; [eval] diz.BlockingQueue__first != null
(assert (not (= $t@677 $Ref.null)))
; [eval] (old(|BlockingQueue__contents(diz)|) == 0) ==> (BlockingQueue__contents(diz) == Seq(val))
; [eval] old(|BlockingQueue__contents(diz)|) == 0
; [eval] old(|BlockingQueue__contents(diz)|)
; [eval] |BlockingQueue__contents(diz)|
; [eval] BlockingQueue__contents(diz)
; [eval] diz != null
(declare-const $k@723 $Perm)
(assert ($Perm.isValidVar $k@723))
(assert ($Perm.isReadVar $k@723 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@723 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@723 $k@631))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@724 $Perm)
(assert ($Perm.isValidVar $k@724))
(assert ($Perm.isReadVar $k@724 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@724 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@724 $k@633))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 9
(assert (not (= $t@635 $Ref.null)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
; [dead then-branch 131] $t@635 != Null
; [dead else-branch 131] $t@635 == Null
(pop) ; 8
(pop) ; 7
; [dead else-branch 113] $t@635 == Null
(pop) ; 6
(push) ; 6
; [else-branch 112] !sys__result@661 < $t@632
(assert (not (< sys__result@661 $t@632)))
(pop) ; 6
; [eval] !(currentCount < diz.BlockingQueue__capacity)
; [eval] currentCount < diz.BlockingQueue__capacity
(push) ; 6
(assert (not (< sys__result@661 $t@632)))
(check-sat)
; unknown
; 0.00s
(pop) ; 6
(push) ; 6
(assert (not (not (< sys__result@661 $t@632))))
(check-sat)
; unknown
; 0.00s
(pop) ; 6
(push) ; 6
; [then-branch 132] !sys__result@661 < $t@632
(assert (not (< sys__result@661 $t@632)))
; [exec]
; exhale acc(Lock__lock_held(diz.BlockingQueue__putLock), write)
; [exec]
; exhale true
; [eval] c == 0
(push) ; 7
(assert (not (not (= (- 0 1) 0))))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(push) ; 7
(assert (not (= (- 0 1) 0)))
(check-sat)
; unknown
; 0.00s
(pop) ; 7
; [dead then-branch 133] -1 == 0
(push) ; 7
; [else-branch 133] -1 != 0
(assert (not (= (- 0 1) 0)))
(pop) ; 7
; [eval] !(c == 0)
; [eval] c == 0
(push) ; 7
(assert (not (= (- 0 1) 0)))
(check-sat)
; unknown
; 0.00s
(pop) ; 7
(push) ; 7
(assert (not (not (= (- 0 1) 0))))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(push) ; 7
; [then-branch 134] -1 != 0
(assert (not (= (- 0 1) 0)))
; [exec]
; __flatten_33 := c >= 0
; [eval] c >= 0
; [exec]
; sys__result := __flatten_33
; [exec]
; assert acc(diz.BlockingQueue__capacity, wildcard) && (diz.BlockingQueue__capacity > 0) && acc(diz.BlockingQueue__count, wildcard) && (diz.BlockingQueue__count != null) && acc(diz.BlockingQueue__first, write) && ((diz.BlockingQueue__first != null) ==> acc(Node__state(diz.BlockingQueue__first), write)) && acc(diz.BlockingQueue__putLock, wildcard) && acc(diz.BlockingQueue__takeLock, wildcard)
(declare-const $k@725 $Perm)
(assert ($Perm.isValidVar $k@725))
(assert ($Perm.isReadVar $k@725 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@725 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (< $k@725 $k@631))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@726 $Perm)
(assert ($Perm.isValidVar $k@726))
(assert ($Perm.isReadVar $k@726 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@726 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (< $k@726 $k@633))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 8
(assert (not (= $t@635 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
(push) ; 8
; [then-branch 135] $t@635 != Null
(declare-const $k@727 $Perm)
(assert ($Perm.isValidVar $k@727))
(assert ($Perm.isReadVar $k@727 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@727 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@727 $k@637))
(declare-const $k@728 $Perm)
(assert ($Perm.isValidVar $k@728))
(assert ($Perm.isReadVar $k@728 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@728 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(push) ; 9
(assert (not (not (= $k@639 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (not (= $k@639 $Perm.No)))
(assert (< $k@728 $k@639))
; [exec]
; inhale false
(pop) ; 8
; [dead else-branch 135] $t@635 == Null
(pop) ; 7
; [dead else-branch 134] -1 == 0
(pop) ; 6
(push) ; 6
; [else-branch 132] sys__result@661 < $t@632
(assert (< sys__result@661 $t@632))
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch 111] sys__result@655 == $t@632
(assert (= sys__result@655 $t@632))
(pop) ; 5
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch 107] $t@635 == Null
(assert (= $t@635 $Ref.null))
(declare-const $k@729 $Perm)
(assert ($Perm.isValidVar $k@729))
(assert ($Perm.isReadVar $k@729 $Perm.Write))
(declare-const $t@730 $Ref)
(declare-const $k@731 $Perm)
(assert ($Perm.isValidVar $k@731))
(assert ($Perm.isReadVar $k@731 $Perm.Write))
(declare-const $t@732 $Ref)
(push) ; 4
(declare-const $k@733 $Perm)
(assert ($Perm.isValidVar $k@733))
(assert ($Perm.isReadVar $k@733 $Perm.Write))
(declare-const $t@734 Int)
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 5
(assert (not (not (= $k@733 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@733 $Perm.No)))
(assert (> $t@734 0))
(declare-const $k@735 $Perm)
(assert ($Perm.isValidVar $k@735))
(assert ($Perm.isReadVar $k@735 $Perm.Write))
(declare-const $t@736 $Ref)
; [eval] diz.BlockingQueue__count != null
(push) ; 5
(assert (not (not (= $k@735 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@735 $Perm.No)))
(assert (not (= $t@736 $Ref.null)))
(declare-const $t@737 $Ref)
; [eval] diz.BlockingQueue__first != null
(push) ; 5
(assert (not (= $t@737 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
(assert (not (not (= $t@737 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
; [then-branch 136] $t@737 != Null
(assert (not (= $t@737 $Ref.null)))
(declare-const $t@738 $Snap)
(declare-const $k@739 $Perm)
(assert ($Perm.isValidVar $k@739))
(assert ($Perm.isReadVar $k@739 $Perm.Write))
(declare-const $t@740 $Ref)
(declare-const $k@741 $Perm)
(assert ($Perm.isValidVar $k@741))
(assert ($Perm.isReadVar $k@741 $Perm.Write))
(declare-const $t@742 $Ref)
(pop) ; 5
(push) ; 5
; [else-branch 136] $t@737 == Null
(assert (= $t@737 $Ref.null))
(declare-const $k@743 $Perm)
(assert ($Perm.isValidVar $k@743))
(assert ($Perm.isReadVar $k@743 $Perm.Write))
(declare-const $t@744 $Ref)
(declare-const $k@745 $Perm)
(assert ($Perm.isValidVar $k@745))
(assert ($Perm.isReadVar $k@745 $Perm.Write))
(declare-const $t@746 $Ref)
(pop) ; 5
(pop) ; 4
(push) ; 4
; [exec]
; __flatten_28 := AtomicInteger__get(diz.BlockingQueue__count)
; [eval] diz != null
(declare-const sys__result@747 Int)
; [exec]
; currentCount := __flatten_28
; [eval] currentCount == diz.BlockingQueue__capacity
(push) ; 5
(assert (not (not (= sys__result@747 $t@632))))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
(assert (not (= sys__result@747 $t@632)))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
; [then-branch 137] sys__result@747 == $t@632
(assert (= sys__result@747 $t@632))
; [exec]
; __flatten_29 := false
; [exec]
; sys__result := __flatten_29
; [exec]
; assert acc(diz.BlockingQueue__capacity, wildcard) && (diz.BlockingQueue__capacity > 0) && acc(diz.BlockingQueue__count, wildcard) && (diz.BlockingQueue__count != null) && acc(diz.BlockingQueue__first, write) && ((diz.BlockingQueue__first != null) ==> acc(Node__state(diz.BlockingQueue__first), write)) && acc(diz.BlockingQueue__putLock, wildcard) && acc(diz.BlockingQueue__takeLock, wildcard)
(declare-const $k@748 $Perm)
(assert ($Perm.isValidVar $k@748))
(assert ($Perm.isReadVar $k@748 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@748 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (< $k@748 $k@631))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@749 $Perm)
(assert ($Perm.isValidVar $k@749))
(assert ($Perm.isReadVar $k@749 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@749 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (< $k@749 $k@633))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 6
(assert (not (not (= $t@635 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 6
; [dead then-branch 138] $t@635 != Null
(push) ; 6
; [else-branch 138] $t@635 == Null
(declare-const $k@750 $Perm)
(assert ($Perm.isValidVar $k@750))
(assert ($Perm.isReadVar $k@750 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@750 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(push) ; 7
(assert (not (not (= $k@729 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (not (= $k@729 $Perm.No)))
(assert (< $k@750 $k@729))
(declare-const $k@751 $Perm)
(assert ($Perm.isValidVar $k@751))
(assert ($Perm.isReadVar $k@751 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@751 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(push) ; 7
(assert (not (not (= $k@731 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (not (= $k@731 $Perm.No)))
(assert (< $k@751 $k@731))
; [exec]
; inhale false
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch 137] sys__result@747 != $t@632
(assert (not (= sys__result@747 $t@632)))
(pop) ; 5
; [eval] !(currentCount == diz.BlockingQueue__capacity)
; [eval] currentCount == diz.BlockingQueue__capacity
(push) ; 5
(assert (not (= sys__result@747 $t@632)))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
(assert (not (not (= sys__result@747 $t@632))))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
; [then-branch 139] sys__result@747 != $t@632
(assert (not (= sys__result@747 $t@632)))
; [exec]
; inhale true
; [exec]
; inhale acc(Lock__lock_held(diz.BlockingQueue__putLock), write)
(push) ; 6
(assert (not (not (= $k@729 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= $k@729 $Perm.No)))
(declare-const $t@752 $Snap)
; [exec]
; c := -1
; [eval] -1
; [exec]
; __flatten_30 := AtomicInteger__get(diz.BlockingQueue__count)
; [eval] diz != null
(declare-const sys__result@753 Int)
; [exec]
; currentCount := __flatten_30
; [eval] currentCount < diz.BlockingQueue__capacity
(push) ; 6
(assert (not (not (< sys__result@753 $t@632))))
(check-sat)
; unknown
; 0.00s
(pop) ; 6
(push) ; 6
(assert (not (< sys__result@753 $t@632)))
(check-sat)
; unknown
; 0.00s
(pop) ; 6
(push) ; 6
; [then-branch 140] sys__result@753 < $t@632
(assert (< sys__result@753 $t@632))
; [exec]
; BlockingQueue__linkLast(diz, val)
; [eval] diz != null
(declare-const $k@754 $Perm)
(assert ($Perm.isValidVar $k@754))
(assert ($Perm.isReadVar $k@754 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@754 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@754 $k@631))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@755 $Perm)
(assert ($Perm.isValidVar $k@755))
(assert ($Perm.isReadVar $k@755 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@755 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@755 $k@633))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 7
(assert (not (not (= $t@635 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 7
; [dead then-branch 141] $t@635 != Null
(push) ; 7
; [else-branch 141] $t@635 == Null
(declare-const $k@756 $Perm)
(assert ($Perm.isValidVar $k@756))
(assert ($Perm.isReadVar $k@756 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@756 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (< $k@756 $k@729))
(declare-const $k@757 $Perm)
(assert ($Perm.isValidVar $k@757))
(assert ($Perm.isReadVar $k@757 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@757 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= $k@731 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= $k@731 $Perm.No)))
(assert (< $k@757 $k@731))
(declare-const $t@758 $Snap)
(declare-const $t@759 $Snap)
(assert (= $t@758 ($Snap.combine $t@759 $Snap.unit)))
(declare-const $t@760 $Snap)
(assert (= $t@759 ($Snap.combine $t@760 $Snap.unit)))
(declare-const $t@761 $Snap)
(assert (= $t@760 ($Snap.combine $t@761 $Snap.unit)))
(declare-const $t@762 $Snap)
(declare-const $t@763 $Ref)
(assert (= $t@761 ($Snap.combine $t@762 ($SortWrappers.$RefTo$Snap $t@763))))
(declare-const $t@764 $Snap)
(declare-const $t@765 $Ref)
(assert (= $t@762 ($Snap.combine $t@764 ($SortWrappers.$RefTo$Snap $t@765))))
(declare-const $t@766 $Snap)
(declare-const $t@767 $Snap)
(assert (= $t@764 ($Snap.combine $t@766 $t@767)))
(declare-const $t@768 $Snap)
(declare-const $t@769 $Ref)
(assert (= $t@766 ($Snap.combine $t@768 ($SortWrappers.$RefTo$Snap $t@769))))
(declare-const $t@770 $Snap)
(assert (= $t@768 ($Snap.combine $t@770 $Snap.unit)))
(declare-const $t@771 Int)
(declare-const $t@772 $Ref)
(assert (=
  $t@770
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@771)
    ($SortWrappers.$RefTo$Snap $t@772))))
(declare-const $t@773 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@771)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@773) $Snap.unit)))
(declare-const $k@774 $Perm)
(assert ($Perm.isValidVar $k@774))
(assert ($Perm.isReadVar $k@774 $Perm.Write))
(assert (implies (< $Perm.No (- $k@631 $k@754)) (= $t@773 $t@632)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 8
(assert (not (not (= (+ (- $k@631 $k@754) $k@774) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- $k@631 $k@754) $k@774) $Perm.No)))
(assert (> $t@773 0))
(declare-const $k@775 $Perm)
(assert ($Perm.isValidVar $k@775))
(assert ($Perm.isReadVar $k@775 $Perm.Write))
(assert (implies (< $Perm.No (- $k@633 $k@755)) (= $t@772 $t@634)))
; [eval] diz.BlockingQueue__count != null
(push) ; 8
(assert (not (not (= (+ (- $k@633 $k@755) $k@775) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- $k@633 $k@755) $k@775) $Perm.No)))
(assert (not (= $t@772 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 8
(assert (not (= $t@769 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= $t@769 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
(push) ; 8
; [then-branch 142] $t@769 != Null
(assert (not (= $t@769 $Ref.null)))
(declare-const $k@776 $Perm)
(assert ($Perm.isValidVar $k@776))
(assert ($Perm.isReadVar $k@776 $Perm.Write))
(assert (implies (< $Perm.No (- $k@729 $k@756)) (= $t@765 $t@730)))
(declare-const $k@777 $Perm)
(assert ($Perm.isValidVar $k@777))
(assert ($Perm.isReadVar $k@777 $Perm.Write))
(assert (implies (< $Perm.No (- $k@731 $k@757)) (= $t@763 $t@732)))
; [eval] diz.BlockingQueue__first != null
; [eval] (old(|BlockingQueue__contents(diz)|) == 0) ==> (BlockingQueue__contents(diz) == Seq(val))
; [eval] old(|BlockingQueue__contents(diz)|) == 0
; [eval] old(|BlockingQueue__contents(diz)|)
; [eval] |BlockingQueue__contents(diz)|
; [eval] BlockingQueue__contents(diz)
; [eval] diz != null
(declare-const $k@778 $Perm)
(assert ($Perm.isValidVar $k@778))
(assert ($Perm.isReadVar $k@778 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@778 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@778 $k@631))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@779 $Perm)
(assert ($Perm.isValidVar $k@779))
(assert ($Perm.isReadVar $k@779 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@779 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@779 $k@633))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 9
(assert (not (not (= $t@635 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
; [dead then-branch 143] $t@635 != Null
(push) ; 9
; [else-branch 143] $t@635 == Null
(declare-const $k@780 $Perm)
(assert ($Perm.isValidVar $k@780))
(assert ($Perm.isReadVar $k@780 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@780 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (< $k@780 $k@729))
(declare-const $k@781 $Perm)
(assert ($Perm.isValidVar $k@781))
(assert ($Perm.isReadVar $k@781 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@781 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (< $k@781 $k@731))
(pop) ; 9
(assert ($Perm.isValidVar $k@780))
(assert ($Perm.isReadVar $k@780 $Perm.Write))
(assert (< $k@780 $k@729))
(assert ($Perm.isValidVar $k@781))
(assert ($Perm.isReadVar $k@781 $Perm.Write))
(assert (< $k@781 $k@731))
(push) ; 9
(push) ; 10
(assert (not (not
  (=
    ($Seq.length
      ($BlockingQueue__contents ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine
                    ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@632))
                    $Snap.unit)
                  ($SortWrappers.$RefTo$Snap $t@634))
                $Snap.unit)
              ($SortWrappers.$RefTo$Snap $t@635))
            $Snap.unit)
          ($SortWrappers.$RefTo$Snap $t@730))
        ($SortWrappers.$RefTo$Snap $t@732)) diz@621))
    0))))
(check-sat)
; unknown
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (=
  ($Seq.length
    ($BlockingQueue__contents ($Snap.combine
      ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@632))
                  $Snap.unit)
                ($SortWrappers.$RefTo$Snap $t@634))
              $Snap.unit)
            ($SortWrappers.$RefTo$Snap $t@635))
          $Snap.unit)
        ($SortWrappers.$RefTo$Snap $t@730))
      ($SortWrappers.$RefTo$Snap $t@732)) diz@621))
  0)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(push) ; 10
; [then-branch 144] |BlockingQueue__contents(diz@621;((((((((_, $t@632), _), $t@634), _), $t@635), _), $t@730), $t@732))| == 0
(assert (=
  ($Seq.length
    ($BlockingQueue__contents ($Snap.combine
      ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@632))
                  $Snap.unit)
                ($SortWrappers.$RefTo$Snap $t@634))
              $Snap.unit)
            ($SortWrappers.$RefTo$Snap $t@635))
          $Snap.unit)
        ($SortWrappers.$RefTo$Snap $t@730))
      ($SortWrappers.$RefTo$Snap $t@732)) diz@621))
  0))
; [eval] BlockingQueue__contents(diz) == Seq(val)
; [eval] BlockingQueue__contents(diz)
; [eval] diz != null
(declare-const $k@782 $Perm)
(assert ($Perm.isValidVar $k@782))
(assert ($Perm.isReadVar $k@782 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@782 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (< $k@782 (+ (- $k@631 $k@754) $k@774)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@783 $Perm)
(assert ($Perm.isValidVar $k@783))
(assert ($Perm.isReadVar $k@783 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@783 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (< $k@783 (+ (- $k@633 $k@755) $k@775)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 11
(assert (not (= $t@769 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 11
(push) ; 11
; [then-branch 145] $t@769 != Null
(declare-const $k@784 $Perm)
(assert ($Perm.isValidVar $k@784))
(assert ($Perm.isReadVar $k@784 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@784 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(push) ; 12
(assert (not (not (= (+ (- $k@729 $k@756) $k@776) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not (= (+ (- $k@729 $k@756) $k@776) $Perm.No)))
(assert (< $k@784 (+ (- $k@729 $k@756) $k@776)))
(declare-const $k@785 $Perm)
(assert ($Perm.isValidVar $k@785))
(assert ($Perm.isReadVar $k@785 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@785 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(push) ; 12
(assert (not (not (= (+ (- $k@731 $k@757) $k@777) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not (= (+ (- $k@731 $k@757) $k@777) $Perm.No)))
(assert (< $k@785 (+ (- $k@731 $k@757) $k@777)))
(pop) ; 11
; [dead else-branch 145] $t@769 == Null
(assert ($Perm.isValidVar $k@784))
(assert ($Perm.isReadVar $k@784 $Perm.Write))
(assert (not (= (+ (- $k@729 $k@756) $k@776) $Perm.No)))
(assert (< $k@784 (+ (- $k@729 $k@756) $k@776)))
(assert ($Perm.isValidVar $k@785))
(assert ($Perm.isReadVar $k@785 $Perm.Write))
(assert (not (= (+ (- $k@731 $k@757) $k@777) $Perm.No)))
(assert (< $k@785 (+ (- $k@731 $k@757) $k@777)))
; [eval] Seq(val)
(assert (= ($Seq.length ($Seq.singleton val@622)) 1))
(pop) ; 10
; [dead else-branch 144] |BlockingQueue__contents(diz@621;((((((((_, $t@632), _), $t@634), _), $t@635), _), $t@730), $t@732))| != 0
(pop) ; 9
(assert ($Perm.isValidVar $k@782))
(assert ($Perm.isReadVar $k@782 $Perm.Write))
(assert (< $k@782 (+ (- $k@631 $k@754) $k@774)))
(assert ($Perm.isValidVar $k@783))
(assert ($Perm.isReadVar $k@783 $Perm.Write))
(assert (< $k@783 (+ (- $k@633 $k@755) $k@775)))
(assert ($Perm.isValidVar $k@784))
(assert ($Perm.isReadVar $k@784 $Perm.Write))
(assert (not (= (+ (- $k@729 $k@756) $k@776) $Perm.No)))
(assert (< $k@784 (+ (- $k@729 $k@756) $k@776)))
(assert ($Perm.isValidVar $k@785))
(assert ($Perm.isReadVar $k@785 $Perm.Write))
(assert (not (= (+ (- $k@731 $k@757) $k@777) $Perm.No)))
(assert (< $k@785 (+ (- $k@731 $k@757) $k@777)))
(assert (= ($Seq.length ($Seq.singleton val@622)) 1))
(assert (implies
  (=
    ($Seq.length
      ($BlockingQueue__contents ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine
                    ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@632))
                    $Snap.unit)
                  ($SortWrappers.$RefTo$Snap $t@634))
                $Snap.unit)
              ($SortWrappers.$RefTo$Snap $t@635))
            $Snap.unit)
          ($SortWrappers.$RefTo$Snap $t@730))
        ($SortWrappers.$RefTo$Snap $t@732)) diz@621))
    0)
  ($Seq.equal
    ($BlockingQueue__contents ($Snap.combine
      ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@773))
                  $Snap.unit)
                ($SortWrappers.$RefTo$Snap $t@772))
              $Snap.unit)
            ($SortWrappers.$RefTo$Snap $t@769))
          $t@767)
        ($SortWrappers.$RefTo$Snap $t@765))
      ($SortWrappers.$RefTo$Snap $t@763)) diz@621)
    ($Seq.singleton val@622))))
; [eval] (old(|BlockingQueue__contents(diz)|) != 0) ==> (BlockingQueue__contents(diz) == old(BlockingQueue__contents(diz)) ++ Seq(val))
; [eval] old(|BlockingQueue__contents(diz)|) != 0
; [eval] old(|BlockingQueue__contents(diz)|)
; [eval] |BlockingQueue__contents(diz)|
; [eval] BlockingQueue__contents(diz)
; [eval] diz != null
(declare-const $k@786 $Perm)
(assert ($Perm.isValidVar $k@786))
(assert ($Perm.isReadVar $k@786 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@786 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@786 $k@631))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@787 $Perm)
(assert ($Perm.isValidVar $k@787))
(assert ($Perm.isReadVar $k@787 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@787 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@787 $k@633))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 9
(assert (not (not (= $t@635 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
; [dead then-branch 146] $t@635 != Null
(push) ; 9
; [else-branch 146] $t@635 == Null
(declare-const $k@788 $Perm)
(assert ($Perm.isValidVar $k@788))
(assert ($Perm.isReadVar $k@788 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@788 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (< $k@788 $k@729))
(declare-const $k@789 $Perm)
(assert ($Perm.isValidVar $k@789))
(assert ($Perm.isReadVar $k@789 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@789 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (< $k@789 $k@731))
(pop) ; 9
(assert ($Perm.isValidVar $k@788))
(assert ($Perm.isReadVar $k@788 $Perm.Write))
(assert (< $k@788 $k@729))
(assert ($Perm.isValidVar $k@789))
(assert ($Perm.isReadVar $k@789 $Perm.Write))
(assert (< $k@789 $k@731))
(push) ; 9
(push) ; 10
(assert (not (=
  ($Seq.length
    ($BlockingQueue__contents ($Snap.combine
      ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@632))
                  $Snap.unit)
                ($SortWrappers.$RefTo$Snap $t@634))
              $Snap.unit)
            ($SortWrappers.$RefTo$Snap $t@635))
          $Snap.unit)
        ($SortWrappers.$RefTo$Snap $t@730))
      ($SortWrappers.$RefTo$Snap $t@732)) diz@621))
  0)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not
  (=
    ($Seq.length
      ($BlockingQueue__contents ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine
                    ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@632))
                    $Snap.unit)
                  ($SortWrappers.$RefTo$Snap $t@634))
                $Snap.unit)
              ($SortWrappers.$RefTo$Snap $t@635))
            $Snap.unit)
          ($SortWrappers.$RefTo$Snap $t@730))
        ($SortWrappers.$RefTo$Snap $t@732)) diz@621))
    0))))
(check-sat)
; unknown
; 0.00s
(pop) ; 10
; [dead then-branch 147] |BlockingQueue__contents(diz@621;((((((((_, $t@632), _), $t@634), _), $t@635), _), $t@730), $t@732))| != 0
(push) ; 10
; [else-branch 147] |BlockingQueue__contents(diz@621;((((((((_, $t@632), _), $t@634), _), $t@635), _), $t@730), $t@732))| == 0
(assert (=
  ($Seq.length
    ($BlockingQueue__contents ($Snap.combine
      ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@632))
                  $Snap.unit)
                ($SortWrappers.$RefTo$Snap $t@634))
              $Snap.unit)
            ($SortWrappers.$RefTo$Snap $t@635))
          $Snap.unit)
        ($SortWrappers.$RefTo$Snap $t@730))
      ($SortWrappers.$RefTo$Snap $t@732)) diz@621))
  0))
(pop) ; 10
(pop) ; 9
; [exec]
; __flatten_32 := AtomicInteger__getAndIncrement(diz.BlockingQueue__count)
; [eval] diz != null
(declare-const sys__result@790 Int)
; [exec]
; c := __flatten_32
; [eval] c + 1 < diz.BlockingQueue__capacity
; [eval] c + 1
(push) ; 9
(assert (not (not (< (+ sys__result@790 1) $t@773))))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
(push) ; 9
(assert (not (< (+ sys__result@790 1) $t@773)))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
(push) ; 9
; [then-branch 148] sys__result@790 + 1 < $t@773
(assert (< (+ sys__result@790 1) $t@773))
; [exec]
; assert acc(Lock__lock_held(diz.BlockingQueue__putLock), write)
(push) ; 10
(assert (not (= $t@730 $t@765)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
; [exec]
; exhale acc(Lock__lock_held(diz.BlockingQueue__putLock), write)
(push) ; 10
(assert (not (= $t@730 $t@765)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
; [exec]
; exhale true
; [eval] c == 0
(push) ; 10
(assert (not (not (= sys__result@790 0))))
(check-sat)
; unknown
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (= sys__result@790 0)))
(check-sat)
; unknown
; 0.00s
(pop) ; 10
(push) ; 10
; [then-branch 149] sys__result@790 == 0
(assert (= sys__result@790 0))
; [exec]
; inhale true
; [exec]
; inhale acc(Lock__lock_held(diz.BlockingQueue__takeLock), write)
(declare-const $t@791 $Snap)
; [exec]
; assert acc(Lock__lock_held(diz.BlockingQueue__takeLock), write)
; [exec]
; exhale acc(Lock__lock_held(diz.BlockingQueue__takeLock), write)
; [exec]
; exhale true
; [exec]
; __flatten_33 := c >= 0
; [eval] c >= 0
; [exec]
; sys__result := __flatten_33
; [exec]
; assert acc(diz.BlockingQueue__capacity, wildcard) && (diz.BlockingQueue__capacity > 0) && acc(diz.BlockingQueue__count, wildcard) && (diz.BlockingQueue__count != null) && acc(diz.BlockingQueue__first, write) && ((diz.BlockingQueue__first != null) ==> acc(Node__state(diz.BlockingQueue__first), write)) && acc(diz.BlockingQueue__putLock, wildcard) && acc(diz.BlockingQueue__takeLock, wildcard)
(declare-const $k@792 $Perm)
(assert ($Perm.isValidVar $k@792))
(assert ($Perm.isReadVar $k@792 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@792 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (< $k@792 (+ (- $k@631 $k@754) $k@774)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@793 $Perm)
(assert ($Perm.isValidVar $k@793))
(assert ($Perm.isReadVar $k@793 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@793 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (< $k@793 (+ (- $k@633 $k@755) $k@775)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 11
(assert (not (= $t@769 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 11
(push) ; 11
; [then-branch 150] $t@769 != Null
(declare-const $k@794 $Perm)
(assert ($Perm.isValidVar $k@794))
(assert ($Perm.isReadVar $k@794 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@794 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (< $k@794 (+ (- $k@729 $k@756) $k@776)))
(declare-const $k@795 $Perm)
(assert ($Perm.isValidVar $k@795))
(assert ($Perm.isReadVar $k@795 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@795 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (< $k@795 (+ (- $k@731 $k@757) $k@777)))
; [exec]
; inhale false
(pop) ; 11
; [dead else-branch 150] $t@769 == Null
(pop) ; 10
(push) ; 10
; [else-branch 149] sys__result@790 != 0
(assert (not (= sys__result@790 0)))
(pop) ; 10
; [eval] !(c == 0)
; [eval] c == 0
(push) ; 10
(assert (not (= sys__result@790 0)))
(check-sat)
; unknown
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= sys__result@790 0))))
(check-sat)
; unknown
; 0.00s
(pop) ; 10
(push) ; 10
; [then-branch 151] sys__result@790 != 0
(assert (not (= sys__result@790 0)))
; [exec]
; __flatten_33 := c >= 0
; [eval] c >= 0
; [exec]
; sys__result := __flatten_33
; [exec]
; assert acc(diz.BlockingQueue__capacity, wildcard) && (diz.BlockingQueue__capacity > 0) && acc(diz.BlockingQueue__count, wildcard) && (diz.BlockingQueue__count != null) && acc(diz.BlockingQueue__first, write) && ((diz.BlockingQueue__first != null) ==> acc(Node__state(diz.BlockingQueue__first), write)) && acc(diz.BlockingQueue__putLock, wildcard) && acc(diz.BlockingQueue__takeLock, wildcard)
(declare-const $k@796 $Perm)
(assert ($Perm.isValidVar $k@796))
(assert ($Perm.isReadVar $k@796 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@796 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (< $k@796 (+ (- $k@631 $k@754) $k@774)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@797 $Perm)
(assert ($Perm.isValidVar $k@797))
(assert ($Perm.isReadVar $k@797 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@797 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (< $k@797 (+ (- $k@633 $k@755) $k@775)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 11
(assert (not (= $t@769 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 11
(push) ; 11
; [then-branch 152] $t@769 != Null
(declare-const $k@798 $Perm)
(assert ($Perm.isValidVar $k@798))
(assert ($Perm.isReadVar $k@798 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@798 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (< $k@798 (+ (- $k@729 $k@756) $k@776)))
(declare-const $k@799 $Perm)
(assert ($Perm.isValidVar $k@799))
(assert ($Perm.isReadVar $k@799 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@799 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (< $k@799 (+ (- $k@731 $k@757) $k@777)))
; [exec]
; inhale false
(pop) ; 11
; [dead else-branch 152] $t@769 == Null
(pop) ; 10
(push) ; 10
; [else-branch 151] sys__result@790 == 0
(assert (= sys__result@790 0))
(pop) ; 10
(pop) ; 9
(push) ; 9
; [else-branch 148] !sys__result@790 + 1 < $t@773
(assert (not (< (+ sys__result@790 1) $t@773)))
(pop) ; 9
; [eval] !(c + 1 < diz.BlockingQueue__capacity)
; [eval] c + 1 < diz.BlockingQueue__capacity
; [eval] c + 1
(push) ; 9
(assert (not (< (+ sys__result@790 1) $t@773)))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
(push) ; 9
(assert (not (not (< (+ sys__result@790 1) $t@773))))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
(push) ; 9
; [then-branch 153] !sys__result@790 + 1 < $t@773
(assert (not (< (+ sys__result@790 1) $t@773)))
; [exec]
; exhale acc(Lock__lock_held(diz.BlockingQueue__putLock), write)
(push) ; 10
(assert (not (= $t@730 $t@765)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
; [exec]
; exhale true
; [eval] c == 0
(push) ; 10
(assert (not (not (= sys__result@790 0))))
(check-sat)
; unknown
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (= sys__result@790 0)))
(check-sat)
; unknown
; 0.00s
(pop) ; 10
(push) ; 10
; [then-branch 154] sys__result@790 == 0
(assert (= sys__result@790 0))
; [exec]
; inhale true
; [exec]
; inhale acc(Lock__lock_held(diz.BlockingQueue__takeLock), write)
(declare-const $t@800 $Snap)
; [exec]
; assert acc(Lock__lock_held(diz.BlockingQueue__takeLock), write)
; [exec]
; exhale acc(Lock__lock_held(diz.BlockingQueue__takeLock), write)
; [exec]
; exhale true
; [exec]
; __flatten_33 := c >= 0
; [eval] c >= 0
; [exec]
; sys__result := __flatten_33
; [exec]
; assert acc(diz.BlockingQueue__capacity, wildcard) && (diz.BlockingQueue__capacity > 0) && acc(diz.BlockingQueue__count, wildcard) && (diz.BlockingQueue__count != null) && acc(diz.BlockingQueue__first, write) && ((diz.BlockingQueue__first != null) ==> acc(Node__state(diz.BlockingQueue__first), write)) && acc(diz.BlockingQueue__putLock, wildcard) && acc(diz.BlockingQueue__takeLock, wildcard)
(declare-const $k@801 $Perm)
(assert ($Perm.isValidVar $k@801))
(assert ($Perm.isReadVar $k@801 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@801 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (< $k@801 (+ (- $k@631 $k@754) $k@774)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@802 $Perm)
(assert ($Perm.isValidVar $k@802))
(assert ($Perm.isReadVar $k@802 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@802 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (< $k@802 (+ (- $k@633 $k@755) $k@775)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 11
(assert (not (= $t@769 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 11
(push) ; 11
; [then-branch 155] $t@769 != Null
(declare-const $k@803 $Perm)
(assert ($Perm.isValidVar $k@803))
(assert ($Perm.isReadVar $k@803 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@803 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (< $k@803 (+ (- $k@729 $k@756) $k@776)))
(declare-const $k@804 $Perm)
(assert ($Perm.isValidVar $k@804))
(assert ($Perm.isReadVar $k@804 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@804 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (< $k@804 (+ (- $k@731 $k@757) $k@777)))
; [exec]
; inhale false
(pop) ; 11
; [dead else-branch 155] $t@769 == Null
(pop) ; 10
(push) ; 10
; [else-branch 154] sys__result@790 != 0
(assert (not (= sys__result@790 0)))
(pop) ; 10
; [eval] !(c == 0)
; [eval] c == 0
(push) ; 10
(assert (not (= sys__result@790 0)))
(check-sat)
; unknown
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= sys__result@790 0))))
(check-sat)
; unknown
; 0.00s
(pop) ; 10
(push) ; 10
; [then-branch 156] sys__result@790 != 0
(assert (not (= sys__result@790 0)))
; [exec]
; __flatten_33 := c >= 0
; [eval] c >= 0
; [exec]
; sys__result := __flatten_33
; [exec]
; assert acc(diz.BlockingQueue__capacity, wildcard) && (diz.BlockingQueue__capacity > 0) && acc(diz.BlockingQueue__count, wildcard) && (diz.BlockingQueue__count != null) && acc(diz.BlockingQueue__first, write) && ((diz.BlockingQueue__first != null) ==> acc(Node__state(diz.BlockingQueue__first), write)) && acc(diz.BlockingQueue__putLock, wildcard) && acc(diz.BlockingQueue__takeLock, wildcard)
(declare-const $k@805 $Perm)
(assert ($Perm.isValidVar $k@805))
(assert ($Perm.isReadVar $k@805 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@805 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (< $k@805 (+ (- $k@631 $k@754) $k@774)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@806 $Perm)
(assert ($Perm.isValidVar $k@806))
(assert ($Perm.isReadVar $k@806 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@806 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (< $k@806 (+ (- $k@633 $k@755) $k@775)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 11
(assert (not (= $t@769 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 11
(push) ; 11
; [then-branch 157] $t@769 != Null
(declare-const $k@807 $Perm)
(assert ($Perm.isValidVar $k@807))
(assert ($Perm.isReadVar $k@807 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@807 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (< $k@807 (+ (- $k@729 $k@756) $k@776)))
(declare-const $k@808 $Perm)
(assert ($Perm.isValidVar $k@808))
(assert ($Perm.isReadVar $k@808 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@808 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (< $k@808 (+ (- $k@731 $k@757) $k@777)))
; [exec]
; inhale false
(pop) ; 11
; [dead else-branch 157] $t@769 == Null
(pop) ; 10
(push) ; 10
; [else-branch 156] sys__result@790 == 0
(assert (= sys__result@790 0))
(pop) ; 10
(pop) ; 9
(push) ; 9
; [else-branch 153] sys__result@790 + 1 < $t@773
(assert (< (+ sys__result@790 1) $t@773))
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch 142] $t@769 == Null
(assert (= $t@769 $Ref.null))
(declare-const $k@809 $Perm)
(assert ($Perm.isValidVar $k@809))
(assert ($Perm.isReadVar $k@809 $Perm.Write))
(assert (implies (< $Perm.No (- $k@729 $k@756)) (= $t@765 $t@730)))
(declare-const $k@810 $Perm)
(assert ($Perm.isValidVar $k@810))
(assert ($Perm.isReadVar $k@810 $Perm.Write))
(assert (implies (< $Perm.No (- $k@731 $k@757)) (= $t@763 $t@732)))
; [eval] diz.BlockingQueue__first != null
(assert (not (= $t@769 $Ref.null)))
; [eval] (old(|BlockingQueue__contents(diz)|) == 0) ==> (BlockingQueue__contents(diz) == Seq(val))
; [eval] old(|BlockingQueue__contents(diz)|) == 0
; [eval] old(|BlockingQueue__contents(diz)|)
; [eval] |BlockingQueue__contents(diz)|
; [eval] BlockingQueue__contents(diz)
; [eval] diz != null
(declare-const $k@811 $Perm)
(assert ($Perm.isValidVar $k@811))
(assert ($Perm.isReadVar $k@811 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@811 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@811 $k@631))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@812 $Perm)
(assert ($Perm.isValidVar $k@812))
(assert ($Perm.isReadVar $k@812 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@812 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@812 $k@633))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 9
(assert (not (not (= $t@635 $Ref.null))))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
; [dead then-branch 158] $t@635 != Null
; [dead else-branch 158] $t@635 == Null
(pop) ; 8
(pop) ; 7
(pop) ; 6
(push) ; 6
; [else-branch 140] !sys__result@753 < $t@632
(assert (not (< sys__result@753 $t@632)))
(pop) ; 6
; [eval] !(currentCount < diz.BlockingQueue__capacity)
; [eval] currentCount < diz.BlockingQueue__capacity
(push) ; 6
(assert (not (< sys__result@753 $t@632)))
(check-sat)
; unknown
; 0.00s
(pop) ; 6
(push) ; 6
(assert (not (not (< sys__result@753 $t@632))))
(check-sat)
; unknown
; 0.00s
(pop) ; 6
(push) ; 6
; [then-branch 159] !sys__result@753 < $t@632
(assert (not (< sys__result@753 $t@632)))
; [exec]
; exhale acc(Lock__lock_held(diz.BlockingQueue__putLock), write)
; [exec]
; exhale true
; [eval] c == 0
(push) ; 7
(assert (not (not (= (- 0 1) 0))))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(push) ; 7
(assert (not (= (- 0 1) 0)))
(check-sat)
; unknown
; 0.00s
(pop) ; 7
; [dead then-branch 160] -1 == 0
(push) ; 7
; [else-branch 160] -1 != 0
(assert (not (= (- 0 1) 0)))
(pop) ; 7
; [eval] !(c == 0)
; [eval] c == 0
(push) ; 7
(assert (not (= (- 0 1) 0)))
(check-sat)
; unknown
; 0.00s
(pop) ; 7
(push) ; 7
(assert (not (not (= (- 0 1) 0))))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(push) ; 7
; [then-branch 161] -1 != 0
(assert (not (= (- 0 1) 0)))
; [exec]
; __flatten_33 := c >= 0
; [eval] c >= 0
; [exec]
; sys__result := __flatten_33
; [exec]
; assert acc(diz.BlockingQueue__capacity, wildcard) && (diz.BlockingQueue__capacity > 0) && acc(diz.BlockingQueue__count, wildcard) && (diz.BlockingQueue__count != null) && acc(diz.BlockingQueue__first, write) && ((diz.BlockingQueue__first != null) ==> acc(Node__state(diz.BlockingQueue__first), write)) && acc(diz.BlockingQueue__putLock, wildcard) && acc(diz.BlockingQueue__takeLock, wildcard)
(declare-const $k@813 $Perm)
(assert ($Perm.isValidVar $k@813))
(assert ($Perm.isReadVar $k@813 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@813 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (< $k@813 $k@631))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@814 $Perm)
(assert ($Perm.isValidVar $k@814))
(assert ($Perm.isReadVar $k@814 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@814 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (< $k@814 $k@633))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 8
(assert (not (not (= $t@635 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
; [dead then-branch 162] $t@635 != Null
(push) ; 8
; [else-branch 162] $t@635 == Null
(declare-const $k@815 $Perm)
(assert ($Perm.isValidVar $k@815))
(assert ($Perm.isReadVar $k@815 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@815 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@815 $k@729))
(declare-const $k@816 $Perm)
(assert ($Perm.isValidVar $k@816))
(assert ($Perm.isReadVar $k@816 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@816 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(push) ; 9
(assert (not (not (= $k@731 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (not (= $k@731 $Perm.No)))
(assert (< $k@816 $k@731))
; [exec]
; inhale false
(pop) ; 8
(pop) ; 7
; [dead else-branch 161] -1 == 0
(pop) ; 6
(push) ; 6
; [else-branch 159] sys__result@753 < $t@632
(assert (< sys__result@753 $t@632))
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch 139] sys__result@747 == $t@632
(assert (= sys__result@747 $t@632))
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
; ---------- BlockingQueue__poll ----------
(declare-const diz@817 $Ref)
(declare-const sys__result@818 $Ref)
(declare-const x@819 $Ref)
(declare-const currentCount@820 Int)
(declare-const __flatten_34@821 Int)
(declare-const __flatten_35@822 $Ref)
(declare-const c@823 Int)
(declare-const __flatten_36@824 Int)
(declare-const __flatten_37@825 Int)
(declare-const __flatten_38@826 $Ref)
(declare-const __flatten_39@827 Int)
(declare-const __flatten_40@828 $Ref)
(push) ; 2
; [eval] diz != null
(assert (not (= diz@817 $Ref.null)))
(declare-const $k@829 $Perm)
(assert ($Perm.isValidVar $k@829))
(assert ($Perm.isReadVar $k@829 $Perm.Write))
(declare-const $t@830 Int)
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 3
(assert (not (not (= $k@829 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 3
(assert (not (= $k@829 $Perm.No)))
(assert (> $t@830 0))
(declare-const $k@831 $Perm)
(assert ($Perm.isValidVar $k@831))
(assert ($Perm.isReadVar $k@831 $Perm.Write))
(declare-const $t@832 $Ref)
; [eval] diz.BlockingQueue__count != null
(push) ; 3
(assert (not (not (= $k@831 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 3
(assert (not (= $k@831 $Perm.No)))
(assert (not (= $t@832 $Ref.null)))
(declare-const $t@833 $Ref)
; [eval] diz.BlockingQueue__first != null
(push) ; 3
(assert (not (= $t@833 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 3
(push) ; 3
(assert (not (not (= $t@833 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 3
(push) ; 3
; [then-branch 163] $t@833 != Null
(assert (not (= $t@833 $Ref.null)))
(declare-const $t@834 $Snap)
(declare-const $k@835 $Perm)
(assert ($Perm.isValidVar $k@835))
(assert ($Perm.isReadVar $k@835 $Perm.Write))
(declare-const $t@836 $Ref)
(declare-const $k@837 $Perm)
(assert ($Perm.isValidVar $k@837))
(assert ($Perm.isReadVar $k@837 $Perm.Write))
(declare-const $t@838 $Ref)
(push) ; 4
(declare-const $k@839 $Perm)
(assert ($Perm.isValidVar $k@839))
(assert ($Perm.isReadVar $k@839 $Perm.Write))
(declare-const $t@840 Int)
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 5
(assert (not (not (= $k@839 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@839 $Perm.No)))
(assert (> $t@840 0))
(declare-const $k@841 $Perm)
(assert ($Perm.isValidVar $k@841))
(assert ($Perm.isReadVar $k@841 $Perm.Write))
(declare-const $t@842 $Ref)
; [eval] diz.BlockingQueue__count != null
(push) ; 5
(assert (not (not (= $k@841 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@841 $Perm.No)))
(assert (not (= $t@842 $Ref.null)))
(declare-const $t@843 $Ref)
; [eval] diz.BlockingQueue__first != null
(push) ; 5
(assert (not (= $t@843 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
(assert (not (not (= $t@843 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
; [then-branch 164] $t@843 != Null
(assert (not (= $t@843 $Ref.null)))
(declare-const $t@844 $Snap)
(declare-const $k@845 $Perm)
(assert ($Perm.isValidVar $k@845))
(assert ($Perm.isReadVar $k@845 $Perm.Write))
(declare-const $t@846 $Ref)
(declare-const $k@847 $Perm)
(assert ($Perm.isValidVar $k@847))
(assert ($Perm.isReadVar $k@847 $Perm.Write))
(declare-const $t@848 $Ref)
(pop) ; 5
(push) ; 5
; [else-branch 164] $t@843 == Null
(assert (= $t@843 $Ref.null))
(declare-const $k@849 $Perm)
(assert ($Perm.isValidVar $k@849))
(assert ($Perm.isReadVar $k@849 $Perm.Write))
(declare-const $t@850 $Ref)
(declare-const $k@851 $Perm)
(assert ($Perm.isValidVar $k@851))
(assert ($Perm.isReadVar $k@851 $Perm.Write))
(declare-const $t@852 $Ref)
(pop) ; 5
(pop) ; 4
(push) ; 4
; [exec]
; x := null
; [exec]
; __flatten_34 := AtomicInteger__get(diz.BlockingQueue__count)
; [eval] diz != null
(declare-const sys__result@853 Int)
; [exec]
; currentCount := __flatten_34
; [eval] currentCount == 0
(push) ; 5
(assert (not (not (= sys__result@853 0))))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
(assert (not (= sys__result@853 0)))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
; [then-branch 165] sys__result@853 == 0
(assert (= sys__result@853 0))
; [exec]
; __flatten_35 := x
; [exec]
; sys__result := __flatten_35
; [exec]
; assert acc(diz.BlockingQueue__capacity, wildcard) && (diz.BlockingQueue__capacity > 0) && acc(diz.BlockingQueue__count, wildcard) && (diz.BlockingQueue__count != null) && acc(diz.BlockingQueue__first, write) && ((diz.BlockingQueue__first != null) ==> acc(Node__state(diz.BlockingQueue__first), write)) && acc(diz.BlockingQueue__putLock, wildcard) && acc(diz.BlockingQueue__takeLock, wildcard)
(declare-const $k@854 $Perm)
(assert ($Perm.isValidVar $k@854))
(assert ($Perm.isReadVar $k@854 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@854 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (< $k@854 $k@829))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@855 $Perm)
(assert ($Perm.isValidVar $k@855))
(assert ($Perm.isReadVar $k@855 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@855 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (< $k@855 $k@831))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 6
(assert (not (= $t@833 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 6
(push) ; 6
; [then-branch 166] $t@833 != Null
(declare-const $k@856 $Perm)
(assert ($Perm.isValidVar $k@856))
(assert ($Perm.isReadVar $k@856 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@856 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(push) ; 7
(assert (not (not (= $k@835 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (not (= $k@835 $Perm.No)))
(assert (< $k@856 $k@835))
(declare-const $k@857 $Perm)
(assert ($Perm.isValidVar $k@857))
(assert ($Perm.isReadVar $k@857 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@857 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(push) ; 7
(assert (not (not (= $k@837 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (not (= $k@837 $Perm.No)))
(assert (< $k@857 $k@837))
; [exec]
; inhale false
(pop) ; 6
; [dead else-branch 166] $t@833 == Null
(pop) ; 5
(push) ; 5
; [else-branch 165] sys__result@853 != 0
(assert (not (= sys__result@853 0)))
(pop) ; 5
; [eval] !(currentCount == 0)
; [eval] currentCount == 0
(push) ; 5
(assert (not (= sys__result@853 0)))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
(assert (not (not (= sys__result@853 0))))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
; [then-branch 167] sys__result@853 != 0
(assert (not (= sys__result@853 0)))
; [exec]
; c := -1
; [eval] -1
; [exec]
; inhale true
; [exec]
; inhale acc(Lock__lock_held(diz.BlockingQueue__takeLock), write)
(push) ; 6
(assert (not (not (= $k@837 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= $k@837 $Perm.No)))
(declare-const $t@858 $Snap)
; [exec]
; __flatten_36 := AtomicInteger__get(diz.BlockingQueue__count)
; [eval] diz != null
(declare-const sys__result@859 Int)
; [exec]
; currentCount := __flatten_36
; [eval] currentCount > 0
(push) ; 6
(assert (not (not (> sys__result@859 0))))
(check-sat)
; unknown
; 0.00s
(pop) ; 6
(push) ; 6
(assert (not (> sys__result@859 0)))
(check-sat)
; unknown
; 0.00s
(pop) ; 6
(push) ; 6
; [then-branch 168] sys__result@859 > 0
(assert (> sys__result@859 0))
; [exec]
; inhale diz.BlockingQueue__first != null
; [eval] diz.BlockingQueue__first != null
; [exec]
; __flatten_37 := BlockingQueue__unlinkFirst(diz)
; [eval] diz != null
(declare-const $k@860 $Perm)
(assert ($Perm.isValidVar $k@860))
(assert ($Perm.isReadVar $k@860 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@860 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@860 $k@829))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@861 $Perm)
(assert ($Perm.isValidVar $k@861))
(assert ($Perm.isReadVar $k@861 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@861 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@861 $k@831))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 7
(assert (not (= $t@833 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 7
(push) ; 7
; [then-branch 169] $t@833 != Null
(declare-const $k@862 $Perm)
(assert ($Perm.isValidVar $k@862))
(assert ($Perm.isReadVar $k@862 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@862 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= $k@835 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= $k@835 $Perm.No)))
(assert (< $k@862 $k@835))
(declare-const $k@863 $Perm)
(assert ($Perm.isValidVar $k@863))
(assert ($Perm.isReadVar $k@863 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@863 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (< $k@863 $k@837))
; [eval] diz.BlockingQueue__first != null
(declare-const sys__result@864 Int)
(declare-const $t@865 $Snap)
(declare-const $t@866 $Snap)
(assert (= $t@865 ($Snap.combine $t@866 $Snap.unit)))
(declare-const $t@867 $Snap)
(assert (= $t@866 ($Snap.combine $t@867 $Snap.unit)))
(declare-const $t@868 $Snap)
(declare-const $t@869 $Ref)
(assert (= $t@867 ($Snap.combine $t@868 ($SortWrappers.$RefTo$Snap $t@869))))
(declare-const $t@870 $Snap)
(declare-const $t@871 $Ref)
(assert (= $t@868 ($Snap.combine $t@870 ($SortWrappers.$RefTo$Snap $t@871))))
(declare-const $t@872 $Snap)
(declare-const $t@873 $Snap)
(assert (= $t@870 ($Snap.combine $t@872 $t@873)))
(declare-const $t@874 $Snap)
(declare-const $t@875 $Ref)
(assert (= $t@872 ($Snap.combine $t@874 ($SortWrappers.$RefTo$Snap $t@875))))
(declare-const $t@876 $Snap)
(assert (= $t@874 ($Snap.combine $t@876 $Snap.unit)))
(declare-const $t@877 Int)
(declare-const $t@878 $Ref)
(assert (=
  $t@876
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@877)
    ($SortWrappers.$RefTo$Snap $t@878))))
(declare-const $t@879 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@877)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@879) $Snap.unit)))
(declare-const $k@880 $Perm)
(assert ($Perm.isValidVar $k@880))
(assert ($Perm.isReadVar $k@880 $Perm.Write))
(assert (implies (< $Perm.No (- $k@829 $k@860)) (= $t@879 $t@830)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 8
(assert (not (not (= (+ (- $k@829 $k@860) $k@880) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- $k@829 $k@860) $k@880) $Perm.No)))
(assert (> $t@879 0))
(declare-const $k@881 $Perm)
(assert ($Perm.isValidVar $k@881))
(assert ($Perm.isReadVar $k@881 $Perm.Write))
(assert (implies (< $Perm.No (- $k@831 $k@861)) (= $t@878 $t@832)))
; [eval] diz.BlockingQueue__count != null
(push) ; 8
(assert (not (not (= (+ (- $k@831 $k@861) $k@881) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- $k@831 $k@861) $k@881) $Perm.No)))
(assert (not (= $t@878 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 8
(assert (not (= $t@875 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= $t@875 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
(push) ; 8
; [then-branch 170] $t@875 != Null
(assert (not (= $t@875 $Ref.null)))
(declare-const $k@882 $Perm)
(assert ($Perm.isValidVar $k@882))
(assert ($Perm.isReadVar $k@882 $Perm.Write))
(assert (implies (< $Perm.No (- $k@835 $k@862)) (= $t@871 $t@836)))
(declare-const $k@883 $Perm)
(assert ($Perm.isValidVar $k@883))
(assert ($Perm.isReadVar $k@883 $Perm.Write))
(assert (implies (< $Perm.No (- $k@837 $k@863)) (= $t@869 $t@838)))
; [eval] sys__result == old(BlockingQueue__contents(diz)[0])
; [eval] old(BlockingQueue__contents(diz)[0])
; [eval] BlockingQueue__contents(diz)[0]
; [eval] BlockingQueue__contents(diz)
; [eval] diz != null
(declare-const $k@884 $Perm)
(assert ($Perm.isValidVar $k@884))
(assert ($Perm.isReadVar $k@884 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@884 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@884 $k@829))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@885 $Perm)
(assert ($Perm.isValidVar $k@885))
(assert ($Perm.isReadVar $k@885 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@885 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@885 $k@831))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 9
(assert (not (= $t@833 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
(push) ; 9
; [then-branch 171] $t@833 != Null
(declare-const $k@886 $Perm)
(assert ($Perm.isValidVar $k@886))
(assert ($Perm.isReadVar $k@886 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@886 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (< $k@886 $k@835))
(declare-const $k@887 $Perm)
(assert ($Perm.isValidVar $k@887))
(assert ($Perm.isReadVar $k@887 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@887 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (< $k@887 $k@837))
(pop) ; 9
; [dead else-branch 171] $t@833 == Null
(assert ($Perm.isValidVar $k@886))
(assert ($Perm.isReadVar $k@886 $Perm.Write))
(assert (< $k@886 $k@835))
(assert ($Perm.isValidVar $k@887))
(assert ($Perm.isReadVar $k@887 $Perm.Write))
(assert (< $k@887 $k@837))
(assert (=
  sys__result@864
  ($Seq.index
    ($BlockingQueue__contents ($Snap.combine
      ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@830))
                  $Snap.unit)
                ($SortWrappers.$RefTo$Snap $t@832))
              $Snap.unit)
            ($SortWrappers.$RefTo$Snap $t@833))
          $t@834)
        ($SortWrappers.$RefTo$Snap $t@836))
      ($SortWrappers.$RefTo$Snap $t@838)) diz@817)
    0)))
; [eval] BlockingQueue__contents(diz) == old(BlockingQueue__contents(diz)[1..])
; [eval] BlockingQueue__contents(diz)
; [eval] diz != null
(declare-const $k@888 $Perm)
(assert ($Perm.isValidVar $k@888))
(assert ($Perm.isReadVar $k@888 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@888 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@888 (+ (- $k@829 $k@860) $k@880)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@889 $Perm)
(assert ($Perm.isValidVar $k@889))
(assert ($Perm.isReadVar $k@889 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@889 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@889 (+ (- $k@831 $k@861) $k@881)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 9
(assert (not (= $t@875 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
(push) ; 9
; [then-branch 172] $t@875 != Null
(declare-const $k@890 $Perm)
(assert ($Perm.isValidVar $k@890))
(assert ($Perm.isReadVar $k@890 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@890 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= (+ (- $k@835 $k@862) $k@882) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not (= (+ (- $k@835 $k@862) $k@882) $Perm.No)))
(assert (< $k@890 (+ (- $k@835 $k@862) $k@882)))
(declare-const $k@891 $Perm)
(assert ($Perm.isValidVar $k@891))
(assert ($Perm.isReadVar $k@891 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@891 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= (+ (- $k@837 $k@863) $k@883) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not (= (+ (- $k@837 $k@863) $k@883) $Perm.No)))
(assert (< $k@891 (+ (- $k@837 $k@863) $k@883)))
(pop) ; 9
; [dead else-branch 172] $t@875 == Null
(assert ($Perm.isValidVar $k@890))
(assert ($Perm.isReadVar $k@890 $Perm.Write))
(assert (not (= (+ (- $k@835 $k@862) $k@882) $Perm.No)))
(assert (< $k@890 (+ (- $k@835 $k@862) $k@882)))
(assert ($Perm.isValidVar $k@891))
(assert ($Perm.isReadVar $k@891 $Perm.Write))
(assert (not (= (+ (- $k@837 $k@863) $k@883) $Perm.No)))
(assert (< $k@891 (+ (- $k@837 $k@863) $k@883)))
; [eval] old(BlockingQueue__contents(diz)[1..])
; [eval] BlockingQueue__contents(diz)[1..]
; [eval] BlockingQueue__contents(diz)
; [eval] diz != null
(declare-const $k@892 $Perm)
(assert ($Perm.isValidVar $k@892))
(assert ($Perm.isReadVar $k@892 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@892 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@892 $k@829))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@893 $Perm)
(assert ($Perm.isValidVar $k@893))
(assert ($Perm.isReadVar $k@893 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@893 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@893 $k@831))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 9
(assert (not (= $t@833 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
(push) ; 9
; [then-branch 173] $t@833 != Null
(declare-const $k@894 $Perm)
(assert ($Perm.isValidVar $k@894))
(assert ($Perm.isReadVar $k@894 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@894 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (< $k@894 $k@835))
(declare-const $k@895 $Perm)
(assert ($Perm.isValidVar $k@895))
(assert ($Perm.isReadVar $k@895 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@895 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (< $k@895 $k@837))
(pop) ; 9
; [dead else-branch 173] $t@833 == Null
(assert ($Perm.isValidVar $k@894))
(assert ($Perm.isReadVar $k@894 $Perm.Write))
(assert (< $k@894 $k@835))
(assert ($Perm.isValidVar $k@895))
(assert ($Perm.isReadVar $k@895 $Perm.Write))
(assert (< $k@895 $k@837))
(assert ($Seq.equal
  ($BlockingQueue__contents ($Snap.combine
    ($Snap.combine
      ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@879))
                $Snap.unit)
              ($SortWrappers.$RefTo$Snap $t@878))
            $Snap.unit)
          ($SortWrappers.$RefTo$Snap $t@875))
        $t@873)
      ($SortWrappers.$RefTo$Snap $t@871))
    ($SortWrappers.$RefTo$Snap $t@869)) diz@817)
  ($Seq.drop
    ($BlockingQueue__contents ($Snap.combine
      ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@830))
                  $Snap.unit)
                ($SortWrappers.$RefTo$Snap $t@832))
              $Snap.unit)
            ($SortWrappers.$RefTo$Snap $t@833))
          $t@834)
        ($SortWrappers.$RefTo$Snap $t@836))
      ($SortWrappers.$RefTo$Snap $t@838)) diz@817)
    1)))
; [exec]
; __flatten_38 := Integer__Integer(__flatten_37)
(declare-const sys__result@896 $Ref)
(declare-const $t@897 $Snap)
(declare-const $t@898 Int)
(assert (= $t@897 ($Snap.combine ($SortWrappers.IntTo$Snap $t@898) $Snap.unit)))
(declare-const $t@899 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@898)
  ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@899))))
; [eval] sys__result != null
(assert (not (= sys__result@896 $Ref.null)))
(declare-const $k@900 $Perm)
(assert ($Perm.isValidVar $k@900))
(assert ($Perm.isReadVar $k@900 $Perm.Write))
; [eval] sys__result.Integer__val == val
(push) ; 9
(assert (not (not (= $k@900 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (not (= $k@900 $Perm.No)))
(assert (= $t@899 sys__result@864))
; [exec]
; x := __flatten_38
; [exec]
; __flatten_39 := AtomicInteger__getAndDecrement(diz.BlockingQueue__count)
; [eval] diz != null
(declare-const sys__result@901 Int)
; [exec]
; c := __flatten_39
; [eval] c > 1
(push) ; 9
(assert (not (not (> sys__result@901 1))))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
(push) ; 9
(assert (not (> sys__result@901 1)))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
(push) ; 9
; [then-branch 174] sys__result@901 > 1
(assert (> sys__result@901 1))
; [exec]
; assert acc(Lock__lock_held(diz.BlockingQueue__takeLock), write)
(push) ; 10
(assert (not (= $t@838 $t@869)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
; [exec]
; exhale acc(Lock__lock_held(diz.BlockingQueue__takeLock), write)
(push) ; 10
(assert (not (= $t@838 $t@869)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
; [exec]
; exhale true
; [eval] c == diz.BlockingQueue__capacity
(push) ; 10
(assert (not (not (= sys__result@901 $t@879))))
(check-sat)
; unknown
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (= sys__result@901 $t@879)))
(check-sat)
; unknown
; 0.00s
(pop) ; 10
(push) ; 10
; [then-branch 175] sys__result@901 == $t@879
(assert (= sys__result@901 $t@879))
; [exec]
; inhale true
; [exec]
; inhale acc(Lock__lock_held(diz.BlockingQueue__putLock), write)
(declare-const $t@902 $Snap)
; [exec]
; assert acc(Lock__lock_held(diz.BlockingQueue__putLock), write)
; [exec]
; exhale acc(Lock__lock_held(diz.BlockingQueue__putLock), write)
; [exec]
; exhale true
; [exec]
; __flatten_40 := x
; [exec]
; sys__result := __flatten_40
; [exec]
; assert acc(diz.BlockingQueue__capacity, wildcard) && (diz.BlockingQueue__capacity > 0) && acc(diz.BlockingQueue__count, wildcard) && (diz.BlockingQueue__count != null) && acc(diz.BlockingQueue__first, write) && ((diz.BlockingQueue__first != null) ==> acc(Node__state(diz.BlockingQueue__first), write)) && acc(diz.BlockingQueue__putLock, wildcard) && acc(diz.BlockingQueue__takeLock, wildcard)
(declare-const $k@903 $Perm)
(assert ($Perm.isValidVar $k@903))
(assert ($Perm.isReadVar $k@903 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@903 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (< $k@903 (+ (- $k@829 $k@860) $k@880)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@904 $Perm)
(assert ($Perm.isValidVar $k@904))
(assert ($Perm.isReadVar $k@904 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@904 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (< $k@904 (+ (- $k@831 $k@861) $k@881)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 11
(assert (not (= $t@875 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 11
(push) ; 11
; [then-branch 176] $t@875 != Null
(declare-const $k@905 $Perm)
(assert ($Perm.isValidVar $k@905))
(assert ($Perm.isReadVar $k@905 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@905 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (< $k@905 (+ (- $k@835 $k@862) $k@882)))
(declare-const $k@906 $Perm)
(assert ($Perm.isValidVar $k@906))
(assert ($Perm.isReadVar $k@906 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@906 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (< $k@906 (+ (- $k@837 $k@863) $k@883)))
; [exec]
; inhale false
(pop) ; 11
; [dead else-branch 176] $t@875 == Null
(pop) ; 10
(push) ; 10
; [else-branch 175] sys__result@901 != $t@879
(assert (not (= sys__result@901 $t@879)))
(pop) ; 10
; [eval] !(c == diz.BlockingQueue__capacity)
; [eval] c == diz.BlockingQueue__capacity
(push) ; 10
(assert (not (= sys__result@901 $t@879)))
(check-sat)
; unknown
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= sys__result@901 $t@879))))
(check-sat)
; unknown
; 0.00s
(pop) ; 10
(push) ; 10
; [then-branch 177] sys__result@901 != $t@879
(assert (not (= sys__result@901 $t@879)))
; [exec]
; __flatten_40 := x
; [exec]
; sys__result := __flatten_40
; [exec]
; assert acc(diz.BlockingQueue__capacity, wildcard) && (diz.BlockingQueue__capacity > 0) && acc(diz.BlockingQueue__count, wildcard) && (diz.BlockingQueue__count != null) && acc(diz.BlockingQueue__first, write) && ((diz.BlockingQueue__first != null) ==> acc(Node__state(diz.BlockingQueue__first), write)) && acc(diz.BlockingQueue__putLock, wildcard) && acc(diz.BlockingQueue__takeLock, wildcard)
(declare-const $k@907 $Perm)
(assert ($Perm.isValidVar $k@907))
(assert ($Perm.isReadVar $k@907 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@907 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (< $k@907 (+ (- $k@829 $k@860) $k@880)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@908 $Perm)
(assert ($Perm.isValidVar $k@908))
(assert ($Perm.isReadVar $k@908 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@908 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (< $k@908 (+ (- $k@831 $k@861) $k@881)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 11
(assert (not (= $t@875 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 11
(push) ; 11
; [then-branch 178] $t@875 != Null
(declare-const $k@909 $Perm)
(assert ($Perm.isValidVar $k@909))
(assert ($Perm.isReadVar $k@909 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@909 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (< $k@909 (+ (- $k@835 $k@862) $k@882)))
(declare-const $k@910 $Perm)
(assert ($Perm.isValidVar $k@910))
(assert ($Perm.isReadVar $k@910 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@910 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (< $k@910 (+ (- $k@837 $k@863) $k@883)))
; [exec]
; inhale false
(pop) ; 11
; [dead else-branch 178] $t@875 == Null
(pop) ; 10
(push) ; 10
; [else-branch 177] sys__result@901 == $t@879
(assert (= sys__result@901 $t@879))
(pop) ; 10
(pop) ; 9
(push) ; 9
; [else-branch 174] !sys__result@901 > 1
(assert (not (> sys__result@901 1)))
(pop) ; 9
; [eval] !(c > 1)
; [eval] c > 1
(push) ; 9
(assert (not (> sys__result@901 1)))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
(push) ; 9
(assert (not (not (> sys__result@901 1))))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
(push) ; 9
; [then-branch 179] !sys__result@901 > 1
(assert (not (> sys__result@901 1)))
; [exec]
; exhale acc(Lock__lock_held(diz.BlockingQueue__takeLock), write)
(push) ; 10
(assert (not (= $t@838 $t@869)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
; [exec]
; exhale true
; [eval] c == diz.BlockingQueue__capacity
(push) ; 10
(assert (not (not (= sys__result@901 $t@879))))
(check-sat)
; unknown
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (= sys__result@901 $t@879)))
(check-sat)
; unknown
; 0.00s
(pop) ; 10
(push) ; 10
; [then-branch 180] sys__result@901 == $t@879
(assert (= sys__result@901 $t@879))
; [exec]
; inhale true
; [exec]
; inhale acc(Lock__lock_held(diz.BlockingQueue__putLock), write)
(declare-const $t@911 $Snap)
; [exec]
; assert acc(Lock__lock_held(diz.BlockingQueue__putLock), write)
; [exec]
; exhale acc(Lock__lock_held(diz.BlockingQueue__putLock), write)
; [exec]
; exhale true
; [exec]
; __flatten_40 := x
; [exec]
; sys__result := __flatten_40
; [exec]
; assert acc(diz.BlockingQueue__capacity, wildcard) && (diz.BlockingQueue__capacity > 0) && acc(diz.BlockingQueue__count, wildcard) && (diz.BlockingQueue__count != null) && acc(diz.BlockingQueue__first, write) && ((diz.BlockingQueue__first != null) ==> acc(Node__state(diz.BlockingQueue__first), write)) && acc(diz.BlockingQueue__putLock, wildcard) && acc(diz.BlockingQueue__takeLock, wildcard)
(declare-const $k@912 $Perm)
(assert ($Perm.isValidVar $k@912))
(assert ($Perm.isReadVar $k@912 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@912 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (< $k@912 (+ (- $k@829 $k@860) $k@880)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@913 $Perm)
(assert ($Perm.isValidVar $k@913))
(assert ($Perm.isReadVar $k@913 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@913 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (< $k@913 (+ (- $k@831 $k@861) $k@881)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 11
(assert (not (= $t@875 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 11
(push) ; 11
; [then-branch 181] $t@875 != Null
(declare-const $k@914 $Perm)
(assert ($Perm.isValidVar $k@914))
(assert ($Perm.isReadVar $k@914 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@914 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (< $k@914 (+ (- $k@835 $k@862) $k@882)))
(declare-const $k@915 $Perm)
(assert ($Perm.isValidVar $k@915))
(assert ($Perm.isReadVar $k@915 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@915 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (< $k@915 (+ (- $k@837 $k@863) $k@883)))
; [exec]
; inhale false
(pop) ; 11
; [dead else-branch 181] $t@875 == Null
(pop) ; 10
(push) ; 10
; [else-branch 180] sys__result@901 != $t@879
(assert (not (= sys__result@901 $t@879)))
(pop) ; 10
; [eval] !(c == diz.BlockingQueue__capacity)
; [eval] c == diz.BlockingQueue__capacity
(push) ; 10
(assert (not (= sys__result@901 $t@879)))
(check-sat)
; unknown
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= sys__result@901 $t@879))))
(check-sat)
; unknown
; 0.00s
(pop) ; 10
(push) ; 10
; [then-branch 182] sys__result@901 != $t@879
(assert (not (= sys__result@901 $t@879)))
; [exec]
; __flatten_40 := x
; [exec]
; sys__result := __flatten_40
; [exec]
; assert acc(diz.BlockingQueue__capacity, wildcard) && (diz.BlockingQueue__capacity > 0) && acc(diz.BlockingQueue__count, wildcard) && (diz.BlockingQueue__count != null) && acc(diz.BlockingQueue__first, write) && ((diz.BlockingQueue__first != null) ==> acc(Node__state(diz.BlockingQueue__first), write)) && acc(diz.BlockingQueue__putLock, wildcard) && acc(diz.BlockingQueue__takeLock, wildcard)
(declare-const $k@916 $Perm)
(assert ($Perm.isValidVar $k@916))
(assert ($Perm.isReadVar $k@916 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@916 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (< $k@916 (+ (- $k@829 $k@860) $k@880)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@917 $Perm)
(assert ($Perm.isValidVar $k@917))
(assert ($Perm.isReadVar $k@917 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@917 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (< $k@917 (+ (- $k@831 $k@861) $k@881)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 11
(assert (not (= $t@875 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 11
(push) ; 11
; [then-branch 183] $t@875 != Null
(declare-const $k@918 $Perm)
(assert ($Perm.isValidVar $k@918))
(assert ($Perm.isReadVar $k@918 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@918 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (< $k@918 (+ (- $k@835 $k@862) $k@882)))
(declare-const $k@919 $Perm)
(assert ($Perm.isValidVar $k@919))
(assert ($Perm.isReadVar $k@919 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@919 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (< $k@919 (+ (- $k@837 $k@863) $k@883)))
; [exec]
; inhale false
(pop) ; 11
; [dead else-branch 183] $t@875 == Null
(pop) ; 10
(push) ; 10
; [else-branch 182] sys__result@901 == $t@879
(assert (= sys__result@901 $t@879))
(pop) ; 10
(pop) ; 9
(push) ; 9
; [else-branch 179] sys__result@901 > 1
(assert (> sys__result@901 1))
(pop) ; 9
(pop) ; 8
(push) ; 8
; [else-branch 170] $t@875 == Null
(assert (= $t@875 $Ref.null))
(declare-const $k@920 $Perm)
(assert ($Perm.isValidVar $k@920))
(assert ($Perm.isReadVar $k@920 $Perm.Write))
(assert (implies (< $Perm.No (- $k@835 $k@862)) (= $t@871 $t@836)))
(declare-const $k@921 $Perm)
(assert ($Perm.isValidVar $k@921))
(assert ($Perm.isReadVar $k@921 $Perm.Write))
(assert (implies (< $Perm.No (- $k@837 $k@863)) (= $t@869 $t@838)))
; [eval] sys__result == old(BlockingQueue__contents(diz)[0])
; [eval] old(BlockingQueue__contents(diz)[0])
; [eval] BlockingQueue__contents(diz)[0]
; [eval] BlockingQueue__contents(diz)
; [eval] diz != null
(declare-const $k@922 $Perm)
(assert ($Perm.isValidVar $k@922))
(assert ($Perm.isReadVar $k@922 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@922 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@922 $k@829))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@923 $Perm)
(assert ($Perm.isValidVar $k@923))
(assert ($Perm.isReadVar $k@923 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@923 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@923 $k@831))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 9
(assert (not (= $t@833 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
(push) ; 9
; [then-branch 184] $t@833 != Null
(declare-const $k@924 $Perm)
(assert ($Perm.isValidVar $k@924))
(assert ($Perm.isReadVar $k@924 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@924 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (< $k@924 $k@835))
(declare-const $k@925 $Perm)
(assert ($Perm.isValidVar $k@925))
(assert ($Perm.isReadVar $k@925 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@925 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (< $k@925 $k@837))
(pop) ; 9
; [dead else-branch 184] $t@833 == Null
(assert ($Perm.isValidVar $k@924))
(assert ($Perm.isReadVar $k@924 $Perm.Write))
(assert (< $k@924 $k@835))
(assert ($Perm.isValidVar $k@925))
(assert ($Perm.isReadVar $k@925 $Perm.Write))
(assert (< $k@925 $k@837))
(assert (=
  sys__result@864
  ($Seq.index
    ($BlockingQueue__contents ($Snap.combine
      ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@830))
                  $Snap.unit)
                ($SortWrappers.$RefTo$Snap $t@832))
              $Snap.unit)
            ($SortWrappers.$RefTo$Snap $t@833))
          $t@834)
        ($SortWrappers.$RefTo$Snap $t@836))
      ($SortWrappers.$RefTo$Snap $t@838)) diz@817)
    0)))
; [eval] BlockingQueue__contents(diz) == old(BlockingQueue__contents(diz)[1..])
; [eval] BlockingQueue__contents(diz)
; [eval] diz != null
(declare-const $k@926 $Perm)
(assert ($Perm.isValidVar $k@926))
(assert ($Perm.isReadVar $k@926 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@926 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@926 (+ (- $k@829 $k@860) $k@880)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@927 $Perm)
(assert ($Perm.isValidVar $k@927))
(assert ($Perm.isReadVar $k@927 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@927 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@927 (+ (- $k@831 $k@861) $k@881)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 9
(assert (not (not (= $t@875 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
; [dead then-branch 185] $t@875 != Null
(push) ; 9
; [else-branch 185] $t@875 == Null
(declare-const $k@928 $Perm)
(assert ($Perm.isValidVar $k@928))
(assert ($Perm.isReadVar $k@928 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@928 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= (+ (- $k@835 $k@862) $k@920) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not (= (+ (- $k@835 $k@862) $k@920) $Perm.No)))
(assert (< $k@928 (+ (- $k@835 $k@862) $k@920)))
(declare-const $k@929 $Perm)
(assert ($Perm.isValidVar $k@929))
(assert ($Perm.isReadVar $k@929 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@929 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= (+ (- $k@837 $k@863) $k@921) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not (= (+ (- $k@837 $k@863) $k@921) $Perm.No)))
(assert (< $k@929 (+ (- $k@837 $k@863) $k@921)))
(pop) ; 9
(assert ($Perm.isValidVar $k@928))
(assert ($Perm.isReadVar $k@928 $Perm.Write))
(assert (not (= (+ (- $k@835 $k@862) $k@920) $Perm.No)))
(assert (< $k@928 (+ (- $k@835 $k@862) $k@920)))
(assert ($Perm.isValidVar $k@929))
(assert ($Perm.isReadVar $k@929 $Perm.Write))
(assert (not (= (+ (- $k@837 $k@863) $k@921) $Perm.No)))
(assert (< $k@929 (+ (- $k@837 $k@863) $k@921)))
; [eval] old(BlockingQueue__contents(diz)[1..])
; [eval] BlockingQueue__contents(diz)[1..]
; [eval] BlockingQueue__contents(diz)
; [eval] diz != null
(declare-const $k@930 $Perm)
(assert ($Perm.isValidVar $k@930))
(assert ($Perm.isReadVar $k@930 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@930 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@930 $k@829))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@931 $Perm)
(assert ($Perm.isValidVar $k@931))
(assert ($Perm.isReadVar $k@931 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@931 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@931 $k@831))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 9
(assert (not (= $t@833 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
(push) ; 9
; [then-branch 186] $t@833 != Null
(declare-const $k@932 $Perm)
(assert ($Perm.isValidVar $k@932))
(assert ($Perm.isReadVar $k@932 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@932 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (< $k@932 $k@835))
(declare-const $k@933 $Perm)
(assert ($Perm.isValidVar $k@933))
(assert ($Perm.isReadVar $k@933 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@933 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (< $k@933 $k@837))
(pop) ; 9
; [dead else-branch 186] $t@833 == Null
(assert ($Perm.isValidVar $k@932))
(assert ($Perm.isReadVar $k@932 $Perm.Write))
(assert (< $k@932 $k@835))
(assert ($Perm.isValidVar $k@933))
(assert ($Perm.isReadVar $k@933 $Perm.Write))
(assert (< $k@933 $k@837))
(assert ($Seq.equal
  ($BlockingQueue__contents ($Snap.combine
    ($Snap.combine
      ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@879))
                $Snap.unit)
              ($SortWrappers.$RefTo$Snap $t@878))
            $Snap.unit)
          ($SortWrappers.$RefTo$Snap $t@875))
        $Snap.unit)
      ($SortWrappers.$RefTo$Snap $t@871))
    ($SortWrappers.$RefTo$Snap $t@869)) diz@817)
  ($Seq.drop
    ($BlockingQueue__contents ($Snap.combine
      ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@830))
                  $Snap.unit)
                ($SortWrappers.$RefTo$Snap $t@832))
              $Snap.unit)
            ($SortWrappers.$RefTo$Snap $t@833))
          $t@834)
        ($SortWrappers.$RefTo$Snap $t@836))
      ($SortWrappers.$RefTo$Snap $t@838)) diz@817)
    1)))
; [exec]
; __flatten_38 := Integer__Integer(__flatten_37)
(declare-const sys__result@934 $Ref)
(declare-const $t@935 $Snap)
(declare-const $t@936 Int)
(assert (= $t@935 ($Snap.combine ($SortWrappers.IntTo$Snap $t@936) $Snap.unit)))
(declare-const $t@937 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@936)
  ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@937))))
; [eval] sys__result != null
(assert (not (= sys__result@934 $Ref.null)))
(declare-const $k@938 $Perm)
(assert ($Perm.isValidVar $k@938))
(assert ($Perm.isReadVar $k@938 $Perm.Write))
; [eval] sys__result.Integer__val == val
(push) ; 9
(assert (not (not (= $k@938 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (not (= $k@938 $Perm.No)))
(assert (= $t@937 sys__result@864))
; [exec]
; x := __flatten_38
; [exec]
; __flatten_39 := AtomicInteger__getAndDecrement(diz.BlockingQueue__count)
; [eval] diz != null
(declare-const sys__result@939 Int)
; [exec]
; c := __flatten_39
; [eval] c > 1
(push) ; 9
(assert (not (not (> sys__result@939 1))))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
(push) ; 9
(assert (not (> sys__result@939 1)))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
(push) ; 9
; [then-branch 187] sys__result@939 > 1
(assert (> sys__result@939 1))
; [exec]
; assert acc(Lock__lock_held(diz.BlockingQueue__takeLock), write)
(push) ; 10
(assert (not (= $t@838 $t@869)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
; [exec]
; exhale acc(Lock__lock_held(diz.BlockingQueue__takeLock), write)
(push) ; 10
(assert (not (= $t@838 $t@869)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
; [exec]
; exhale true
; [eval] c == diz.BlockingQueue__capacity
(push) ; 10
(assert (not (not (= sys__result@939 $t@879))))
(check-sat)
; unknown
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (= sys__result@939 $t@879)))
(check-sat)
; unknown
; 0.00s
(pop) ; 10
(push) ; 10
; [then-branch 188] sys__result@939 == $t@879
(assert (= sys__result@939 $t@879))
; [exec]
; inhale true
; [exec]
; inhale acc(Lock__lock_held(diz.BlockingQueue__putLock), write)
(declare-const $t@940 $Snap)
; [exec]
; assert acc(Lock__lock_held(diz.BlockingQueue__putLock), write)
; [exec]
; exhale acc(Lock__lock_held(diz.BlockingQueue__putLock), write)
; [exec]
; exhale true
; [exec]
; __flatten_40 := x
; [exec]
; sys__result := __flatten_40
; [exec]
; assert acc(diz.BlockingQueue__capacity, wildcard) && (diz.BlockingQueue__capacity > 0) && acc(diz.BlockingQueue__count, wildcard) && (diz.BlockingQueue__count != null) && acc(diz.BlockingQueue__first, write) && ((diz.BlockingQueue__first != null) ==> acc(Node__state(diz.BlockingQueue__first), write)) && acc(diz.BlockingQueue__putLock, wildcard) && acc(diz.BlockingQueue__takeLock, wildcard)
(declare-const $k@941 $Perm)
(assert ($Perm.isValidVar $k@941))
(assert ($Perm.isReadVar $k@941 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@941 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (< $k@941 (+ (- $k@829 $k@860) $k@880)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@942 $Perm)
(assert ($Perm.isValidVar $k@942))
(assert ($Perm.isReadVar $k@942 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@942 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (< $k@942 (+ (- $k@831 $k@861) $k@881)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 11
(assert (not (not (= $t@875 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 11
; [dead then-branch 189] $t@875 != Null
(push) ; 11
; [else-branch 189] $t@875 == Null
(declare-const $k@943 $Perm)
(assert ($Perm.isValidVar $k@943))
(assert ($Perm.isReadVar $k@943 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@943 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (< $k@943 (+ (- $k@835 $k@862) $k@920)))
(declare-const $k@944 $Perm)
(assert ($Perm.isValidVar $k@944))
(assert ($Perm.isReadVar $k@944 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@944 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (< $k@944 (+ (- $k@837 $k@863) $k@921)))
; [exec]
; inhale false
(pop) ; 11
(pop) ; 10
(push) ; 10
; [else-branch 188] sys__result@939 != $t@879
(assert (not (= sys__result@939 $t@879)))
(pop) ; 10
; [eval] !(c == diz.BlockingQueue__capacity)
; [eval] c == diz.BlockingQueue__capacity
(push) ; 10
(assert (not (= sys__result@939 $t@879)))
(check-sat)
; unknown
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= sys__result@939 $t@879))))
(check-sat)
; unknown
; 0.00s
(pop) ; 10
(push) ; 10
; [then-branch 190] sys__result@939 != $t@879
(assert (not (= sys__result@939 $t@879)))
; [exec]
; __flatten_40 := x
; [exec]
; sys__result := __flatten_40
; [exec]
; assert acc(diz.BlockingQueue__capacity, wildcard) && (diz.BlockingQueue__capacity > 0) && acc(diz.BlockingQueue__count, wildcard) && (diz.BlockingQueue__count != null) && acc(diz.BlockingQueue__first, write) && ((diz.BlockingQueue__first != null) ==> acc(Node__state(diz.BlockingQueue__first), write)) && acc(diz.BlockingQueue__putLock, wildcard) && acc(diz.BlockingQueue__takeLock, wildcard)
(declare-const $k@945 $Perm)
(assert ($Perm.isValidVar $k@945))
(assert ($Perm.isReadVar $k@945 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@945 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (< $k@945 (+ (- $k@829 $k@860) $k@880)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@946 $Perm)
(assert ($Perm.isValidVar $k@946))
(assert ($Perm.isReadVar $k@946 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@946 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (< $k@946 (+ (- $k@831 $k@861) $k@881)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 11
(assert (not (not (= $t@875 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 11
; [dead then-branch 191] $t@875 != Null
(push) ; 11
; [else-branch 191] $t@875 == Null
(declare-const $k@947 $Perm)
(assert ($Perm.isValidVar $k@947))
(assert ($Perm.isReadVar $k@947 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@947 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (< $k@947 (+ (- $k@835 $k@862) $k@920)))
(declare-const $k@948 $Perm)
(assert ($Perm.isValidVar $k@948))
(assert ($Perm.isReadVar $k@948 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@948 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (< $k@948 (+ (- $k@837 $k@863) $k@921)))
; [exec]
; inhale false
(pop) ; 11
(pop) ; 10
(push) ; 10
; [else-branch 190] sys__result@939 == $t@879
(assert (= sys__result@939 $t@879))
(pop) ; 10
(pop) ; 9
(push) ; 9
; [else-branch 187] !sys__result@939 > 1
(assert (not (> sys__result@939 1)))
(pop) ; 9
; [eval] !(c > 1)
; [eval] c > 1
(push) ; 9
(assert (not (> sys__result@939 1)))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
(push) ; 9
(assert (not (not (> sys__result@939 1))))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
(push) ; 9
; [then-branch 192] !sys__result@939 > 1
(assert (not (> sys__result@939 1)))
; [exec]
; exhale acc(Lock__lock_held(diz.BlockingQueue__takeLock), write)
(push) ; 10
(assert (not (= $t@838 $t@869)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
; [exec]
; exhale true
; [eval] c == diz.BlockingQueue__capacity
(push) ; 10
(assert (not (not (= sys__result@939 $t@879))))
(check-sat)
; unknown
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (= sys__result@939 $t@879)))
(check-sat)
; unknown
; 0.00s
(pop) ; 10
(push) ; 10
; [then-branch 193] sys__result@939 == $t@879
(assert (= sys__result@939 $t@879))
; [exec]
; inhale true
; [exec]
; inhale acc(Lock__lock_held(diz.BlockingQueue__putLock), write)
(declare-const $t@949 $Snap)
; [exec]
; assert acc(Lock__lock_held(diz.BlockingQueue__putLock), write)
; [exec]
; exhale acc(Lock__lock_held(diz.BlockingQueue__putLock), write)
; [exec]
; exhale true
; [exec]
; __flatten_40 := x
; [exec]
; sys__result := __flatten_40
; [exec]
; assert acc(diz.BlockingQueue__capacity, wildcard) && (diz.BlockingQueue__capacity > 0) && acc(diz.BlockingQueue__count, wildcard) && (diz.BlockingQueue__count != null) && acc(diz.BlockingQueue__first, write) && ((diz.BlockingQueue__first != null) ==> acc(Node__state(diz.BlockingQueue__first), write)) && acc(diz.BlockingQueue__putLock, wildcard) && acc(diz.BlockingQueue__takeLock, wildcard)
(declare-const $k@950 $Perm)
(assert ($Perm.isValidVar $k@950))
(assert ($Perm.isReadVar $k@950 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@950 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (< $k@950 (+ (- $k@829 $k@860) $k@880)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@951 $Perm)
(assert ($Perm.isValidVar $k@951))
(assert ($Perm.isReadVar $k@951 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@951 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (< $k@951 (+ (- $k@831 $k@861) $k@881)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 11
(assert (not (not (= $t@875 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 11
; [dead then-branch 194] $t@875 != Null
(push) ; 11
; [else-branch 194] $t@875 == Null
(declare-const $k@952 $Perm)
(assert ($Perm.isValidVar $k@952))
(assert ($Perm.isReadVar $k@952 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@952 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (< $k@952 (+ (- $k@835 $k@862) $k@920)))
(declare-const $k@953 $Perm)
(assert ($Perm.isValidVar $k@953))
(assert ($Perm.isReadVar $k@953 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@953 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (< $k@953 (+ (- $k@837 $k@863) $k@921)))
; [exec]
; inhale false
(pop) ; 11
(pop) ; 10
(push) ; 10
; [else-branch 193] sys__result@939 != $t@879
(assert (not (= sys__result@939 $t@879)))
(pop) ; 10
; [eval] !(c == diz.BlockingQueue__capacity)
; [eval] c == diz.BlockingQueue__capacity
(push) ; 10
(assert (not (= sys__result@939 $t@879)))
(check-sat)
; unknown
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= sys__result@939 $t@879))))
(check-sat)
; unknown
; 0.00s
(pop) ; 10
(push) ; 10
; [then-branch 195] sys__result@939 != $t@879
(assert (not (= sys__result@939 $t@879)))
; [exec]
; __flatten_40 := x
; [exec]
; sys__result := __flatten_40
; [exec]
; assert acc(diz.BlockingQueue__capacity, wildcard) && (diz.BlockingQueue__capacity > 0) && acc(diz.BlockingQueue__count, wildcard) && (diz.BlockingQueue__count != null) && acc(diz.BlockingQueue__first, write) && ((diz.BlockingQueue__first != null) ==> acc(Node__state(diz.BlockingQueue__first), write)) && acc(diz.BlockingQueue__putLock, wildcard) && acc(diz.BlockingQueue__takeLock, wildcard)
(declare-const $k@954 $Perm)
(assert ($Perm.isValidVar $k@954))
(assert ($Perm.isReadVar $k@954 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@954 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (< $k@954 (+ (- $k@829 $k@860) $k@880)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@955 $Perm)
(assert ($Perm.isValidVar $k@955))
(assert ($Perm.isReadVar $k@955 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@955 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (< $k@955 (+ (- $k@831 $k@861) $k@881)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 11
(assert (not (not (= $t@875 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 11
; [dead then-branch 196] $t@875 != Null
(push) ; 11
; [else-branch 196] $t@875 == Null
(declare-const $k@956 $Perm)
(assert ($Perm.isValidVar $k@956))
(assert ($Perm.isReadVar $k@956 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@956 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (< $k@956 (+ (- $k@835 $k@862) $k@920)))
(declare-const $k@957 $Perm)
(assert ($Perm.isValidVar $k@957))
(assert ($Perm.isReadVar $k@957 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@957 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (< $k@957 (+ (- $k@837 $k@863) $k@921)))
; [exec]
; inhale false
(pop) ; 11
(pop) ; 10
(push) ; 10
; [else-branch 195] sys__result@939 == $t@879
(assert (= sys__result@939 $t@879))
(pop) ; 10
(pop) ; 9
(push) ; 9
; [else-branch 192] sys__result@939 > 1
(assert (> sys__result@939 1))
(pop) ; 9
(pop) ; 8
(pop) ; 7
; [dead else-branch 169] $t@833 == Null
(pop) ; 6
(push) ; 6
; [else-branch 168] !sys__result@859 > 0
(assert (not (> sys__result@859 0)))
(pop) ; 6
; [eval] !(currentCount > 0)
; [eval] currentCount > 0
(push) ; 6
(assert (not (> sys__result@859 0)))
(check-sat)
; unknown
; 0.00s
(pop) ; 6
(push) ; 6
(assert (not (not (> sys__result@859 0))))
(check-sat)
; unknown
; 0.00s
(pop) ; 6
(push) ; 6
; [then-branch 197] !sys__result@859 > 0
(assert (not (> sys__result@859 0)))
; [exec]
; exhale acc(Lock__lock_held(diz.BlockingQueue__takeLock), write)
; [exec]
; exhale true
; [eval] c == diz.BlockingQueue__capacity
(push) ; 7
(assert (not (not (= (- 0 1) $t@830))))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(push) ; 7
(assert (not (= (- 0 1) $t@830)))
(check-sat)
; unknown
; 0.00s
(pop) ; 7
; [dead then-branch 198] -1 == $t@830
(push) ; 7
; [else-branch 198] -1 != $t@830
(assert (not (= (- 0 1) $t@830)))
(pop) ; 7
; [eval] !(c == diz.BlockingQueue__capacity)
; [eval] c == diz.BlockingQueue__capacity
(push) ; 7
(assert (not (= (- 0 1) $t@830)))
(check-sat)
; unknown
; 0.00s
(pop) ; 7
(push) ; 7
(assert (not (not (= (- 0 1) $t@830))))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(push) ; 7
; [then-branch 199] -1 != $t@830
(assert (not (= (- 0 1) $t@830)))
; [exec]
; __flatten_40 := x
; [exec]
; sys__result := __flatten_40
; [exec]
; assert acc(diz.BlockingQueue__capacity, wildcard) && (diz.BlockingQueue__capacity > 0) && acc(diz.BlockingQueue__count, wildcard) && (diz.BlockingQueue__count != null) && acc(diz.BlockingQueue__first, write) && ((diz.BlockingQueue__first != null) ==> acc(Node__state(diz.BlockingQueue__first), write)) && acc(diz.BlockingQueue__putLock, wildcard) && acc(diz.BlockingQueue__takeLock, wildcard)
(declare-const $k@958 $Perm)
(assert ($Perm.isValidVar $k@958))
(assert ($Perm.isReadVar $k@958 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@958 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (< $k@958 $k@829))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@959 $Perm)
(assert ($Perm.isValidVar $k@959))
(assert ($Perm.isReadVar $k@959 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@959 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (< $k@959 $k@831))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 8
(assert (not (= $t@833 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
(push) ; 8
; [then-branch 200] $t@833 != Null
(declare-const $k@960 $Perm)
(assert ($Perm.isValidVar $k@960))
(assert ($Perm.isReadVar $k@960 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@960 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(push) ; 9
(assert (not (not (= $k@835 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (not (= $k@835 $Perm.No)))
(assert (< $k@960 $k@835))
(declare-const $k@961 $Perm)
(assert ($Perm.isValidVar $k@961))
(assert ($Perm.isReadVar $k@961 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@961 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@961 $k@837))
; [exec]
; inhale false
(pop) ; 8
; [dead else-branch 200] $t@833 == Null
(pop) ; 7
; [dead else-branch 199] -1 == $t@830
(pop) ; 6
(push) ; 6
; [else-branch 197] sys__result@859 > 0
(assert (> sys__result@859 0))
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch 167] sys__result@853 == 0
(assert (= sys__result@853 0))
(pop) ; 5
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch 163] $t@833 == Null
(assert (= $t@833 $Ref.null))
(declare-const $k@962 $Perm)
(assert ($Perm.isValidVar $k@962))
(assert ($Perm.isReadVar $k@962 $Perm.Write))
(declare-const $t@963 $Ref)
(declare-const $k@964 $Perm)
(assert ($Perm.isValidVar $k@964))
(assert ($Perm.isReadVar $k@964 $Perm.Write))
(declare-const $t@965 $Ref)
(push) ; 4
(declare-const $k@966 $Perm)
(assert ($Perm.isValidVar $k@966))
(assert ($Perm.isReadVar $k@966 $Perm.Write))
(declare-const $t@967 Int)
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 5
(assert (not (not (= $k@966 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@966 $Perm.No)))
(assert (> $t@967 0))
(declare-const $k@968 $Perm)
(assert ($Perm.isValidVar $k@968))
(assert ($Perm.isReadVar $k@968 $Perm.Write))
(declare-const $t@969 $Ref)
; [eval] diz.BlockingQueue__count != null
(push) ; 5
(assert (not (not (= $k@968 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@968 $Perm.No)))
(assert (not (= $t@969 $Ref.null)))
(declare-const $t@970 $Ref)
; [eval] diz.BlockingQueue__first != null
(push) ; 5
(assert (not (= $t@970 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
(assert (not (not (= $t@970 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
; [then-branch 201] $t@970 != Null
(assert (not (= $t@970 $Ref.null)))
(declare-const $t@971 $Snap)
(declare-const $k@972 $Perm)
(assert ($Perm.isValidVar $k@972))
(assert ($Perm.isReadVar $k@972 $Perm.Write))
(declare-const $t@973 $Ref)
(declare-const $k@974 $Perm)
(assert ($Perm.isValidVar $k@974))
(assert ($Perm.isReadVar $k@974 $Perm.Write))
(declare-const $t@975 $Ref)
(pop) ; 5
(push) ; 5
; [else-branch 201] $t@970 == Null
(assert (= $t@970 $Ref.null))
(declare-const $k@976 $Perm)
(assert ($Perm.isValidVar $k@976))
(assert ($Perm.isReadVar $k@976 $Perm.Write))
(declare-const $t@977 $Ref)
(declare-const $k@978 $Perm)
(assert ($Perm.isValidVar $k@978))
(assert ($Perm.isReadVar $k@978 $Perm.Write))
(declare-const $t@979 $Ref)
(pop) ; 5
(pop) ; 4
(push) ; 4
; [exec]
; x := null
; [exec]
; __flatten_34 := AtomicInteger__get(diz.BlockingQueue__count)
; [eval] diz != null
(declare-const sys__result@980 Int)
; [exec]
; currentCount := __flatten_34
; [eval] currentCount == 0
(push) ; 5
(assert (not (not (= sys__result@980 0))))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
(assert (not (= sys__result@980 0)))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
; [then-branch 202] sys__result@980 == 0
(assert (= sys__result@980 0))
; [exec]
; __flatten_35 := x
; [exec]
; sys__result := __flatten_35
; [exec]
; assert acc(diz.BlockingQueue__capacity, wildcard) && (diz.BlockingQueue__capacity > 0) && acc(diz.BlockingQueue__count, wildcard) && (diz.BlockingQueue__count != null) && acc(diz.BlockingQueue__first, write) && ((diz.BlockingQueue__first != null) ==> acc(Node__state(diz.BlockingQueue__first), write)) && acc(diz.BlockingQueue__putLock, wildcard) && acc(diz.BlockingQueue__takeLock, wildcard)
(declare-const $k@981 $Perm)
(assert ($Perm.isValidVar $k@981))
(assert ($Perm.isReadVar $k@981 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@981 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (< $k@981 $k@829))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@982 $Perm)
(assert ($Perm.isValidVar $k@982))
(assert ($Perm.isReadVar $k@982 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@982 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (< $k@982 $k@831))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 6
(assert (not (not (= $t@833 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 6
; [dead then-branch 203] $t@833 != Null
(push) ; 6
; [else-branch 203] $t@833 == Null
(declare-const $k@983 $Perm)
(assert ($Perm.isValidVar $k@983))
(assert ($Perm.isReadVar $k@983 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@983 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(push) ; 7
(assert (not (not (= $k@962 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (not (= $k@962 $Perm.No)))
(assert (< $k@983 $k@962))
(declare-const $k@984 $Perm)
(assert ($Perm.isValidVar $k@984))
(assert ($Perm.isReadVar $k@984 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@984 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(push) ; 7
(assert (not (not (= $k@964 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (not (= $k@964 $Perm.No)))
(assert (< $k@984 $k@964))
; [exec]
; inhale false
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch 202] sys__result@980 != 0
(assert (not (= sys__result@980 0)))
(pop) ; 5
; [eval] !(currentCount == 0)
; [eval] currentCount == 0
(push) ; 5
(assert (not (= sys__result@980 0)))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
(assert (not (not (= sys__result@980 0))))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
; [then-branch 204] sys__result@980 != 0
(assert (not (= sys__result@980 0)))
; [exec]
; c := -1
; [eval] -1
; [exec]
; inhale true
; [exec]
; inhale acc(Lock__lock_held(diz.BlockingQueue__takeLock), write)
(push) ; 6
(assert (not (not (= $k@964 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= $k@964 $Perm.No)))
(declare-const $t@985 $Snap)
; [exec]
; __flatten_36 := AtomicInteger__get(diz.BlockingQueue__count)
; [eval] diz != null
(declare-const sys__result@986 Int)
; [exec]
; currentCount := __flatten_36
; [eval] currentCount > 0
(push) ; 6
(assert (not (not (> sys__result@986 0))))
(check-sat)
; unknown
; 0.00s
(pop) ; 6
(push) ; 6
(assert (not (> sys__result@986 0)))
(check-sat)
; unknown
; 0.00s
(pop) ; 6
(push) ; 6
; [then-branch 205] sys__result@986 > 0
(assert (> sys__result@986 0))
; [exec]
; inhale diz.BlockingQueue__first != null
; [eval] diz.BlockingQueue__first != null
(assert (not (= $t@833 $Ref.null)))
; [exec]
; __flatten_37 := BlockingQueue__unlinkFirst(diz)
; [eval] diz != null
(declare-const $k@987 $Perm)
(assert ($Perm.isValidVar $k@987))
(assert ($Perm.isReadVar $k@987 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@987 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@987 $k@829))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@988 $Perm)
(assert ($Perm.isValidVar $k@988))
(assert ($Perm.isReadVar $k@988 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@988 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@988 $k@831))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
; [dead then-branch 206] $t@833 != Null
; [dead else-branch 206] $t@833 == Null
(pop) ; 6
(push) ; 6
; [else-branch 205] !sys__result@986 > 0
(assert (not (> sys__result@986 0)))
(pop) ; 6
; [eval] !(currentCount > 0)
; [eval] currentCount > 0
(push) ; 6
(assert (not (> sys__result@986 0)))
(check-sat)
; unknown
; 0.00s
(pop) ; 6
(push) ; 6
(assert (not (not (> sys__result@986 0))))
(check-sat)
; unknown
; 0.00s
(pop) ; 6
(push) ; 6
; [then-branch 207] !sys__result@986 > 0
(assert (not (> sys__result@986 0)))
; [exec]
; exhale acc(Lock__lock_held(diz.BlockingQueue__takeLock), write)
; [exec]
; exhale true
; [eval] c == diz.BlockingQueue__capacity
(push) ; 7
(assert (not (not (= (- 0 1) $t@830))))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(push) ; 7
(assert (not (= (- 0 1) $t@830)))
(check-sat)
; unknown
; 0.00s
(pop) ; 7
; [dead then-branch 208] -1 == $t@830
(push) ; 7
; [else-branch 208] -1 != $t@830
(assert (not (= (- 0 1) $t@830)))
(pop) ; 7
; [eval] !(c == diz.BlockingQueue__capacity)
; [eval] c == diz.BlockingQueue__capacity
(push) ; 7
(assert (not (= (- 0 1) $t@830)))
(check-sat)
; unknown
; 0.00s
(pop) ; 7
(push) ; 7
(assert (not (not (= (- 0 1) $t@830))))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(push) ; 7
; [then-branch 209] -1 != $t@830
(assert (not (= (- 0 1) $t@830)))
; [exec]
; __flatten_40 := x
; [exec]
; sys__result := __flatten_40
; [exec]
; assert acc(diz.BlockingQueue__capacity, wildcard) && (diz.BlockingQueue__capacity > 0) && acc(diz.BlockingQueue__count, wildcard) && (diz.BlockingQueue__count != null) && acc(diz.BlockingQueue__first, write) && ((diz.BlockingQueue__first != null) ==> acc(Node__state(diz.BlockingQueue__first), write)) && acc(diz.BlockingQueue__putLock, wildcard) && acc(diz.BlockingQueue__takeLock, wildcard)
(declare-const $k@989 $Perm)
(assert ($Perm.isValidVar $k@989))
(assert ($Perm.isReadVar $k@989 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@989 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (< $k@989 $k@829))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@990 $Perm)
(assert ($Perm.isValidVar $k@990))
(assert ($Perm.isReadVar $k@990 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@990 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (< $k@990 $k@831))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 8
(assert (not (not (= $t@833 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
; [dead then-branch 210] $t@833 != Null
(push) ; 8
; [else-branch 210] $t@833 == Null
(declare-const $k@991 $Perm)
(assert ($Perm.isValidVar $k@991))
(assert ($Perm.isReadVar $k@991 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@991 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(push) ; 9
(assert (not (not (= $k@962 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (not (= $k@962 $Perm.No)))
(assert (< $k@991 $k@962))
(declare-const $k@992 $Perm)
(assert ($Perm.isValidVar $k@992))
(assert ($Perm.isReadVar $k@992 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@992 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@992 $k@964))
; [exec]
; inhale false
(pop) ; 8
(pop) ; 7
; [dead else-branch 209] -1 == $t@830
(pop) ; 6
(push) ; 6
; [else-branch 207] sys__result@986 > 0
(assert (> sys__result@986 0))
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch 204] sys__result@980 == 0
(assert (= sys__result@980 0))
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
; ---------- BlockingQueue__peek ----------
(declare-const diz@993 $Ref)
(declare-const sys__result@994 $Ref)
(declare-const x@995 $Ref)
(declare-const currentCount@996 Int)
(declare-const __flatten_41@997 Int)
(declare-const __flatten_42@998 $Ref)
(declare-const __flatten_43@999 $Ref)
(declare-const __flatten_44@1000 $Ref)
(declare-const __flatten_45@1001 $Ref)
(push) ; 2
; [eval] diz != null
(assert (not (= diz@993 $Ref.null)))
(declare-const $k@1002 $Perm)
(assert ($Perm.isValidVar $k@1002))
(assert ($Perm.isReadVar $k@1002 $Perm.Write))
(declare-const $t@1003 Int)
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 3
(assert (not (not (= $k@1002 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 3
(assert (not (= $k@1002 $Perm.No)))
(assert (> $t@1003 0))
(declare-const $k@1004 $Perm)
(assert ($Perm.isValidVar $k@1004))
(assert ($Perm.isReadVar $k@1004 $Perm.Write))
(declare-const $t@1005 $Ref)
; [eval] diz.BlockingQueue__count != null
(push) ; 3
(assert (not (not (= $k@1004 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 3
(assert (not (= $k@1004 $Perm.No)))
(assert (not (= $t@1005 $Ref.null)))
(declare-const $t@1006 $Ref)
; [eval] diz.BlockingQueue__first != null
(push) ; 3
(assert (not (= $t@1006 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 3
(push) ; 3
(assert (not (not (= $t@1006 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 3
(push) ; 3
; [then-branch 211] $t@1006 != Null
(assert (not (= $t@1006 $Ref.null)))
(declare-const $t@1007 $Snap)
(declare-const $k@1008 $Perm)
(assert ($Perm.isValidVar $k@1008))
(assert ($Perm.isReadVar $k@1008 $Perm.Write))
(declare-const $t@1009 $Ref)
(declare-const $k@1010 $Perm)
(assert ($Perm.isValidVar $k@1010))
(assert ($Perm.isReadVar $k@1010 $Perm.Write))
(declare-const $t@1011 $Ref)
(push) ; 4
(declare-const $k@1012 $Perm)
(assert ($Perm.isValidVar $k@1012))
(assert ($Perm.isReadVar $k@1012 $Perm.Write))
(declare-const $t@1013 Int)
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 5
(assert (not (not (= $k@1012 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@1012 $Perm.No)))
(assert (> $t@1013 0))
(declare-const $k@1014 $Perm)
(assert ($Perm.isValidVar $k@1014))
(assert ($Perm.isReadVar $k@1014 $Perm.Write))
(declare-const $t@1015 $Ref)
; [eval] diz.BlockingQueue__count != null
(push) ; 5
(assert (not (not (= $k@1014 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@1014 $Perm.No)))
(assert (not (= $t@1015 $Ref.null)))
(declare-const $t@1016 $Ref)
; [eval] diz.BlockingQueue__first != null
(push) ; 5
(assert (not (= $t@1016 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
(assert (not (not (= $t@1016 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
; [then-branch 212] $t@1016 != Null
(assert (not (= $t@1016 $Ref.null)))
(declare-const $t@1017 $Snap)
(declare-const $k@1018 $Perm)
(assert ($Perm.isValidVar $k@1018))
(assert ($Perm.isReadVar $k@1018 $Perm.Write))
(declare-const $t@1019 $Ref)
(declare-const $k@1020 $Perm)
(assert ($Perm.isValidVar $k@1020))
(assert ($Perm.isReadVar $k@1020 $Perm.Write))
(declare-const $t@1021 $Ref)
(pop) ; 5
(push) ; 5
; [else-branch 212] $t@1016 == Null
(assert (= $t@1016 $Ref.null))
(declare-const $k@1022 $Perm)
(assert ($Perm.isValidVar $k@1022))
(assert ($Perm.isReadVar $k@1022 $Perm.Write))
(declare-const $t@1023 $Ref)
(declare-const $k@1024 $Perm)
(assert ($Perm.isValidVar $k@1024))
(assert ($Perm.isReadVar $k@1024 $Perm.Write))
(declare-const $t@1025 $Ref)
(pop) ; 5
(pop) ; 4
(push) ; 4
; [exec]
; x := null
; [exec]
; __flatten_41 := AtomicInteger__get(diz.BlockingQueue__count)
; [eval] diz != null
(declare-const sys__result@1026 Int)
; [exec]
; currentCount := __flatten_41
; [eval] currentCount == 0
(push) ; 5
(assert (not (not (= sys__result@1026 0))))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
(assert (not (= sys__result@1026 0)))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
; [then-branch 213] sys__result@1026 == 0
(assert (= sys__result@1026 0))
; [exec]
; inhale diz.BlockingQueue__first == null
; [eval] diz.BlockingQueue__first == null
(assert (= $t@1006 $Ref.null))
; [exec]
; __flatten_42 := x
; [exec]
; sys__result := __flatten_42
; [exec]
; assert acc(diz.BlockingQueue__capacity, wildcard) && (diz.BlockingQueue__capacity > 0) && acc(diz.BlockingQueue__count, wildcard) && (diz.BlockingQueue__count != null) && acc(diz.BlockingQueue__first, write) && ((diz.BlockingQueue__first != null) ==> acc(Node__state(diz.BlockingQueue__first), write)) && acc(diz.BlockingQueue__putLock, wildcard) && acc(diz.BlockingQueue__takeLock, wildcard)
(declare-const $k@1027 $Perm)
(assert ($Perm.isValidVar $k@1027))
(assert ($Perm.isReadVar $k@1027 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@1027 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (< $k@1027 $k@1002))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@1028 $Perm)
(assert ($Perm.isValidVar $k@1028))
(assert ($Perm.isReadVar $k@1028 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@1028 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (< $k@1028 $k@1004))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
; [dead then-branch 214] $t@1006 != Null
; [dead else-branch 214] $t@1006 == Null
(pop) ; 5
(push) ; 5
; [else-branch 213] sys__result@1026 != 0
(assert (not (= sys__result@1026 0)))
(pop) ; 5
; [eval] !(currentCount == 0)
; [eval] currentCount == 0
(push) ; 5
(assert (not (= sys__result@1026 0)))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
(assert (not (not (= sys__result@1026 0))))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
; [then-branch 215] sys__result@1026 != 0
(assert (not (= sys__result@1026 0)))
; [exec]
; inhale true
; [exec]
; inhale acc(Lock__lock_held(diz.BlockingQueue__takeLock), write)
(push) ; 6
(assert (not (not (= $k@1010 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= $k@1010 $Perm.No)))
(declare-const $t@1029 $Snap)
; [eval] diz.BlockingQueue__first != null
(push) ; 6
(assert (not (= $t@1006 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 6
(push) ; 6
; [then-branch 216] $t@1006 != Null
; [exec]
; unfold acc(Node__state(diz.BlockingQueue__first), write)
(declare-const $t@1030 $Snap)
(declare-const $t@1031 $Snap)
(assert (= $t@1007 ($Snap.combine $t@1030 $t@1031)))
(declare-const $t@1032 Int)
(declare-const $t@1033 $Ref)
(assert (=
  $t@1030
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@1032)
    ($SortWrappers.$RefTo$Snap $t@1033))))
(declare-const $k@1034 $Perm)
(assert ($Perm.isValidVar $k@1034))
(assert ($Perm.isReadVar $k@1034 $Perm.Write))
; [eval] diz.BlockingQueue__first.Node__next != null
(push) ; 7
(assert (not (= $t@1033 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 7
(push) ; 7
(assert (not (not (= $t@1033 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 7
(push) ; 7
; [then-branch 217] $t@1033 != Null
(assert (not (= $t@1033 $Ref.null)))
; [exec]
; __flatten_43 := diz.BlockingQueue__first
; [exec]
; __flatten_44 := Integer__Integer(__flatten_43.Node__val)
(push) ; 8
(assert (not (not (= $k@1034 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= $k@1034 $Perm.No)))
(declare-const sys__result@1035 $Ref)
(declare-const $t@1036 $Snap)
(declare-const $t@1037 Int)
(assert (= $t@1036 ($Snap.combine ($SortWrappers.IntTo$Snap $t@1037) $Snap.unit)))
(declare-const $t@1038 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@1037)
  ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@1038))))
; [eval] sys__result != null
(assert (not (= sys__result@1035 $Ref.null)))
(declare-const $k@1039 $Perm)
(assert ($Perm.isValidVar $k@1039))
(assert ($Perm.isReadVar $k@1039 $Perm.Write))
; [eval] sys__result.Integer__val == val
(push) ; 8
(assert (not (not (= $k@1039 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= $k@1039 $Perm.No)))
(assert (= $t@1038 $t@1032))
; [exec]
; x := __flatten_44
; [exec]
; fold acc(Node__state(diz.BlockingQueue__first), write)
(declare-const $k@1040 $Perm)
(assert ($Perm.isValidVar $k@1040))
(assert ($Perm.isReadVar $k@1040 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@1040 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (< $k@1040 $k@1034))
; [eval] diz.Node__next != null
(push) ; 8
(assert (not (= $t@1033 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
(push) ; 8
; [then-branch 218] $t@1033 != Null
; [exec]
; exhale acc(Lock__lock_held(diz.BlockingQueue__takeLock), write)
; [exec]
; exhale true
; [exec]
; __flatten_45 := x
; [exec]
; sys__result := __flatten_45
; [exec]
; assert acc(diz.BlockingQueue__capacity, wildcard) && (diz.BlockingQueue__capacity > 0) && acc(diz.BlockingQueue__count, wildcard) && (diz.BlockingQueue__count != null) && acc(diz.BlockingQueue__first, write) && ((diz.BlockingQueue__first != null) ==> acc(Node__state(diz.BlockingQueue__first), write)) && acc(diz.BlockingQueue__putLock, wildcard) && acc(diz.BlockingQueue__takeLock, wildcard)
(declare-const $k@1041 $Perm)
(assert ($Perm.isValidVar $k@1041))
(assert ($Perm.isReadVar $k@1041 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@1041 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@1041 $k@1002))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@1042 $Perm)
(assert ($Perm.isValidVar $k@1042))
(assert ($Perm.isReadVar $k@1042 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@1042 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@1042 $k@1004))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 9
(assert (not (= $t@1006 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
(push) ; 9
; [then-branch 219] $t@1006 != Null
(declare-const $k@1043 $Perm)
(assert ($Perm.isValidVar $k@1043))
(assert ($Perm.isReadVar $k@1043 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@1043 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= $k@1008 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not (= $k@1008 $Perm.No)))
(assert (< $k@1043 $k@1008))
(declare-const $k@1044 $Perm)
(assert ($Perm.isValidVar $k@1044))
(assert ($Perm.isReadVar $k@1044 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@1044 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (< $k@1044 $k@1010))
; [exec]
; inhale false
(pop) ; 9
; [dead else-branch 219] $t@1006 == Null
(pop) ; 8
; [dead else-branch 218] $t@1033 == Null
(pop) ; 7
(push) ; 7
; [else-branch 217] $t@1033 == Null
(assert (= $t@1033 $Ref.null))
; [exec]
; __flatten_43 := diz.BlockingQueue__first
; [exec]
; __flatten_44 := Integer__Integer(__flatten_43.Node__val)
(push) ; 8
(assert (not (not (= $k@1034 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= $k@1034 $Perm.No)))
(declare-const sys__result@1045 $Ref)
(declare-const $t@1046 $Snap)
(declare-const $t@1047 Int)
(assert (= $t@1046 ($Snap.combine ($SortWrappers.IntTo$Snap $t@1047) $Snap.unit)))
(declare-const $t@1048 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@1047)
  ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@1048))))
; [eval] sys__result != null
(assert (not (= sys__result@1045 $Ref.null)))
(declare-const $k@1049 $Perm)
(assert ($Perm.isValidVar $k@1049))
(assert ($Perm.isReadVar $k@1049 $Perm.Write))
; [eval] sys__result.Integer__val == val
(push) ; 8
(assert (not (not (= $k@1049 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= $k@1049 $Perm.No)))
(assert (= $t@1048 $t@1032))
; [exec]
; x := __flatten_44
; [exec]
; fold acc(Node__state(diz.BlockingQueue__first), write)
(declare-const $k@1050 $Perm)
(assert ($Perm.isValidVar $k@1050))
(assert ($Perm.isReadVar $k@1050 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@1050 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (< $k@1050 $k@1034))
; [eval] diz.Node__next != null
(push) ; 8
(assert (not (not (= $t@1033 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
; [dead then-branch 220] $t@1033 != Null
(push) ; 8
; [else-branch 220] $t@1033 == Null
; [exec]
; exhale acc(Lock__lock_held(diz.BlockingQueue__takeLock), write)
; [exec]
; exhale true
; [exec]
; __flatten_45 := x
; [exec]
; sys__result := __flatten_45
; [exec]
; assert acc(diz.BlockingQueue__capacity, wildcard) && (diz.BlockingQueue__capacity > 0) && acc(diz.BlockingQueue__count, wildcard) && (diz.BlockingQueue__count != null) && acc(diz.BlockingQueue__first, write) && ((diz.BlockingQueue__first != null) ==> acc(Node__state(diz.BlockingQueue__first), write)) && acc(diz.BlockingQueue__putLock, wildcard) && acc(diz.BlockingQueue__takeLock, wildcard)
(declare-const $k@1051 $Perm)
(assert ($Perm.isValidVar $k@1051))
(assert ($Perm.isReadVar $k@1051 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@1051 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@1051 $k@1002))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@1052 $Perm)
(assert ($Perm.isValidVar $k@1052))
(assert ($Perm.isReadVar $k@1052 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@1052 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@1052 $k@1004))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 9
(assert (not (= $t@1006 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
(push) ; 9
; [then-branch 221] $t@1006 != Null
(declare-const $k@1053 $Perm)
(assert ($Perm.isValidVar $k@1053))
(assert ($Perm.isReadVar $k@1053 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@1053 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= $k@1008 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not (= $k@1008 $Perm.No)))
(assert (< $k@1053 $k@1008))
(declare-const $k@1054 $Perm)
(assert ($Perm.isValidVar $k@1054))
(assert ($Perm.isReadVar $k@1054 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@1054 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (< $k@1054 $k@1010))
; [exec]
; inhale false
(pop) ; 9
; [dead else-branch 221] $t@1006 == Null
(pop) ; 8
(pop) ; 7
(pop) ; 6
; [dead else-branch 216] $t@1006 == Null
; [eval] !(diz.BlockingQueue__first != null)
; [eval] diz.BlockingQueue__first != null
(push) ; 6
(assert (not (= $t@1006 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 6
; [dead then-branch 222] $t@1006 == Null
(push) ; 6
; [else-branch 222] $t@1006 != Null
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch 215] sys__result@1026 == 0
(assert (= sys__result@1026 0))
(pop) ; 5
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch 211] $t@1006 == Null
(assert (= $t@1006 $Ref.null))
(declare-const $k@1055 $Perm)
(assert ($Perm.isValidVar $k@1055))
(assert ($Perm.isReadVar $k@1055 $Perm.Write))
(declare-const $t@1056 $Ref)
(declare-const $k@1057 $Perm)
(assert ($Perm.isValidVar $k@1057))
(assert ($Perm.isReadVar $k@1057 $Perm.Write))
(declare-const $t@1058 $Ref)
(push) ; 4
(declare-const $k@1059 $Perm)
(assert ($Perm.isValidVar $k@1059))
(assert ($Perm.isReadVar $k@1059 $Perm.Write))
(declare-const $t@1060 Int)
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 5
(assert (not (not (= $k@1059 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@1059 $Perm.No)))
(assert (> $t@1060 0))
(declare-const $k@1061 $Perm)
(assert ($Perm.isValidVar $k@1061))
(assert ($Perm.isReadVar $k@1061 $Perm.Write))
(declare-const $t@1062 $Ref)
; [eval] diz.BlockingQueue__count != null
(push) ; 5
(assert (not (not (= $k@1061 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@1061 $Perm.No)))
(assert (not (= $t@1062 $Ref.null)))
(declare-const $t@1063 $Ref)
; [eval] diz.BlockingQueue__first != null
(push) ; 5
(assert (not (= $t@1063 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
(assert (not (not (= $t@1063 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
; [then-branch 223] $t@1063 != Null
(assert (not (= $t@1063 $Ref.null)))
(declare-const $t@1064 $Snap)
(declare-const $k@1065 $Perm)
(assert ($Perm.isValidVar $k@1065))
(assert ($Perm.isReadVar $k@1065 $Perm.Write))
(declare-const $t@1066 $Ref)
(declare-const $k@1067 $Perm)
(assert ($Perm.isValidVar $k@1067))
(assert ($Perm.isReadVar $k@1067 $Perm.Write))
(declare-const $t@1068 $Ref)
(pop) ; 5
(push) ; 5
; [else-branch 223] $t@1063 == Null
(assert (= $t@1063 $Ref.null))
(declare-const $k@1069 $Perm)
(assert ($Perm.isValidVar $k@1069))
(assert ($Perm.isReadVar $k@1069 $Perm.Write))
(declare-const $t@1070 $Ref)
(declare-const $k@1071 $Perm)
(assert ($Perm.isValidVar $k@1071))
(assert ($Perm.isReadVar $k@1071 $Perm.Write))
(declare-const $t@1072 $Ref)
(pop) ; 5
(pop) ; 4
(push) ; 4
; [exec]
; x := null
; [exec]
; __flatten_41 := AtomicInteger__get(diz.BlockingQueue__count)
; [eval] diz != null
(declare-const sys__result@1073 Int)
; [exec]
; currentCount := __flatten_41
; [eval] currentCount == 0
(push) ; 5
(assert (not (not (= sys__result@1073 0))))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
(assert (not (= sys__result@1073 0)))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
; [then-branch 224] sys__result@1073 == 0
(assert (= sys__result@1073 0))
; [exec]
; inhale diz.BlockingQueue__first == null
; [eval] diz.BlockingQueue__first == null
; [exec]
; __flatten_42 := x
; [exec]
; sys__result := __flatten_42
; [exec]
; assert acc(diz.BlockingQueue__capacity, wildcard) && (diz.BlockingQueue__capacity > 0) && acc(diz.BlockingQueue__count, wildcard) && (diz.BlockingQueue__count != null) && acc(diz.BlockingQueue__first, write) && ((diz.BlockingQueue__first != null) ==> acc(Node__state(diz.BlockingQueue__first), write)) && acc(diz.BlockingQueue__putLock, wildcard) && acc(diz.BlockingQueue__takeLock, wildcard)
(declare-const $k@1074 $Perm)
(assert ($Perm.isValidVar $k@1074))
(assert ($Perm.isReadVar $k@1074 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@1074 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (< $k@1074 $k@1002))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@1075 $Perm)
(assert ($Perm.isValidVar $k@1075))
(assert ($Perm.isReadVar $k@1075 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@1075 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (< $k@1075 $k@1004))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 6
(assert (not (not (= $t@1006 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 6
; [dead then-branch 225] $t@1006 != Null
(push) ; 6
; [else-branch 225] $t@1006 == Null
(declare-const $k@1076 $Perm)
(assert ($Perm.isValidVar $k@1076))
(assert ($Perm.isReadVar $k@1076 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@1076 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(push) ; 7
(assert (not (not (= $k@1055 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (not (= $k@1055 $Perm.No)))
(assert (< $k@1076 $k@1055))
(declare-const $k@1077 $Perm)
(assert ($Perm.isValidVar $k@1077))
(assert ($Perm.isReadVar $k@1077 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@1077 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(push) ; 7
(assert (not (not (= $k@1057 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (not (= $k@1057 $Perm.No)))
(assert (< $k@1077 $k@1057))
; [exec]
; inhale false
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch 224] sys__result@1073 != 0
(assert (not (= sys__result@1073 0)))
(pop) ; 5
; [eval] !(currentCount == 0)
; [eval] currentCount == 0
(push) ; 5
(assert (not (= sys__result@1073 0)))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
(assert (not (not (= sys__result@1073 0))))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
; [then-branch 226] sys__result@1073 != 0
(assert (not (= sys__result@1073 0)))
; [exec]
; inhale true
; [exec]
; inhale acc(Lock__lock_held(diz.BlockingQueue__takeLock), write)
(push) ; 6
(assert (not (not (= $k@1057 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= $k@1057 $Perm.No)))
(declare-const $t@1078 $Snap)
; [eval] diz.BlockingQueue__first != null
(push) ; 6
(assert (not (not (= $t@1006 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 6
; [dead then-branch 227] $t@1006 != Null
(push) ; 6
; [else-branch 227] $t@1006 == Null
(pop) ; 6
; [eval] !(diz.BlockingQueue__first != null)
; [eval] diz.BlockingQueue__first != null
(push) ; 6
(assert (not (not (= $t@1006 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 6
(push) ; 6
; [then-branch 228] $t@1006 == Null
; [exec]
; exhale acc(Lock__lock_held(diz.BlockingQueue__takeLock), write)
; [exec]
; exhale true
; [exec]
; __flatten_45 := x
; [exec]
; sys__result := __flatten_45
; [exec]
; assert acc(diz.BlockingQueue__capacity, wildcard) && (diz.BlockingQueue__capacity > 0) && acc(diz.BlockingQueue__count, wildcard) && (diz.BlockingQueue__count != null) && acc(diz.BlockingQueue__first, write) && ((diz.BlockingQueue__first != null) ==> acc(Node__state(diz.BlockingQueue__first), write)) && acc(diz.BlockingQueue__putLock, wildcard) && acc(diz.BlockingQueue__takeLock, wildcard)
(declare-const $k@1079 $Perm)
(assert ($Perm.isValidVar $k@1079))
(assert ($Perm.isReadVar $k@1079 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@1079 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@1079 $k@1002))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@1080 $Perm)
(assert ($Perm.isValidVar $k@1080))
(assert ($Perm.isReadVar $k@1080 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@1080 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@1080 $k@1004))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 7
(assert (not (not (= $t@1006 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 7
; [dead then-branch 229] $t@1006 != Null
(push) ; 7
; [else-branch 229] $t@1006 == Null
(declare-const $k@1081 $Perm)
(assert ($Perm.isValidVar $k@1081))
(assert ($Perm.isReadVar $k@1081 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@1081 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= $k@1055 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= $k@1055 $Perm.No)))
(assert (< $k@1081 $k@1055))
(declare-const $k@1082 $Perm)
(assert ($Perm.isValidVar $k@1082))
(assert ($Perm.isReadVar $k@1082 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@1082 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (< $k@1082 $k@1057))
; [exec]
; inhale false
(pop) ; 7
(pop) ; 6
; [dead else-branch 228] $t@1006 != Null
(pop) ; 5
(push) ; 5
; [else-branch 226] sys__result@1073 == 0
(assert (= sys__result@1073 0))
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
; ---------- BlockingQueue__linkLast ----------
(declare-const diz@1083 $Ref)
(declare-const val@1084 Int)
(declare-const __flatten_46@1085 $Ref)
(declare-const __flatten_47@1086 $Ref)
(declare-const __flatten_48@1087 $Ref)
(declare-const __flatten_132@1088 $Ref)
(push) ; 2
; [eval] diz != null
(assert (not (= diz@1083 $Ref.null)))
(declare-const $k@1089 $Perm)
(assert ($Perm.isValidVar $k@1089))
(assert ($Perm.isReadVar $k@1089 $Perm.Write))
(declare-const $t@1090 Int)
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 3
(assert (not (not (= $k@1089 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 3
(assert (not (= $k@1089 $Perm.No)))
(assert (> $t@1090 0))
(declare-const $k@1091 $Perm)
(assert ($Perm.isValidVar $k@1091))
(assert ($Perm.isReadVar $k@1091 $Perm.Write))
(declare-const $t@1092 $Ref)
; [eval] diz.BlockingQueue__count != null
(push) ; 3
(assert (not (not (= $k@1091 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 3
(assert (not (= $k@1091 $Perm.No)))
(assert (not (= $t@1092 $Ref.null)))
(declare-const $t@1093 $Ref)
; [eval] diz.BlockingQueue__first != null
(push) ; 3
(assert (not (= $t@1093 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 3
(push) ; 3
(assert (not (not (= $t@1093 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 3
(push) ; 3
; [then-branch 230] $t@1093 != Null
(assert (not (= $t@1093 $Ref.null)))
(declare-const $t@1094 $Snap)
(declare-const $k@1095 $Perm)
(assert ($Perm.isValidVar $k@1095))
(assert ($Perm.isReadVar $k@1095 $Perm.Write))
(declare-const $t@1096 $Ref)
(declare-const $k@1097 $Perm)
(assert ($Perm.isValidVar $k@1097))
(assert ($Perm.isReadVar $k@1097 $Perm.Write))
(declare-const $t@1098 $Ref)
(push) ; 4
(declare-const $k@1099 $Perm)
(assert ($Perm.isValidVar $k@1099))
(assert ($Perm.isReadVar $k@1099 $Perm.Write))
(declare-const $t@1100 Int)
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 5
(assert (not (not (= $k@1099 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@1099 $Perm.No)))
(assert (> $t@1100 0))
(declare-const $k@1101 $Perm)
(assert ($Perm.isValidVar $k@1101))
(assert ($Perm.isReadVar $k@1101 $Perm.Write))
(declare-const $t@1102 $Ref)
; [eval] diz.BlockingQueue__count != null
(push) ; 5
(assert (not (not (= $k@1101 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@1101 $Perm.No)))
(assert (not (= $t@1102 $Ref.null)))
(declare-const $t@1103 $Ref)
; [eval] diz.BlockingQueue__first != null
(push) ; 5
(assert (not (= $t@1103 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
(assert (not (not (= $t@1103 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
; [then-branch 231] $t@1103 != Null
(assert (not (= $t@1103 $Ref.null)))
(declare-const $t@1104 $Snap)
(declare-const $k@1105 $Perm)
(assert ($Perm.isValidVar $k@1105))
(assert ($Perm.isReadVar $k@1105 $Perm.Write))
(declare-const $t@1106 $Ref)
(declare-const $k@1107 $Perm)
(assert ($Perm.isValidVar $k@1107))
(assert ($Perm.isReadVar $k@1107 $Perm.Write))
(declare-const $t@1108 $Ref)
; [eval] diz.BlockingQueue__first != null
; [eval] (old(|BlockingQueue__contents(diz)|) == 0) ==> (BlockingQueue__contents(diz) == Seq(val))
; [eval] old(|BlockingQueue__contents(diz)|) == 0
; [eval] old(|BlockingQueue__contents(diz)|)
; [eval] |BlockingQueue__contents(diz)|
; [eval] BlockingQueue__contents(diz)
; [eval] diz != null
(declare-const $k@1109 $Perm)
(assert ($Perm.isValidVar $k@1109))
(assert ($Perm.isReadVar $k@1109 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@1109 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (< $k@1109 $k@1089))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@1110 $Perm)
(assert ($Perm.isValidVar $k@1110))
(assert ($Perm.isReadVar $k@1110 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@1110 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (< $k@1110 $k@1091))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 6
(assert (not (= $t@1093 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 6
(push) ; 6
; [then-branch 232] $t@1093 != Null
(declare-const $k@1111 $Perm)
(assert ($Perm.isValidVar $k@1111))
(assert ($Perm.isReadVar $k@1111 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@1111 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(push) ; 7
(assert (not (not (= $k@1095 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (not (= $k@1095 $Perm.No)))
(assert (< $k@1111 $k@1095))
(declare-const $k@1112 $Perm)
(assert ($Perm.isValidVar $k@1112))
(assert ($Perm.isReadVar $k@1112 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@1112 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(push) ; 7
(assert (not (not (= $k@1097 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (not (= $k@1097 $Perm.No)))
(assert (< $k@1112 $k@1097))
(pop) ; 6
; [dead else-branch 232] $t@1093 == Null
(assert ($Perm.isValidVar $k@1111))
(assert ($Perm.isReadVar $k@1111 $Perm.Write))
(assert (not (= $k@1095 $Perm.No)))
(assert (< $k@1111 $k@1095))
(assert ($Perm.isValidVar $k@1112))
(assert ($Perm.isReadVar $k@1112 $Perm.Write))
(assert (not (= $k@1097 $Perm.No)))
(assert (< $k@1112 $k@1097))
(push) ; 6
(push) ; 7
(assert (not (not
  (=
    ($Seq.length
      ($BlockingQueue__contents ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine
                    ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@1090))
                    $Snap.unit)
                  ($SortWrappers.$RefTo$Snap $t@1092))
                $Snap.unit)
              ($SortWrappers.$RefTo$Snap $t@1093))
            $t@1094)
          ($SortWrappers.$RefTo$Snap $t@1096))
        ($SortWrappers.$RefTo$Snap $t@1098)) diz@1083))
    0))))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(push) ; 7
(assert (not (=
  ($Seq.length
    ($BlockingQueue__contents ($Snap.combine
      ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@1090))
                  $Snap.unit)
                ($SortWrappers.$RefTo$Snap $t@1092))
              $Snap.unit)
            ($SortWrappers.$RefTo$Snap $t@1093))
          $t@1094)
        ($SortWrappers.$RefTo$Snap $t@1096))
      ($SortWrappers.$RefTo$Snap $t@1098)) diz@1083))
  0)))
(check-sat)
; unknown
; 0.00s
(pop) ; 7
; [dead then-branch 233] |BlockingQueue__contents(diz@1083;((((((((_, $t@1090), _), $t@1092), _), $t@1093), $t@1094), $t@1096), $t@1098))| == 0
(push) ; 7
; [else-branch 233] |BlockingQueue__contents(diz@1083;((((((((_, $t@1090), _), $t@1092), _), $t@1093), $t@1094), $t@1096), $t@1098))| != 0
(assert (not
  (=
    ($Seq.length
      ($BlockingQueue__contents ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine
                    ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@1090))
                    $Snap.unit)
                  ($SortWrappers.$RefTo$Snap $t@1092))
                $Snap.unit)
              ($SortWrappers.$RefTo$Snap $t@1093))
            $t@1094)
          ($SortWrappers.$RefTo$Snap $t@1096))
        ($SortWrappers.$RefTo$Snap $t@1098)) diz@1083))
    0)))
(pop) ; 7
(pop) ; 6
; [eval] (old(|BlockingQueue__contents(diz)|) != 0) ==> (BlockingQueue__contents(diz) == old(BlockingQueue__contents(diz)) ++ Seq(val))
; [eval] old(|BlockingQueue__contents(diz)|) != 0
; [eval] old(|BlockingQueue__contents(diz)|)
; [eval] |BlockingQueue__contents(diz)|
; [eval] BlockingQueue__contents(diz)
; [eval] diz != null
(declare-const $k@1113 $Perm)
(assert ($Perm.isValidVar $k@1113))
(assert ($Perm.isReadVar $k@1113 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@1113 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (< $k@1113 $k@1089))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@1114 $Perm)
(assert ($Perm.isValidVar $k@1114))
(assert ($Perm.isReadVar $k@1114 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@1114 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (< $k@1114 $k@1091))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 6
(assert (not (= $t@1093 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 6
(push) ; 6
; [then-branch 234] $t@1093 != Null
(declare-const $k@1115 $Perm)
(assert ($Perm.isValidVar $k@1115))
(assert ($Perm.isReadVar $k@1115 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@1115 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@1115 $k@1095))
(declare-const $k@1116 $Perm)
(assert ($Perm.isValidVar $k@1116))
(assert ($Perm.isReadVar $k@1116 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@1116 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@1116 $k@1097))
(pop) ; 6
; [dead else-branch 234] $t@1093 == Null
(assert ($Perm.isValidVar $k@1115))
(assert ($Perm.isReadVar $k@1115 $Perm.Write))
(assert (< $k@1115 $k@1095))
(assert ($Perm.isValidVar $k@1116))
(assert ($Perm.isReadVar $k@1116 $Perm.Write))
(assert (< $k@1116 $k@1097))
(push) ; 6
(push) ; 7
(assert (not (=
  ($Seq.length
    ($BlockingQueue__contents ($Snap.combine
      ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@1090))
                  $Snap.unit)
                ($SortWrappers.$RefTo$Snap $t@1092))
              $Snap.unit)
            ($SortWrappers.$RefTo$Snap $t@1093))
          $t@1094)
        ($SortWrappers.$RefTo$Snap $t@1096))
      ($SortWrappers.$RefTo$Snap $t@1098)) diz@1083))
  0)))
(check-sat)
; unknown
; 0.00s
(pop) ; 7
(push) ; 7
(assert (not (not
  (=
    ($Seq.length
      ($BlockingQueue__contents ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine
                    ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@1090))
                    $Snap.unit)
                  ($SortWrappers.$RefTo$Snap $t@1092))
                $Snap.unit)
              ($SortWrappers.$RefTo$Snap $t@1093))
            $t@1094)
          ($SortWrappers.$RefTo$Snap $t@1096))
        ($SortWrappers.$RefTo$Snap $t@1098)) diz@1083))
    0))))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(push) ; 7
; [then-branch 235] |BlockingQueue__contents(diz@1083;((((((((_, $t@1090), _), $t@1092), _), $t@1093), $t@1094), $t@1096), $t@1098))| != 0
(assert (not
  (=
    ($Seq.length
      ($BlockingQueue__contents ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine
                    ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@1090))
                    $Snap.unit)
                  ($SortWrappers.$RefTo$Snap $t@1092))
                $Snap.unit)
              ($SortWrappers.$RefTo$Snap $t@1093))
            $t@1094)
          ($SortWrappers.$RefTo$Snap $t@1096))
        ($SortWrappers.$RefTo$Snap $t@1098)) diz@1083))
    0)))
; [eval] BlockingQueue__contents(diz) == old(BlockingQueue__contents(diz)) ++ Seq(val)
; [eval] BlockingQueue__contents(diz)
; [eval] diz != null
(declare-const $k@1117 $Perm)
(assert ($Perm.isValidVar $k@1117))
(assert ($Perm.isReadVar $k@1117 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@1117 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (< $k@1117 $k@1099))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@1118 $Perm)
(assert ($Perm.isValidVar $k@1118))
(assert ($Perm.isReadVar $k@1118 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@1118 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (< $k@1118 $k@1101))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 8
(assert (not (= $t@1103 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
(push) ; 8
; [then-branch 236] $t@1103 != Null
(declare-const $k@1119 $Perm)
(assert ($Perm.isValidVar $k@1119))
(assert ($Perm.isReadVar $k@1119 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@1119 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(push) ; 9
(assert (not (not (= $k@1105 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (not (= $k@1105 $Perm.No)))
(assert (< $k@1119 $k@1105))
(declare-const $k@1120 $Perm)
(assert ($Perm.isValidVar $k@1120))
(assert ($Perm.isReadVar $k@1120 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@1120 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(push) ; 9
(assert (not (not (= $k@1107 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (not (= $k@1107 $Perm.No)))
(assert (< $k@1120 $k@1107))
(pop) ; 8
; [dead else-branch 236] $t@1103 == Null
(assert ($Perm.isValidVar $k@1119))
(assert ($Perm.isReadVar $k@1119 $Perm.Write))
(assert (not (= $k@1105 $Perm.No)))
(assert (< $k@1119 $k@1105))
(assert ($Perm.isValidVar $k@1120))
(assert ($Perm.isReadVar $k@1120 $Perm.Write))
(assert (not (= $k@1107 $Perm.No)))
(assert (< $k@1120 $k@1107))
; [eval] old(BlockingQueue__contents(diz)) ++ Seq(val)
; [eval] old(BlockingQueue__contents(diz))
; [eval] BlockingQueue__contents(diz)
; [eval] diz != null
(declare-const $k@1121 $Perm)
(assert ($Perm.isValidVar $k@1121))
(assert ($Perm.isReadVar $k@1121 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@1121 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (< $k@1121 $k@1089))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@1122 $Perm)
(assert ($Perm.isValidVar $k@1122))
(assert ($Perm.isReadVar $k@1122 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@1122 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (< $k@1122 $k@1091))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 8
(assert (not (= $t@1093 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
(push) ; 8
; [then-branch 237] $t@1093 != Null
(declare-const $k@1123 $Perm)
(assert ($Perm.isValidVar $k@1123))
(assert ($Perm.isReadVar $k@1123 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@1123 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@1123 $k@1095))
(declare-const $k@1124 $Perm)
(assert ($Perm.isValidVar $k@1124))
(assert ($Perm.isReadVar $k@1124 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@1124 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@1124 $k@1097))
(pop) ; 8
; [dead else-branch 237] $t@1093 == Null
(assert ($Perm.isValidVar $k@1123))
(assert ($Perm.isReadVar $k@1123 $Perm.Write))
(assert (< $k@1123 $k@1095))
(assert ($Perm.isValidVar $k@1124))
(assert ($Perm.isReadVar $k@1124 $Perm.Write))
(assert (< $k@1124 $k@1097))
; [eval] Seq(val)
(assert (= ($Seq.length ($Seq.singleton val@1084)) 1))
(pop) ; 7
; [dead else-branch 235] |BlockingQueue__contents(diz@1083;((((((((_, $t@1090), _), $t@1092), _), $t@1093), $t@1094), $t@1096), $t@1098))| == 0
(pop) ; 6
(assert ($Perm.isValidVar $k@1117))
(assert ($Perm.isReadVar $k@1117 $Perm.Write))
(assert (< $k@1117 $k@1099))
(assert ($Perm.isValidVar $k@1118))
(assert ($Perm.isReadVar $k@1118 $Perm.Write))
(assert (< $k@1118 $k@1101))
(assert ($Perm.isValidVar $k@1119))
(assert ($Perm.isReadVar $k@1119 $Perm.Write))
(assert (not (= $k@1105 $Perm.No)))
(assert (< $k@1119 $k@1105))
(assert ($Perm.isValidVar $k@1120))
(assert ($Perm.isReadVar $k@1120 $Perm.Write))
(assert (not (= $k@1107 $Perm.No)))
(assert (< $k@1120 $k@1107))
(assert ($Perm.isValidVar $k@1121))
(assert ($Perm.isReadVar $k@1121 $Perm.Write))
(assert (< $k@1121 $k@1089))
(assert ($Perm.isValidVar $k@1122))
(assert ($Perm.isReadVar $k@1122 $Perm.Write))
(assert (< $k@1122 $k@1091))
(assert ($Perm.isValidVar $k@1123))
(assert ($Perm.isReadVar $k@1123 $Perm.Write))
(assert (< $k@1123 $k@1095))
(assert ($Perm.isValidVar $k@1124))
(assert ($Perm.isReadVar $k@1124 $Perm.Write))
(assert (< $k@1124 $k@1097))
(assert (= ($Seq.length ($Seq.singleton val@1084)) 1))
(assert (implies
  (not
    (=
      ($Seq.length
        ($BlockingQueue__contents ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine
                    ($Snap.combine
                      ($Snap.combine
                        $Snap.unit
                        ($SortWrappers.IntTo$Snap $t@1090))
                      $Snap.unit)
                    ($SortWrappers.$RefTo$Snap $t@1092))
                  $Snap.unit)
                ($SortWrappers.$RefTo$Snap $t@1093))
              $t@1094)
            ($SortWrappers.$RefTo$Snap $t@1096))
          ($SortWrappers.$RefTo$Snap $t@1098)) diz@1083))
      0))
  ($Seq.equal
    ($BlockingQueue__contents ($Snap.combine
      ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@1100))
                  $Snap.unit)
                ($SortWrappers.$RefTo$Snap $t@1102))
              $Snap.unit)
            ($SortWrappers.$RefTo$Snap $t@1103))
          $t@1104)
        ($SortWrappers.$RefTo$Snap $t@1106))
      ($SortWrappers.$RefTo$Snap $t@1108)) diz@1083)
    ($Seq.append
      ($BlockingQueue__contents ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine
                    ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@1090))
                    $Snap.unit)
                  ($SortWrappers.$RefTo$Snap $t@1092))
                $Snap.unit)
              ($SortWrappers.$RefTo$Snap $t@1093))
            $t@1094)
          ($SortWrappers.$RefTo$Snap $t@1096))
        ($SortWrappers.$RefTo$Snap $t@1098)) diz@1083)
      ($Seq.singleton val@1084)))))
(pop) ; 5
(push) ; 5
; [else-branch 231] $t@1103 == Null
(assert (= $t@1103 $Ref.null))
(declare-const $k@1125 $Perm)
(assert ($Perm.isValidVar $k@1125))
(assert ($Perm.isReadVar $k@1125 $Perm.Write))
(declare-const $t@1126 $Ref)
(declare-const $k@1127 $Perm)
(assert ($Perm.isValidVar $k@1127))
(assert ($Perm.isReadVar $k@1127 $Perm.Write))
(declare-const $t@1128 $Ref)
; [eval] diz.BlockingQueue__first != null
(assert (not (= $t@1103 $Ref.null)))
; [eval] (old(|BlockingQueue__contents(diz)|) == 0) ==> (BlockingQueue__contents(diz) == Seq(val))
; [eval] old(|BlockingQueue__contents(diz)|) == 0
; [eval] old(|BlockingQueue__contents(diz)|)
; [eval] |BlockingQueue__contents(diz)|
; [eval] BlockingQueue__contents(diz)
; [eval] diz != null
(declare-const $k@1129 $Perm)
(assert ($Perm.isValidVar $k@1129))
(assert ($Perm.isReadVar $k@1129 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@1129 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (< $k@1129 $k@1089))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@1130 $Perm)
(assert ($Perm.isValidVar $k@1130))
(assert ($Perm.isReadVar $k@1130 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@1130 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (< $k@1130 $k@1091))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 6
(assert (not (= $t@1093 $Ref.null)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
; [dead then-branch 238] $t@1093 != Null
; [dead else-branch 238] $t@1093 == Null
(pop) ; 5
(pop) ; 4
(push) ; 4
; [eval] diz.BlockingQueue__first == null
(push) ; 5
(assert (not (= $t@1093 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
; [dead then-branch 239] $t@1093 == Null
(push) ; 5
; [else-branch 239] $t@1093 != Null
(pop) ; 5
; [eval] !(diz.BlockingQueue__first == null)
; [eval] diz.BlockingQueue__first == null
(push) ; 5
(assert (not (= $t@1093 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
; [then-branch 240] $t@1093 != Null
; [exec]
; __flatten_48 := Node__Node(val, null)
; [eval] next != null
(push) ; 6
(assert (not false))
(check-sat)
; unknown
; 0.00s
(pop) ; 6
; [dead then-branch 241] False
(push) ; 6
; [else-branch 241] True
(declare-const sys__result@1131 $Ref)
(declare-const $t@1132 $Snap)
(declare-const $t@1133 $Snap)
(assert (= $t@1132 ($Snap.combine $t@1133 $Snap.unit)))
(declare-const $t@1134 $Snap)
(assert (= $t@1133 ($Snap.combine $t@1134 $Snap.unit)))
(declare-const $t@1135 $Snap)
(assert (= $t@1134 ($Snap.combine $Snap.unit $t@1135)))
; [eval] sys__result != null
(assert (not (= sys__result@1131 $Ref.null)))
(push) ; 7
(assert (not (= $t@1093 sys__result@1131)))
(check-sat)
; unknown
; 0.00s
(pop) ; 7
; [eval] (unfolding acc(Node__state(sys__result), write) in (sys__result.Node__val == val) && (sys__result.Node__next == next))
(declare-const $t@1136 $Snap)
(declare-const $t@1137 $Snap)
(assert (= $t@1135 ($Snap.combine $t@1136 $t@1137)))
(declare-const $t@1138 Int)
(declare-const $t@1139 $Ref)
(assert (=
  $t@1136
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@1138)
    ($SortWrappers.$RefTo$Snap $t@1139))))
(declare-const $k@1140 $Perm)
(assert ($Perm.isValidVar $k@1140))
(assert ($Perm.isReadVar $k@1140 $Perm.Write))
; [eval] sys__result.Node__next != null
(push) ; 7
(assert (not (= $t@1139 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 7
(push) ; 7
(assert (not (not (= $t@1139 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 7
(push) ; 7
; [then-branch 242] $t@1139 != Null
(assert (not (= $t@1139 $Ref.null)))
(push) ; 8
(assert (not (= $t@1093 $t@1139)))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
; [eval] (sys__result.Node__val == val) && (sys__result.Node__next == next)
; [eval] sys__result.Node__val == val
(push) ; 8
(assert (not (not (= $k@1140 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= $k@1140 $Perm.No)))
(push) ; 8
(push) ; 9
(assert (not (not (= $t@1138 val@1084))))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
(push) ; 9
(assert (not (= $t@1138 val@1084)))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
(push) ; 9
; [then-branch 243] $t@1138 == val@1084
(assert (= $t@1138 val@1084))
; [eval] sys__result.Node__next == next
(pop) ; 9
(push) ; 9
; [else-branch 243] $t@1138 != val@1084
(assert (not (= $t@1138 val@1084)))
(pop) ; 9
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch 242] $t@1139 == Null
(assert (= $t@1139 $Ref.null))
; [eval] (sys__result.Node__val == val) && (sys__result.Node__next == next)
; [eval] sys__result.Node__val == val
(push) ; 8
(assert (not (not (= $k@1140 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= $k@1140 $Perm.No)))
(push) ; 8
(push) ; 9
(assert (not (not (= $t@1138 val@1084))))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
(push) ; 9
(assert (not (= $t@1138 val@1084)))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
(push) ; 9
; [then-branch 244] $t@1138 == val@1084
(assert (= $t@1138 val@1084))
; [eval] sys__result.Node__next == next
(pop) ; 9
(push) ; 9
; [else-branch 244] $t@1138 != val@1084
(assert (not (= $t@1138 val@1084)))
(pop) ; 9
(pop) ; 8
(pop) ; 7
(declare-fun joinedIn@1141 () Bool)
(assert (implies
  (= $t@1139 $Ref.null)
  (and
    (not (= $k@1140 $Perm.No))
    (= $t@1139 $Ref.null)
    ($Perm.isReadVar $k@1140 $Perm.Write)
    ($Perm.isValidVar $k@1140)
    (=
      $t@1136
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $t@1138)
        ($SortWrappers.$RefTo$Snap $t@1139)))
    (= $t@1135 ($Snap.combine $t@1136 $t@1137)))))
(assert (implies
  (not (= $t@1139 $Ref.null))
  (and
    (not (= $k@1140 $Perm.No))
    (not (= $t@1139 $Ref.null))
    ($Perm.isReadVar $k@1140 $Perm.Write)
    ($Perm.isValidVar $k@1140)
    (=
      $t@1136
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $t@1138)
        ($SortWrappers.$RefTo$Snap $t@1139)))
    (= $t@1135 ($Snap.combine $t@1136 $t@1137)))))
(assert (and
  (implies
    (= $t@1139 $Ref.null)
    (= joinedIn@1141 (and (= $t@1138 val@1084) (= $t@1139 $Ref.null))))
  (implies
    (not (= $t@1139 $Ref.null))
    (= joinedIn@1141 (and (= $t@1138 val@1084) (= $t@1139 $Ref.null))))))
(assert joinedIn@1141)
; [eval] Node__contents(sys__result) == Seq(val) ++ (next == null ? Seq[Int]() : old(Node__contents(next)))
; [eval] Node__contents(sys__result)
; [eval] sys__result != null
; [eval] Seq(val) ++ (next == null ? Seq[Int]() : old(Node__contents(next)))
; [eval] Seq(val)
(assert (= ($Seq.length ($Seq.singleton val@1084)) 1))
; [eval] (next == null ? Seq[Int]() : old(Node__contents(next)))
; [eval] next == null
(push) ; 7
(assert (not false))
(check-sat)
; unknown
; 0.00s
(pop) ; 7
(push) ; 7
; [then-branch 245] True
; [eval] Seq[Int]()
(pop) ; 7
; [dead else-branch 245] False
(declare-const $deadElse@1142 $Seq<Int>)
(assert ($Seq.equal
  ($Node__contents ($Snap.combine $Snap.unit $t@1135) sys__result@1131)
  ($Seq.append ($Seq.singleton val@1084) $Seq.empty<Int>)))
; [exec]
; Node__append(diz.BlockingQueue__first, __flatten_48)
; [eval] diz != null
; [eval] n != null
(declare-const $t@1143 $Snap)
(declare-const $t@1144 $Snap)
(assert (= $t@1143 ($Snap.combine $t@1144 $Snap.unit)))
; [eval] Node__contents(diz) == old(Node__contents(diz)) ++ old(Node__contents(n))
; [eval] Node__contents(diz)
; [eval] diz != null
; [eval] old(Node__contents(diz)) ++ old(Node__contents(n))
; [eval] old(Node__contents(diz))
; [eval] Node__contents(diz)
; [eval] diz != null
; [eval] old(Node__contents(n))
; [eval] Node__contents(n)
; [eval] n != null
(assert ($Seq.equal
  ($Node__contents ($Snap.combine $Snap.unit $t@1144) $t@1093)
  ($Seq.append
    ($Node__contents ($Snap.combine $Snap.unit $t@1094) $t@1093)
    ($Node__contents ($Snap.combine $Snap.unit $t@1135) sys__result@1131))))
(declare-const $k@1145 $Perm)
(assert ($Perm.isValidVar $k@1145))
(assert ($Perm.isReadVar $k@1145 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@1145 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@1145 $k@1089))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@1146 $Perm)
(assert ($Perm.isValidVar $k@1146))
(assert ($Perm.isReadVar $k@1146 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@1146 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@1146 $k@1091))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 7
(assert (not (= $t@1093 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 7
(push) ; 7
; [then-branch 246] $t@1093 != Null
(declare-const $k@1147 $Perm)
(assert ($Perm.isValidVar $k@1147))
(assert ($Perm.isReadVar $k@1147 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@1147 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= $k@1095 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= $k@1095 $Perm.No)))
(assert (< $k@1147 $k@1095))
(declare-const $k@1148 $Perm)
(assert ($Perm.isValidVar $k@1148))
(assert ($Perm.isReadVar $k@1148 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@1148 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= $k@1097 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= $k@1097 $Perm.No)))
(assert (< $k@1148 $k@1097))
; [eval] diz.BlockingQueue__first != null
; [eval] (old(|BlockingQueue__contents(diz)|) == 0) ==> (BlockingQueue__contents(diz) == Seq(val))
; [eval] old(|BlockingQueue__contents(diz)|) == 0
; [eval] old(|BlockingQueue__contents(diz)|)
; [eval] |BlockingQueue__contents(diz)|
; [eval] BlockingQueue__contents(diz)
; [eval] diz != null
(declare-const $k@1149 $Perm)
(assert ($Perm.isValidVar $k@1149))
(assert ($Perm.isReadVar $k@1149 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@1149 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (< $k@1149 $k@1089))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@1150 $Perm)
(assert ($Perm.isValidVar $k@1150))
(assert ($Perm.isReadVar $k@1150 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@1150 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (< $k@1150 $k@1091))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 8
(assert (not (= $t@1093 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
(push) ; 8
; [then-branch 247] $t@1093 != Null
(declare-const $k@1151 $Perm)
(assert ($Perm.isValidVar $k@1151))
(assert ($Perm.isReadVar $k@1151 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@1151 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@1151 $k@1095))
(declare-const $k@1152 $Perm)
(assert ($Perm.isValidVar $k@1152))
(assert ($Perm.isReadVar $k@1152 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@1152 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@1152 $k@1097))
(pop) ; 8
; [dead else-branch 247] $t@1093 == Null
(assert ($Perm.isValidVar $k@1151))
(assert ($Perm.isReadVar $k@1151 $Perm.Write))
(assert (< $k@1151 $k@1095))
(assert ($Perm.isValidVar $k@1152))
(assert ($Perm.isReadVar $k@1152 $Perm.Write))
(assert (< $k@1152 $k@1097))
(push) ; 8
(push) ; 9
(assert (not (not
  (=
    ($Seq.length
      ($BlockingQueue__contents ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine
                    ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@1090))
                    $Snap.unit)
                  ($SortWrappers.$RefTo$Snap $t@1092))
                $Snap.unit)
              ($SortWrappers.$RefTo$Snap $t@1093))
            $t@1094)
          ($SortWrappers.$RefTo$Snap $t@1096))
        ($SortWrappers.$RefTo$Snap $t@1098)) diz@1083))
    0))))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(push) ; 9
(assert (not (=
  ($Seq.length
    ($BlockingQueue__contents ($Snap.combine
      ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@1090))
                  $Snap.unit)
                ($SortWrappers.$RefTo$Snap $t@1092))
              $Snap.unit)
            ($SortWrappers.$RefTo$Snap $t@1093))
          $t@1094)
        ($SortWrappers.$RefTo$Snap $t@1096))
      ($SortWrappers.$RefTo$Snap $t@1098)) diz@1083))
  0)))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
; [dead then-branch 248] |BlockingQueue__contents(diz@1083;((((((((_, $t@1090), _), $t@1092), _), $t@1093), $t@1094), $t@1096), $t@1098))| == 0
(push) ; 9
; [else-branch 248] |BlockingQueue__contents(diz@1083;((((((((_, $t@1090), _), $t@1092), _), $t@1093), $t@1094), $t@1096), $t@1098))| != 0
(assert (not
  (=
    ($Seq.length
      ($BlockingQueue__contents ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine
                    ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@1090))
                    $Snap.unit)
                  ($SortWrappers.$RefTo$Snap $t@1092))
                $Snap.unit)
              ($SortWrappers.$RefTo$Snap $t@1093))
            $t@1094)
          ($SortWrappers.$RefTo$Snap $t@1096))
        ($SortWrappers.$RefTo$Snap $t@1098)) diz@1083))
    0)))
(pop) ; 9
(pop) ; 8
; [eval] (old(|BlockingQueue__contents(diz)|) != 0) ==> (BlockingQueue__contents(diz) == old(BlockingQueue__contents(diz)) ++ Seq(val))
; [eval] old(|BlockingQueue__contents(diz)|) != 0
; [eval] old(|BlockingQueue__contents(diz)|)
; [eval] |BlockingQueue__contents(diz)|
; [eval] BlockingQueue__contents(diz)
; [eval] diz != null
(declare-const $k@1153 $Perm)
(assert ($Perm.isValidVar $k@1153))
(assert ($Perm.isReadVar $k@1153 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@1153 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (< $k@1153 $k@1089))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@1154 $Perm)
(assert ($Perm.isValidVar $k@1154))
(assert ($Perm.isReadVar $k@1154 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@1154 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (< $k@1154 $k@1091))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 8
(assert (not (= $t@1093 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
(push) ; 8
; [then-branch 249] $t@1093 != Null
(declare-const $k@1155 $Perm)
(assert ($Perm.isValidVar $k@1155))
(assert ($Perm.isReadVar $k@1155 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@1155 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@1155 $k@1095))
(declare-const $k@1156 $Perm)
(assert ($Perm.isValidVar $k@1156))
(assert ($Perm.isReadVar $k@1156 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@1156 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@1156 $k@1097))
(pop) ; 8
; [dead else-branch 249] $t@1093 == Null
(assert ($Perm.isValidVar $k@1155))
(assert ($Perm.isReadVar $k@1155 $Perm.Write))
(assert (< $k@1155 $k@1095))
(assert ($Perm.isValidVar $k@1156))
(assert ($Perm.isReadVar $k@1156 $Perm.Write))
(assert (< $k@1156 $k@1097))
(push) ; 8
(push) ; 9
(assert (not (=
  ($Seq.length
    ($BlockingQueue__contents ($Snap.combine
      ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@1090))
                  $Snap.unit)
                ($SortWrappers.$RefTo$Snap $t@1092))
              $Snap.unit)
            ($SortWrappers.$RefTo$Snap $t@1093))
          $t@1094)
        ($SortWrappers.$RefTo$Snap $t@1096))
      ($SortWrappers.$RefTo$Snap $t@1098)) diz@1083))
  0)))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
(push) ; 9
(assert (not (not
  (=
    ($Seq.length
      ($BlockingQueue__contents ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine
                    ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@1090))
                    $Snap.unit)
                  ($SortWrappers.$RefTo$Snap $t@1092))
                $Snap.unit)
              ($SortWrappers.$RefTo$Snap $t@1093))
            $t@1094)
          ($SortWrappers.$RefTo$Snap $t@1096))
        ($SortWrappers.$RefTo$Snap $t@1098)) diz@1083))
    0))))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(push) ; 9
; [then-branch 250] |BlockingQueue__contents(diz@1083;((((((((_, $t@1090), _), $t@1092), _), $t@1093), $t@1094), $t@1096), $t@1098))| != 0
(assert (not
  (=
    ($Seq.length
      ($BlockingQueue__contents ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine
                    ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@1090))
                    $Snap.unit)
                  ($SortWrappers.$RefTo$Snap $t@1092))
                $Snap.unit)
              ($SortWrappers.$RefTo$Snap $t@1093))
            $t@1094)
          ($SortWrappers.$RefTo$Snap $t@1096))
        ($SortWrappers.$RefTo$Snap $t@1098)) diz@1083))
    0)))
; [eval] BlockingQueue__contents(diz) == old(BlockingQueue__contents(diz)) ++ Seq(val)
; [eval] BlockingQueue__contents(diz)
; [eval] diz != null
(declare-const $k@1157 $Perm)
(assert ($Perm.isValidVar $k@1157))
(assert ($Perm.isReadVar $k@1157 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@1157 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (< $k@1157 $k@1089))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@1158 $Perm)
(assert ($Perm.isValidVar $k@1158))
(assert ($Perm.isReadVar $k@1158 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@1158 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (< $k@1158 $k@1091))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 10
(assert (not (= $t@1093 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 10
(push) ; 10
; [then-branch 251] $t@1093 != Null
(declare-const $k@1159 $Perm)
(assert ($Perm.isValidVar $k@1159))
(assert ($Perm.isReadVar $k@1159 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@1159 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (< $k@1159 $k@1095))
(declare-const $k@1160 $Perm)
(assert ($Perm.isValidVar $k@1160))
(assert ($Perm.isReadVar $k@1160 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@1160 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (< $k@1160 $k@1097))
(pop) ; 10
; [dead else-branch 251] $t@1093 == Null
(assert ($Perm.isValidVar $k@1159))
(assert ($Perm.isReadVar $k@1159 $Perm.Write))
(assert (< $k@1159 $k@1095))
(assert ($Perm.isValidVar $k@1160))
(assert ($Perm.isReadVar $k@1160 $Perm.Write))
(assert (< $k@1160 $k@1097))
; [eval] old(BlockingQueue__contents(diz)) ++ Seq(val)
; [eval] old(BlockingQueue__contents(diz))
; [eval] BlockingQueue__contents(diz)
; [eval] diz != null
(declare-const $k@1161 $Perm)
(assert ($Perm.isValidVar $k@1161))
(assert ($Perm.isReadVar $k@1161 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@1161 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (< $k@1161 $k@1089))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@1162 $Perm)
(assert ($Perm.isValidVar $k@1162))
(assert ($Perm.isReadVar $k@1162 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@1162 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (< $k@1162 $k@1091))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 10
(assert (not (= $t@1093 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 10
(push) ; 10
; [then-branch 252] $t@1093 != Null
(declare-const $k@1163 $Perm)
(assert ($Perm.isValidVar $k@1163))
(assert ($Perm.isReadVar $k@1163 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@1163 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (< $k@1163 $k@1095))
(declare-const $k@1164 $Perm)
(assert ($Perm.isValidVar $k@1164))
(assert ($Perm.isReadVar $k@1164 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@1164 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (< $k@1164 $k@1097))
(pop) ; 10
; [dead else-branch 252] $t@1093 == Null
(assert ($Perm.isValidVar $k@1163))
(assert ($Perm.isReadVar $k@1163 $Perm.Write))
(assert (< $k@1163 $k@1095))
(assert ($Perm.isValidVar $k@1164))
(assert ($Perm.isReadVar $k@1164 $Perm.Write))
(assert (< $k@1164 $k@1097))
; [eval] Seq(val)
(pop) ; 9
; [dead else-branch 250] |BlockingQueue__contents(diz@1083;((((((((_, $t@1090), _), $t@1092), _), $t@1093), $t@1094), $t@1096), $t@1098))| == 0
(pop) ; 8
(assert ($Perm.isValidVar $k@1157))
(assert ($Perm.isReadVar $k@1157 $Perm.Write))
(assert (< $k@1157 $k@1089))
(assert ($Perm.isValidVar $k@1158))
(assert ($Perm.isReadVar $k@1158 $Perm.Write))
(assert (< $k@1158 $k@1091))
(assert ($Perm.isValidVar $k@1159))
(assert ($Perm.isReadVar $k@1159 $Perm.Write))
(assert (< $k@1159 $k@1095))
(assert ($Perm.isValidVar $k@1160))
(assert ($Perm.isReadVar $k@1160 $Perm.Write))
(assert (< $k@1160 $k@1097))
(assert ($Perm.isValidVar $k@1161))
(assert ($Perm.isReadVar $k@1161 $Perm.Write))
(assert (< $k@1161 $k@1089))
(assert ($Perm.isValidVar $k@1162))
(assert ($Perm.isReadVar $k@1162 $Perm.Write))
(assert (< $k@1162 $k@1091))
(assert ($Perm.isValidVar $k@1163))
(assert ($Perm.isReadVar $k@1163 $Perm.Write))
(assert (< $k@1163 $k@1095))
(assert ($Perm.isValidVar $k@1164))
(assert ($Perm.isReadVar $k@1164 $Perm.Write))
(assert (< $k@1164 $k@1097))
(push) ; 8
(assert (not (implies
  (not
    (=
      ($Seq.length
        ($BlockingQueue__contents ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine
                    ($Snap.combine
                      ($Snap.combine
                        $Snap.unit
                        ($SortWrappers.IntTo$Snap $t@1090))
                      $Snap.unit)
                    ($SortWrappers.$RefTo$Snap $t@1092))
                  $Snap.unit)
                ($SortWrappers.$RefTo$Snap $t@1093))
              $t@1094)
            ($SortWrappers.$RefTo$Snap $t@1096))
          ($SortWrappers.$RefTo$Snap $t@1098)) diz@1083))
      0))
  ($Seq.equal
    ($BlockingQueue__contents ($Snap.combine
      ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@1090))
                  $Snap.unit)
                ($SortWrappers.$RefTo$Snap $t@1092))
              $Snap.unit)
            ($SortWrappers.$RefTo$Snap $t@1093))
          $t@1144)
        ($SortWrappers.$RefTo$Snap $t@1096))
      ($SortWrappers.$RefTo$Snap $t@1098)) diz@1083)
    ($Seq.append
      ($BlockingQueue__contents ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine
                    ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@1090))
                    $Snap.unit)
                  ($SortWrappers.$RefTo$Snap $t@1092))
                $Snap.unit)
              ($SortWrappers.$RefTo$Snap $t@1093))
            $t@1094)
          ($SortWrappers.$RefTo$Snap $t@1096))
        ($SortWrappers.$RefTo$Snap $t@1098)) diz@1083)
      ($Seq.singleton val@1084))))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (implies
  (not
    (=
      ($Seq.length
        ($BlockingQueue__contents ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine
                    ($Snap.combine
                      ($Snap.combine
                        $Snap.unit
                        ($SortWrappers.IntTo$Snap $t@1090))
                      $Snap.unit)
                    ($SortWrappers.$RefTo$Snap $t@1092))
                  $Snap.unit)
                ($SortWrappers.$RefTo$Snap $t@1093))
              $t@1094)
            ($SortWrappers.$RefTo$Snap $t@1096))
          ($SortWrappers.$RefTo$Snap $t@1098)) diz@1083))
      0))
  ($Seq.equal
    ($BlockingQueue__contents ($Snap.combine
      ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@1090))
                  $Snap.unit)
                ($SortWrappers.$RefTo$Snap $t@1092))
              $Snap.unit)
            ($SortWrappers.$RefTo$Snap $t@1093))
          $t@1144)
        ($SortWrappers.$RefTo$Snap $t@1096))
      ($SortWrappers.$RefTo$Snap $t@1098)) diz@1083)
    ($Seq.append
      ($BlockingQueue__contents ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine
                    ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@1090))
                    $Snap.unit)
                  ($SortWrappers.$RefTo$Snap $t@1092))
                $Snap.unit)
              ($SortWrappers.$RefTo$Snap $t@1093))
            $t@1094)
          ($SortWrappers.$RefTo$Snap $t@1096))
        ($SortWrappers.$RefTo$Snap $t@1098)) diz@1083)
      ($Seq.singleton val@1084)))))
(pop) ; 7
; [dead else-branch 246] $t@1093 == Null
(pop) ; 6
(pop) ; 5
; [dead else-branch 240] $t@1093 == Null
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch 230] $t@1093 == Null
(assert (= $t@1093 $Ref.null))
(declare-const $k@1165 $Perm)
(assert ($Perm.isValidVar $k@1165))
(assert ($Perm.isReadVar $k@1165 $Perm.Write))
(declare-const $t@1166 $Ref)
(declare-const $k@1167 $Perm)
(assert ($Perm.isValidVar $k@1167))
(assert ($Perm.isReadVar $k@1167 $Perm.Write))
(declare-const $t@1168 $Ref)
(push) ; 4
(declare-const $k@1169 $Perm)
(assert ($Perm.isValidVar $k@1169))
(assert ($Perm.isReadVar $k@1169 $Perm.Write))
(declare-const $t@1170 Int)
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 5
(assert (not (not (= $k@1169 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@1169 $Perm.No)))
(assert (> $t@1170 0))
(declare-const $k@1171 $Perm)
(assert ($Perm.isValidVar $k@1171))
(assert ($Perm.isReadVar $k@1171 $Perm.Write))
(declare-const $t@1172 $Ref)
; [eval] diz.BlockingQueue__count != null
(push) ; 5
(assert (not (not (= $k@1171 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@1171 $Perm.No)))
(assert (not (= $t@1172 $Ref.null)))
(declare-const $t@1173 $Ref)
; [eval] diz.BlockingQueue__first != null
(push) ; 5
(assert (not (= $t@1173 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
(assert (not (not (= $t@1173 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
; [then-branch 253] $t@1173 != Null
(assert (not (= $t@1173 $Ref.null)))
(declare-const $t@1174 $Snap)
(declare-const $k@1175 $Perm)
(assert ($Perm.isValidVar $k@1175))
(assert ($Perm.isReadVar $k@1175 $Perm.Write))
(declare-const $t@1176 $Ref)
(declare-const $k@1177 $Perm)
(assert ($Perm.isValidVar $k@1177))
(assert ($Perm.isReadVar $k@1177 $Perm.Write))
(declare-const $t@1178 $Ref)
; [eval] diz.BlockingQueue__first != null
; [eval] (old(|BlockingQueue__contents(diz)|) == 0) ==> (BlockingQueue__contents(diz) == Seq(val))
; [eval] old(|BlockingQueue__contents(diz)|) == 0
; [eval] old(|BlockingQueue__contents(diz)|)
; [eval] |BlockingQueue__contents(diz)|
; [eval] BlockingQueue__contents(diz)
; [eval] diz != null
(declare-const $k@1179 $Perm)
(assert ($Perm.isValidVar $k@1179))
(assert ($Perm.isReadVar $k@1179 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@1179 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (< $k@1179 $k@1089))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@1180 $Perm)
(assert ($Perm.isValidVar $k@1180))
(assert ($Perm.isReadVar $k@1180 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@1180 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (< $k@1180 $k@1091))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 6
(assert (not (not (= $t@1093 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 6
; [dead then-branch 254] $t@1093 != Null
(push) ; 6
; [else-branch 254] $t@1093 == Null
(declare-const $k@1181 $Perm)
(assert ($Perm.isValidVar $k@1181))
(assert ($Perm.isReadVar $k@1181 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@1181 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(push) ; 7
(assert (not (not (= $k@1165 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (not (= $k@1165 $Perm.No)))
(assert (< $k@1181 $k@1165))
(declare-const $k@1182 $Perm)
(assert ($Perm.isValidVar $k@1182))
(assert ($Perm.isReadVar $k@1182 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@1182 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(push) ; 7
(assert (not (not (= $k@1167 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (not (= $k@1167 $Perm.No)))
(assert (< $k@1182 $k@1167))
(pop) ; 6
(assert ($Perm.isValidVar $k@1181))
(assert ($Perm.isReadVar $k@1181 $Perm.Write))
(assert (not (= $k@1165 $Perm.No)))
(assert (< $k@1181 $k@1165))
(assert ($Perm.isValidVar $k@1182))
(assert ($Perm.isReadVar $k@1182 $Perm.Write))
(assert (not (= $k@1167 $Perm.No)))
(assert (< $k@1182 $k@1167))
(push) ; 6
(push) ; 7
(assert (not (not
  (=
    ($Seq.length
      ($BlockingQueue__contents ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine
                    ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@1090))
                    $Snap.unit)
                  ($SortWrappers.$RefTo$Snap $t@1092))
                $Snap.unit)
              ($SortWrappers.$RefTo$Snap $t@1093))
            $Snap.unit)
          ($SortWrappers.$RefTo$Snap $t@1166))
        ($SortWrappers.$RefTo$Snap $t@1168)) diz@1083))
    0))))
(check-sat)
; unknown
; 0.00s
(pop) ; 7
(push) ; 7
(assert (not (=
  ($Seq.length
    ($BlockingQueue__contents ($Snap.combine
      ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@1090))
                  $Snap.unit)
                ($SortWrappers.$RefTo$Snap $t@1092))
              $Snap.unit)
            ($SortWrappers.$RefTo$Snap $t@1093))
          $Snap.unit)
        ($SortWrappers.$RefTo$Snap $t@1166))
      ($SortWrappers.$RefTo$Snap $t@1168)) diz@1083))
  0)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(push) ; 7
; [then-branch 255] |BlockingQueue__contents(diz@1083;((((((((_, $t@1090), _), $t@1092), _), $t@1093), _), $t@1166), $t@1168))| == 0
(assert (=
  ($Seq.length
    ($BlockingQueue__contents ($Snap.combine
      ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@1090))
                  $Snap.unit)
                ($SortWrappers.$RefTo$Snap $t@1092))
              $Snap.unit)
            ($SortWrappers.$RefTo$Snap $t@1093))
          $Snap.unit)
        ($SortWrappers.$RefTo$Snap $t@1166))
      ($SortWrappers.$RefTo$Snap $t@1168)) diz@1083))
  0))
; [eval] BlockingQueue__contents(diz) == Seq(val)
; [eval] BlockingQueue__contents(diz)
; [eval] diz != null
(declare-const $k@1183 $Perm)
(assert ($Perm.isValidVar $k@1183))
(assert ($Perm.isReadVar $k@1183 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@1183 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (< $k@1183 $k@1169))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@1184 $Perm)
(assert ($Perm.isValidVar $k@1184))
(assert ($Perm.isReadVar $k@1184 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@1184 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (< $k@1184 $k@1171))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 8
(assert (not (= $t@1173 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
(push) ; 8
; [then-branch 256] $t@1173 != Null
(declare-const $k@1185 $Perm)
(assert ($Perm.isValidVar $k@1185))
(assert ($Perm.isReadVar $k@1185 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@1185 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(push) ; 9
(assert (not (not (= $k@1175 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (not (= $k@1175 $Perm.No)))
(assert (< $k@1185 $k@1175))
(declare-const $k@1186 $Perm)
(assert ($Perm.isValidVar $k@1186))
(assert ($Perm.isReadVar $k@1186 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@1186 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(push) ; 9
(assert (not (not (= $k@1177 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (not (= $k@1177 $Perm.No)))
(assert (< $k@1186 $k@1177))
(pop) ; 8
; [dead else-branch 256] $t@1173 == Null
(assert ($Perm.isValidVar $k@1185))
(assert ($Perm.isReadVar $k@1185 $Perm.Write))
(assert (not (= $k@1175 $Perm.No)))
(assert (< $k@1185 $k@1175))
(assert ($Perm.isValidVar $k@1186))
(assert ($Perm.isReadVar $k@1186 $Perm.Write))
(assert (not (= $k@1177 $Perm.No)))
(assert (< $k@1186 $k@1177))
; [eval] Seq(val)
(assert (= ($Seq.length ($Seq.singleton val@1084)) 1))
(pop) ; 7
; [dead else-branch 255] |BlockingQueue__contents(diz@1083;((((((((_, $t@1090), _), $t@1092), _), $t@1093), _), $t@1166), $t@1168))| != 0
(pop) ; 6
(assert ($Perm.isValidVar $k@1183))
(assert ($Perm.isReadVar $k@1183 $Perm.Write))
(assert (< $k@1183 $k@1169))
(assert ($Perm.isValidVar $k@1184))
(assert ($Perm.isReadVar $k@1184 $Perm.Write))
(assert (< $k@1184 $k@1171))
(assert ($Perm.isValidVar $k@1185))
(assert ($Perm.isReadVar $k@1185 $Perm.Write))
(assert (not (= $k@1175 $Perm.No)))
(assert (< $k@1185 $k@1175))
(assert ($Perm.isValidVar $k@1186))
(assert ($Perm.isReadVar $k@1186 $Perm.Write))
(assert (not (= $k@1177 $Perm.No)))
(assert (< $k@1186 $k@1177))
(assert (= ($Seq.length ($Seq.singleton val@1084)) 1))
(assert (implies
  (=
    ($Seq.length
      ($BlockingQueue__contents ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine
                    ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@1090))
                    $Snap.unit)
                  ($SortWrappers.$RefTo$Snap $t@1092))
                $Snap.unit)
              ($SortWrappers.$RefTo$Snap $t@1093))
            $Snap.unit)
          ($SortWrappers.$RefTo$Snap $t@1166))
        ($SortWrappers.$RefTo$Snap $t@1168)) diz@1083))
    0)
  ($Seq.equal
    ($BlockingQueue__contents ($Snap.combine
      ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@1170))
                  $Snap.unit)
                ($SortWrappers.$RefTo$Snap $t@1172))
              $Snap.unit)
            ($SortWrappers.$RefTo$Snap $t@1173))
          $t@1174)
        ($SortWrappers.$RefTo$Snap $t@1176))
      ($SortWrappers.$RefTo$Snap $t@1178)) diz@1083)
    ($Seq.singleton val@1084))))
; [eval] (old(|BlockingQueue__contents(diz)|) != 0) ==> (BlockingQueue__contents(diz) == old(BlockingQueue__contents(diz)) ++ Seq(val))
; [eval] old(|BlockingQueue__contents(diz)|) != 0
; [eval] old(|BlockingQueue__contents(diz)|)
; [eval] |BlockingQueue__contents(diz)|
; [eval] BlockingQueue__contents(diz)
; [eval] diz != null
(declare-const $k@1187 $Perm)
(assert ($Perm.isValidVar $k@1187))
(assert ($Perm.isReadVar $k@1187 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@1187 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (< $k@1187 $k@1089))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@1188 $Perm)
(assert ($Perm.isValidVar $k@1188))
(assert ($Perm.isReadVar $k@1188 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@1188 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (< $k@1188 $k@1091))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 6
(assert (not (not (= $t@1093 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 6
; [dead then-branch 257] $t@1093 != Null
(push) ; 6
; [else-branch 257] $t@1093 == Null
(declare-const $k@1189 $Perm)
(assert ($Perm.isValidVar $k@1189))
(assert ($Perm.isReadVar $k@1189 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@1189 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@1189 $k@1165))
(declare-const $k@1190 $Perm)
(assert ($Perm.isValidVar $k@1190))
(assert ($Perm.isReadVar $k@1190 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@1190 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@1190 $k@1167))
(pop) ; 6
(assert ($Perm.isValidVar $k@1189))
(assert ($Perm.isReadVar $k@1189 $Perm.Write))
(assert (< $k@1189 $k@1165))
(assert ($Perm.isValidVar $k@1190))
(assert ($Perm.isReadVar $k@1190 $Perm.Write))
(assert (< $k@1190 $k@1167))
(push) ; 6
(push) ; 7
(assert (not (=
  ($Seq.length
    ($BlockingQueue__contents ($Snap.combine
      ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@1090))
                  $Snap.unit)
                ($SortWrappers.$RefTo$Snap $t@1092))
              $Snap.unit)
            ($SortWrappers.$RefTo$Snap $t@1093))
          $Snap.unit)
        ($SortWrappers.$RefTo$Snap $t@1166))
      ($SortWrappers.$RefTo$Snap $t@1168)) diz@1083))
  0)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(push) ; 7
(assert (not (not
  (=
    ($Seq.length
      ($BlockingQueue__contents ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine
                    ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@1090))
                    $Snap.unit)
                  ($SortWrappers.$RefTo$Snap $t@1092))
                $Snap.unit)
              ($SortWrappers.$RefTo$Snap $t@1093))
            $Snap.unit)
          ($SortWrappers.$RefTo$Snap $t@1166))
        ($SortWrappers.$RefTo$Snap $t@1168)) diz@1083))
    0))))
(check-sat)
; unknown
; 0.00s
(pop) ; 7
; [dead then-branch 258] |BlockingQueue__contents(diz@1083;((((((((_, $t@1090), _), $t@1092), _), $t@1093), _), $t@1166), $t@1168))| != 0
(push) ; 7
; [else-branch 258] |BlockingQueue__contents(diz@1083;((((((((_, $t@1090), _), $t@1092), _), $t@1093), _), $t@1166), $t@1168))| == 0
(assert (=
  ($Seq.length
    ($BlockingQueue__contents ($Snap.combine
      ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@1090))
                  $Snap.unit)
                ($SortWrappers.$RefTo$Snap $t@1092))
              $Snap.unit)
            ($SortWrappers.$RefTo$Snap $t@1093))
          $Snap.unit)
        ($SortWrappers.$RefTo$Snap $t@1166))
      ($SortWrappers.$RefTo$Snap $t@1168)) diz@1083))
  0))
(pop) ; 7
(pop) ; 6
(pop) ; 5
(push) ; 5
; [else-branch 253] $t@1173 == Null
(assert (= $t@1173 $Ref.null))
(declare-const $k@1191 $Perm)
(assert ($Perm.isValidVar $k@1191))
(assert ($Perm.isReadVar $k@1191 $Perm.Write))
(declare-const $t@1192 $Ref)
(declare-const $k@1193 $Perm)
(assert ($Perm.isValidVar $k@1193))
(assert ($Perm.isReadVar $k@1193 $Perm.Write))
(declare-const $t@1194 $Ref)
; [eval] diz.BlockingQueue__first != null
(assert (not (= $t@1173 $Ref.null)))
; [eval] (old(|BlockingQueue__contents(diz)|) == 0) ==> (BlockingQueue__contents(diz) == Seq(val))
; [eval] old(|BlockingQueue__contents(diz)|) == 0
; [eval] old(|BlockingQueue__contents(diz)|)
; [eval] |BlockingQueue__contents(diz)|
; [eval] BlockingQueue__contents(diz)
; [eval] diz != null
(declare-const $k@1195 $Perm)
(assert ($Perm.isValidVar $k@1195))
(assert ($Perm.isReadVar $k@1195 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@1195 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (< $k@1195 $k@1089))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@1196 $Perm)
(assert ($Perm.isValidVar $k@1196))
(assert ($Perm.isReadVar $k@1196 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@1196 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (< $k@1196 $k@1091))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 6
(assert (not (not (= $t@1093 $Ref.null))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
; [dead then-branch 259] $t@1093 != Null
; [dead else-branch 259] $t@1093 == Null
(pop) ; 5
(pop) ; 4
(push) ; 4
; [eval] diz.BlockingQueue__first == null
(push) ; 5
(assert (not (not (= $t@1093 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
; [then-branch 260] $t@1093 == Null
; [exec]
; __flatten_47 := Node__Node(val, null)
; [eval] next != null
(push) ; 6
(assert (not false))
(check-sat)
; unknown
; 0.00s
(pop) ; 6
; [dead then-branch 261] False
(push) ; 6
; [else-branch 261] True
(declare-const sys__result@1197 $Ref)
(declare-const $t@1198 $Snap)
(declare-const $t@1199 $Snap)
(assert (= $t@1198 ($Snap.combine $t@1199 $Snap.unit)))
(declare-const $t@1200 $Snap)
(assert (= $t@1199 ($Snap.combine $t@1200 $Snap.unit)))
(declare-const $t@1201 $Snap)
(assert (= $t@1200 ($Snap.combine $Snap.unit $t@1201)))
; [eval] sys__result != null
(assert (not (= sys__result@1197 $Ref.null)))
; [eval] (unfolding acc(Node__state(sys__result), write) in (sys__result.Node__val == val) && (sys__result.Node__next == next))
(declare-const $t@1202 $Snap)
(declare-const $t@1203 $Snap)
(assert (= $t@1201 ($Snap.combine $t@1202 $t@1203)))
(declare-const $t@1204 Int)
(declare-const $t@1205 $Ref)
(assert (=
  $t@1202
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@1204)
    ($SortWrappers.$RefTo$Snap $t@1205))))
(declare-const $k@1206 $Perm)
(assert ($Perm.isValidVar $k@1206))
(assert ($Perm.isReadVar $k@1206 $Perm.Write))
; [eval] sys__result.Node__next != null
(push) ; 7
(assert (not (= $t@1205 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 7
(push) ; 7
(assert (not (not (= $t@1205 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 7
(push) ; 7
; [then-branch 262] $t@1205 != Null
(assert (not (= $t@1205 $Ref.null)))
; [eval] (sys__result.Node__val == val) && (sys__result.Node__next == next)
; [eval] sys__result.Node__val == val
(push) ; 8
(assert (not (not (= $k@1206 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= $k@1206 $Perm.No)))
(push) ; 8
(push) ; 9
(assert (not (not (= $t@1204 val@1084))))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
(push) ; 9
(assert (not (= $t@1204 val@1084)))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
(push) ; 9
; [then-branch 263] $t@1204 == val@1084
(assert (= $t@1204 val@1084))
; [eval] sys__result.Node__next == next
(pop) ; 9
(push) ; 9
; [else-branch 263] $t@1204 != val@1084
(assert (not (= $t@1204 val@1084)))
(pop) ; 9
(pop) ; 8
(pop) ; 7
(push) ; 7
; [else-branch 262] $t@1205 == Null
(assert (= $t@1205 $Ref.null))
; [eval] (sys__result.Node__val == val) && (sys__result.Node__next == next)
; [eval] sys__result.Node__val == val
(push) ; 8
(assert (not (not (= $k@1206 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= $k@1206 $Perm.No)))
(push) ; 8
(push) ; 9
(assert (not (not (= $t@1204 val@1084))))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
(push) ; 9
(assert (not (= $t@1204 val@1084)))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
(push) ; 9
; [then-branch 264] $t@1204 == val@1084
(assert (= $t@1204 val@1084))
; [eval] sys__result.Node__next == next
(pop) ; 9
(push) ; 9
; [else-branch 264] $t@1204 != val@1084
(assert (not (= $t@1204 val@1084)))
(pop) ; 9
(pop) ; 8
(pop) ; 7
(declare-fun joinedIn@1207 () Bool)
(assert (implies
  (= $t@1205 $Ref.null)
  (and
    (not (= $k@1206 $Perm.No))
    (= $t@1205 $Ref.null)
    ($Perm.isReadVar $k@1206 $Perm.Write)
    ($Perm.isValidVar $k@1206)
    (=
      $t@1202
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $t@1204)
        ($SortWrappers.$RefTo$Snap $t@1205)))
    (= $t@1201 ($Snap.combine $t@1202 $t@1203)))))
(assert (implies
  (not (= $t@1205 $Ref.null))
  (and
    (not (= $k@1206 $Perm.No))
    (not (= $t@1205 $Ref.null))
    ($Perm.isReadVar $k@1206 $Perm.Write)
    ($Perm.isValidVar $k@1206)
    (=
      $t@1202
      ($Snap.combine
        ($SortWrappers.IntTo$Snap $t@1204)
        ($SortWrappers.$RefTo$Snap $t@1205)))
    (= $t@1201 ($Snap.combine $t@1202 $t@1203)))))
(assert (and
  (implies
    (= $t@1205 $Ref.null)
    (= joinedIn@1207 (and (= $t@1204 val@1084) (= $t@1205 $Ref.null))))
  (implies
    (not (= $t@1205 $Ref.null))
    (= joinedIn@1207 (and (= $t@1204 val@1084) (= $t@1205 $Ref.null))))))
(assert joinedIn@1207)
; [eval] Node__contents(sys__result) == Seq(val) ++ (next == null ? Seq[Int]() : old(Node__contents(next)))
; [eval] Node__contents(sys__result)
; [eval] sys__result != null
; [eval] Seq(val) ++ (next == null ? Seq[Int]() : old(Node__contents(next)))
; [eval] Seq(val)
(assert (= ($Seq.length ($Seq.singleton val@1084)) 1))
; [eval] (next == null ? Seq[Int]() : old(Node__contents(next)))
; [eval] next == null
(push) ; 7
(assert (not false))
(check-sat)
; unknown
; 0.00s
(pop) ; 7
(push) ; 7
; [then-branch 265] True
; [eval] Seq[Int]()
(pop) ; 7
; [dead else-branch 265] False
(declare-const $deadElse@1208 $Seq<Int>)
(assert ($Seq.equal
  ($Node__contents ($Snap.combine $Snap.unit $t@1201) sys__result@1197)
  ($Seq.append ($Seq.singleton val@1084) $Seq.empty<Int>)))
; [exec]
; __flatten_46 := __flatten_47
; [exec]
; __flatten_132 := __flatten_46
; [exec]
; diz.BlockingQueue__first := __flatten_132
(declare-const $k@1209 $Perm)
(assert ($Perm.isValidVar $k@1209))
(assert ($Perm.isReadVar $k@1209 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@1209 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@1209 $k@1089))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@1210 $Perm)
(assert ($Perm.isValidVar $k@1210))
(assert ($Perm.isReadVar $k@1210 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@1210 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@1210 $k@1091))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 7
(assert (not (= sys__result@1197 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 7
(push) ; 7
; [then-branch 266] sys__result@1197 != Null
(declare-const $k@1211 $Perm)
(assert ($Perm.isValidVar $k@1211))
(assert ($Perm.isReadVar $k@1211 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@1211 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= $k@1165 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= $k@1165 $Perm.No)))
(assert (< $k@1211 $k@1165))
(declare-const $k@1212 $Perm)
(assert ($Perm.isValidVar $k@1212))
(assert ($Perm.isReadVar $k@1212 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@1212 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= $k@1167 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= $k@1167 $Perm.No)))
(assert (< $k@1212 $k@1167))
; [eval] diz.BlockingQueue__first != null
; [eval] (old(|BlockingQueue__contents(diz)|) == 0) ==> (BlockingQueue__contents(diz) == Seq(val))
; [eval] old(|BlockingQueue__contents(diz)|) == 0
; [eval] old(|BlockingQueue__contents(diz)|)
; [eval] |BlockingQueue__contents(diz)|
; [eval] BlockingQueue__contents(diz)
; [eval] diz != null
(declare-const $k@1213 $Perm)
(assert ($Perm.isValidVar $k@1213))
(assert ($Perm.isReadVar $k@1213 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@1213 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (< $k@1213 $k@1089))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@1214 $Perm)
(assert ($Perm.isValidVar $k@1214))
(assert ($Perm.isReadVar $k@1214 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@1214 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (< $k@1214 $k@1091))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 8
(assert (not (not (= $t@1093 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
; [dead then-branch 267] $t@1093 != Null
(push) ; 8
; [else-branch 267] $t@1093 == Null
(declare-const $k@1215 $Perm)
(assert ($Perm.isValidVar $k@1215))
(assert ($Perm.isReadVar $k@1215 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@1215 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@1215 $k@1165))
(declare-const $k@1216 $Perm)
(assert ($Perm.isValidVar $k@1216))
(assert ($Perm.isReadVar $k@1216 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@1216 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@1216 $k@1167))
(pop) ; 8
(assert ($Perm.isValidVar $k@1215))
(assert ($Perm.isReadVar $k@1215 $Perm.Write))
(assert (< $k@1215 $k@1165))
(assert ($Perm.isValidVar $k@1216))
(assert ($Perm.isReadVar $k@1216 $Perm.Write))
(assert (< $k@1216 $k@1167))
(push) ; 8
(push) ; 9
(assert (not (not
  (=
    ($Seq.length
      ($BlockingQueue__contents ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine
                    ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@1090))
                    $Snap.unit)
                  ($SortWrappers.$RefTo$Snap $t@1092))
                $Snap.unit)
              ($SortWrappers.$RefTo$Snap $t@1093))
            $Snap.unit)
          ($SortWrappers.$RefTo$Snap $t@1166))
        ($SortWrappers.$RefTo$Snap $t@1168)) diz@1083))
    0))))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
(push) ; 9
(assert (not (=
  ($Seq.length
    ($BlockingQueue__contents ($Snap.combine
      ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@1090))
                  $Snap.unit)
                ($SortWrappers.$RefTo$Snap $t@1092))
              $Snap.unit)
            ($SortWrappers.$RefTo$Snap $t@1093))
          $Snap.unit)
        ($SortWrappers.$RefTo$Snap $t@1166))
      ($SortWrappers.$RefTo$Snap $t@1168)) diz@1083))
  0)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(push) ; 9
; [then-branch 268] |BlockingQueue__contents(diz@1083;((((((((_, $t@1090), _), $t@1092), _), $t@1093), _), $t@1166), $t@1168))| == 0
(assert (=
  ($Seq.length
    ($BlockingQueue__contents ($Snap.combine
      ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@1090))
                  $Snap.unit)
                ($SortWrappers.$RefTo$Snap $t@1092))
              $Snap.unit)
            ($SortWrappers.$RefTo$Snap $t@1093))
          $Snap.unit)
        ($SortWrappers.$RefTo$Snap $t@1166))
      ($SortWrappers.$RefTo$Snap $t@1168)) diz@1083))
  0))
; [eval] BlockingQueue__contents(diz) == Seq(val)
; [eval] BlockingQueue__contents(diz)
; [eval] diz != null
(declare-const $k@1217 $Perm)
(assert ($Perm.isValidVar $k@1217))
(assert ($Perm.isReadVar $k@1217 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@1217 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (< $k@1217 $k@1089))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@1218 $Perm)
(assert ($Perm.isValidVar $k@1218))
(assert ($Perm.isReadVar $k@1218 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@1218 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (< $k@1218 $k@1091))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 10
(assert (not (= sys__result@1197 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 10
(push) ; 10
; [then-branch 269] sys__result@1197 != Null
(declare-const $k@1219 $Perm)
(assert ($Perm.isValidVar $k@1219))
(assert ($Perm.isReadVar $k@1219 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@1219 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (< $k@1219 $k@1165))
(declare-const $k@1220 $Perm)
(assert ($Perm.isValidVar $k@1220))
(assert ($Perm.isReadVar $k@1220 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@1220 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (< $k@1220 $k@1167))
(pop) ; 10
; [dead else-branch 269] sys__result@1197 == Null
(assert ($Perm.isValidVar $k@1219))
(assert ($Perm.isReadVar $k@1219 $Perm.Write))
(assert (< $k@1219 $k@1165))
(assert ($Perm.isValidVar $k@1220))
(assert ($Perm.isReadVar $k@1220 $Perm.Write))
(assert (< $k@1220 $k@1167))
; [eval] Seq(val)
(pop) ; 9
; [dead else-branch 268] |BlockingQueue__contents(diz@1083;((((((((_, $t@1090), _), $t@1092), _), $t@1093), _), $t@1166), $t@1168))| != 0
(pop) ; 8
(assert ($Perm.isValidVar $k@1217))
(assert ($Perm.isReadVar $k@1217 $Perm.Write))
(assert (< $k@1217 $k@1089))
(assert ($Perm.isValidVar $k@1218))
(assert ($Perm.isReadVar $k@1218 $Perm.Write))
(assert (< $k@1218 $k@1091))
(assert ($Perm.isValidVar $k@1219))
(assert ($Perm.isReadVar $k@1219 $Perm.Write))
(assert (< $k@1219 $k@1165))
(assert ($Perm.isValidVar $k@1220))
(assert ($Perm.isReadVar $k@1220 $Perm.Write))
(assert (< $k@1220 $k@1167))
(push) ; 8
(assert (not (implies
  (=
    ($Seq.length
      ($BlockingQueue__contents ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine
                    ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@1090))
                    $Snap.unit)
                  ($SortWrappers.$RefTo$Snap $t@1092))
                $Snap.unit)
              ($SortWrappers.$RefTo$Snap $t@1093))
            $Snap.unit)
          ($SortWrappers.$RefTo$Snap $t@1166))
        ($SortWrappers.$RefTo$Snap $t@1168)) diz@1083))
    0)
  ($Seq.equal
    ($BlockingQueue__contents ($Snap.combine
      ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@1090))
                  $Snap.unit)
                ($SortWrappers.$RefTo$Snap $t@1092))
              $Snap.unit)
            ($SortWrappers.$RefTo$Snap sys__result@1197))
          $t@1201)
        ($SortWrappers.$RefTo$Snap $t@1166))
      ($SortWrappers.$RefTo$Snap $t@1168)) diz@1083)
    ($Seq.singleton val@1084)))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (implies
  (=
    ($Seq.length
      ($BlockingQueue__contents ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine
                    ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@1090))
                    $Snap.unit)
                  ($SortWrappers.$RefTo$Snap $t@1092))
                $Snap.unit)
              ($SortWrappers.$RefTo$Snap $t@1093))
            $Snap.unit)
          ($SortWrappers.$RefTo$Snap $t@1166))
        ($SortWrappers.$RefTo$Snap $t@1168)) diz@1083))
    0)
  ($Seq.equal
    ($BlockingQueue__contents ($Snap.combine
      ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@1090))
                  $Snap.unit)
                ($SortWrappers.$RefTo$Snap $t@1092))
              $Snap.unit)
            ($SortWrappers.$RefTo$Snap sys__result@1197))
          $t@1201)
        ($SortWrappers.$RefTo$Snap $t@1166))
      ($SortWrappers.$RefTo$Snap $t@1168)) diz@1083)
    ($Seq.singleton val@1084))))
; [eval] (old(|BlockingQueue__contents(diz)|) != 0) ==> (BlockingQueue__contents(diz) == old(BlockingQueue__contents(diz)) ++ Seq(val))
; [eval] old(|BlockingQueue__contents(diz)|) != 0
; [eval] old(|BlockingQueue__contents(diz)|)
; [eval] |BlockingQueue__contents(diz)|
; [eval] BlockingQueue__contents(diz)
; [eval] diz != null
(declare-const $k@1221 $Perm)
(assert ($Perm.isValidVar $k@1221))
(assert ($Perm.isReadVar $k@1221 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@1221 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (< $k@1221 $k@1089))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@1222 $Perm)
(assert ($Perm.isValidVar $k@1222))
(assert ($Perm.isReadVar $k@1222 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@1222 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (< $k@1222 $k@1091))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 8
(assert (not (not (= $t@1093 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
; [dead then-branch 270] $t@1093 != Null
(push) ; 8
; [else-branch 270] $t@1093 == Null
(declare-const $k@1223 $Perm)
(assert ($Perm.isValidVar $k@1223))
(assert ($Perm.isReadVar $k@1223 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@1223 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@1223 $k@1165))
(declare-const $k@1224 $Perm)
(assert ($Perm.isValidVar $k@1224))
(assert ($Perm.isReadVar $k@1224 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@1224 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@1224 $k@1167))
(pop) ; 8
(assert ($Perm.isValidVar $k@1223))
(assert ($Perm.isReadVar $k@1223 $Perm.Write))
(assert (< $k@1223 $k@1165))
(assert ($Perm.isValidVar $k@1224))
(assert ($Perm.isReadVar $k@1224 $Perm.Write))
(assert (< $k@1224 $k@1167))
(push) ; 8
(push) ; 9
(assert (not (=
  ($Seq.length
    ($BlockingQueue__contents ($Snap.combine
      ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@1090))
                  $Snap.unit)
                ($SortWrappers.$RefTo$Snap $t@1092))
              $Snap.unit)
            ($SortWrappers.$RefTo$Snap $t@1093))
          $Snap.unit)
        ($SortWrappers.$RefTo$Snap $t@1166))
      ($SortWrappers.$RefTo$Snap $t@1168)) diz@1083))
  0)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(push) ; 9
(assert (not (not
  (=
    ($Seq.length
      ($BlockingQueue__contents ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine
                    ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@1090))
                    $Snap.unit)
                  ($SortWrappers.$RefTo$Snap $t@1092))
                $Snap.unit)
              ($SortWrappers.$RefTo$Snap $t@1093))
            $Snap.unit)
          ($SortWrappers.$RefTo$Snap $t@1166))
        ($SortWrappers.$RefTo$Snap $t@1168)) diz@1083))
    0))))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
; [dead then-branch 271] |BlockingQueue__contents(diz@1083;((((((((_, $t@1090), _), $t@1092), _), $t@1093), _), $t@1166), $t@1168))| != 0
(push) ; 9
; [else-branch 271] |BlockingQueue__contents(diz@1083;((((((((_, $t@1090), _), $t@1092), _), $t@1093), _), $t@1166), $t@1168))| == 0
(assert (=
  ($Seq.length
    ($BlockingQueue__contents ($Snap.combine
      ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@1090))
                  $Snap.unit)
                ($SortWrappers.$RefTo$Snap $t@1092))
              $Snap.unit)
            ($SortWrappers.$RefTo$Snap $t@1093))
          $Snap.unit)
        ($SortWrappers.$RefTo$Snap $t@1166))
      ($SortWrappers.$RefTo$Snap $t@1168)) diz@1083))
  0))
(pop) ; 9
(pop) ; 8
(pop) ; 7
; [dead else-branch 266] sys__result@1197 == Null
(pop) ; 6
(pop) ; 5
; [dead else-branch 260] $t@1093 != Null
; [eval] !(diz.BlockingQueue__first == null)
; [eval] diz.BlockingQueue__first == null
(push) ; 5
(assert (not (not (= $t@1093 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
; [dead then-branch 272] $t@1093 != Null
(push) ; 5
; [else-branch 272] $t@1093 == Null
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
; ---------- BlockingQueue__unlinkFirst ----------
(declare-const diz@1225 $Ref)
(declare-const sys__result@1226 Int)
(declare-const value@1227 Int)
(declare-const __flatten_50@1228 $Ref)
(declare-const __flatten_51@1229 $Ref)
(declare-const __flatten_52@1230 $Ref)
(declare-const __flatten_53@1231 Int)
(declare-const __flatten_135@1232 $Ref)
(push) ; 2
; [eval] diz != null
(assert (not (= diz@1225 $Ref.null)))
(declare-const $k@1233 $Perm)
(assert ($Perm.isValidVar $k@1233))
(assert ($Perm.isReadVar $k@1233 $Perm.Write))
(declare-const $t@1234 Int)
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 3
(assert (not (not (= $k@1233 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 3
(assert (not (= $k@1233 $Perm.No)))
(assert (> $t@1234 0))
(declare-const $k@1235 $Perm)
(assert ($Perm.isValidVar $k@1235))
(assert ($Perm.isReadVar $k@1235 $Perm.Write))
(declare-const $t@1236 $Ref)
; [eval] diz.BlockingQueue__count != null
(push) ; 3
(assert (not (not (= $k@1235 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 3
(assert (not (= $k@1235 $Perm.No)))
(assert (not (= $t@1236 $Ref.null)))
(declare-const $t@1237 $Ref)
; [eval] diz.BlockingQueue__first != null
(push) ; 3
(assert (not (= $t@1237 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 3
(push) ; 3
(assert (not (not (= $t@1237 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 3
(push) ; 3
; [then-branch 273] $t@1237 != Null
(assert (not (= $t@1237 $Ref.null)))
(declare-const $t@1238 $Snap)
(declare-const $k@1239 $Perm)
(assert ($Perm.isValidVar $k@1239))
(assert ($Perm.isReadVar $k@1239 $Perm.Write))
(declare-const $t@1240 $Ref)
(declare-const $k@1241 $Perm)
(assert ($Perm.isValidVar $k@1241))
(assert ($Perm.isReadVar $k@1241 $Perm.Write))
(declare-const $t@1242 $Ref)
; [eval] diz.BlockingQueue__first != null
(push) ; 4
(declare-const $k@1243 $Perm)
(assert ($Perm.isValidVar $k@1243))
(assert ($Perm.isReadVar $k@1243 $Perm.Write))
(declare-const $t@1244 Int)
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 5
(assert (not (not (= $k@1243 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@1243 $Perm.No)))
(assert (> $t@1244 0))
(declare-const $k@1245 $Perm)
(assert ($Perm.isValidVar $k@1245))
(assert ($Perm.isReadVar $k@1245 $Perm.Write))
(declare-const $t@1246 $Ref)
; [eval] diz.BlockingQueue__count != null
(push) ; 5
(assert (not (not (= $k@1245 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@1245 $Perm.No)))
(assert (not (= $t@1246 $Ref.null)))
(declare-const $t@1247 $Ref)
; [eval] diz.BlockingQueue__first != null
(push) ; 5
(assert (not (= $t@1247 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
(assert (not (not (= $t@1247 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
; [then-branch 274] $t@1247 != Null
(assert (not (= $t@1247 $Ref.null)))
(declare-const $t@1248 $Snap)
(declare-const $k@1249 $Perm)
(assert ($Perm.isValidVar $k@1249))
(assert ($Perm.isReadVar $k@1249 $Perm.Write))
(declare-const $t@1250 $Ref)
(declare-const $k@1251 $Perm)
(assert ($Perm.isValidVar $k@1251))
(assert ($Perm.isReadVar $k@1251 $Perm.Write))
(declare-const $t@1252 $Ref)
; [eval] sys__result == old(BlockingQueue__contents(diz)[0])
; [eval] old(BlockingQueue__contents(diz)[0])
; [eval] BlockingQueue__contents(diz)[0]
; [eval] BlockingQueue__contents(diz)
; [eval] diz != null
(declare-const $k@1253 $Perm)
(assert ($Perm.isValidVar $k@1253))
(assert ($Perm.isReadVar $k@1253 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@1253 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (< $k@1253 $k@1233))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@1254 $Perm)
(assert ($Perm.isValidVar $k@1254))
(assert ($Perm.isReadVar $k@1254 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@1254 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (< $k@1254 $k@1235))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 6
(assert (not (= $t@1237 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 6
(push) ; 6
; [then-branch 275] $t@1237 != Null
(declare-const $k@1255 $Perm)
(assert ($Perm.isValidVar $k@1255))
(assert ($Perm.isReadVar $k@1255 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@1255 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(push) ; 7
(assert (not (not (= $k@1239 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (not (= $k@1239 $Perm.No)))
(assert (< $k@1255 $k@1239))
(declare-const $k@1256 $Perm)
(assert ($Perm.isValidVar $k@1256))
(assert ($Perm.isReadVar $k@1256 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@1256 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(push) ; 7
(assert (not (not (= $k@1241 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (not (= $k@1241 $Perm.No)))
(assert (< $k@1256 $k@1241))
(pop) ; 6
; [dead else-branch 275] $t@1237 == Null
(assert ($Perm.isValidVar $k@1255))
(assert ($Perm.isReadVar $k@1255 $Perm.Write))
(assert (not (= $k@1239 $Perm.No)))
(assert (< $k@1255 $k@1239))
(assert ($Perm.isValidVar $k@1256))
(assert ($Perm.isReadVar $k@1256 $Perm.Write))
(assert (not (= $k@1241 $Perm.No)))
(assert (< $k@1256 $k@1241))
(assert (=
  sys__result@1226
  ($Seq.index
    ($BlockingQueue__contents ($Snap.combine
      ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@1234))
                  $Snap.unit)
                ($SortWrappers.$RefTo$Snap $t@1236))
              $Snap.unit)
            ($SortWrappers.$RefTo$Snap $t@1237))
          $t@1238)
        ($SortWrappers.$RefTo$Snap $t@1240))
      ($SortWrappers.$RefTo$Snap $t@1242)) diz@1225)
    0)))
; [eval] BlockingQueue__contents(diz) == old(BlockingQueue__contents(diz)[1..])
; [eval] BlockingQueue__contents(diz)
; [eval] diz != null
(declare-const $k@1257 $Perm)
(assert ($Perm.isValidVar $k@1257))
(assert ($Perm.isReadVar $k@1257 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@1257 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (< $k@1257 $k@1243))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@1258 $Perm)
(assert ($Perm.isValidVar $k@1258))
(assert ($Perm.isReadVar $k@1258 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@1258 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (< $k@1258 $k@1245))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 6
(assert (not (= $t@1247 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 6
(push) ; 6
; [then-branch 276] $t@1247 != Null
(declare-const $k@1259 $Perm)
(assert ($Perm.isValidVar $k@1259))
(assert ($Perm.isReadVar $k@1259 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@1259 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(push) ; 7
(assert (not (not (= $k@1249 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (not (= $k@1249 $Perm.No)))
(assert (< $k@1259 $k@1249))
(declare-const $k@1260 $Perm)
(assert ($Perm.isValidVar $k@1260))
(assert ($Perm.isReadVar $k@1260 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@1260 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(push) ; 7
(assert (not (not (= $k@1251 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (not (= $k@1251 $Perm.No)))
(assert (< $k@1260 $k@1251))
(pop) ; 6
; [dead else-branch 276] $t@1247 == Null
(assert ($Perm.isValidVar $k@1259))
(assert ($Perm.isReadVar $k@1259 $Perm.Write))
(assert (not (= $k@1249 $Perm.No)))
(assert (< $k@1259 $k@1249))
(assert ($Perm.isValidVar $k@1260))
(assert ($Perm.isReadVar $k@1260 $Perm.Write))
(assert (not (= $k@1251 $Perm.No)))
(assert (< $k@1260 $k@1251))
; [eval] old(BlockingQueue__contents(diz)[1..])
; [eval] BlockingQueue__contents(diz)[1..]
; [eval] BlockingQueue__contents(diz)
; [eval] diz != null
(declare-const $k@1261 $Perm)
(assert ($Perm.isValidVar $k@1261))
(assert ($Perm.isReadVar $k@1261 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@1261 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (< $k@1261 $k@1233))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@1262 $Perm)
(assert ($Perm.isValidVar $k@1262))
(assert ($Perm.isReadVar $k@1262 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@1262 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (< $k@1262 $k@1235))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 6
(assert (not (= $t@1237 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 6
(push) ; 6
; [then-branch 277] $t@1237 != Null
(declare-const $k@1263 $Perm)
(assert ($Perm.isValidVar $k@1263))
(assert ($Perm.isReadVar $k@1263 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@1263 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@1263 $k@1239))
(declare-const $k@1264 $Perm)
(assert ($Perm.isValidVar $k@1264))
(assert ($Perm.isReadVar $k@1264 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@1264 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@1264 $k@1241))
(pop) ; 6
; [dead else-branch 277] $t@1237 == Null
(assert ($Perm.isValidVar $k@1263))
(assert ($Perm.isReadVar $k@1263 $Perm.Write))
(assert (< $k@1263 $k@1239))
(assert ($Perm.isValidVar $k@1264))
(assert ($Perm.isReadVar $k@1264 $Perm.Write))
(assert (< $k@1264 $k@1241))
(assert ($Seq.equal
  ($BlockingQueue__contents ($Snap.combine
    ($Snap.combine
      ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@1244))
                $Snap.unit)
              ($SortWrappers.$RefTo$Snap $t@1246))
            $Snap.unit)
          ($SortWrappers.$RefTo$Snap $t@1247))
        $t@1248)
      ($SortWrappers.$RefTo$Snap $t@1250))
    ($SortWrappers.$RefTo$Snap $t@1252)) diz@1225)
  ($Seq.drop
    ($BlockingQueue__contents ($Snap.combine
      ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@1234))
                  $Snap.unit)
                ($SortWrappers.$RefTo$Snap $t@1236))
              $Snap.unit)
            ($SortWrappers.$RefTo$Snap $t@1237))
          $t@1238)
        ($SortWrappers.$RefTo$Snap $t@1240))
      ($SortWrappers.$RefTo$Snap $t@1242)) diz@1225)
    1)))
(pop) ; 5
(push) ; 5
; [else-branch 274] $t@1247 == Null
(assert (= $t@1247 $Ref.null))
(declare-const $k@1265 $Perm)
(assert ($Perm.isValidVar $k@1265))
(assert ($Perm.isReadVar $k@1265 $Perm.Write))
(declare-const $t@1266 $Ref)
(declare-const $k@1267 $Perm)
(assert ($Perm.isValidVar $k@1267))
(assert ($Perm.isReadVar $k@1267 $Perm.Write))
(declare-const $t@1268 $Ref)
; [eval] sys__result == old(BlockingQueue__contents(diz)[0])
; [eval] old(BlockingQueue__contents(diz)[0])
; [eval] BlockingQueue__contents(diz)[0]
; [eval] BlockingQueue__contents(diz)
; [eval] diz != null
(declare-const $k@1269 $Perm)
(assert ($Perm.isValidVar $k@1269))
(assert ($Perm.isReadVar $k@1269 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@1269 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (< $k@1269 $k@1233))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@1270 $Perm)
(assert ($Perm.isValidVar $k@1270))
(assert ($Perm.isReadVar $k@1270 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@1270 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (< $k@1270 $k@1235))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 6
(assert (not (= $t@1237 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 6
(push) ; 6
; [then-branch 278] $t@1237 != Null
(declare-const $k@1271 $Perm)
(assert ($Perm.isValidVar $k@1271))
(assert ($Perm.isReadVar $k@1271 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@1271 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(push) ; 7
(assert (not (not (= $k@1239 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (not (= $k@1239 $Perm.No)))
(assert (< $k@1271 $k@1239))
(declare-const $k@1272 $Perm)
(assert ($Perm.isValidVar $k@1272))
(assert ($Perm.isReadVar $k@1272 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@1272 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(push) ; 7
(assert (not (not (= $k@1241 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (not (= $k@1241 $Perm.No)))
(assert (< $k@1272 $k@1241))
(pop) ; 6
; [dead else-branch 278] $t@1237 == Null
(assert ($Perm.isValidVar $k@1271))
(assert ($Perm.isReadVar $k@1271 $Perm.Write))
(assert (not (= $k@1239 $Perm.No)))
(assert (< $k@1271 $k@1239))
(assert ($Perm.isValidVar $k@1272))
(assert ($Perm.isReadVar $k@1272 $Perm.Write))
(assert (not (= $k@1241 $Perm.No)))
(assert (< $k@1272 $k@1241))
(assert (=
  sys__result@1226
  ($Seq.index
    ($BlockingQueue__contents ($Snap.combine
      ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@1234))
                  $Snap.unit)
                ($SortWrappers.$RefTo$Snap $t@1236))
              $Snap.unit)
            ($SortWrappers.$RefTo$Snap $t@1237))
          $t@1238)
        ($SortWrappers.$RefTo$Snap $t@1240))
      ($SortWrappers.$RefTo$Snap $t@1242)) diz@1225)
    0)))
; [eval] BlockingQueue__contents(diz) == old(BlockingQueue__contents(diz)[1..])
; [eval] BlockingQueue__contents(diz)
; [eval] diz != null
(declare-const $k@1273 $Perm)
(assert ($Perm.isValidVar $k@1273))
(assert ($Perm.isReadVar $k@1273 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@1273 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (< $k@1273 $k@1243))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@1274 $Perm)
(assert ($Perm.isValidVar $k@1274))
(assert ($Perm.isReadVar $k@1274 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@1274 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (< $k@1274 $k@1245))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 6
(assert (not (not (= $t@1247 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 6
; [dead then-branch 279] $t@1247 != Null
(push) ; 6
; [else-branch 279] $t@1247 == Null
(declare-const $k@1275 $Perm)
(assert ($Perm.isValidVar $k@1275))
(assert ($Perm.isReadVar $k@1275 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@1275 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(push) ; 7
(assert (not (not (= $k@1265 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (not (= $k@1265 $Perm.No)))
(assert (< $k@1275 $k@1265))
(declare-const $k@1276 $Perm)
(assert ($Perm.isValidVar $k@1276))
(assert ($Perm.isReadVar $k@1276 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@1276 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(push) ; 7
(assert (not (not (= $k@1267 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (not (= $k@1267 $Perm.No)))
(assert (< $k@1276 $k@1267))
(pop) ; 6
(assert ($Perm.isValidVar $k@1275))
(assert ($Perm.isReadVar $k@1275 $Perm.Write))
(assert (not (= $k@1265 $Perm.No)))
(assert (< $k@1275 $k@1265))
(assert ($Perm.isValidVar $k@1276))
(assert ($Perm.isReadVar $k@1276 $Perm.Write))
(assert (not (= $k@1267 $Perm.No)))
(assert (< $k@1276 $k@1267))
; [eval] old(BlockingQueue__contents(diz)[1..])
; [eval] BlockingQueue__contents(diz)[1..]
; [eval] BlockingQueue__contents(diz)
; [eval] diz != null
(declare-const $k@1277 $Perm)
(assert ($Perm.isValidVar $k@1277))
(assert ($Perm.isReadVar $k@1277 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@1277 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (< $k@1277 $k@1233))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@1278 $Perm)
(assert ($Perm.isValidVar $k@1278))
(assert ($Perm.isReadVar $k@1278 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@1278 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (< $k@1278 $k@1235))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 6
(assert (not (= $t@1237 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 6
(push) ; 6
; [then-branch 280] $t@1237 != Null
(declare-const $k@1279 $Perm)
(assert ($Perm.isValidVar $k@1279))
(assert ($Perm.isReadVar $k@1279 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@1279 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@1279 $k@1239))
(declare-const $k@1280 $Perm)
(assert ($Perm.isValidVar $k@1280))
(assert ($Perm.isReadVar $k@1280 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@1280 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@1280 $k@1241))
(pop) ; 6
; [dead else-branch 280] $t@1237 == Null
(assert ($Perm.isValidVar $k@1279))
(assert ($Perm.isReadVar $k@1279 $Perm.Write))
(assert (< $k@1279 $k@1239))
(assert ($Perm.isValidVar $k@1280))
(assert ($Perm.isReadVar $k@1280 $Perm.Write))
(assert (< $k@1280 $k@1241))
(assert ($Seq.equal
  ($BlockingQueue__contents ($Snap.combine
    ($Snap.combine
      ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@1244))
                $Snap.unit)
              ($SortWrappers.$RefTo$Snap $t@1246))
            $Snap.unit)
          ($SortWrappers.$RefTo$Snap $t@1247))
        $Snap.unit)
      ($SortWrappers.$RefTo$Snap $t@1266))
    ($SortWrappers.$RefTo$Snap $t@1268)) diz@1225)
  ($Seq.drop
    ($BlockingQueue__contents ($Snap.combine
      ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@1234))
                  $Snap.unit)
                ($SortWrappers.$RefTo$Snap $t@1236))
              $Snap.unit)
            ($SortWrappers.$RefTo$Snap $t@1237))
          $t@1238)
        ($SortWrappers.$RefTo$Snap $t@1240))
      ($SortWrappers.$RefTo$Snap $t@1242)) diz@1225)
    1)))
(pop) ; 5
(pop) ; 4
(push) ; 4
; [exec]
; unfold acc(Node__state(diz.BlockingQueue__first), write)
(declare-const $t@1281 $Snap)
(declare-const $t@1282 $Snap)
(assert (= $t@1238 ($Snap.combine $t@1281 $t@1282)))
(declare-const $t@1283 Int)
(declare-const $t@1284 $Ref)
(assert (=
  $t@1281
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@1283)
    ($SortWrappers.$RefTo$Snap $t@1284))))
(declare-const $k@1285 $Perm)
(assert ($Perm.isValidVar $k@1285))
(assert ($Perm.isReadVar $k@1285 $Perm.Write))
; [eval] diz.BlockingQueue__first.Node__next != null
(push) ; 5
(assert (not (= $t@1284 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
(assert (not (not (= $t@1284 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
; [then-branch 281] $t@1284 != Null
(assert (not (= $t@1284 $Ref.null)))
; [exec]
; __flatten_50 := diz.BlockingQueue__first
; [exec]
; value := __flatten_50.Node__val
(push) ; 6
(assert (not (not (= $k@1285 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= $k@1285 $Perm.No)))
; [exec]
; __flatten_52 := diz.BlockingQueue__first
; [exec]
; __flatten_51 := __flatten_52.Node__next
; [exec]
; __flatten_135 := __flatten_51
; [exec]
; diz.BlockingQueue__first := __flatten_135
; [exec]
; __flatten_53 := value
; [exec]
; sys__result := __flatten_53
; [exec]
; assert acc(diz.BlockingQueue__capacity, wildcard) && (diz.BlockingQueue__capacity > 0) && acc(diz.BlockingQueue__count, wildcard) && (diz.BlockingQueue__count != null) && acc(diz.BlockingQueue__first, write) && ((diz.BlockingQueue__first != null) ==> acc(Node__state(diz.BlockingQueue__first), write)) && acc(diz.BlockingQueue__putLock, wildcard) && acc(diz.BlockingQueue__takeLock, wildcard) && (sys__result == old(BlockingQueue__contents(diz)[0])) && (BlockingQueue__contents(diz) == old(BlockingQueue__contents(diz)[1..]))
(declare-const $k@1286 $Perm)
(assert ($Perm.isValidVar $k@1286))
(assert ($Perm.isReadVar $k@1286 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@1286 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (< $k@1286 $k@1233))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@1287 $Perm)
(assert ($Perm.isValidVar $k@1287))
(assert ($Perm.isReadVar $k@1287 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@1287 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (< $k@1287 $k@1235))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 6
(assert (not (= $t@1284 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 6
(push) ; 6
; [then-branch 282] $t@1284 != Null
(declare-const $k@1288 $Perm)
(assert ($Perm.isValidVar $k@1288))
(assert ($Perm.isReadVar $k@1288 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@1288 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(push) ; 7
(assert (not (not (= $k@1239 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (not (= $k@1239 $Perm.No)))
(assert (< $k@1288 $k@1239))
(declare-const $k@1289 $Perm)
(assert ($Perm.isValidVar $k@1289))
(assert ($Perm.isReadVar $k@1289 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@1289 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(push) ; 7
(assert (not (not (= $k@1241 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (not (= $k@1241 $Perm.No)))
(assert (< $k@1289 $k@1241))
; [eval] sys__result == old(BlockingQueue__contents(diz)[0])
; [eval] old(BlockingQueue__contents(diz)[0])
; [eval] BlockingQueue__contents(diz)[0]
; [eval] BlockingQueue__contents(diz)
; [eval] diz != null
(declare-const $k@1290 $Perm)
(assert ($Perm.isValidVar $k@1290))
(assert ($Perm.isReadVar $k@1290 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@1290 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@1290 $k@1233))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@1291 $Perm)
(assert ($Perm.isValidVar $k@1291))
(assert ($Perm.isReadVar $k@1291 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@1291 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@1291 $k@1235))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 7
(assert (not (= $t@1237 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 7
(push) ; 7
; [then-branch 283] $t@1237 != Null
(declare-const $k@1292 $Perm)
(assert ($Perm.isValidVar $k@1292))
(assert ($Perm.isReadVar $k@1292 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@1292 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (< $k@1292 $k@1239))
(declare-const $k@1293 $Perm)
(assert ($Perm.isValidVar $k@1293))
(assert ($Perm.isReadVar $k@1293 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@1293 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (< $k@1293 $k@1241))
(pop) ; 7
; [dead else-branch 283] $t@1237 == Null
(assert ($Perm.isValidVar $k@1292))
(assert ($Perm.isReadVar $k@1292 $Perm.Write))
(assert (< $k@1292 $k@1239))
(assert ($Perm.isValidVar $k@1293))
(assert ($Perm.isReadVar $k@1293 $Perm.Write))
(assert (< $k@1293 $k@1241))
(push) ; 7
(assert (not (=
  $t@1283
  ($Seq.index
    ($BlockingQueue__contents ($Snap.combine
      ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@1234))
                  $Snap.unit)
                ($SortWrappers.$RefTo$Snap $t@1236))
              $Snap.unit)
            ($SortWrappers.$RefTo$Snap $t@1237))
          $t@1238)
        ($SortWrappers.$RefTo$Snap $t@1240))
      ($SortWrappers.$RefTo$Snap $t@1242)) diz@1225)
    0))))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (=
  $t@1283
  ($Seq.index
    ($BlockingQueue__contents ($Snap.combine
      ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@1234))
                  $Snap.unit)
                ($SortWrappers.$RefTo$Snap $t@1236))
              $Snap.unit)
            ($SortWrappers.$RefTo$Snap $t@1237))
          $t@1238)
        ($SortWrappers.$RefTo$Snap $t@1240))
      ($SortWrappers.$RefTo$Snap $t@1242)) diz@1225)
    0)))
; [eval] BlockingQueue__contents(diz) == old(BlockingQueue__contents(diz)[1..])
; [eval] BlockingQueue__contents(diz)
; [eval] diz != null
(declare-const $k@1294 $Perm)
(assert ($Perm.isValidVar $k@1294))
(assert ($Perm.isReadVar $k@1294 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@1294 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@1294 $k@1233))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@1295 $Perm)
(assert ($Perm.isValidVar $k@1295))
(assert ($Perm.isReadVar $k@1295 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@1295 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@1295 $k@1235))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 7
(assert (not (= $t@1284 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 7
(push) ; 7
; [then-branch 284] $t@1284 != Null
(declare-const $k@1296 $Perm)
(assert ($Perm.isValidVar $k@1296))
(assert ($Perm.isReadVar $k@1296 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@1296 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (< $k@1296 $k@1239))
(declare-const $k@1297 $Perm)
(assert ($Perm.isValidVar $k@1297))
(assert ($Perm.isReadVar $k@1297 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@1297 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (< $k@1297 $k@1241))
(pop) ; 7
; [dead else-branch 284] $t@1284 == Null
(assert ($Perm.isValidVar $k@1296))
(assert ($Perm.isReadVar $k@1296 $Perm.Write))
(assert (< $k@1296 $k@1239))
(assert ($Perm.isValidVar $k@1297))
(assert ($Perm.isReadVar $k@1297 $Perm.Write))
(assert (< $k@1297 $k@1241))
; [eval] old(BlockingQueue__contents(diz)[1..])
; [eval] BlockingQueue__contents(diz)[1..]
; [eval] BlockingQueue__contents(diz)
; [eval] diz != null
(declare-const $k@1298 $Perm)
(assert ($Perm.isValidVar $k@1298))
(assert ($Perm.isReadVar $k@1298 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@1298 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@1298 $k@1233))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@1299 $Perm)
(assert ($Perm.isValidVar $k@1299))
(assert ($Perm.isReadVar $k@1299 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@1299 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@1299 $k@1235))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 7
(assert (not (= $t@1237 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 7
(push) ; 7
; [then-branch 285] $t@1237 != Null
(declare-const $k@1300 $Perm)
(assert ($Perm.isValidVar $k@1300))
(assert ($Perm.isReadVar $k@1300 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@1300 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (< $k@1300 $k@1239))
(declare-const $k@1301 $Perm)
(assert ($Perm.isValidVar $k@1301))
(assert ($Perm.isReadVar $k@1301 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@1301 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (< $k@1301 $k@1241))
(pop) ; 7
; [dead else-branch 285] $t@1237 == Null
(assert ($Perm.isValidVar $k@1300))
(assert ($Perm.isReadVar $k@1300 $Perm.Write))
(assert (< $k@1300 $k@1239))
(assert ($Perm.isValidVar $k@1301))
(assert ($Perm.isReadVar $k@1301 $Perm.Write))
(assert (< $k@1301 $k@1241))
(push) ; 7
(assert (not ($Seq.equal
  ($BlockingQueue__contents ($Snap.combine
    ($Snap.combine
      ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@1234))
                $Snap.unit)
              ($SortWrappers.$RefTo$Snap $t@1236))
            $Snap.unit)
          ($SortWrappers.$RefTo$Snap $t@1284))
        $t@1282)
      ($SortWrappers.$RefTo$Snap $t@1240))
    ($SortWrappers.$RefTo$Snap $t@1242)) diz@1225)
  ($Seq.drop
    ($BlockingQueue__contents ($Snap.combine
      ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@1234))
                  $Snap.unit)
                ($SortWrappers.$RefTo$Snap $t@1236))
              $Snap.unit)
            ($SortWrappers.$RefTo$Snap $t@1237))
          $t@1238)
        ($SortWrappers.$RefTo$Snap $t@1240))
      ($SortWrappers.$RefTo$Snap $t@1242)) diz@1225)
    1))))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert ($Seq.equal
  ($BlockingQueue__contents ($Snap.combine
    ($Snap.combine
      ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@1234))
                $Snap.unit)
              ($SortWrappers.$RefTo$Snap $t@1236))
            $Snap.unit)
          ($SortWrappers.$RefTo$Snap $t@1284))
        $t@1282)
      ($SortWrappers.$RefTo$Snap $t@1240))
    ($SortWrappers.$RefTo$Snap $t@1242)) diz@1225)
  ($Seq.drop
    ($BlockingQueue__contents ($Snap.combine
      ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@1234))
                  $Snap.unit)
                ($SortWrappers.$RefTo$Snap $t@1236))
              $Snap.unit)
            ($SortWrappers.$RefTo$Snap $t@1237))
          $t@1238)
        ($SortWrappers.$RefTo$Snap $t@1240))
      ($SortWrappers.$RefTo$Snap $t@1242)) diz@1225)
    1)))
; [exec]
; inhale false
(pop) ; 6
; [dead else-branch 282] $t@1284 == Null
(pop) ; 5
(push) ; 5
; [else-branch 281] $t@1284 == Null
(assert (= $t@1284 $Ref.null))
; [exec]
; __flatten_50 := diz.BlockingQueue__first
; [exec]
; value := __flatten_50.Node__val
(push) ; 6
(assert (not (not (= $k@1285 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= $k@1285 $Perm.No)))
; [exec]
; __flatten_52 := diz.BlockingQueue__first
; [exec]
; __flatten_51 := __flatten_52.Node__next
; [exec]
; __flatten_135 := __flatten_51
; [exec]
; diz.BlockingQueue__first := __flatten_135
; [exec]
; __flatten_53 := value
; [exec]
; sys__result := __flatten_53
; [exec]
; assert acc(diz.BlockingQueue__capacity, wildcard) && (diz.BlockingQueue__capacity > 0) && acc(diz.BlockingQueue__count, wildcard) && (diz.BlockingQueue__count != null) && acc(diz.BlockingQueue__first, write) && ((diz.BlockingQueue__first != null) ==> acc(Node__state(diz.BlockingQueue__first), write)) && acc(diz.BlockingQueue__putLock, wildcard) && acc(diz.BlockingQueue__takeLock, wildcard) && (sys__result == old(BlockingQueue__contents(diz)[0])) && (BlockingQueue__contents(diz) == old(BlockingQueue__contents(diz)[1..]))
(declare-const $k@1302 $Perm)
(assert ($Perm.isValidVar $k@1302))
(assert ($Perm.isReadVar $k@1302 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@1302 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (< $k@1302 $k@1233))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@1303 $Perm)
(assert ($Perm.isValidVar $k@1303))
(assert ($Perm.isReadVar $k@1303 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@1303 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (< $k@1303 $k@1235))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 6
(assert (not (not (= $t@1284 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 6
; [dead then-branch 286] $t@1284 != Null
(push) ; 6
; [else-branch 286] $t@1284 == Null
(declare-const $k@1304 $Perm)
(assert ($Perm.isValidVar $k@1304))
(assert ($Perm.isReadVar $k@1304 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@1304 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(push) ; 7
(assert (not (not (= $k@1239 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (not (= $k@1239 $Perm.No)))
(assert (< $k@1304 $k@1239))
(declare-const $k@1305 $Perm)
(assert ($Perm.isValidVar $k@1305))
(assert ($Perm.isReadVar $k@1305 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@1305 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(push) ; 7
(assert (not (not (= $k@1241 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (not (= $k@1241 $Perm.No)))
(assert (< $k@1305 $k@1241))
; [eval] sys__result == old(BlockingQueue__contents(diz)[0])
; [eval] old(BlockingQueue__contents(diz)[0])
; [eval] BlockingQueue__contents(diz)[0]
; [eval] BlockingQueue__contents(diz)
; [eval] diz != null
(declare-const $k@1306 $Perm)
(assert ($Perm.isValidVar $k@1306))
(assert ($Perm.isReadVar $k@1306 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@1306 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@1306 $k@1233))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@1307 $Perm)
(assert ($Perm.isValidVar $k@1307))
(assert ($Perm.isReadVar $k@1307 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@1307 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@1307 $k@1235))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 7
(assert (not (= $t@1237 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 7
(push) ; 7
; [then-branch 287] $t@1237 != Null
(declare-const $k@1308 $Perm)
(assert ($Perm.isValidVar $k@1308))
(assert ($Perm.isReadVar $k@1308 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@1308 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (< $k@1308 $k@1239))
(declare-const $k@1309 $Perm)
(assert ($Perm.isValidVar $k@1309))
(assert ($Perm.isReadVar $k@1309 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@1309 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (< $k@1309 $k@1241))
(pop) ; 7
; [dead else-branch 287] $t@1237 == Null
(assert ($Perm.isValidVar $k@1308))
(assert ($Perm.isReadVar $k@1308 $Perm.Write))
(assert (< $k@1308 $k@1239))
(assert ($Perm.isValidVar $k@1309))
(assert ($Perm.isReadVar $k@1309 $Perm.Write))
(assert (< $k@1309 $k@1241))
(push) ; 7
(assert (not (=
  $t@1283
  ($Seq.index
    ($BlockingQueue__contents ($Snap.combine
      ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@1234))
                  $Snap.unit)
                ($SortWrappers.$RefTo$Snap $t@1236))
              $Snap.unit)
            ($SortWrappers.$RefTo$Snap $t@1237))
          $t@1238)
        ($SortWrappers.$RefTo$Snap $t@1240))
      ($SortWrappers.$RefTo$Snap $t@1242)) diz@1225)
    0))))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (=
  $t@1283
  ($Seq.index
    ($BlockingQueue__contents ($Snap.combine
      ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@1234))
                  $Snap.unit)
                ($SortWrappers.$RefTo$Snap $t@1236))
              $Snap.unit)
            ($SortWrappers.$RefTo$Snap $t@1237))
          $t@1238)
        ($SortWrappers.$RefTo$Snap $t@1240))
      ($SortWrappers.$RefTo$Snap $t@1242)) diz@1225)
    0)))
; [eval] BlockingQueue__contents(diz) == old(BlockingQueue__contents(diz)[1..])
; [eval] BlockingQueue__contents(diz)
; [eval] diz != null
(declare-const $k@1310 $Perm)
(assert ($Perm.isValidVar $k@1310))
(assert ($Perm.isReadVar $k@1310 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@1310 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@1310 $k@1233))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@1311 $Perm)
(assert ($Perm.isValidVar $k@1311))
(assert ($Perm.isReadVar $k@1311 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@1311 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@1311 $k@1235))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 7
(assert (not (not (= $t@1284 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 7
; [dead then-branch 288] $t@1284 != Null
(push) ; 7
; [else-branch 288] $t@1284 == Null
(declare-const $k@1312 $Perm)
(assert ($Perm.isValidVar $k@1312))
(assert ($Perm.isReadVar $k@1312 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@1312 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (< $k@1312 $k@1239))
(declare-const $k@1313 $Perm)
(assert ($Perm.isValidVar $k@1313))
(assert ($Perm.isReadVar $k@1313 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@1313 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (< $k@1313 $k@1241))
(pop) ; 7
(assert ($Perm.isValidVar $k@1312))
(assert ($Perm.isReadVar $k@1312 $Perm.Write))
(assert (< $k@1312 $k@1239))
(assert ($Perm.isValidVar $k@1313))
(assert ($Perm.isReadVar $k@1313 $Perm.Write))
(assert (< $k@1313 $k@1241))
; [eval] old(BlockingQueue__contents(diz)[1..])
; [eval] BlockingQueue__contents(diz)[1..]
; [eval] BlockingQueue__contents(diz)
; [eval] diz != null
(declare-const $k@1314 $Perm)
(assert ($Perm.isValidVar $k@1314))
(assert ($Perm.isReadVar $k@1314 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@1314 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@1314 $k@1233))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@1315 $Perm)
(assert ($Perm.isValidVar $k@1315))
(assert ($Perm.isReadVar $k@1315 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@1315 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@1315 $k@1235))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 7
(assert (not (= $t@1237 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 7
(push) ; 7
; [then-branch 289] $t@1237 != Null
(declare-const $k@1316 $Perm)
(assert ($Perm.isValidVar $k@1316))
(assert ($Perm.isReadVar $k@1316 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@1316 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (< $k@1316 $k@1239))
(declare-const $k@1317 $Perm)
(assert ($Perm.isValidVar $k@1317))
(assert ($Perm.isReadVar $k@1317 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@1317 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (< $k@1317 $k@1241))
(pop) ; 7
; [dead else-branch 289] $t@1237 == Null
(assert ($Perm.isValidVar $k@1316))
(assert ($Perm.isReadVar $k@1316 $Perm.Write))
(assert (< $k@1316 $k@1239))
(assert ($Perm.isValidVar $k@1317))
(assert ($Perm.isReadVar $k@1317 $Perm.Write))
(assert (< $k@1317 $k@1241))
(push) ; 7
(assert (not ($Seq.equal
  ($BlockingQueue__contents ($Snap.combine
    ($Snap.combine
      ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@1234))
                $Snap.unit)
              ($SortWrappers.$RefTo$Snap $t@1236))
            $Snap.unit)
          ($SortWrappers.$RefTo$Snap $t@1284))
        $Snap.unit)
      ($SortWrappers.$RefTo$Snap $t@1240))
    ($SortWrappers.$RefTo$Snap $t@1242)) diz@1225)
  ($Seq.drop
    ($BlockingQueue__contents ($Snap.combine
      ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@1234))
                  $Snap.unit)
                ($SortWrappers.$RefTo$Snap $t@1236))
              $Snap.unit)
            ($SortWrappers.$RefTo$Snap $t@1237))
          $t@1238)
        ($SortWrappers.$RefTo$Snap $t@1240))
      ($SortWrappers.$RefTo$Snap $t@1242)) diz@1225)
    1))))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert ($Seq.equal
  ($BlockingQueue__contents ($Snap.combine
    ($Snap.combine
      ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@1234))
                $Snap.unit)
              ($SortWrappers.$RefTo$Snap $t@1236))
            $Snap.unit)
          ($SortWrappers.$RefTo$Snap $t@1284))
        $Snap.unit)
      ($SortWrappers.$RefTo$Snap $t@1240))
    ($SortWrappers.$RefTo$Snap $t@1242)) diz@1225)
  ($Seq.drop
    ($BlockingQueue__contents ($Snap.combine
      ($Snap.combine
        ($Snap.combine
          ($Snap.combine
            ($Snap.combine
              ($Snap.combine
                ($Snap.combine
                  ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@1234))
                  $Snap.unit)
                ($SortWrappers.$RefTo$Snap $t@1236))
              $Snap.unit)
            ($SortWrappers.$RefTo$Snap $t@1237))
          $t@1238)
        ($SortWrappers.$RefTo$Snap $t@1240))
      ($SortWrappers.$RefTo$Snap $t@1242)) diz@1225)
    1)))
; [exec]
; inhale false
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch 273] $t@1237 == Null
(assert (= $t@1237 $Ref.null))
(declare-const $k@1318 $Perm)
(assert ($Perm.isValidVar $k@1318))
(assert ($Perm.isReadVar $k@1318 $Perm.Write))
(declare-const $t@1319 $Ref)
(declare-const $k@1320 $Perm)
(assert ($Perm.isValidVar $k@1320))
(assert ($Perm.isReadVar $k@1320 $Perm.Write))
(declare-const $t@1321 $Ref)
; [eval] diz.BlockingQueue__first != null
(assert (not (= $t@1237 $Ref.null)))
(push) ; 4
(declare-const $k@1322 $Perm)
(assert ($Perm.isValidVar $k@1322))
(assert ($Perm.isReadVar $k@1322 $Perm.Write))
(declare-const $t@1323 Int)
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 5
(assert (not (not (= $k@1322 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@1322 $Perm.No)))
(assert (> $t@1323 0))
(declare-const $k@1324 $Perm)
(assert ($Perm.isValidVar $k@1324))
(assert ($Perm.isReadVar $k@1324 $Perm.Write))
(declare-const $t@1325 $Ref)
; [eval] diz.BlockingQueue__count != null
(push) ; 5
(assert (not (not (= $k@1324 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@1324 $Perm.No)))
(assert (not (= $t@1325 $Ref.null)))
(declare-const $t@1326 $Ref)
; [eval] diz.BlockingQueue__first != null
(push) ; 5
(assert (not (= $t@1326 $Ref.null)))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(push) ; 5
(assert (not (not (= $t@1326 $Ref.null))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
; [dead then-branch 290] $t@1326 != Null
; [dead else-branch 290] $t@1326 == Null
(pop) ; 4
(push) ; 4
; [exec]
; unfold acc(Node__state(diz.BlockingQueue__first), write)
(check-sat)
; unsat
(pop) ; 4
(pop) ; 3
(pop) ; 2
; ---------- LBQThread1a__LBQThread1a ----------
(declare-const queue@1327 $Ref)
(declare-const sys__result@1328 $Ref)
(declare-const diz@1329 $Ref)
(declare-const __flatten_54@1330 $Ref)
(declare-const __flatten_136@1331 $Ref)
(push) ; 2
(assert (not (= queue@1327 $Ref.null)))
(declare-const $k@1332 $Perm)
(assert ($Perm.isValidVar $k@1332))
(assert ($Perm.isReadVar $k@1332 $Perm.Write))
(declare-const $t@1333 Int)
; [eval] queue.BlockingQueue__capacity > 0
(push) ; 3
(assert (not (not (= $k@1332 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 3
(assert (not (= $k@1332 $Perm.No)))
(assert (> $t@1333 0))
(declare-const $k@1334 $Perm)
(assert ($Perm.isValidVar $k@1334))
(assert ($Perm.isReadVar $k@1334 $Perm.Write))
(declare-const $t@1335 $Ref)
; [eval] queue.BlockingQueue__count != null
(push) ; 3
(assert (not (not (= $k@1334 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 3
(assert (not (= $k@1334 $Perm.No)))
(assert (not (= $t@1335 $Ref.null)))
(declare-const $t@1336 $Ref)
; [eval] queue.BlockingQueue__first != null
(push) ; 3
(assert (not (= $t@1336 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 3
(push) ; 3
(assert (not (not (= $t@1336 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 3
(push) ; 3
; [then-branch 291] $t@1336 != Null
(assert (not (= $t@1336 $Ref.null)))
(declare-const $t@1337 $Snap)
(declare-const $k@1338 $Perm)
(assert ($Perm.isValidVar $k@1338))
(assert ($Perm.isReadVar $k@1338 $Perm.Write))
(declare-const $t@1339 $Ref)
(declare-const $k@1340 $Perm)
(assert ($Perm.isValidVar $k@1340))
(assert ($Perm.isReadVar $k@1340 $Perm.Write))
(declare-const $t@1341 $Ref)
(push) ; 4
; [eval] sys__result != null
(assert (not (= sys__result@1328 $Ref.null)))
(declare-const $k@1342 $Perm)
(assert ($Perm.isValidVar $k@1342))
(assert ($Perm.isReadVar $k@1342 $Perm.Write))
(declare-const $t@1343 $Ref)
(push) ; 5
(assert (not (not (= $k@1342 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@1342 $Perm.No)))
(assert (not (= $t@1343 $Ref.null)))
(declare-const $k@1344 $Perm)
(assert ($Perm.isValidVar $k@1344))
(assert ($Perm.isReadVar $k@1344 $Perm.Write))
(declare-const $t@1345 Int)
; [eval] sys__result.LBQThread1a__queue.BlockingQueue__capacity > 0
(push) ; 5
(assert (not (not (= $k@1344 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@1344 $Perm.No)))
(assert (> $t@1345 0))
(declare-const $k@1346 $Perm)
(assert ($Perm.isValidVar $k@1346))
(assert ($Perm.isReadVar $k@1346 $Perm.Write))
(declare-const $t@1347 $Ref)
; [eval] sys__result.LBQThread1a__queue.BlockingQueue__count != null
(push) ; 5
(assert (not (not (= $k@1346 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@1346 $Perm.No)))
(assert (not (= $t@1347 $Ref.null)))
(declare-const $t@1348 $Ref)
; [eval] sys__result.LBQThread1a__queue.BlockingQueue__first != null
(push) ; 5
(assert (not (= $t@1348 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
(assert (not (not (= $t@1348 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
; [then-branch 292] $t@1348 != Null
(assert (not (= $t@1348 $Ref.null)))
(declare-const $t@1349 $Snap)
(declare-const $k@1350 $Perm)
(assert ($Perm.isValidVar $k@1350))
(assert ($Perm.isReadVar $k@1350 $Perm.Write))
(declare-const $t@1351 $Ref)
(declare-const $k@1352 $Perm)
(assert ($Perm.isValidVar $k@1352))
(assert ($Perm.isReadVar $k@1352 $Perm.Write))
(declare-const $t@1353 $Ref)
(pop) ; 5
(push) ; 5
; [else-branch 292] $t@1348 == Null
(assert (= $t@1348 $Ref.null))
(declare-const $k@1354 $Perm)
(assert ($Perm.isValidVar $k@1354))
(assert ($Perm.isReadVar $k@1354 $Perm.Write))
(declare-const $t@1355 $Ref)
(declare-const $k@1356 $Perm)
(assert ($Perm.isValidVar $k@1356))
(assert ($Perm.isReadVar $k@1356 $Perm.Write))
(declare-const $t@1357 $Ref)
(pop) ; 5
(pop) ; 4
(push) ; 4
; [exec]
; diz := new(LBQThread1a__queue)
(declare-const diz@1358 $Ref)
(assert (not (= diz@1358 $Ref.null)))
(declare-const LBQThread1a__queue@1359 $Ref)
(assert (and
  (not (= queue@1327 diz@1358))
  (not (= sys__result@1328 diz@1358))
  (not (= __flatten_54@1330 diz@1358))
  (not (= __flatten_136@1331 diz@1358))
  (not (= $t@1336 diz@1358))
  (not (= LBQThread1a__queue@1359 diz@1358))
  (not (= $t@1335 diz@1358))
  (not (= $t@1339 diz@1358))
  (not (= $t@1341 diz@1358))))
; [exec]
; __flatten_54 := queue
; [exec]
; __flatten_136 := __flatten_54
; [exec]
; diz.LBQThread1a__queue := __flatten_136
; [exec]
; sys__result := diz
; [exec]
; assert (sys__result != null) && acc(sys__result.LBQThread1a__queue, wildcard) && acc(sys__result.LBQThread1a__queue.BlockingQueue__capacity, wildcard) && (sys__result.LBQThread1a__queue.BlockingQueue__capacity > 0) && acc(sys__result.LBQThread1a__queue.BlockingQueue__count, wildcard) && (sys__result.LBQThread1a__queue.BlockingQueue__count != null) && acc(sys__result.LBQThread1a__queue.BlockingQueue__first, write) && ((sys__result.LBQThread1a__queue.BlockingQueue__first != null) ==> acc(Node__state(sys__result.LBQThread1a__queue.BlockingQueue__first), write)) && acc(sys__result.LBQThread1a__queue.BlockingQueue__putLock, wildcard) && acc(sys__result.LBQThread1a__queue.BlockingQueue__takeLock, wildcard)
; [eval] sys__result != null
(declare-const $k@1360 $Perm)
(assert ($Perm.isValidVar $k@1360))
(assert ($Perm.isReadVar $k@1360 $Perm.Write))
(push) ; 5
(assert (not (or (= $k@1360 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (< $k@1360 $Perm.Write))
(declare-const $k@1361 $Perm)
(assert ($Perm.isValidVar $k@1361))
(assert ($Perm.isReadVar $k@1361 $Perm.Write))
(push) ; 5
(assert (not (or (= $k@1361 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (< $k@1361 $k@1332))
; [eval] sys__result.LBQThread1a__queue.BlockingQueue__capacity > 0
(declare-const $k@1362 $Perm)
(assert ($Perm.isValidVar $k@1362))
(assert ($Perm.isReadVar $k@1362 $Perm.Write))
(push) ; 5
(assert (not (or (= $k@1362 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (< $k@1362 $k@1334))
; [eval] sys__result.LBQThread1a__queue.BlockingQueue__count != null
; [eval] sys__result.LBQThread1a__queue.BlockingQueue__first != null
(push) ; 5
(assert (not (= $t@1336 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
; [then-branch 293] $t@1336 != Null
(declare-const $k@1363 $Perm)
(assert ($Perm.isValidVar $k@1363))
(assert ($Perm.isReadVar $k@1363 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@1363 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(push) ; 6
(assert (not (not (= $k@1338 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= $k@1338 $Perm.No)))
(assert (< $k@1363 $k@1338))
(declare-const $k@1364 $Perm)
(assert ($Perm.isValidVar $k@1364))
(assert ($Perm.isReadVar $k@1364 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@1364 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(push) ; 6
(assert (not (not (= $k@1340 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= $k@1340 $Perm.No)))
(assert (< $k@1364 $k@1340))
; [exec]
; inhale false
(pop) ; 5
; [dead else-branch 293] $t@1336 == Null
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch 291] $t@1336 == Null
(assert (= $t@1336 $Ref.null))
(declare-const $k@1365 $Perm)
(assert ($Perm.isValidVar $k@1365))
(assert ($Perm.isReadVar $k@1365 $Perm.Write))
(declare-const $t@1366 $Ref)
(declare-const $k@1367 $Perm)
(assert ($Perm.isValidVar $k@1367))
(assert ($Perm.isReadVar $k@1367 $Perm.Write))
(declare-const $t@1368 $Ref)
(push) ; 4
; [eval] sys__result != null
(assert (not (= sys__result@1328 $Ref.null)))
(declare-const $k@1369 $Perm)
(assert ($Perm.isValidVar $k@1369))
(assert ($Perm.isReadVar $k@1369 $Perm.Write))
(declare-const $t@1370 $Ref)
(push) ; 5
(assert (not (not (= $k@1369 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@1369 $Perm.No)))
(assert (not (= $t@1370 $Ref.null)))
(declare-const $k@1371 $Perm)
(assert ($Perm.isValidVar $k@1371))
(assert ($Perm.isReadVar $k@1371 $Perm.Write))
(declare-const $t@1372 Int)
; [eval] sys__result.LBQThread1a__queue.BlockingQueue__capacity > 0
(push) ; 5
(assert (not (not (= $k@1371 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@1371 $Perm.No)))
(assert (> $t@1372 0))
(declare-const $k@1373 $Perm)
(assert ($Perm.isValidVar $k@1373))
(assert ($Perm.isReadVar $k@1373 $Perm.Write))
(declare-const $t@1374 $Ref)
; [eval] sys__result.LBQThread1a__queue.BlockingQueue__count != null
(push) ; 5
(assert (not (not (= $k@1373 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@1373 $Perm.No)))
(assert (not (= $t@1374 $Ref.null)))
(declare-const $t@1375 $Ref)
; [eval] sys__result.LBQThread1a__queue.BlockingQueue__first != null
(push) ; 5
(assert (not (= $t@1375 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
(assert (not (not (= $t@1375 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
; [then-branch 294] $t@1375 != Null
(assert (not (= $t@1375 $Ref.null)))
(declare-const $t@1376 $Snap)
(declare-const $k@1377 $Perm)
(assert ($Perm.isValidVar $k@1377))
(assert ($Perm.isReadVar $k@1377 $Perm.Write))
(declare-const $t@1378 $Ref)
(declare-const $k@1379 $Perm)
(assert ($Perm.isValidVar $k@1379))
(assert ($Perm.isReadVar $k@1379 $Perm.Write))
(declare-const $t@1380 $Ref)
(pop) ; 5
(push) ; 5
; [else-branch 294] $t@1375 == Null
(assert (= $t@1375 $Ref.null))
(declare-const $k@1381 $Perm)
(assert ($Perm.isValidVar $k@1381))
(assert ($Perm.isReadVar $k@1381 $Perm.Write))
(declare-const $t@1382 $Ref)
(declare-const $k@1383 $Perm)
(assert ($Perm.isValidVar $k@1383))
(assert ($Perm.isReadVar $k@1383 $Perm.Write))
(declare-const $t@1384 $Ref)
(pop) ; 5
(pop) ; 4
(push) ; 4
; [exec]
; diz := new(LBQThread1a__queue)
(declare-const diz@1385 $Ref)
(assert (not (= diz@1385 $Ref.null)))
(declare-const LBQThread1a__queue@1386 $Ref)
(assert (and
  (not (= queue@1327 diz@1385))
  (not (= sys__result@1328 diz@1385))
  (not (= __flatten_54@1330 diz@1385))
  (not (= __flatten_136@1331 diz@1385))
  (not (= LBQThread1a__queue@1386 diz@1385))
  (not (= $t@1335 diz@1385))
  (not (= $t@1336 diz@1385))
  (not (= $t@1366 diz@1385))
  (not (= $t@1368 diz@1385))))
; [exec]
; __flatten_54 := queue
; [exec]
; __flatten_136 := __flatten_54
; [exec]
; diz.LBQThread1a__queue := __flatten_136
; [exec]
; sys__result := diz
; [exec]
; assert (sys__result != null) && acc(sys__result.LBQThread1a__queue, wildcard) && acc(sys__result.LBQThread1a__queue.BlockingQueue__capacity, wildcard) && (sys__result.LBQThread1a__queue.BlockingQueue__capacity > 0) && acc(sys__result.LBQThread1a__queue.BlockingQueue__count, wildcard) && (sys__result.LBQThread1a__queue.BlockingQueue__count != null) && acc(sys__result.LBQThread1a__queue.BlockingQueue__first, write) && ((sys__result.LBQThread1a__queue.BlockingQueue__first != null) ==> acc(Node__state(sys__result.LBQThread1a__queue.BlockingQueue__first), write)) && acc(sys__result.LBQThread1a__queue.BlockingQueue__putLock, wildcard) && acc(sys__result.LBQThread1a__queue.BlockingQueue__takeLock, wildcard)
; [eval] sys__result != null
(declare-const $k@1387 $Perm)
(assert ($Perm.isValidVar $k@1387))
(assert ($Perm.isReadVar $k@1387 $Perm.Write))
(push) ; 5
(assert (not (or (= $k@1387 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (< $k@1387 $Perm.Write))
(declare-const $k@1388 $Perm)
(assert ($Perm.isValidVar $k@1388))
(assert ($Perm.isReadVar $k@1388 $Perm.Write))
(push) ; 5
(assert (not (or (= $k@1388 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (< $k@1388 $k@1332))
; [eval] sys__result.LBQThread1a__queue.BlockingQueue__capacity > 0
(declare-const $k@1389 $Perm)
(assert ($Perm.isValidVar $k@1389))
(assert ($Perm.isReadVar $k@1389 $Perm.Write))
(push) ; 5
(assert (not (or (= $k@1389 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (< $k@1389 $k@1334))
; [eval] sys__result.LBQThread1a__queue.BlockingQueue__count != null
; [eval] sys__result.LBQThread1a__queue.BlockingQueue__first != null
(push) ; 5
(assert (not (not (= $t@1336 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
; [dead then-branch 295] $t@1336 != Null
(push) ; 5
; [else-branch 295] $t@1336 == Null
(declare-const $k@1390 $Perm)
(assert ($Perm.isValidVar $k@1390))
(assert ($Perm.isReadVar $k@1390 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@1390 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(push) ; 6
(assert (not (not (= $k@1365 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= $k@1365 $Perm.No)))
(assert (< $k@1390 $k@1365))
(declare-const $k@1391 $Perm)
(assert ($Perm.isValidVar $k@1391))
(assert ($Perm.isReadVar $k@1391 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@1391 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(push) ; 6
(assert (not (not (= $k@1367 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= $k@1367 $Perm.No)))
(assert (< $k@1391 $k@1367))
; [exec]
; inhale false
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
; ---------- LBQThread1a__forkOperator ----------
(declare-const diz@1392 $Ref)
(push) ; 2
; [eval] diz != null
(assert (not (= diz@1392 $Ref.null)))
(declare-const $k@1393 $Perm)
(assert ($Perm.isValidVar $k@1393))
(assert ($Perm.isReadVar $k@1393 $Perm.Write))
(declare-const $t@1394 $Ref)
(push) ; 3
(assert (not (not (= $k@1393 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 3
(assert (not (= $k@1393 $Perm.No)))
(assert (not (= $t@1394 $Ref.null)))
(declare-const $k@1395 $Perm)
(assert ($Perm.isValidVar $k@1395))
(assert ($Perm.isReadVar $k@1395 $Perm.Write))
(declare-const $t@1396 Int)
; [eval] diz.LBQThread1a__queue.BlockingQueue__capacity > 0
(push) ; 3
(assert (not (not (= $k@1395 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 3
(assert (not (= $k@1395 $Perm.No)))
(assert (> $t@1396 0))
(declare-const $k@1397 $Perm)
(assert ($Perm.isValidVar $k@1397))
(assert ($Perm.isReadVar $k@1397 $Perm.Write))
(declare-const $t@1398 $Ref)
; [eval] diz.LBQThread1a__queue.BlockingQueue__count != null
(push) ; 3
(assert (not (not (= $k@1397 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 3
(assert (not (= $k@1397 $Perm.No)))
(assert (not (= $t@1398 $Ref.null)))
(declare-const $t@1399 $Ref)
; [eval] diz.LBQThread1a__queue.BlockingQueue__first != null
(push) ; 3
(assert (not (= $t@1399 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 3
(push) ; 3
(assert (not (not (= $t@1399 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 3
(push) ; 3
; [then-branch 296] $t@1399 != Null
(assert (not (= $t@1399 $Ref.null)))
(declare-const $t@1400 $Snap)
(declare-const $k@1401 $Perm)
(assert ($Perm.isValidVar $k@1401))
(assert ($Perm.isReadVar $k@1401 $Perm.Write))
(declare-const $t@1402 $Ref)
(declare-const $k@1403 $Perm)
(assert ($Perm.isValidVar $k@1403))
(assert ($Perm.isReadVar $k@1403 $Perm.Write))
(declare-const $t@1404 $Ref)
(push) ; 4
(declare-const $t@1405 $Snap)
(pop) ; 4
(push) ; 4
; [exec]
; inhale false
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch 296] $t@1399 == Null
(assert (= $t@1399 $Ref.null))
(declare-const $k@1406 $Perm)
(assert ($Perm.isValidVar $k@1406))
(assert ($Perm.isReadVar $k@1406 $Perm.Write))
(declare-const $t@1407 $Ref)
(declare-const $k@1408 $Perm)
(assert ($Perm.isValidVar $k@1408))
(assert ($Perm.isReadVar $k@1408 $Perm.Write))
(declare-const $t@1409 $Ref)
(push) ; 4
(declare-const $t@1410 $Snap)
(pop) ; 4
(push) ; 4
; [exec]
; inhale false
(pop) ; 4
(pop) ; 3
(pop) ; 2
; ---------- LBQThread1a__joinOperator ----------
(declare-const diz@1411 $Ref)
(push) ; 2
; [eval] diz != null
(assert (not (= diz@1411 $Ref.null)))
(declare-const $t@1412 $Snap)
(push) ; 3
(declare-const $k@1413 $Perm)
(assert ($Perm.isValidVar $k@1413))
(assert ($Perm.isReadVar $k@1413 $Perm.Write))
(declare-const $t@1414 $Ref)
(push) ; 4
(assert (not (not (= $k@1413 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 4
(assert (not (= $k@1413 $Perm.No)))
(assert (not (= $t@1414 $Ref.null)))
(declare-const $k@1415 $Perm)
(assert ($Perm.isValidVar $k@1415))
(assert ($Perm.isReadVar $k@1415 $Perm.Write))
(declare-const $t@1416 Int)
; [eval] diz.LBQThread1a__queue.BlockingQueue__capacity > 0
(push) ; 4
(assert (not (not (= $k@1415 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 4
(assert (not (= $k@1415 $Perm.No)))
(assert (> $t@1416 0))
(declare-const $k@1417 $Perm)
(assert ($Perm.isValidVar $k@1417))
(assert ($Perm.isReadVar $k@1417 $Perm.Write))
(declare-const $t@1418 $Ref)
; [eval] diz.LBQThread1a__queue.BlockingQueue__count != null
(push) ; 4
(assert (not (not (= $k@1417 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 4
(assert (not (= $k@1417 $Perm.No)))
(assert (not (= $t@1418 $Ref.null)))
(declare-const $t@1419 $Ref)
; [eval] diz.LBQThread1a__queue.BlockingQueue__first != null
(push) ; 4
(assert (not (= $t@1419 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 4
(push) ; 4
(assert (not (not (= $t@1419 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 4
(push) ; 4
; [then-branch 297] $t@1419 != Null
(assert (not (= $t@1419 $Ref.null)))
(declare-const $t@1420 $Snap)
(declare-const $k@1421 $Perm)
(assert ($Perm.isValidVar $k@1421))
(assert ($Perm.isReadVar $k@1421 $Perm.Write))
(declare-const $t@1422 $Ref)
(declare-const $k@1423 $Perm)
(assert ($Perm.isValidVar $k@1423))
(assert ($Perm.isReadVar $k@1423 $Perm.Write))
(declare-const $t@1424 $Ref)
(pop) ; 4
(push) ; 4
; [else-branch 297] $t@1419 == Null
(assert (= $t@1419 $Ref.null))
(declare-const $k@1425 $Perm)
(assert ($Perm.isValidVar $k@1425))
(assert ($Perm.isReadVar $k@1425 $Perm.Write))
(declare-const $t@1426 $Ref)
(declare-const $k@1427 $Perm)
(assert ($Perm.isValidVar $k@1427))
(assert ($Perm.isReadVar $k@1427 $Perm.Write))
(declare-const $t@1428 $Ref)
(pop) ; 4
(pop) ; 3
(push) ; 3
; [exec]
; inhale false
(pop) ; 3
(pop) ; 2
; ---------- LBQThread1a__run ----------
(declare-const diz@1429 $Ref)
(declare-const b@1430 Bool)
(declare-const __flatten_55@1431 Bool)
(declare-const i@1432 $Ref)
(declare-const __flatten_56@1433 $Ref)
(push) ; 2
; [eval] diz != null
(assert (not (= diz@1429 $Ref.null)))
(declare-const $k@1434 $Perm)
(assert ($Perm.isValidVar $k@1434))
(assert ($Perm.isReadVar $k@1434 $Perm.Write))
(declare-const $t@1435 $Ref)
(push) ; 3
(assert (not (not (= $k@1434 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 3
(assert (not (= $k@1434 $Perm.No)))
(assert (not (= $t@1435 $Ref.null)))
(declare-const $k@1436 $Perm)
(assert ($Perm.isValidVar $k@1436))
(assert ($Perm.isReadVar $k@1436 $Perm.Write))
(declare-const $t@1437 Int)
; [eval] diz.LBQThread1a__queue.BlockingQueue__capacity > 0
(push) ; 3
(assert (not (not (= $k@1436 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 3
(assert (not (= $k@1436 $Perm.No)))
(assert (> $t@1437 0))
(declare-const $k@1438 $Perm)
(assert ($Perm.isValidVar $k@1438))
(assert ($Perm.isReadVar $k@1438 $Perm.Write))
(declare-const $t@1439 $Ref)
; [eval] diz.LBQThread1a__queue.BlockingQueue__count != null
(push) ; 3
(assert (not (not (= $k@1438 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 3
(assert (not (= $k@1438 $Perm.No)))
(assert (not (= $t@1439 $Ref.null)))
(declare-const $t@1440 $Ref)
; [eval] diz.LBQThread1a__queue.BlockingQueue__first != null
(push) ; 3
(assert (not (= $t@1440 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 3
(push) ; 3
(assert (not (not (= $t@1440 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 3
(push) ; 3
; [then-branch 298] $t@1440 != Null
(assert (not (= $t@1440 $Ref.null)))
(declare-const $t@1441 $Snap)
(declare-const $k@1442 $Perm)
(assert ($Perm.isValidVar $k@1442))
(assert ($Perm.isReadVar $k@1442 $Perm.Write))
(declare-const $t@1443 $Ref)
(declare-const $k@1444 $Perm)
(assert ($Perm.isValidVar $k@1444))
(assert ($Perm.isReadVar $k@1444 $Perm.Write))
(declare-const $t@1445 $Ref)
(push) ; 4
(declare-const $k@1446 $Perm)
(assert ($Perm.isValidVar $k@1446))
(assert ($Perm.isReadVar $k@1446 $Perm.Write))
(declare-const $t@1447 $Ref)
(push) ; 5
(assert (not (not (= $k@1446 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@1446 $Perm.No)))
(assert (not (= $t@1447 $Ref.null)))
(declare-const $k@1448 $Perm)
(assert ($Perm.isValidVar $k@1448))
(assert ($Perm.isReadVar $k@1448 $Perm.Write))
(declare-const $t@1449 Int)
; [eval] diz.LBQThread1a__queue.BlockingQueue__capacity > 0
(push) ; 5
(assert (not (not (= $k@1448 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@1448 $Perm.No)))
(assert (> $t@1449 0))
(declare-const $k@1450 $Perm)
(assert ($Perm.isValidVar $k@1450))
(assert ($Perm.isReadVar $k@1450 $Perm.Write))
(declare-const $t@1451 $Ref)
; [eval] diz.LBQThread1a__queue.BlockingQueue__count != null
(push) ; 5
(assert (not (not (= $k@1450 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@1450 $Perm.No)))
(assert (not (= $t@1451 $Ref.null)))
(declare-const $t@1452 $Ref)
; [eval] diz.LBQThread1a__queue.BlockingQueue__first != null
(push) ; 5
(assert (not (= $t@1452 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
(assert (not (not (= $t@1452 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
; [then-branch 299] $t@1452 != Null
(assert (not (= $t@1452 $Ref.null)))
(declare-const $t@1453 $Snap)
(declare-const $k@1454 $Perm)
(assert ($Perm.isValidVar $k@1454))
(assert ($Perm.isReadVar $k@1454 $Perm.Write))
(declare-const $t@1455 $Ref)
(declare-const $k@1456 $Perm)
(assert ($Perm.isValidVar $k@1456))
(assert ($Perm.isReadVar $k@1456 $Perm.Write))
(declare-const $t@1457 $Ref)
(pop) ; 5
(push) ; 5
; [else-branch 299] $t@1452 == Null
(assert (= $t@1452 $Ref.null))
(declare-const $k@1458 $Perm)
(assert ($Perm.isValidVar $k@1458))
(assert ($Perm.isReadVar $k@1458 $Perm.Write))
(declare-const $t@1459 $Ref)
(declare-const $k@1460 $Perm)
(assert ($Perm.isValidVar $k@1460))
(assert ($Perm.isReadVar $k@1460 $Perm.Write))
(declare-const $t@1461 $Ref)
(pop) ; 5
(pop) ; 4
(push) ; 4
; [exec]
; __flatten_55 := BlockingQueue__offer(diz.LBQThread1a__queue, 1)
; [eval] diz != null
(declare-const $k@1462 $Perm)
(assert ($Perm.isValidVar $k@1462))
(assert ($Perm.isReadVar $k@1462 $Perm.Write))
(push) ; 5
(assert (not (or (= $k@1462 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (< $k@1462 $k@1436))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@1463 $Perm)
(assert ($Perm.isValidVar $k@1463))
(assert ($Perm.isReadVar $k@1463 $Perm.Write))
(push) ; 5
(assert (not (or (= $k@1463 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (< $k@1463 $k@1438))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 5
(assert (not (= $t@1440 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
; [then-branch 300] $t@1440 != Null
(declare-const $k@1464 $Perm)
(assert ($Perm.isValidVar $k@1464))
(assert ($Perm.isReadVar $k@1464 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@1464 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(push) ; 6
(assert (not (not (= $k@1442 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= $k@1442 $Perm.No)))
(assert (< $k@1464 $k@1442))
(declare-const $k@1465 $Perm)
(assert ($Perm.isValidVar $k@1465))
(assert ($Perm.isReadVar $k@1465 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@1465 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(push) ; 6
(assert (not (not (= $k@1444 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= $k@1444 $Perm.No)))
(assert (< $k@1465 $k@1444))
(declare-const sys__result@1466 Bool)
(declare-const $t@1467 $Snap)
(declare-const $t@1468 $Snap)
(declare-const $t@1469 $Ref)
(assert (= $t@1467 ($Snap.combine $t@1468 ($SortWrappers.$RefTo$Snap $t@1469))))
(declare-const $t@1470 $Snap)
(declare-const $t@1471 $Ref)
(assert (= $t@1468 ($Snap.combine $t@1470 ($SortWrappers.$RefTo$Snap $t@1471))))
(declare-const $t@1472 $Snap)
(declare-const $t@1473 $Snap)
(assert (= $t@1470 ($Snap.combine $t@1472 $t@1473)))
(declare-const $t@1474 $Snap)
(declare-const $t@1475 $Ref)
(assert (= $t@1472 ($Snap.combine $t@1474 ($SortWrappers.$RefTo$Snap $t@1475))))
(declare-const $t@1476 $Snap)
(assert (= $t@1474 ($Snap.combine $t@1476 $Snap.unit)))
(declare-const $t@1477 Int)
(declare-const $t@1478 $Ref)
(assert (=
  $t@1476
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@1477)
    ($SortWrappers.$RefTo$Snap $t@1478))))
(declare-const $t@1479 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@1477)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@1479) $Snap.unit)))
(declare-const $k@1480 $Perm)
(assert ($Perm.isValidVar $k@1480))
(assert ($Perm.isReadVar $k@1480 $Perm.Write))
(assert (implies (< $Perm.No (- $k@1436 $k@1462)) (= $t@1479 $t@1437)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 6
(assert (not (not (= (+ (- $k@1436 $k@1462) $k@1480) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= (+ (- $k@1436 $k@1462) $k@1480) $Perm.No)))
(assert (> $t@1479 0))
(declare-const $k@1481 $Perm)
(assert ($Perm.isValidVar $k@1481))
(assert ($Perm.isReadVar $k@1481 $Perm.Write))
(assert (implies (< $Perm.No (- $k@1438 $k@1463)) (= $t@1478 $t@1439)))
; [eval] diz.BlockingQueue__count != null
(push) ; 6
(assert (not (not (= (+ (- $k@1438 $k@1463) $k@1481) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= (+ (- $k@1438 $k@1463) $k@1481) $Perm.No)))
(assert (not (= $t@1478 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 6
(assert (not (= $t@1475 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 6
(push) ; 6
(assert (not (not (= $t@1475 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 6
(push) ; 6
; [then-branch 301] $t@1475 != Null
(assert (not (= $t@1475 $Ref.null)))
(declare-const $k@1482 $Perm)
(assert ($Perm.isValidVar $k@1482))
(assert ($Perm.isReadVar $k@1482 $Perm.Write))
(assert (implies (< $Perm.No (- $k@1442 $k@1464)) (= $t@1471 $t@1443)))
(declare-const $k@1483 $Perm)
(assert ($Perm.isValidVar $k@1483))
(assert ($Perm.isReadVar $k@1483 $Perm.Write))
(assert (implies (< $Perm.No (- $k@1444 $k@1465)) (= $t@1469 $t@1445)))
; [exec]
; b := __flatten_55
; [exec]
; __flatten_56 := BlockingQueue__peek(diz.LBQThread1a__queue)
; [eval] diz != null
(declare-const $k@1484 $Perm)
(assert ($Perm.isValidVar $k@1484))
(assert ($Perm.isReadVar $k@1484 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@1484 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@1484 (+ (- $k@1436 $k@1462) $k@1480)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@1485 $Perm)
(assert ($Perm.isValidVar $k@1485))
(assert ($Perm.isReadVar $k@1485 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@1485 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@1485 (+ (- $k@1438 $k@1463) $k@1481)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 7
(assert (not (= $t@1475 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 7
(push) ; 7
; [then-branch 302] $t@1475 != Null
(declare-const $k@1486 $Perm)
(assert ($Perm.isValidVar $k@1486))
(assert ($Perm.isReadVar $k@1486 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@1486 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= (+ (- $k@1442 $k@1464) $k@1482) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- $k@1442 $k@1464) $k@1482) $Perm.No)))
(assert (< $k@1486 (+ (- $k@1442 $k@1464) $k@1482)))
(declare-const $k@1487 $Perm)
(assert ($Perm.isValidVar $k@1487))
(assert ($Perm.isReadVar $k@1487 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@1487 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= (+ (- $k@1444 $k@1465) $k@1483) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- $k@1444 $k@1465) $k@1483) $Perm.No)))
(assert (< $k@1487 (+ (- $k@1444 $k@1465) $k@1483)))
(declare-const sys__result@1488 $Ref)
(declare-const $t@1489 $Snap)
(declare-const $t@1490 $Snap)
(declare-const $t@1491 $Ref)
(assert (= $t@1489 ($Snap.combine $t@1490 ($SortWrappers.$RefTo$Snap $t@1491))))
(declare-const $t@1492 $Snap)
(declare-const $t@1493 $Ref)
(assert (= $t@1490 ($Snap.combine $t@1492 ($SortWrappers.$RefTo$Snap $t@1493))))
(declare-const $t@1494 $Snap)
(declare-const $t@1495 $Snap)
(assert (= $t@1492 ($Snap.combine $t@1494 $t@1495)))
(declare-const $t@1496 $Snap)
(declare-const $t@1497 $Ref)
(assert (= $t@1494 ($Snap.combine $t@1496 ($SortWrappers.$RefTo$Snap $t@1497))))
(declare-const $t@1498 $Snap)
(assert (= $t@1496 ($Snap.combine $t@1498 $Snap.unit)))
(declare-const $t@1499 Int)
(declare-const $t@1500 $Ref)
(assert (=
  $t@1498
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@1499)
    ($SortWrappers.$RefTo$Snap $t@1500))))
(declare-const $t@1501 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@1499)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@1501) $Snap.unit)))
(declare-const $k@1502 $Perm)
(assert ($Perm.isValidVar $k@1502))
(assert ($Perm.isReadVar $k@1502 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@1436 $k@1462) $k@1480) $k@1484))
  (= $t@1501 $t@1479)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 8
(assert (not (not (= (+ (- (+ (- $k@1436 $k@1462) $k@1480) $k@1484) $k@1502) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- (+ (- $k@1436 $k@1462) $k@1480) $k@1484) $k@1502) $Perm.No)))
(assert (> $t@1501 0))
(declare-const $k@1503 $Perm)
(assert ($Perm.isValidVar $k@1503))
(assert ($Perm.isReadVar $k@1503 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@1438 $k@1463) $k@1481) $k@1485))
  (= $t@1500 $t@1478)))
; [eval] diz.BlockingQueue__count != null
(push) ; 8
(assert (not (not (= (+ (- (+ (- $k@1438 $k@1463) $k@1481) $k@1485) $k@1503) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- (+ (- $k@1438 $k@1463) $k@1481) $k@1485) $k@1503) $Perm.No)))
(assert (not (= $t@1500 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 8
(assert (not (= $t@1497 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= $t@1497 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
(push) ; 8
; [then-branch 303] $t@1497 != Null
(assert (not (= $t@1497 $Ref.null)))
(declare-const $k@1504 $Perm)
(assert ($Perm.isValidVar $k@1504))
(assert ($Perm.isReadVar $k@1504 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@1442 $k@1464) $k@1482) $k@1486))
  (= $t@1493 $t@1471)))
(declare-const $k@1505 $Perm)
(assert ($Perm.isValidVar $k@1505))
(assert ($Perm.isReadVar $k@1505 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@1444 $k@1465) $k@1483) $k@1487))
  (= $t@1491 $t@1469)))
; [exec]
; i := __flatten_56
(declare-const $k@1506 $Perm)
(assert ($Perm.isValidVar $k@1506))
(assert ($Perm.isReadVar $k@1506 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@1506 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@1506 $k@1434))
(declare-const $k@1507 $Perm)
(assert ($Perm.isValidVar $k@1507))
(assert ($Perm.isReadVar $k@1507 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@1507 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@1507 (+ (- (+ (- $k@1436 $k@1462) $k@1480) $k@1484) $k@1502)))
; [eval] diz.LBQThread1a__queue.BlockingQueue__capacity > 0
(declare-const $k@1508 $Perm)
(assert ($Perm.isValidVar $k@1508))
(assert ($Perm.isReadVar $k@1508 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@1508 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@1508 (+ (- (+ (- $k@1438 $k@1463) $k@1481) $k@1485) $k@1503)))
; [eval] diz.LBQThread1a__queue.BlockingQueue__count != null
; [eval] diz.LBQThread1a__queue.BlockingQueue__first != null
(push) ; 9
(assert (not (= $t@1497 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
(push) ; 9
; [then-branch 304] $t@1497 != Null
(declare-const $k@1509 $Perm)
(assert ($Perm.isValidVar $k@1509))
(assert ($Perm.isReadVar $k@1509 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@1509 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= (+ (- (+ (- $k@1442 $k@1464) $k@1482) $k@1486) $k@1504) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not (= (+ (- (+ (- $k@1442 $k@1464) $k@1482) $k@1486) $k@1504) $Perm.No)))
(assert (< $k@1509 (+ (- (+ (- $k@1442 $k@1464) $k@1482) $k@1486) $k@1504)))
(declare-const $k@1510 $Perm)
(assert ($Perm.isValidVar $k@1510))
(assert ($Perm.isReadVar $k@1510 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@1510 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= (+ (- (+ (- $k@1444 $k@1465) $k@1483) $k@1487) $k@1505) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not (= (+ (- (+ (- $k@1444 $k@1465) $k@1483) $k@1487) $k@1505) $Perm.No)))
(assert (< $k@1510 (+ (- (+ (- $k@1444 $k@1465) $k@1483) $k@1487) $k@1505)))
(pop) ; 9
; [dead else-branch 304] $t@1497 == Null
(pop) ; 8
(push) ; 8
; [else-branch 303] $t@1497 == Null
(assert (= $t@1497 $Ref.null))
(declare-const $k@1511 $Perm)
(assert ($Perm.isValidVar $k@1511))
(assert ($Perm.isReadVar $k@1511 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@1442 $k@1464) $k@1482) $k@1486))
  (= $t@1493 $t@1471)))
(declare-const $k@1512 $Perm)
(assert ($Perm.isValidVar $k@1512))
(assert ($Perm.isReadVar $k@1512 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@1444 $k@1465) $k@1483) $k@1487))
  (= $t@1491 $t@1469)))
; [exec]
; i := __flatten_56
(declare-const $k@1513 $Perm)
(assert ($Perm.isValidVar $k@1513))
(assert ($Perm.isReadVar $k@1513 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@1513 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@1513 $k@1434))
(declare-const $k@1514 $Perm)
(assert ($Perm.isValidVar $k@1514))
(assert ($Perm.isReadVar $k@1514 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@1514 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@1514 (+ (- (+ (- $k@1436 $k@1462) $k@1480) $k@1484) $k@1502)))
; [eval] diz.LBQThread1a__queue.BlockingQueue__capacity > 0
(declare-const $k@1515 $Perm)
(assert ($Perm.isValidVar $k@1515))
(assert ($Perm.isReadVar $k@1515 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@1515 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@1515 (+ (- (+ (- $k@1438 $k@1463) $k@1481) $k@1485) $k@1503)))
; [eval] diz.LBQThread1a__queue.BlockingQueue__count != null
; [eval] diz.LBQThread1a__queue.BlockingQueue__first != null
(push) ; 9
(assert (not (not (= $t@1497 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
; [dead then-branch 305] $t@1497 != Null
(push) ; 9
; [else-branch 305] $t@1497 == Null
(declare-const $k@1516 $Perm)
(assert ($Perm.isValidVar $k@1516))
(assert ($Perm.isReadVar $k@1516 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@1516 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= (+ (- (+ (- $k@1442 $k@1464) $k@1482) $k@1486) $k@1511) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not (= (+ (- (+ (- $k@1442 $k@1464) $k@1482) $k@1486) $k@1511) $Perm.No)))
(assert (< $k@1516 (+ (- (+ (- $k@1442 $k@1464) $k@1482) $k@1486) $k@1511)))
(declare-const $k@1517 $Perm)
(assert ($Perm.isValidVar $k@1517))
(assert ($Perm.isReadVar $k@1517 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@1517 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= (+ (- (+ (- $k@1444 $k@1465) $k@1483) $k@1487) $k@1512) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not (= (+ (- (+ (- $k@1444 $k@1465) $k@1483) $k@1487) $k@1512) $Perm.No)))
(assert (< $k@1517 (+ (- (+ (- $k@1444 $k@1465) $k@1483) $k@1487) $k@1512)))
(pop) ; 9
(pop) ; 8
(pop) ; 7
; [dead else-branch 302] $t@1475 == Null
(pop) ; 6
(push) ; 6
; [else-branch 301] $t@1475 == Null
(assert (= $t@1475 $Ref.null))
(declare-const $k@1518 $Perm)
(assert ($Perm.isValidVar $k@1518))
(assert ($Perm.isReadVar $k@1518 $Perm.Write))
(assert (implies (< $Perm.No (- $k@1442 $k@1464)) (= $t@1471 $t@1443)))
(declare-const $k@1519 $Perm)
(assert ($Perm.isValidVar $k@1519))
(assert ($Perm.isReadVar $k@1519 $Perm.Write))
(assert (implies (< $Perm.No (- $k@1444 $k@1465)) (= $t@1469 $t@1445)))
; [exec]
; b := __flatten_55
; [exec]
; __flatten_56 := BlockingQueue__peek(diz.LBQThread1a__queue)
; [eval] diz != null
(declare-const $k@1520 $Perm)
(assert ($Perm.isValidVar $k@1520))
(assert ($Perm.isReadVar $k@1520 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@1520 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@1520 (+ (- $k@1436 $k@1462) $k@1480)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@1521 $Perm)
(assert ($Perm.isValidVar $k@1521))
(assert ($Perm.isReadVar $k@1521 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@1521 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@1521 (+ (- $k@1438 $k@1463) $k@1481)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 7
(assert (not (not (= $t@1475 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 7
; [dead then-branch 306] $t@1475 != Null
(push) ; 7
; [else-branch 306] $t@1475 == Null
(declare-const $k@1522 $Perm)
(assert ($Perm.isValidVar $k@1522))
(assert ($Perm.isReadVar $k@1522 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@1522 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= (+ (- $k@1442 $k@1464) $k@1518) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- $k@1442 $k@1464) $k@1518) $Perm.No)))
(assert (< $k@1522 (+ (- $k@1442 $k@1464) $k@1518)))
(declare-const $k@1523 $Perm)
(assert ($Perm.isValidVar $k@1523))
(assert ($Perm.isReadVar $k@1523 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@1523 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= (+ (- $k@1444 $k@1465) $k@1519) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- $k@1444 $k@1465) $k@1519) $Perm.No)))
(assert (< $k@1523 (+ (- $k@1444 $k@1465) $k@1519)))
(declare-const sys__result@1524 $Ref)
(declare-const $t@1525 $Snap)
(declare-const $t@1526 $Snap)
(declare-const $t@1527 $Ref)
(assert (= $t@1525 ($Snap.combine $t@1526 ($SortWrappers.$RefTo$Snap $t@1527))))
(declare-const $t@1528 $Snap)
(declare-const $t@1529 $Ref)
(assert (= $t@1526 ($Snap.combine $t@1528 ($SortWrappers.$RefTo$Snap $t@1529))))
(declare-const $t@1530 $Snap)
(declare-const $t@1531 $Snap)
(assert (= $t@1528 ($Snap.combine $t@1530 $t@1531)))
(declare-const $t@1532 $Snap)
(declare-const $t@1533 $Ref)
(assert (= $t@1530 ($Snap.combine $t@1532 ($SortWrappers.$RefTo$Snap $t@1533))))
(declare-const $t@1534 $Snap)
(assert (= $t@1532 ($Snap.combine $t@1534 $Snap.unit)))
(declare-const $t@1535 Int)
(declare-const $t@1536 $Ref)
(assert (=
  $t@1534
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@1535)
    ($SortWrappers.$RefTo$Snap $t@1536))))
(declare-const $t@1537 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@1535)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@1537) $Snap.unit)))
(declare-const $k@1538 $Perm)
(assert ($Perm.isValidVar $k@1538))
(assert ($Perm.isReadVar $k@1538 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@1436 $k@1462) $k@1480) $k@1520))
  (= $t@1537 $t@1479)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 8
(assert (not (not (= (+ (- (+ (- $k@1436 $k@1462) $k@1480) $k@1520) $k@1538) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- (+ (- $k@1436 $k@1462) $k@1480) $k@1520) $k@1538) $Perm.No)))
(assert (> $t@1537 0))
(declare-const $k@1539 $Perm)
(assert ($Perm.isValidVar $k@1539))
(assert ($Perm.isReadVar $k@1539 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@1438 $k@1463) $k@1481) $k@1521))
  (= $t@1536 $t@1478)))
; [eval] diz.BlockingQueue__count != null
(push) ; 8
(assert (not (not (= (+ (- (+ (- $k@1438 $k@1463) $k@1481) $k@1521) $k@1539) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- (+ (- $k@1438 $k@1463) $k@1481) $k@1521) $k@1539) $Perm.No)))
(assert (not (= $t@1536 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 8
(assert (not (= $t@1533 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= $t@1533 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
(push) ; 8
; [then-branch 307] $t@1533 != Null
(assert (not (= $t@1533 $Ref.null)))
(declare-const $k@1540 $Perm)
(assert ($Perm.isValidVar $k@1540))
(assert ($Perm.isReadVar $k@1540 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@1442 $k@1464) $k@1518) $k@1522))
  (= $t@1529 $t@1471)))
(declare-const $k@1541 $Perm)
(assert ($Perm.isValidVar $k@1541))
(assert ($Perm.isReadVar $k@1541 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@1444 $k@1465) $k@1519) $k@1523))
  (= $t@1527 $t@1469)))
; [exec]
; i := __flatten_56
(declare-const $k@1542 $Perm)
(assert ($Perm.isValidVar $k@1542))
(assert ($Perm.isReadVar $k@1542 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@1542 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@1542 $k@1434))
(declare-const $k@1543 $Perm)
(assert ($Perm.isValidVar $k@1543))
(assert ($Perm.isReadVar $k@1543 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@1543 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@1543 (+ (- (+ (- $k@1436 $k@1462) $k@1480) $k@1520) $k@1538)))
; [eval] diz.LBQThread1a__queue.BlockingQueue__capacity > 0
(declare-const $k@1544 $Perm)
(assert ($Perm.isValidVar $k@1544))
(assert ($Perm.isReadVar $k@1544 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@1544 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@1544 (+ (- (+ (- $k@1438 $k@1463) $k@1481) $k@1521) $k@1539)))
; [eval] diz.LBQThread1a__queue.BlockingQueue__count != null
; [eval] diz.LBQThread1a__queue.BlockingQueue__first != null
(push) ; 9
(assert (not (= $t@1533 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
(push) ; 9
; [then-branch 308] $t@1533 != Null
(declare-const $k@1545 $Perm)
(assert ($Perm.isValidVar $k@1545))
(assert ($Perm.isReadVar $k@1545 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@1545 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= (+ (- (+ (- $k@1442 $k@1464) $k@1518) $k@1522) $k@1540) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not (= (+ (- (+ (- $k@1442 $k@1464) $k@1518) $k@1522) $k@1540) $Perm.No)))
(assert (< $k@1545 (+ (- (+ (- $k@1442 $k@1464) $k@1518) $k@1522) $k@1540)))
(declare-const $k@1546 $Perm)
(assert ($Perm.isValidVar $k@1546))
(assert ($Perm.isReadVar $k@1546 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@1546 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= (+ (- (+ (- $k@1444 $k@1465) $k@1519) $k@1523) $k@1541) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not (= (+ (- (+ (- $k@1444 $k@1465) $k@1519) $k@1523) $k@1541) $Perm.No)))
(assert (< $k@1546 (+ (- (+ (- $k@1444 $k@1465) $k@1519) $k@1523) $k@1541)))
(pop) ; 9
; [dead else-branch 308] $t@1533 == Null
(pop) ; 8
(push) ; 8
; [else-branch 307] $t@1533 == Null
(assert (= $t@1533 $Ref.null))
(declare-const $k@1547 $Perm)
(assert ($Perm.isValidVar $k@1547))
(assert ($Perm.isReadVar $k@1547 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@1442 $k@1464) $k@1518) $k@1522))
  (= $t@1529 $t@1471)))
(declare-const $k@1548 $Perm)
(assert ($Perm.isValidVar $k@1548))
(assert ($Perm.isReadVar $k@1548 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@1444 $k@1465) $k@1519) $k@1523))
  (= $t@1527 $t@1469)))
; [exec]
; i := __flatten_56
(declare-const $k@1549 $Perm)
(assert ($Perm.isValidVar $k@1549))
(assert ($Perm.isReadVar $k@1549 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@1549 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@1549 $k@1434))
(declare-const $k@1550 $Perm)
(assert ($Perm.isValidVar $k@1550))
(assert ($Perm.isReadVar $k@1550 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@1550 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@1550 (+ (- (+ (- $k@1436 $k@1462) $k@1480) $k@1520) $k@1538)))
; [eval] diz.LBQThread1a__queue.BlockingQueue__capacity > 0
(declare-const $k@1551 $Perm)
(assert ($Perm.isValidVar $k@1551))
(assert ($Perm.isReadVar $k@1551 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@1551 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@1551 (+ (- (+ (- $k@1438 $k@1463) $k@1481) $k@1521) $k@1539)))
; [eval] diz.LBQThread1a__queue.BlockingQueue__count != null
; [eval] diz.LBQThread1a__queue.BlockingQueue__first != null
(push) ; 9
(assert (not (not (= $t@1533 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
; [dead then-branch 309] $t@1533 != Null
(push) ; 9
; [else-branch 309] $t@1533 == Null
(declare-const $k@1552 $Perm)
(assert ($Perm.isValidVar $k@1552))
(assert ($Perm.isReadVar $k@1552 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@1552 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= (+ (- (+ (- $k@1442 $k@1464) $k@1518) $k@1522) $k@1547) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not (= (+ (- (+ (- $k@1442 $k@1464) $k@1518) $k@1522) $k@1547) $Perm.No)))
(assert (< $k@1552 (+ (- (+ (- $k@1442 $k@1464) $k@1518) $k@1522) $k@1547)))
(declare-const $k@1553 $Perm)
(assert ($Perm.isValidVar $k@1553))
(assert ($Perm.isReadVar $k@1553 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@1553 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= (+ (- (+ (- $k@1444 $k@1465) $k@1519) $k@1523) $k@1548) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not (= (+ (- (+ (- $k@1444 $k@1465) $k@1519) $k@1523) $k@1548) $Perm.No)))
(assert (< $k@1553 (+ (- (+ (- $k@1444 $k@1465) $k@1519) $k@1523) $k@1548)))
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
; [dead else-branch 300] $t@1440 == Null
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch 298] $t@1440 == Null
(assert (= $t@1440 $Ref.null))
(declare-const $k@1554 $Perm)
(assert ($Perm.isValidVar $k@1554))
(assert ($Perm.isReadVar $k@1554 $Perm.Write))
(declare-const $t@1555 $Ref)
(declare-const $k@1556 $Perm)
(assert ($Perm.isValidVar $k@1556))
(assert ($Perm.isReadVar $k@1556 $Perm.Write))
(declare-const $t@1557 $Ref)
(push) ; 4
(declare-const $k@1558 $Perm)
(assert ($Perm.isValidVar $k@1558))
(assert ($Perm.isReadVar $k@1558 $Perm.Write))
(declare-const $t@1559 $Ref)
(push) ; 5
(assert (not (not (= $k@1558 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@1558 $Perm.No)))
(assert (not (= $t@1559 $Ref.null)))
(declare-const $k@1560 $Perm)
(assert ($Perm.isValidVar $k@1560))
(assert ($Perm.isReadVar $k@1560 $Perm.Write))
(declare-const $t@1561 Int)
; [eval] diz.LBQThread1a__queue.BlockingQueue__capacity > 0
(push) ; 5
(assert (not (not (= $k@1560 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@1560 $Perm.No)))
(assert (> $t@1561 0))
(declare-const $k@1562 $Perm)
(assert ($Perm.isValidVar $k@1562))
(assert ($Perm.isReadVar $k@1562 $Perm.Write))
(declare-const $t@1563 $Ref)
; [eval] diz.LBQThread1a__queue.BlockingQueue__count != null
(push) ; 5
(assert (not (not (= $k@1562 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@1562 $Perm.No)))
(assert (not (= $t@1563 $Ref.null)))
(declare-const $t@1564 $Ref)
; [eval] diz.LBQThread1a__queue.BlockingQueue__first != null
(push) ; 5
(assert (not (= $t@1564 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
(assert (not (not (= $t@1564 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
; [then-branch 310] $t@1564 != Null
(assert (not (= $t@1564 $Ref.null)))
(declare-const $t@1565 $Snap)
(declare-const $k@1566 $Perm)
(assert ($Perm.isValidVar $k@1566))
(assert ($Perm.isReadVar $k@1566 $Perm.Write))
(declare-const $t@1567 $Ref)
(declare-const $k@1568 $Perm)
(assert ($Perm.isValidVar $k@1568))
(assert ($Perm.isReadVar $k@1568 $Perm.Write))
(declare-const $t@1569 $Ref)
(pop) ; 5
(push) ; 5
; [else-branch 310] $t@1564 == Null
(assert (= $t@1564 $Ref.null))
(declare-const $k@1570 $Perm)
(assert ($Perm.isValidVar $k@1570))
(assert ($Perm.isReadVar $k@1570 $Perm.Write))
(declare-const $t@1571 $Ref)
(declare-const $k@1572 $Perm)
(assert ($Perm.isValidVar $k@1572))
(assert ($Perm.isReadVar $k@1572 $Perm.Write))
(declare-const $t@1573 $Ref)
(pop) ; 5
(pop) ; 4
(push) ; 4
; [exec]
; __flatten_55 := BlockingQueue__offer(diz.LBQThread1a__queue, 1)
; [eval] diz != null
(declare-const $k@1574 $Perm)
(assert ($Perm.isValidVar $k@1574))
(assert ($Perm.isReadVar $k@1574 $Perm.Write))
(push) ; 5
(assert (not (or (= $k@1574 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (< $k@1574 $k@1436))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@1575 $Perm)
(assert ($Perm.isValidVar $k@1575))
(assert ($Perm.isReadVar $k@1575 $Perm.Write))
(push) ; 5
(assert (not (or (= $k@1575 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (< $k@1575 $k@1438))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 5
(assert (not (not (= $t@1440 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
; [dead then-branch 311] $t@1440 != Null
(push) ; 5
; [else-branch 311] $t@1440 == Null
(declare-const $k@1576 $Perm)
(assert ($Perm.isValidVar $k@1576))
(assert ($Perm.isReadVar $k@1576 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@1576 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(push) ; 6
(assert (not (not (= $k@1554 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= $k@1554 $Perm.No)))
(assert (< $k@1576 $k@1554))
(declare-const $k@1577 $Perm)
(assert ($Perm.isValidVar $k@1577))
(assert ($Perm.isReadVar $k@1577 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@1577 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(push) ; 6
(assert (not (not (= $k@1556 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= $k@1556 $Perm.No)))
(assert (< $k@1577 $k@1556))
(declare-const sys__result@1578 Bool)
(declare-const $t@1579 $Snap)
(declare-const $t@1580 $Snap)
(declare-const $t@1581 $Ref)
(assert (= $t@1579 ($Snap.combine $t@1580 ($SortWrappers.$RefTo$Snap $t@1581))))
(declare-const $t@1582 $Snap)
(declare-const $t@1583 $Ref)
(assert (= $t@1580 ($Snap.combine $t@1582 ($SortWrappers.$RefTo$Snap $t@1583))))
(declare-const $t@1584 $Snap)
(declare-const $t@1585 $Snap)
(assert (= $t@1582 ($Snap.combine $t@1584 $t@1585)))
(declare-const $t@1586 $Snap)
(declare-const $t@1587 $Ref)
(assert (= $t@1584 ($Snap.combine $t@1586 ($SortWrappers.$RefTo$Snap $t@1587))))
(declare-const $t@1588 $Snap)
(assert (= $t@1586 ($Snap.combine $t@1588 $Snap.unit)))
(declare-const $t@1589 Int)
(declare-const $t@1590 $Ref)
(assert (=
  $t@1588
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@1589)
    ($SortWrappers.$RefTo$Snap $t@1590))))
(declare-const $t@1591 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@1589)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@1591) $Snap.unit)))
(declare-const $k@1592 $Perm)
(assert ($Perm.isValidVar $k@1592))
(assert ($Perm.isReadVar $k@1592 $Perm.Write))
(assert (implies (< $Perm.No (- $k@1436 $k@1574)) (= $t@1591 $t@1437)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 6
(assert (not (not (= (+ (- $k@1436 $k@1574) $k@1592) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= (+ (- $k@1436 $k@1574) $k@1592) $Perm.No)))
(assert (> $t@1591 0))
(declare-const $k@1593 $Perm)
(assert ($Perm.isValidVar $k@1593))
(assert ($Perm.isReadVar $k@1593 $Perm.Write))
(assert (implies (< $Perm.No (- $k@1438 $k@1575)) (= $t@1590 $t@1439)))
; [eval] diz.BlockingQueue__count != null
(push) ; 6
(assert (not (not (= (+ (- $k@1438 $k@1575) $k@1593) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= (+ (- $k@1438 $k@1575) $k@1593) $Perm.No)))
(assert (not (= $t@1590 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 6
(assert (not (= $t@1587 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 6
(push) ; 6
(assert (not (not (= $t@1587 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 6
(push) ; 6
; [then-branch 312] $t@1587 != Null
(assert (not (= $t@1587 $Ref.null)))
(declare-const $k@1594 $Perm)
(assert ($Perm.isValidVar $k@1594))
(assert ($Perm.isReadVar $k@1594 $Perm.Write))
(assert (implies (< $Perm.No (- $k@1554 $k@1576)) (= $t@1583 $t@1555)))
(declare-const $k@1595 $Perm)
(assert ($Perm.isValidVar $k@1595))
(assert ($Perm.isReadVar $k@1595 $Perm.Write))
(assert (implies (< $Perm.No (- $k@1556 $k@1577)) (= $t@1581 $t@1557)))
; [exec]
; b := __flatten_55
; [exec]
; __flatten_56 := BlockingQueue__peek(diz.LBQThread1a__queue)
; [eval] diz != null
(declare-const $k@1596 $Perm)
(assert ($Perm.isValidVar $k@1596))
(assert ($Perm.isReadVar $k@1596 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@1596 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@1596 (+ (- $k@1436 $k@1574) $k@1592)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@1597 $Perm)
(assert ($Perm.isValidVar $k@1597))
(assert ($Perm.isReadVar $k@1597 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@1597 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@1597 (+ (- $k@1438 $k@1575) $k@1593)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 7
(assert (not (= $t@1587 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 7
(push) ; 7
; [then-branch 313] $t@1587 != Null
(declare-const $k@1598 $Perm)
(assert ($Perm.isValidVar $k@1598))
(assert ($Perm.isReadVar $k@1598 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@1598 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= (+ (- $k@1554 $k@1576) $k@1594) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- $k@1554 $k@1576) $k@1594) $Perm.No)))
(assert (< $k@1598 (+ (- $k@1554 $k@1576) $k@1594)))
(declare-const $k@1599 $Perm)
(assert ($Perm.isValidVar $k@1599))
(assert ($Perm.isReadVar $k@1599 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@1599 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= (+ (- $k@1556 $k@1577) $k@1595) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- $k@1556 $k@1577) $k@1595) $Perm.No)))
(assert (< $k@1599 (+ (- $k@1556 $k@1577) $k@1595)))
(declare-const sys__result@1600 $Ref)
(declare-const $t@1601 $Snap)
(declare-const $t@1602 $Snap)
(declare-const $t@1603 $Ref)
(assert (= $t@1601 ($Snap.combine $t@1602 ($SortWrappers.$RefTo$Snap $t@1603))))
(declare-const $t@1604 $Snap)
(declare-const $t@1605 $Ref)
(assert (= $t@1602 ($Snap.combine $t@1604 ($SortWrappers.$RefTo$Snap $t@1605))))
(declare-const $t@1606 $Snap)
(declare-const $t@1607 $Snap)
(assert (= $t@1604 ($Snap.combine $t@1606 $t@1607)))
(declare-const $t@1608 $Snap)
(declare-const $t@1609 $Ref)
(assert (= $t@1606 ($Snap.combine $t@1608 ($SortWrappers.$RefTo$Snap $t@1609))))
(declare-const $t@1610 $Snap)
(assert (= $t@1608 ($Snap.combine $t@1610 $Snap.unit)))
(declare-const $t@1611 Int)
(declare-const $t@1612 $Ref)
(assert (=
  $t@1610
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@1611)
    ($SortWrappers.$RefTo$Snap $t@1612))))
(declare-const $t@1613 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@1611)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@1613) $Snap.unit)))
(declare-const $k@1614 $Perm)
(assert ($Perm.isValidVar $k@1614))
(assert ($Perm.isReadVar $k@1614 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@1436 $k@1574) $k@1592) $k@1596))
  (= $t@1613 $t@1591)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 8
(assert (not (not (= (+ (- (+ (- $k@1436 $k@1574) $k@1592) $k@1596) $k@1614) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- (+ (- $k@1436 $k@1574) $k@1592) $k@1596) $k@1614) $Perm.No)))
(assert (> $t@1613 0))
(declare-const $k@1615 $Perm)
(assert ($Perm.isValidVar $k@1615))
(assert ($Perm.isReadVar $k@1615 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@1438 $k@1575) $k@1593) $k@1597))
  (= $t@1612 $t@1590)))
; [eval] diz.BlockingQueue__count != null
(push) ; 8
(assert (not (not (= (+ (- (+ (- $k@1438 $k@1575) $k@1593) $k@1597) $k@1615) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- (+ (- $k@1438 $k@1575) $k@1593) $k@1597) $k@1615) $Perm.No)))
(assert (not (= $t@1612 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 8
(assert (not (= $t@1609 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= $t@1609 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
(push) ; 8
; [then-branch 314] $t@1609 != Null
(assert (not (= $t@1609 $Ref.null)))
(declare-const $k@1616 $Perm)
(assert ($Perm.isValidVar $k@1616))
(assert ($Perm.isReadVar $k@1616 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@1554 $k@1576) $k@1594) $k@1598))
  (= $t@1605 $t@1583)))
(declare-const $k@1617 $Perm)
(assert ($Perm.isValidVar $k@1617))
(assert ($Perm.isReadVar $k@1617 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@1556 $k@1577) $k@1595) $k@1599))
  (= $t@1603 $t@1581)))
; [exec]
; i := __flatten_56
(declare-const $k@1618 $Perm)
(assert ($Perm.isValidVar $k@1618))
(assert ($Perm.isReadVar $k@1618 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@1618 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@1618 $k@1434))
(declare-const $k@1619 $Perm)
(assert ($Perm.isValidVar $k@1619))
(assert ($Perm.isReadVar $k@1619 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@1619 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@1619 (+ (- (+ (- $k@1436 $k@1574) $k@1592) $k@1596) $k@1614)))
; [eval] diz.LBQThread1a__queue.BlockingQueue__capacity > 0
(declare-const $k@1620 $Perm)
(assert ($Perm.isValidVar $k@1620))
(assert ($Perm.isReadVar $k@1620 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@1620 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@1620 (+ (- (+ (- $k@1438 $k@1575) $k@1593) $k@1597) $k@1615)))
; [eval] diz.LBQThread1a__queue.BlockingQueue__count != null
; [eval] diz.LBQThread1a__queue.BlockingQueue__first != null
(push) ; 9
(assert (not (= $t@1609 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
(push) ; 9
; [then-branch 315] $t@1609 != Null
(declare-const $k@1621 $Perm)
(assert ($Perm.isValidVar $k@1621))
(assert ($Perm.isReadVar $k@1621 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@1621 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= (+ (- (+ (- $k@1554 $k@1576) $k@1594) $k@1598) $k@1616) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not (= (+ (- (+ (- $k@1554 $k@1576) $k@1594) $k@1598) $k@1616) $Perm.No)))
(assert (< $k@1621 (+ (- (+ (- $k@1554 $k@1576) $k@1594) $k@1598) $k@1616)))
(declare-const $k@1622 $Perm)
(assert ($Perm.isValidVar $k@1622))
(assert ($Perm.isReadVar $k@1622 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@1622 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= (+ (- (+ (- $k@1556 $k@1577) $k@1595) $k@1599) $k@1617) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not (= (+ (- (+ (- $k@1556 $k@1577) $k@1595) $k@1599) $k@1617) $Perm.No)))
(assert (< $k@1622 (+ (- (+ (- $k@1556 $k@1577) $k@1595) $k@1599) $k@1617)))
(pop) ; 9
; [dead else-branch 315] $t@1609 == Null
(pop) ; 8
(push) ; 8
; [else-branch 314] $t@1609 == Null
(assert (= $t@1609 $Ref.null))
(declare-const $k@1623 $Perm)
(assert ($Perm.isValidVar $k@1623))
(assert ($Perm.isReadVar $k@1623 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@1554 $k@1576) $k@1594) $k@1598))
  (= $t@1605 $t@1583)))
(declare-const $k@1624 $Perm)
(assert ($Perm.isValidVar $k@1624))
(assert ($Perm.isReadVar $k@1624 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@1556 $k@1577) $k@1595) $k@1599))
  (= $t@1603 $t@1581)))
; [exec]
; i := __flatten_56
(declare-const $k@1625 $Perm)
(assert ($Perm.isValidVar $k@1625))
(assert ($Perm.isReadVar $k@1625 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@1625 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@1625 $k@1434))
(declare-const $k@1626 $Perm)
(assert ($Perm.isValidVar $k@1626))
(assert ($Perm.isReadVar $k@1626 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@1626 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@1626 (+ (- (+ (- $k@1436 $k@1574) $k@1592) $k@1596) $k@1614)))
; [eval] diz.LBQThread1a__queue.BlockingQueue__capacity > 0
(declare-const $k@1627 $Perm)
(assert ($Perm.isValidVar $k@1627))
(assert ($Perm.isReadVar $k@1627 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@1627 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@1627 (+ (- (+ (- $k@1438 $k@1575) $k@1593) $k@1597) $k@1615)))
; [eval] diz.LBQThread1a__queue.BlockingQueue__count != null
; [eval] diz.LBQThread1a__queue.BlockingQueue__first != null
(push) ; 9
(assert (not (not (= $t@1609 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
; [dead then-branch 316] $t@1609 != Null
(push) ; 9
; [else-branch 316] $t@1609 == Null
(declare-const $k@1628 $Perm)
(assert ($Perm.isValidVar $k@1628))
(assert ($Perm.isReadVar $k@1628 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@1628 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= (+ (- (+ (- $k@1554 $k@1576) $k@1594) $k@1598) $k@1623) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not (= (+ (- (+ (- $k@1554 $k@1576) $k@1594) $k@1598) $k@1623) $Perm.No)))
(assert (< $k@1628 (+ (- (+ (- $k@1554 $k@1576) $k@1594) $k@1598) $k@1623)))
(declare-const $k@1629 $Perm)
(assert ($Perm.isValidVar $k@1629))
(assert ($Perm.isReadVar $k@1629 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@1629 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= (+ (- (+ (- $k@1556 $k@1577) $k@1595) $k@1599) $k@1624) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not (= (+ (- (+ (- $k@1556 $k@1577) $k@1595) $k@1599) $k@1624) $Perm.No)))
(assert (< $k@1629 (+ (- (+ (- $k@1556 $k@1577) $k@1595) $k@1599) $k@1624)))
(pop) ; 9
(pop) ; 8
(pop) ; 7
; [dead else-branch 313] $t@1587 == Null
(pop) ; 6
(push) ; 6
; [else-branch 312] $t@1587 == Null
(assert (= $t@1587 $Ref.null))
(declare-const $k@1630 $Perm)
(assert ($Perm.isValidVar $k@1630))
(assert ($Perm.isReadVar $k@1630 $Perm.Write))
(assert (implies (< $Perm.No (- $k@1554 $k@1576)) (= $t@1583 $t@1555)))
(declare-const $k@1631 $Perm)
(assert ($Perm.isValidVar $k@1631))
(assert ($Perm.isReadVar $k@1631 $Perm.Write))
(assert (implies (< $Perm.No (- $k@1556 $k@1577)) (= $t@1581 $t@1557)))
; [exec]
; b := __flatten_55
; [exec]
; __flatten_56 := BlockingQueue__peek(diz.LBQThread1a__queue)
; [eval] diz != null
(declare-const $k@1632 $Perm)
(assert ($Perm.isValidVar $k@1632))
(assert ($Perm.isReadVar $k@1632 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@1632 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@1632 (+ (- $k@1436 $k@1574) $k@1592)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@1633 $Perm)
(assert ($Perm.isValidVar $k@1633))
(assert ($Perm.isReadVar $k@1633 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@1633 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@1633 (+ (- $k@1438 $k@1575) $k@1593)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 7
(assert (not (not (= $t@1587 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 7
; [dead then-branch 317] $t@1587 != Null
(push) ; 7
; [else-branch 317] $t@1587 == Null
(declare-const $k@1634 $Perm)
(assert ($Perm.isValidVar $k@1634))
(assert ($Perm.isReadVar $k@1634 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@1634 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= (+ (- $k@1554 $k@1576) $k@1630) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- $k@1554 $k@1576) $k@1630) $Perm.No)))
(assert (< $k@1634 (+ (- $k@1554 $k@1576) $k@1630)))
(declare-const $k@1635 $Perm)
(assert ($Perm.isValidVar $k@1635))
(assert ($Perm.isReadVar $k@1635 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@1635 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= (+ (- $k@1556 $k@1577) $k@1631) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- $k@1556 $k@1577) $k@1631) $Perm.No)))
(assert (< $k@1635 (+ (- $k@1556 $k@1577) $k@1631)))
(declare-const sys__result@1636 $Ref)
(declare-const $t@1637 $Snap)
(declare-const $t@1638 $Snap)
(declare-const $t@1639 $Ref)
(assert (= $t@1637 ($Snap.combine $t@1638 ($SortWrappers.$RefTo$Snap $t@1639))))
(declare-const $t@1640 $Snap)
(declare-const $t@1641 $Ref)
(assert (= $t@1638 ($Snap.combine $t@1640 ($SortWrappers.$RefTo$Snap $t@1641))))
(declare-const $t@1642 $Snap)
(declare-const $t@1643 $Snap)
(assert (= $t@1640 ($Snap.combine $t@1642 $t@1643)))
(declare-const $t@1644 $Snap)
(declare-const $t@1645 $Ref)
(assert (= $t@1642 ($Snap.combine $t@1644 ($SortWrappers.$RefTo$Snap $t@1645))))
(declare-const $t@1646 $Snap)
(assert (= $t@1644 ($Snap.combine $t@1646 $Snap.unit)))
(declare-const $t@1647 Int)
(declare-const $t@1648 $Ref)
(assert (=
  $t@1646
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@1647)
    ($SortWrappers.$RefTo$Snap $t@1648))))
(declare-const $t@1649 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@1647)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@1649) $Snap.unit)))
(declare-const $k@1650 $Perm)
(assert ($Perm.isValidVar $k@1650))
(assert ($Perm.isReadVar $k@1650 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@1436 $k@1574) $k@1592) $k@1632))
  (= $t@1649 $t@1591)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 8
(assert (not (not (= (+ (- (+ (- $k@1436 $k@1574) $k@1592) $k@1632) $k@1650) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- (+ (- $k@1436 $k@1574) $k@1592) $k@1632) $k@1650) $Perm.No)))
(assert (> $t@1649 0))
(declare-const $k@1651 $Perm)
(assert ($Perm.isValidVar $k@1651))
(assert ($Perm.isReadVar $k@1651 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@1438 $k@1575) $k@1593) $k@1633))
  (= $t@1648 $t@1590)))
; [eval] diz.BlockingQueue__count != null
(push) ; 8
(assert (not (not (= (+ (- (+ (- $k@1438 $k@1575) $k@1593) $k@1633) $k@1651) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- (+ (- $k@1438 $k@1575) $k@1593) $k@1633) $k@1651) $Perm.No)))
(assert (not (= $t@1648 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 8
(assert (not (= $t@1645 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= $t@1645 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
(push) ; 8
; [then-branch 318] $t@1645 != Null
(assert (not (= $t@1645 $Ref.null)))
(declare-const $k@1652 $Perm)
(assert ($Perm.isValidVar $k@1652))
(assert ($Perm.isReadVar $k@1652 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@1554 $k@1576) $k@1630) $k@1634))
  (= $t@1641 $t@1583)))
(declare-const $k@1653 $Perm)
(assert ($Perm.isValidVar $k@1653))
(assert ($Perm.isReadVar $k@1653 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@1556 $k@1577) $k@1631) $k@1635))
  (= $t@1639 $t@1581)))
; [exec]
; i := __flatten_56
(declare-const $k@1654 $Perm)
(assert ($Perm.isValidVar $k@1654))
(assert ($Perm.isReadVar $k@1654 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@1654 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@1654 $k@1434))
(declare-const $k@1655 $Perm)
(assert ($Perm.isValidVar $k@1655))
(assert ($Perm.isReadVar $k@1655 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@1655 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@1655 (+ (- (+ (- $k@1436 $k@1574) $k@1592) $k@1632) $k@1650)))
; [eval] diz.LBQThread1a__queue.BlockingQueue__capacity > 0
(declare-const $k@1656 $Perm)
(assert ($Perm.isValidVar $k@1656))
(assert ($Perm.isReadVar $k@1656 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@1656 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@1656 (+ (- (+ (- $k@1438 $k@1575) $k@1593) $k@1633) $k@1651)))
; [eval] diz.LBQThread1a__queue.BlockingQueue__count != null
; [eval] diz.LBQThread1a__queue.BlockingQueue__first != null
(push) ; 9
(assert (not (= $t@1645 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
(push) ; 9
; [then-branch 319] $t@1645 != Null
(declare-const $k@1657 $Perm)
(assert ($Perm.isValidVar $k@1657))
(assert ($Perm.isReadVar $k@1657 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@1657 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= (+ (- (+ (- $k@1554 $k@1576) $k@1630) $k@1634) $k@1652) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not (= (+ (- (+ (- $k@1554 $k@1576) $k@1630) $k@1634) $k@1652) $Perm.No)))
(assert (< $k@1657 (+ (- (+ (- $k@1554 $k@1576) $k@1630) $k@1634) $k@1652)))
(declare-const $k@1658 $Perm)
(assert ($Perm.isValidVar $k@1658))
(assert ($Perm.isReadVar $k@1658 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@1658 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= (+ (- (+ (- $k@1556 $k@1577) $k@1631) $k@1635) $k@1653) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not (= (+ (- (+ (- $k@1556 $k@1577) $k@1631) $k@1635) $k@1653) $Perm.No)))
(assert (< $k@1658 (+ (- (+ (- $k@1556 $k@1577) $k@1631) $k@1635) $k@1653)))
(pop) ; 9
; [dead else-branch 319] $t@1645 == Null
(pop) ; 8
(push) ; 8
; [else-branch 318] $t@1645 == Null
(assert (= $t@1645 $Ref.null))
(declare-const $k@1659 $Perm)
(assert ($Perm.isValidVar $k@1659))
(assert ($Perm.isReadVar $k@1659 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@1554 $k@1576) $k@1630) $k@1634))
  (= $t@1641 $t@1583)))
(declare-const $k@1660 $Perm)
(assert ($Perm.isValidVar $k@1660))
(assert ($Perm.isReadVar $k@1660 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@1556 $k@1577) $k@1631) $k@1635))
  (= $t@1639 $t@1581)))
; [exec]
; i := __flatten_56
(declare-const $k@1661 $Perm)
(assert ($Perm.isValidVar $k@1661))
(assert ($Perm.isReadVar $k@1661 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@1661 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@1661 $k@1434))
(declare-const $k@1662 $Perm)
(assert ($Perm.isValidVar $k@1662))
(assert ($Perm.isReadVar $k@1662 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@1662 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@1662 (+ (- (+ (- $k@1436 $k@1574) $k@1592) $k@1632) $k@1650)))
; [eval] diz.LBQThread1a__queue.BlockingQueue__capacity > 0
(declare-const $k@1663 $Perm)
(assert ($Perm.isValidVar $k@1663))
(assert ($Perm.isReadVar $k@1663 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@1663 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@1663 (+ (- (+ (- $k@1438 $k@1575) $k@1593) $k@1633) $k@1651)))
; [eval] diz.LBQThread1a__queue.BlockingQueue__count != null
; [eval] diz.LBQThread1a__queue.BlockingQueue__first != null
(push) ; 9
(assert (not (not (= $t@1645 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
; [dead then-branch 320] $t@1645 != Null
(push) ; 9
; [else-branch 320] $t@1645 == Null
(declare-const $k@1664 $Perm)
(assert ($Perm.isValidVar $k@1664))
(assert ($Perm.isReadVar $k@1664 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@1664 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= (+ (- (+ (- $k@1554 $k@1576) $k@1630) $k@1634) $k@1659) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not (= (+ (- (+ (- $k@1554 $k@1576) $k@1630) $k@1634) $k@1659) $Perm.No)))
(assert (< $k@1664 (+ (- (+ (- $k@1554 $k@1576) $k@1630) $k@1634) $k@1659)))
(declare-const $k@1665 $Perm)
(assert ($Perm.isValidVar $k@1665))
(assert ($Perm.isReadVar $k@1665 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@1665 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= (+ (- (+ (- $k@1556 $k@1577) $k@1631) $k@1635) $k@1660) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not (= (+ (- (+ (- $k@1556 $k@1577) $k@1631) $k@1635) $k@1660) $Perm.No)))
(assert (< $k@1665 (+ (- (+ (- $k@1556 $k@1577) $k@1631) $k@1635) $k@1660)))
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
; ---------- LBQThread1b__LBQThread1b ----------
(declare-const queue@1666 $Ref)
(declare-const sys__result@1667 $Ref)
(declare-const diz@1668 $Ref)
(declare-const __flatten_57@1669 $Ref)
(declare-const __flatten_139@1670 $Ref)
(push) ; 2
(assert (not (= queue@1666 $Ref.null)))
(declare-const $k@1671 $Perm)
(assert ($Perm.isValidVar $k@1671))
(assert ($Perm.isReadVar $k@1671 $Perm.Write))
(declare-const $t@1672 Int)
; [eval] queue.BlockingQueue__capacity > 0
(push) ; 3
(assert (not (not (= $k@1671 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 3
(assert (not (= $k@1671 $Perm.No)))
(assert (> $t@1672 0))
(declare-const $k@1673 $Perm)
(assert ($Perm.isValidVar $k@1673))
(assert ($Perm.isReadVar $k@1673 $Perm.Write))
(declare-const $t@1674 $Ref)
; [eval] queue.BlockingQueue__count != null
(push) ; 3
(assert (not (not (= $k@1673 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 3
(assert (not (= $k@1673 $Perm.No)))
(assert (not (= $t@1674 $Ref.null)))
(declare-const $t@1675 $Ref)
; [eval] queue.BlockingQueue__first != null
(push) ; 3
(assert (not (= $t@1675 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 3
(push) ; 3
(assert (not (not (= $t@1675 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 3
(push) ; 3
; [then-branch 321] $t@1675 != Null
(assert (not (= $t@1675 $Ref.null)))
(declare-const $t@1676 $Snap)
(declare-const $k@1677 $Perm)
(assert ($Perm.isValidVar $k@1677))
(assert ($Perm.isReadVar $k@1677 $Perm.Write))
(declare-const $t@1678 $Ref)
(declare-const $k@1679 $Perm)
(assert ($Perm.isValidVar $k@1679))
(assert ($Perm.isReadVar $k@1679 $Perm.Write))
(declare-const $t@1680 $Ref)
(push) ; 4
; [eval] sys__result != null
(assert (not (= sys__result@1667 $Ref.null)))
(declare-const $k@1681 $Perm)
(assert ($Perm.isValidVar $k@1681))
(assert ($Perm.isReadVar $k@1681 $Perm.Write))
(declare-const $t@1682 $Ref)
(push) ; 5
(assert (not (not (= $k@1681 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@1681 $Perm.No)))
(assert (not (= $t@1682 $Ref.null)))
(declare-const $k@1683 $Perm)
(assert ($Perm.isValidVar $k@1683))
(assert ($Perm.isReadVar $k@1683 $Perm.Write))
(declare-const $t@1684 Int)
; [eval] sys__result.LBQThread1b__queue.BlockingQueue__capacity > 0
(push) ; 5
(assert (not (not (= $k@1683 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@1683 $Perm.No)))
(assert (> $t@1684 0))
(declare-const $k@1685 $Perm)
(assert ($Perm.isValidVar $k@1685))
(assert ($Perm.isReadVar $k@1685 $Perm.Write))
(declare-const $t@1686 $Ref)
; [eval] sys__result.LBQThread1b__queue.BlockingQueue__count != null
(push) ; 5
(assert (not (not (= $k@1685 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@1685 $Perm.No)))
(assert (not (= $t@1686 $Ref.null)))
(declare-const $t@1687 $Ref)
; [eval] sys__result.LBQThread1b__queue.BlockingQueue__first != null
(push) ; 5
(assert (not (= $t@1687 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
(assert (not (not (= $t@1687 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
; [then-branch 322] $t@1687 != Null
(assert (not (= $t@1687 $Ref.null)))
(declare-const $t@1688 $Snap)
(declare-const $k@1689 $Perm)
(assert ($Perm.isValidVar $k@1689))
(assert ($Perm.isReadVar $k@1689 $Perm.Write))
(declare-const $t@1690 $Ref)
(declare-const $k@1691 $Perm)
(assert ($Perm.isValidVar $k@1691))
(assert ($Perm.isReadVar $k@1691 $Perm.Write))
(declare-const $t@1692 $Ref)
(pop) ; 5
(push) ; 5
; [else-branch 322] $t@1687 == Null
(assert (= $t@1687 $Ref.null))
(declare-const $k@1693 $Perm)
(assert ($Perm.isValidVar $k@1693))
(assert ($Perm.isReadVar $k@1693 $Perm.Write))
(declare-const $t@1694 $Ref)
(declare-const $k@1695 $Perm)
(assert ($Perm.isValidVar $k@1695))
(assert ($Perm.isReadVar $k@1695 $Perm.Write))
(declare-const $t@1696 $Ref)
(pop) ; 5
(pop) ; 4
(push) ; 4
; [exec]
; diz := new(LBQThread1b__queue)
(declare-const diz@1697 $Ref)
(assert (not (= diz@1697 $Ref.null)))
(declare-const LBQThread1b__queue@1698 $Ref)
(assert (and
  (not (= queue@1666 diz@1697))
  (not (= sys__result@1667 diz@1697))
  (not (= __flatten_57@1669 diz@1697))
  (not (= __flatten_139@1670 diz@1697))
  (not (= $t@1675 diz@1697))
  (not (= LBQThread1b__queue@1698 diz@1697))
  (not (= $t@1674 diz@1697))
  (not (= $t@1678 diz@1697))
  (not (= $t@1680 diz@1697))))
; [exec]
; __flatten_57 := queue
; [exec]
; __flatten_139 := __flatten_57
; [exec]
; diz.LBQThread1b__queue := __flatten_139
; [exec]
; sys__result := diz
; [exec]
; assert (sys__result != null) && acc(sys__result.LBQThread1b__queue, wildcard) && acc(sys__result.LBQThread1b__queue.BlockingQueue__capacity, wildcard) && (sys__result.LBQThread1b__queue.BlockingQueue__capacity > 0) && acc(sys__result.LBQThread1b__queue.BlockingQueue__count, wildcard) && (sys__result.LBQThread1b__queue.BlockingQueue__count != null) && acc(sys__result.LBQThread1b__queue.BlockingQueue__first, write) && ((sys__result.LBQThread1b__queue.BlockingQueue__first != null) ==> acc(Node__state(sys__result.LBQThread1b__queue.BlockingQueue__first), write)) && acc(sys__result.LBQThread1b__queue.BlockingQueue__putLock, wildcard) && acc(sys__result.LBQThread1b__queue.BlockingQueue__takeLock, wildcard)
; [eval] sys__result != null
(declare-const $k@1699 $Perm)
(assert ($Perm.isValidVar $k@1699))
(assert ($Perm.isReadVar $k@1699 $Perm.Write))
(push) ; 5
(assert (not (or (= $k@1699 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (< $k@1699 $Perm.Write))
(declare-const $k@1700 $Perm)
(assert ($Perm.isValidVar $k@1700))
(assert ($Perm.isReadVar $k@1700 $Perm.Write))
(push) ; 5
(assert (not (or (= $k@1700 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (< $k@1700 $k@1671))
; [eval] sys__result.LBQThread1b__queue.BlockingQueue__capacity > 0
(declare-const $k@1701 $Perm)
(assert ($Perm.isValidVar $k@1701))
(assert ($Perm.isReadVar $k@1701 $Perm.Write))
(push) ; 5
(assert (not (or (= $k@1701 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (< $k@1701 $k@1673))
; [eval] sys__result.LBQThread1b__queue.BlockingQueue__count != null
; [eval] sys__result.LBQThread1b__queue.BlockingQueue__first != null
(push) ; 5
(assert (not (= $t@1675 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
; [then-branch 323] $t@1675 != Null
(declare-const $k@1702 $Perm)
(assert ($Perm.isValidVar $k@1702))
(assert ($Perm.isReadVar $k@1702 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@1702 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(push) ; 6
(assert (not (not (= $k@1677 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= $k@1677 $Perm.No)))
(assert (< $k@1702 $k@1677))
(declare-const $k@1703 $Perm)
(assert ($Perm.isValidVar $k@1703))
(assert ($Perm.isReadVar $k@1703 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@1703 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(push) ; 6
(assert (not (not (= $k@1679 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= $k@1679 $Perm.No)))
(assert (< $k@1703 $k@1679))
; [exec]
; inhale false
(pop) ; 5
; [dead else-branch 323] $t@1675 == Null
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch 321] $t@1675 == Null
(assert (= $t@1675 $Ref.null))
(declare-const $k@1704 $Perm)
(assert ($Perm.isValidVar $k@1704))
(assert ($Perm.isReadVar $k@1704 $Perm.Write))
(declare-const $t@1705 $Ref)
(declare-const $k@1706 $Perm)
(assert ($Perm.isValidVar $k@1706))
(assert ($Perm.isReadVar $k@1706 $Perm.Write))
(declare-const $t@1707 $Ref)
(push) ; 4
; [eval] sys__result != null
(assert (not (= sys__result@1667 $Ref.null)))
(declare-const $k@1708 $Perm)
(assert ($Perm.isValidVar $k@1708))
(assert ($Perm.isReadVar $k@1708 $Perm.Write))
(declare-const $t@1709 $Ref)
(push) ; 5
(assert (not (not (= $k@1708 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@1708 $Perm.No)))
(assert (not (= $t@1709 $Ref.null)))
(declare-const $k@1710 $Perm)
(assert ($Perm.isValidVar $k@1710))
(assert ($Perm.isReadVar $k@1710 $Perm.Write))
(declare-const $t@1711 Int)
; [eval] sys__result.LBQThread1b__queue.BlockingQueue__capacity > 0
(push) ; 5
(assert (not (not (= $k@1710 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@1710 $Perm.No)))
(assert (> $t@1711 0))
(declare-const $k@1712 $Perm)
(assert ($Perm.isValidVar $k@1712))
(assert ($Perm.isReadVar $k@1712 $Perm.Write))
(declare-const $t@1713 $Ref)
; [eval] sys__result.LBQThread1b__queue.BlockingQueue__count != null
(push) ; 5
(assert (not (not (= $k@1712 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@1712 $Perm.No)))
(assert (not (= $t@1713 $Ref.null)))
(declare-const $t@1714 $Ref)
; [eval] sys__result.LBQThread1b__queue.BlockingQueue__first != null
(push) ; 5
(assert (not (= $t@1714 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
(assert (not (not (= $t@1714 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
; [then-branch 324] $t@1714 != Null
(assert (not (= $t@1714 $Ref.null)))
(declare-const $t@1715 $Snap)
(declare-const $k@1716 $Perm)
(assert ($Perm.isValidVar $k@1716))
(assert ($Perm.isReadVar $k@1716 $Perm.Write))
(declare-const $t@1717 $Ref)
(declare-const $k@1718 $Perm)
(assert ($Perm.isValidVar $k@1718))
(assert ($Perm.isReadVar $k@1718 $Perm.Write))
(declare-const $t@1719 $Ref)
(pop) ; 5
(push) ; 5
; [else-branch 324] $t@1714 == Null
(assert (= $t@1714 $Ref.null))
(declare-const $k@1720 $Perm)
(assert ($Perm.isValidVar $k@1720))
(assert ($Perm.isReadVar $k@1720 $Perm.Write))
(declare-const $t@1721 $Ref)
(declare-const $k@1722 $Perm)
(assert ($Perm.isValidVar $k@1722))
(assert ($Perm.isReadVar $k@1722 $Perm.Write))
(declare-const $t@1723 $Ref)
(pop) ; 5
(pop) ; 4
(push) ; 4
; [exec]
; diz := new(LBQThread1b__queue)
(declare-const diz@1724 $Ref)
(assert (not (= diz@1724 $Ref.null)))
(declare-const LBQThread1b__queue@1725 $Ref)
(assert (and
  (not (= queue@1666 diz@1724))
  (not (= sys__result@1667 diz@1724))
  (not (= __flatten_57@1669 diz@1724))
  (not (= __flatten_139@1670 diz@1724))
  (not (= LBQThread1b__queue@1725 diz@1724))
  (not (= $t@1674 diz@1724))
  (not (= $t@1675 diz@1724))
  (not (= $t@1705 diz@1724))
  (not (= $t@1707 diz@1724))))
; [exec]
; __flatten_57 := queue
; [exec]
; __flatten_139 := __flatten_57
; [exec]
; diz.LBQThread1b__queue := __flatten_139
; [exec]
; sys__result := diz
; [exec]
; assert (sys__result != null) && acc(sys__result.LBQThread1b__queue, wildcard) && acc(sys__result.LBQThread1b__queue.BlockingQueue__capacity, wildcard) && (sys__result.LBQThread1b__queue.BlockingQueue__capacity > 0) && acc(sys__result.LBQThread1b__queue.BlockingQueue__count, wildcard) && (sys__result.LBQThread1b__queue.BlockingQueue__count != null) && acc(sys__result.LBQThread1b__queue.BlockingQueue__first, write) && ((sys__result.LBQThread1b__queue.BlockingQueue__first != null) ==> acc(Node__state(sys__result.LBQThread1b__queue.BlockingQueue__first), write)) && acc(sys__result.LBQThread1b__queue.BlockingQueue__putLock, wildcard) && acc(sys__result.LBQThread1b__queue.BlockingQueue__takeLock, wildcard)
; [eval] sys__result != null
(declare-const $k@1726 $Perm)
(assert ($Perm.isValidVar $k@1726))
(assert ($Perm.isReadVar $k@1726 $Perm.Write))
(push) ; 5
(assert (not (or (= $k@1726 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (< $k@1726 $Perm.Write))
(declare-const $k@1727 $Perm)
(assert ($Perm.isValidVar $k@1727))
(assert ($Perm.isReadVar $k@1727 $Perm.Write))
(push) ; 5
(assert (not (or (= $k@1727 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (< $k@1727 $k@1671))
; [eval] sys__result.LBQThread1b__queue.BlockingQueue__capacity > 0
(declare-const $k@1728 $Perm)
(assert ($Perm.isValidVar $k@1728))
(assert ($Perm.isReadVar $k@1728 $Perm.Write))
(push) ; 5
(assert (not (or (= $k@1728 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (< $k@1728 $k@1673))
; [eval] sys__result.LBQThread1b__queue.BlockingQueue__count != null
; [eval] sys__result.LBQThread1b__queue.BlockingQueue__first != null
(push) ; 5
(assert (not (not (= $t@1675 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
; [dead then-branch 325] $t@1675 != Null
(push) ; 5
; [else-branch 325] $t@1675 == Null
(declare-const $k@1729 $Perm)
(assert ($Perm.isValidVar $k@1729))
(assert ($Perm.isReadVar $k@1729 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@1729 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(push) ; 6
(assert (not (not (= $k@1704 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= $k@1704 $Perm.No)))
(assert (< $k@1729 $k@1704))
(declare-const $k@1730 $Perm)
(assert ($Perm.isValidVar $k@1730))
(assert ($Perm.isReadVar $k@1730 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@1730 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(push) ; 6
(assert (not (not (= $k@1706 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= $k@1706 $Perm.No)))
(assert (< $k@1730 $k@1706))
; [exec]
; inhale false
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
; ---------- LBQThread1b__forkOperator ----------
(declare-const diz@1731 $Ref)
(push) ; 2
; [eval] diz != null
(assert (not (= diz@1731 $Ref.null)))
(declare-const $k@1732 $Perm)
(assert ($Perm.isValidVar $k@1732))
(assert ($Perm.isReadVar $k@1732 $Perm.Write))
(declare-const $t@1733 $Ref)
(push) ; 3
(assert (not (not (= $k@1732 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 3
(assert (not (= $k@1732 $Perm.No)))
(assert (not (= $t@1733 $Ref.null)))
(declare-const $k@1734 $Perm)
(assert ($Perm.isValidVar $k@1734))
(assert ($Perm.isReadVar $k@1734 $Perm.Write))
(declare-const $t@1735 Int)
; [eval] diz.LBQThread1b__queue.BlockingQueue__capacity > 0
(push) ; 3
(assert (not (not (= $k@1734 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 3
(assert (not (= $k@1734 $Perm.No)))
(assert (> $t@1735 0))
(declare-const $k@1736 $Perm)
(assert ($Perm.isValidVar $k@1736))
(assert ($Perm.isReadVar $k@1736 $Perm.Write))
(declare-const $t@1737 $Ref)
; [eval] diz.LBQThread1b__queue.BlockingQueue__count != null
(push) ; 3
(assert (not (not (= $k@1736 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 3
(assert (not (= $k@1736 $Perm.No)))
(assert (not (= $t@1737 $Ref.null)))
(declare-const $t@1738 $Ref)
; [eval] diz.LBQThread1b__queue.BlockingQueue__first != null
(push) ; 3
(assert (not (= $t@1738 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 3
(push) ; 3
(assert (not (not (= $t@1738 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 3
(push) ; 3
; [then-branch 326] $t@1738 != Null
(assert (not (= $t@1738 $Ref.null)))
(declare-const $t@1739 $Snap)
(declare-const $k@1740 $Perm)
(assert ($Perm.isValidVar $k@1740))
(assert ($Perm.isReadVar $k@1740 $Perm.Write))
(declare-const $t@1741 $Ref)
(declare-const $k@1742 $Perm)
(assert ($Perm.isValidVar $k@1742))
(assert ($Perm.isReadVar $k@1742 $Perm.Write))
(declare-const $t@1743 $Ref)
(push) ; 4
(declare-const $t@1744 $Snap)
(pop) ; 4
(push) ; 4
; [exec]
; inhale false
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch 326] $t@1738 == Null
(assert (= $t@1738 $Ref.null))
(declare-const $k@1745 $Perm)
(assert ($Perm.isValidVar $k@1745))
(assert ($Perm.isReadVar $k@1745 $Perm.Write))
(declare-const $t@1746 $Ref)
(declare-const $k@1747 $Perm)
(assert ($Perm.isValidVar $k@1747))
(assert ($Perm.isReadVar $k@1747 $Perm.Write))
(declare-const $t@1748 $Ref)
(push) ; 4
(declare-const $t@1749 $Snap)
(pop) ; 4
(push) ; 4
; [exec]
; inhale false
(pop) ; 4
(pop) ; 3
(pop) ; 2
; ---------- LBQThread1b__joinOperator ----------
(declare-const diz@1750 $Ref)
(push) ; 2
; [eval] diz != null
(assert (not (= diz@1750 $Ref.null)))
(declare-const $t@1751 $Snap)
(push) ; 3
(declare-const $k@1752 $Perm)
(assert ($Perm.isValidVar $k@1752))
(assert ($Perm.isReadVar $k@1752 $Perm.Write))
(declare-const $t@1753 $Ref)
(push) ; 4
(assert (not (not (= $k@1752 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 4
(assert (not (= $k@1752 $Perm.No)))
(assert (not (= $t@1753 $Ref.null)))
(declare-const $k@1754 $Perm)
(assert ($Perm.isValidVar $k@1754))
(assert ($Perm.isReadVar $k@1754 $Perm.Write))
(declare-const $t@1755 Int)
; [eval] diz.LBQThread1b__queue.BlockingQueue__capacity > 0
(push) ; 4
(assert (not (not (= $k@1754 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 4
(assert (not (= $k@1754 $Perm.No)))
(assert (> $t@1755 0))
(declare-const $k@1756 $Perm)
(assert ($Perm.isValidVar $k@1756))
(assert ($Perm.isReadVar $k@1756 $Perm.Write))
(declare-const $t@1757 $Ref)
; [eval] diz.LBQThread1b__queue.BlockingQueue__count != null
(push) ; 4
(assert (not (not (= $k@1756 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 4
(assert (not (= $k@1756 $Perm.No)))
(assert (not (= $t@1757 $Ref.null)))
(declare-const $t@1758 $Ref)
; [eval] diz.LBQThread1b__queue.BlockingQueue__first != null
(push) ; 4
(assert (not (= $t@1758 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 4
(push) ; 4
(assert (not (not (= $t@1758 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 4
(push) ; 4
; [then-branch 327] $t@1758 != Null
(assert (not (= $t@1758 $Ref.null)))
(declare-const $t@1759 $Snap)
(declare-const $k@1760 $Perm)
(assert ($Perm.isValidVar $k@1760))
(assert ($Perm.isReadVar $k@1760 $Perm.Write))
(declare-const $t@1761 $Ref)
(declare-const $k@1762 $Perm)
(assert ($Perm.isValidVar $k@1762))
(assert ($Perm.isReadVar $k@1762 $Perm.Write))
(declare-const $t@1763 $Ref)
(pop) ; 4
(push) ; 4
; [else-branch 327] $t@1758 == Null
(assert (= $t@1758 $Ref.null))
(declare-const $k@1764 $Perm)
(assert ($Perm.isValidVar $k@1764))
(assert ($Perm.isReadVar $k@1764 $Perm.Write))
(declare-const $t@1765 $Ref)
(declare-const $k@1766 $Perm)
(assert ($Perm.isValidVar $k@1766))
(assert ($Perm.isReadVar $k@1766 $Perm.Write))
(declare-const $t@1767 $Ref)
(pop) ; 4
(pop) ; 3
(push) ; 3
; [exec]
; inhale false
(pop) ; 3
(pop) ; 2
; ---------- LBQThread1b__run ----------
(declare-const diz@1768 $Ref)
(declare-const b@1769 Bool)
(declare-const __flatten_58@1770 Bool)
(declare-const i@1771 $Ref)
(declare-const __flatten_59@1772 $Ref)
(push) ; 2
; [eval] diz != null
(assert (not (= diz@1768 $Ref.null)))
(declare-const $k@1773 $Perm)
(assert ($Perm.isValidVar $k@1773))
(assert ($Perm.isReadVar $k@1773 $Perm.Write))
(declare-const $t@1774 $Ref)
(push) ; 3
(assert (not (not (= $k@1773 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 3
(assert (not (= $k@1773 $Perm.No)))
(assert (not (= $t@1774 $Ref.null)))
(declare-const $k@1775 $Perm)
(assert ($Perm.isValidVar $k@1775))
(assert ($Perm.isReadVar $k@1775 $Perm.Write))
(declare-const $t@1776 Int)
; [eval] diz.LBQThread1b__queue.BlockingQueue__capacity > 0
(push) ; 3
(assert (not (not (= $k@1775 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 3
(assert (not (= $k@1775 $Perm.No)))
(assert (> $t@1776 0))
(declare-const $k@1777 $Perm)
(assert ($Perm.isValidVar $k@1777))
(assert ($Perm.isReadVar $k@1777 $Perm.Write))
(declare-const $t@1778 $Ref)
; [eval] diz.LBQThread1b__queue.BlockingQueue__count != null
(push) ; 3
(assert (not (not (= $k@1777 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 3
(assert (not (= $k@1777 $Perm.No)))
(assert (not (= $t@1778 $Ref.null)))
(declare-const $t@1779 $Ref)
; [eval] diz.LBQThread1b__queue.BlockingQueue__first != null
(push) ; 3
(assert (not (= $t@1779 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 3
(push) ; 3
(assert (not (not (= $t@1779 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 3
(push) ; 3
; [then-branch 328] $t@1779 != Null
(assert (not (= $t@1779 $Ref.null)))
(declare-const $t@1780 $Snap)
(declare-const $k@1781 $Perm)
(assert ($Perm.isValidVar $k@1781))
(assert ($Perm.isReadVar $k@1781 $Perm.Write))
(declare-const $t@1782 $Ref)
(declare-const $k@1783 $Perm)
(assert ($Perm.isValidVar $k@1783))
(assert ($Perm.isReadVar $k@1783 $Perm.Write))
(declare-const $t@1784 $Ref)
(push) ; 4
(declare-const $k@1785 $Perm)
(assert ($Perm.isValidVar $k@1785))
(assert ($Perm.isReadVar $k@1785 $Perm.Write))
(declare-const $t@1786 $Ref)
(push) ; 5
(assert (not (not (= $k@1785 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@1785 $Perm.No)))
(assert (not (= $t@1786 $Ref.null)))
(declare-const $k@1787 $Perm)
(assert ($Perm.isValidVar $k@1787))
(assert ($Perm.isReadVar $k@1787 $Perm.Write))
(declare-const $t@1788 Int)
; [eval] diz.LBQThread1b__queue.BlockingQueue__capacity > 0
(push) ; 5
(assert (not (not (= $k@1787 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@1787 $Perm.No)))
(assert (> $t@1788 0))
(declare-const $k@1789 $Perm)
(assert ($Perm.isValidVar $k@1789))
(assert ($Perm.isReadVar $k@1789 $Perm.Write))
(declare-const $t@1790 $Ref)
; [eval] diz.LBQThread1b__queue.BlockingQueue__count != null
(push) ; 5
(assert (not (not (= $k@1789 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@1789 $Perm.No)))
(assert (not (= $t@1790 $Ref.null)))
(declare-const $t@1791 $Ref)
; [eval] diz.LBQThread1b__queue.BlockingQueue__first != null
(push) ; 5
(assert (not (= $t@1791 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
(assert (not (not (= $t@1791 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
; [then-branch 329] $t@1791 != Null
(assert (not (= $t@1791 $Ref.null)))
(declare-const $t@1792 $Snap)
(declare-const $k@1793 $Perm)
(assert ($Perm.isValidVar $k@1793))
(assert ($Perm.isReadVar $k@1793 $Perm.Write))
(declare-const $t@1794 $Ref)
(declare-const $k@1795 $Perm)
(assert ($Perm.isValidVar $k@1795))
(assert ($Perm.isReadVar $k@1795 $Perm.Write))
(declare-const $t@1796 $Ref)
(pop) ; 5
(push) ; 5
; [else-branch 329] $t@1791 == Null
(assert (= $t@1791 $Ref.null))
(declare-const $k@1797 $Perm)
(assert ($Perm.isValidVar $k@1797))
(assert ($Perm.isReadVar $k@1797 $Perm.Write))
(declare-const $t@1798 $Ref)
(declare-const $k@1799 $Perm)
(assert ($Perm.isValidVar $k@1799))
(assert ($Perm.isReadVar $k@1799 $Perm.Write))
(declare-const $t@1800 $Ref)
(pop) ; 5
(pop) ; 4
(push) ; 4
; [exec]
; __flatten_58 := BlockingQueue__offer(diz.LBQThread1b__queue, 2)
; [eval] diz != null
(declare-const $k@1801 $Perm)
(assert ($Perm.isValidVar $k@1801))
(assert ($Perm.isReadVar $k@1801 $Perm.Write))
(push) ; 5
(assert (not (or (= $k@1801 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (< $k@1801 $k@1775))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@1802 $Perm)
(assert ($Perm.isValidVar $k@1802))
(assert ($Perm.isReadVar $k@1802 $Perm.Write))
(push) ; 5
(assert (not (or (= $k@1802 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (< $k@1802 $k@1777))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 5
(assert (not (= $t@1779 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
; [then-branch 330] $t@1779 != Null
(declare-const $k@1803 $Perm)
(assert ($Perm.isValidVar $k@1803))
(assert ($Perm.isReadVar $k@1803 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@1803 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(push) ; 6
(assert (not (not (= $k@1781 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= $k@1781 $Perm.No)))
(assert (< $k@1803 $k@1781))
(declare-const $k@1804 $Perm)
(assert ($Perm.isValidVar $k@1804))
(assert ($Perm.isReadVar $k@1804 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@1804 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(push) ; 6
(assert (not (not (= $k@1783 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= $k@1783 $Perm.No)))
(assert (< $k@1804 $k@1783))
(declare-const sys__result@1805 Bool)
(declare-const $t@1806 $Snap)
(declare-const $t@1807 $Snap)
(declare-const $t@1808 $Ref)
(assert (= $t@1806 ($Snap.combine $t@1807 ($SortWrappers.$RefTo$Snap $t@1808))))
(declare-const $t@1809 $Snap)
(declare-const $t@1810 $Ref)
(assert (= $t@1807 ($Snap.combine $t@1809 ($SortWrappers.$RefTo$Snap $t@1810))))
(declare-const $t@1811 $Snap)
(declare-const $t@1812 $Snap)
(assert (= $t@1809 ($Snap.combine $t@1811 $t@1812)))
(declare-const $t@1813 $Snap)
(declare-const $t@1814 $Ref)
(assert (= $t@1811 ($Snap.combine $t@1813 ($SortWrappers.$RefTo$Snap $t@1814))))
(declare-const $t@1815 $Snap)
(assert (= $t@1813 ($Snap.combine $t@1815 $Snap.unit)))
(declare-const $t@1816 Int)
(declare-const $t@1817 $Ref)
(assert (=
  $t@1815
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@1816)
    ($SortWrappers.$RefTo$Snap $t@1817))))
(declare-const $t@1818 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@1816)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@1818) $Snap.unit)))
(declare-const $k@1819 $Perm)
(assert ($Perm.isValidVar $k@1819))
(assert ($Perm.isReadVar $k@1819 $Perm.Write))
(assert (implies (< $Perm.No (- $k@1775 $k@1801)) (= $t@1818 $t@1776)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 6
(assert (not (not (= (+ (- $k@1775 $k@1801) $k@1819) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= (+ (- $k@1775 $k@1801) $k@1819) $Perm.No)))
(assert (> $t@1818 0))
(declare-const $k@1820 $Perm)
(assert ($Perm.isValidVar $k@1820))
(assert ($Perm.isReadVar $k@1820 $Perm.Write))
(assert (implies (< $Perm.No (- $k@1777 $k@1802)) (= $t@1817 $t@1778)))
; [eval] diz.BlockingQueue__count != null
(push) ; 6
(assert (not (not (= (+ (- $k@1777 $k@1802) $k@1820) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= (+ (- $k@1777 $k@1802) $k@1820) $Perm.No)))
(assert (not (= $t@1817 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 6
(assert (not (= $t@1814 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 6
(push) ; 6
(assert (not (not (= $t@1814 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 6
(push) ; 6
; [then-branch 331] $t@1814 != Null
(assert (not (= $t@1814 $Ref.null)))
(declare-const $k@1821 $Perm)
(assert ($Perm.isValidVar $k@1821))
(assert ($Perm.isReadVar $k@1821 $Perm.Write))
(assert (implies (< $Perm.No (- $k@1781 $k@1803)) (= $t@1810 $t@1782)))
(declare-const $k@1822 $Perm)
(assert ($Perm.isValidVar $k@1822))
(assert ($Perm.isReadVar $k@1822 $Perm.Write))
(assert (implies (< $Perm.No (- $k@1783 $k@1804)) (= $t@1808 $t@1784)))
; [exec]
; b := __flatten_58
; [exec]
; __flatten_59 := BlockingQueue__peek(diz.LBQThread1b__queue)
; [eval] diz != null
(declare-const $k@1823 $Perm)
(assert ($Perm.isValidVar $k@1823))
(assert ($Perm.isReadVar $k@1823 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@1823 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@1823 (+ (- $k@1775 $k@1801) $k@1819)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@1824 $Perm)
(assert ($Perm.isValidVar $k@1824))
(assert ($Perm.isReadVar $k@1824 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@1824 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@1824 (+ (- $k@1777 $k@1802) $k@1820)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 7
(assert (not (= $t@1814 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 7
(push) ; 7
; [then-branch 332] $t@1814 != Null
(declare-const $k@1825 $Perm)
(assert ($Perm.isValidVar $k@1825))
(assert ($Perm.isReadVar $k@1825 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@1825 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= (+ (- $k@1781 $k@1803) $k@1821) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- $k@1781 $k@1803) $k@1821) $Perm.No)))
(assert (< $k@1825 (+ (- $k@1781 $k@1803) $k@1821)))
(declare-const $k@1826 $Perm)
(assert ($Perm.isValidVar $k@1826))
(assert ($Perm.isReadVar $k@1826 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@1826 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= (+ (- $k@1783 $k@1804) $k@1822) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- $k@1783 $k@1804) $k@1822) $Perm.No)))
(assert (< $k@1826 (+ (- $k@1783 $k@1804) $k@1822)))
(declare-const sys__result@1827 $Ref)
(declare-const $t@1828 $Snap)
(declare-const $t@1829 $Snap)
(declare-const $t@1830 $Ref)
(assert (= $t@1828 ($Snap.combine $t@1829 ($SortWrappers.$RefTo$Snap $t@1830))))
(declare-const $t@1831 $Snap)
(declare-const $t@1832 $Ref)
(assert (= $t@1829 ($Snap.combine $t@1831 ($SortWrappers.$RefTo$Snap $t@1832))))
(declare-const $t@1833 $Snap)
(declare-const $t@1834 $Snap)
(assert (= $t@1831 ($Snap.combine $t@1833 $t@1834)))
(declare-const $t@1835 $Snap)
(declare-const $t@1836 $Ref)
(assert (= $t@1833 ($Snap.combine $t@1835 ($SortWrappers.$RefTo$Snap $t@1836))))
(declare-const $t@1837 $Snap)
(assert (= $t@1835 ($Snap.combine $t@1837 $Snap.unit)))
(declare-const $t@1838 Int)
(declare-const $t@1839 $Ref)
(assert (=
  $t@1837
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@1838)
    ($SortWrappers.$RefTo$Snap $t@1839))))
(declare-const $t@1840 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@1838)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@1840) $Snap.unit)))
(declare-const $k@1841 $Perm)
(assert ($Perm.isValidVar $k@1841))
(assert ($Perm.isReadVar $k@1841 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@1775 $k@1801) $k@1819) $k@1823))
  (= $t@1840 $t@1818)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 8
(assert (not (not (= (+ (- (+ (- $k@1775 $k@1801) $k@1819) $k@1823) $k@1841) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- (+ (- $k@1775 $k@1801) $k@1819) $k@1823) $k@1841) $Perm.No)))
(assert (> $t@1840 0))
(declare-const $k@1842 $Perm)
(assert ($Perm.isValidVar $k@1842))
(assert ($Perm.isReadVar $k@1842 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@1777 $k@1802) $k@1820) $k@1824))
  (= $t@1839 $t@1817)))
; [eval] diz.BlockingQueue__count != null
(push) ; 8
(assert (not (not (= (+ (- (+ (- $k@1777 $k@1802) $k@1820) $k@1824) $k@1842) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- (+ (- $k@1777 $k@1802) $k@1820) $k@1824) $k@1842) $Perm.No)))
(assert (not (= $t@1839 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 8
(assert (not (= $t@1836 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= $t@1836 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
(push) ; 8
; [then-branch 333] $t@1836 != Null
(assert (not (= $t@1836 $Ref.null)))
(declare-const $k@1843 $Perm)
(assert ($Perm.isValidVar $k@1843))
(assert ($Perm.isReadVar $k@1843 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@1781 $k@1803) $k@1821) $k@1825))
  (= $t@1832 $t@1810)))
(declare-const $k@1844 $Perm)
(assert ($Perm.isValidVar $k@1844))
(assert ($Perm.isReadVar $k@1844 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@1783 $k@1804) $k@1822) $k@1826))
  (= $t@1830 $t@1808)))
; [exec]
; i := __flatten_59
(declare-const $k@1845 $Perm)
(assert ($Perm.isValidVar $k@1845))
(assert ($Perm.isReadVar $k@1845 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@1845 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@1845 $k@1773))
(declare-const $k@1846 $Perm)
(assert ($Perm.isValidVar $k@1846))
(assert ($Perm.isReadVar $k@1846 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@1846 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@1846 (+ (- (+ (- $k@1775 $k@1801) $k@1819) $k@1823) $k@1841)))
; [eval] diz.LBQThread1b__queue.BlockingQueue__capacity > 0
(declare-const $k@1847 $Perm)
(assert ($Perm.isValidVar $k@1847))
(assert ($Perm.isReadVar $k@1847 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@1847 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@1847 (+ (- (+ (- $k@1777 $k@1802) $k@1820) $k@1824) $k@1842)))
; [eval] diz.LBQThread1b__queue.BlockingQueue__count != null
; [eval] diz.LBQThread1b__queue.BlockingQueue__first != null
(push) ; 9
(assert (not (= $t@1836 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
(push) ; 9
; [then-branch 334] $t@1836 != Null
(declare-const $k@1848 $Perm)
(assert ($Perm.isValidVar $k@1848))
(assert ($Perm.isReadVar $k@1848 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@1848 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= (+ (- (+ (- $k@1781 $k@1803) $k@1821) $k@1825) $k@1843) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not (= (+ (- (+ (- $k@1781 $k@1803) $k@1821) $k@1825) $k@1843) $Perm.No)))
(assert (< $k@1848 (+ (- (+ (- $k@1781 $k@1803) $k@1821) $k@1825) $k@1843)))
(declare-const $k@1849 $Perm)
(assert ($Perm.isValidVar $k@1849))
(assert ($Perm.isReadVar $k@1849 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@1849 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= (+ (- (+ (- $k@1783 $k@1804) $k@1822) $k@1826) $k@1844) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not (= (+ (- (+ (- $k@1783 $k@1804) $k@1822) $k@1826) $k@1844) $Perm.No)))
(assert (< $k@1849 (+ (- (+ (- $k@1783 $k@1804) $k@1822) $k@1826) $k@1844)))
(pop) ; 9
; [dead else-branch 334] $t@1836 == Null
(pop) ; 8
(push) ; 8
; [else-branch 333] $t@1836 == Null
(assert (= $t@1836 $Ref.null))
(declare-const $k@1850 $Perm)
(assert ($Perm.isValidVar $k@1850))
(assert ($Perm.isReadVar $k@1850 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@1781 $k@1803) $k@1821) $k@1825))
  (= $t@1832 $t@1810)))
(declare-const $k@1851 $Perm)
(assert ($Perm.isValidVar $k@1851))
(assert ($Perm.isReadVar $k@1851 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@1783 $k@1804) $k@1822) $k@1826))
  (= $t@1830 $t@1808)))
; [exec]
; i := __flatten_59
(declare-const $k@1852 $Perm)
(assert ($Perm.isValidVar $k@1852))
(assert ($Perm.isReadVar $k@1852 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@1852 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@1852 $k@1773))
(declare-const $k@1853 $Perm)
(assert ($Perm.isValidVar $k@1853))
(assert ($Perm.isReadVar $k@1853 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@1853 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@1853 (+ (- (+ (- $k@1775 $k@1801) $k@1819) $k@1823) $k@1841)))
; [eval] diz.LBQThread1b__queue.BlockingQueue__capacity > 0
(declare-const $k@1854 $Perm)
(assert ($Perm.isValidVar $k@1854))
(assert ($Perm.isReadVar $k@1854 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@1854 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@1854 (+ (- (+ (- $k@1777 $k@1802) $k@1820) $k@1824) $k@1842)))
; [eval] diz.LBQThread1b__queue.BlockingQueue__count != null
; [eval] diz.LBQThread1b__queue.BlockingQueue__first != null
(push) ; 9
(assert (not (not (= $t@1836 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
; [dead then-branch 335] $t@1836 != Null
(push) ; 9
; [else-branch 335] $t@1836 == Null
(declare-const $k@1855 $Perm)
(assert ($Perm.isValidVar $k@1855))
(assert ($Perm.isReadVar $k@1855 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@1855 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= (+ (- (+ (- $k@1781 $k@1803) $k@1821) $k@1825) $k@1850) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not (= (+ (- (+ (- $k@1781 $k@1803) $k@1821) $k@1825) $k@1850) $Perm.No)))
(assert (< $k@1855 (+ (- (+ (- $k@1781 $k@1803) $k@1821) $k@1825) $k@1850)))
(declare-const $k@1856 $Perm)
(assert ($Perm.isValidVar $k@1856))
(assert ($Perm.isReadVar $k@1856 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@1856 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= (+ (- (+ (- $k@1783 $k@1804) $k@1822) $k@1826) $k@1851) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not (= (+ (- (+ (- $k@1783 $k@1804) $k@1822) $k@1826) $k@1851) $Perm.No)))
(assert (< $k@1856 (+ (- (+ (- $k@1783 $k@1804) $k@1822) $k@1826) $k@1851)))
(pop) ; 9
(pop) ; 8
(pop) ; 7
; [dead else-branch 332] $t@1814 == Null
(pop) ; 6
(push) ; 6
; [else-branch 331] $t@1814 == Null
(assert (= $t@1814 $Ref.null))
(declare-const $k@1857 $Perm)
(assert ($Perm.isValidVar $k@1857))
(assert ($Perm.isReadVar $k@1857 $Perm.Write))
(assert (implies (< $Perm.No (- $k@1781 $k@1803)) (= $t@1810 $t@1782)))
(declare-const $k@1858 $Perm)
(assert ($Perm.isValidVar $k@1858))
(assert ($Perm.isReadVar $k@1858 $Perm.Write))
(assert (implies (< $Perm.No (- $k@1783 $k@1804)) (= $t@1808 $t@1784)))
; [exec]
; b := __flatten_58
; [exec]
; __flatten_59 := BlockingQueue__peek(diz.LBQThread1b__queue)
; [eval] diz != null
(declare-const $k@1859 $Perm)
(assert ($Perm.isValidVar $k@1859))
(assert ($Perm.isReadVar $k@1859 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@1859 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@1859 (+ (- $k@1775 $k@1801) $k@1819)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@1860 $Perm)
(assert ($Perm.isValidVar $k@1860))
(assert ($Perm.isReadVar $k@1860 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@1860 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@1860 (+ (- $k@1777 $k@1802) $k@1820)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 7
(assert (not (not (= $t@1814 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 7
; [dead then-branch 336] $t@1814 != Null
(push) ; 7
; [else-branch 336] $t@1814 == Null
(declare-const $k@1861 $Perm)
(assert ($Perm.isValidVar $k@1861))
(assert ($Perm.isReadVar $k@1861 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@1861 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= (+ (- $k@1781 $k@1803) $k@1857) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- $k@1781 $k@1803) $k@1857) $Perm.No)))
(assert (< $k@1861 (+ (- $k@1781 $k@1803) $k@1857)))
(declare-const $k@1862 $Perm)
(assert ($Perm.isValidVar $k@1862))
(assert ($Perm.isReadVar $k@1862 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@1862 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= (+ (- $k@1783 $k@1804) $k@1858) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- $k@1783 $k@1804) $k@1858) $Perm.No)))
(assert (< $k@1862 (+ (- $k@1783 $k@1804) $k@1858)))
(declare-const sys__result@1863 $Ref)
(declare-const $t@1864 $Snap)
(declare-const $t@1865 $Snap)
(declare-const $t@1866 $Ref)
(assert (= $t@1864 ($Snap.combine $t@1865 ($SortWrappers.$RefTo$Snap $t@1866))))
(declare-const $t@1867 $Snap)
(declare-const $t@1868 $Ref)
(assert (= $t@1865 ($Snap.combine $t@1867 ($SortWrappers.$RefTo$Snap $t@1868))))
(declare-const $t@1869 $Snap)
(declare-const $t@1870 $Snap)
(assert (= $t@1867 ($Snap.combine $t@1869 $t@1870)))
(declare-const $t@1871 $Snap)
(declare-const $t@1872 $Ref)
(assert (= $t@1869 ($Snap.combine $t@1871 ($SortWrappers.$RefTo$Snap $t@1872))))
(declare-const $t@1873 $Snap)
(assert (= $t@1871 ($Snap.combine $t@1873 $Snap.unit)))
(declare-const $t@1874 Int)
(declare-const $t@1875 $Ref)
(assert (=
  $t@1873
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@1874)
    ($SortWrappers.$RefTo$Snap $t@1875))))
(declare-const $t@1876 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@1874)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@1876) $Snap.unit)))
(declare-const $k@1877 $Perm)
(assert ($Perm.isValidVar $k@1877))
(assert ($Perm.isReadVar $k@1877 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@1775 $k@1801) $k@1819) $k@1859))
  (= $t@1876 $t@1818)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 8
(assert (not (not (= (+ (- (+ (- $k@1775 $k@1801) $k@1819) $k@1859) $k@1877) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- (+ (- $k@1775 $k@1801) $k@1819) $k@1859) $k@1877) $Perm.No)))
(assert (> $t@1876 0))
(declare-const $k@1878 $Perm)
(assert ($Perm.isValidVar $k@1878))
(assert ($Perm.isReadVar $k@1878 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@1777 $k@1802) $k@1820) $k@1860))
  (= $t@1875 $t@1817)))
; [eval] diz.BlockingQueue__count != null
(push) ; 8
(assert (not (not (= (+ (- (+ (- $k@1777 $k@1802) $k@1820) $k@1860) $k@1878) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- (+ (- $k@1777 $k@1802) $k@1820) $k@1860) $k@1878) $Perm.No)))
(assert (not (= $t@1875 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 8
(assert (not (= $t@1872 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= $t@1872 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
(push) ; 8
; [then-branch 337] $t@1872 != Null
(assert (not (= $t@1872 $Ref.null)))
(declare-const $k@1879 $Perm)
(assert ($Perm.isValidVar $k@1879))
(assert ($Perm.isReadVar $k@1879 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@1781 $k@1803) $k@1857) $k@1861))
  (= $t@1868 $t@1810)))
(declare-const $k@1880 $Perm)
(assert ($Perm.isValidVar $k@1880))
(assert ($Perm.isReadVar $k@1880 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@1783 $k@1804) $k@1858) $k@1862))
  (= $t@1866 $t@1808)))
; [exec]
; i := __flatten_59
(declare-const $k@1881 $Perm)
(assert ($Perm.isValidVar $k@1881))
(assert ($Perm.isReadVar $k@1881 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@1881 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@1881 $k@1773))
(declare-const $k@1882 $Perm)
(assert ($Perm.isValidVar $k@1882))
(assert ($Perm.isReadVar $k@1882 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@1882 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@1882 (+ (- (+ (- $k@1775 $k@1801) $k@1819) $k@1859) $k@1877)))
; [eval] diz.LBQThread1b__queue.BlockingQueue__capacity > 0
(declare-const $k@1883 $Perm)
(assert ($Perm.isValidVar $k@1883))
(assert ($Perm.isReadVar $k@1883 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@1883 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@1883 (+ (- (+ (- $k@1777 $k@1802) $k@1820) $k@1860) $k@1878)))
; [eval] diz.LBQThread1b__queue.BlockingQueue__count != null
; [eval] diz.LBQThread1b__queue.BlockingQueue__first != null
(push) ; 9
(assert (not (= $t@1872 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
(push) ; 9
; [then-branch 338] $t@1872 != Null
(declare-const $k@1884 $Perm)
(assert ($Perm.isValidVar $k@1884))
(assert ($Perm.isReadVar $k@1884 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@1884 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= (+ (- (+ (- $k@1781 $k@1803) $k@1857) $k@1861) $k@1879) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not (= (+ (- (+ (- $k@1781 $k@1803) $k@1857) $k@1861) $k@1879) $Perm.No)))
(assert (< $k@1884 (+ (- (+ (- $k@1781 $k@1803) $k@1857) $k@1861) $k@1879)))
(declare-const $k@1885 $Perm)
(assert ($Perm.isValidVar $k@1885))
(assert ($Perm.isReadVar $k@1885 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@1885 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= (+ (- (+ (- $k@1783 $k@1804) $k@1858) $k@1862) $k@1880) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not (= (+ (- (+ (- $k@1783 $k@1804) $k@1858) $k@1862) $k@1880) $Perm.No)))
(assert (< $k@1885 (+ (- (+ (- $k@1783 $k@1804) $k@1858) $k@1862) $k@1880)))
(pop) ; 9
; [dead else-branch 338] $t@1872 == Null
(pop) ; 8
(push) ; 8
; [else-branch 337] $t@1872 == Null
(assert (= $t@1872 $Ref.null))
(declare-const $k@1886 $Perm)
(assert ($Perm.isValidVar $k@1886))
(assert ($Perm.isReadVar $k@1886 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@1781 $k@1803) $k@1857) $k@1861))
  (= $t@1868 $t@1810)))
(declare-const $k@1887 $Perm)
(assert ($Perm.isValidVar $k@1887))
(assert ($Perm.isReadVar $k@1887 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@1783 $k@1804) $k@1858) $k@1862))
  (= $t@1866 $t@1808)))
; [exec]
; i := __flatten_59
(declare-const $k@1888 $Perm)
(assert ($Perm.isValidVar $k@1888))
(assert ($Perm.isReadVar $k@1888 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@1888 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@1888 $k@1773))
(declare-const $k@1889 $Perm)
(assert ($Perm.isValidVar $k@1889))
(assert ($Perm.isReadVar $k@1889 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@1889 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@1889 (+ (- (+ (- $k@1775 $k@1801) $k@1819) $k@1859) $k@1877)))
; [eval] diz.LBQThread1b__queue.BlockingQueue__capacity > 0
(declare-const $k@1890 $Perm)
(assert ($Perm.isValidVar $k@1890))
(assert ($Perm.isReadVar $k@1890 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@1890 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@1890 (+ (- (+ (- $k@1777 $k@1802) $k@1820) $k@1860) $k@1878)))
; [eval] diz.LBQThread1b__queue.BlockingQueue__count != null
; [eval] diz.LBQThread1b__queue.BlockingQueue__first != null
(push) ; 9
(assert (not (not (= $t@1872 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
; [dead then-branch 339] $t@1872 != Null
(push) ; 9
; [else-branch 339] $t@1872 == Null
(declare-const $k@1891 $Perm)
(assert ($Perm.isValidVar $k@1891))
(assert ($Perm.isReadVar $k@1891 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@1891 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= (+ (- (+ (- $k@1781 $k@1803) $k@1857) $k@1861) $k@1886) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not (= (+ (- (+ (- $k@1781 $k@1803) $k@1857) $k@1861) $k@1886) $Perm.No)))
(assert (< $k@1891 (+ (- (+ (- $k@1781 $k@1803) $k@1857) $k@1861) $k@1886)))
(declare-const $k@1892 $Perm)
(assert ($Perm.isValidVar $k@1892))
(assert ($Perm.isReadVar $k@1892 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@1892 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= (+ (- (+ (- $k@1783 $k@1804) $k@1858) $k@1862) $k@1887) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not (= (+ (- (+ (- $k@1783 $k@1804) $k@1858) $k@1862) $k@1887) $Perm.No)))
(assert (< $k@1892 (+ (- (+ (- $k@1783 $k@1804) $k@1858) $k@1862) $k@1887)))
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
; [dead else-branch 330] $t@1779 == Null
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch 328] $t@1779 == Null
(assert (= $t@1779 $Ref.null))
(declare-const $k@1893 $Perm)
(assert ($Perm.isValidVar $k@1893))
(assert ($Perm.isReadVar $k@1893 $Perm.Write))
(declare-const $t@1894 $Ref)
(declare-const $k@1895 $Perm)
(assert ($Perm.isValidVar $k@1895))
(assert ($Perm.isReadVar $k@1895 $Perm.Write))
(declare-const $t@1896 $Ref)
(push) ; 4
(declare-const $k@1897 $Perm)
(assert ($Perm.isValidVar $k@1897))
(assert ($Perm.isReadVar $k@1897 $Perm.Write))
(declare-const $t@1898 $Ref)
(push) ; 5
(assert (not (not (= $k@1897 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@1897 $Perm.No)))
(assert (not (= $t@1898 $Ref.null)))
(declare-const $k@1899 $Perm)
(assert ($Perm.isValidVar $k@1899))
(assert ($Perm.isReadVar $k@1899 $Perm.Write))
(declare-const $t@1900 Int)
; [eval] diz.LBQThread1b__queue.BlockingQueue__capacity > 0
(push) ; 5
(assert (not (not (= $k@1899 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@1899 $Perm.No)))
(assert (> $t@1900 0))
(declare-const $k@1901 $Perm)
(assert ($Perm.isValidVar $k@1901))
(assert ($Perm.isReadVar $k@1901 $Perm.Write))
(declare-const $t@1902 $Ref)
; [eval] diz.LBQThread1b__queue.BlockingQueue__count != null
(push) ; 5
(assert (not (not (= $k@1901 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@1901 $Perm.No)))
(assert (not (= $t@1902 $Ref.null)))
(declare-const $t@1903 $Ref)
; [eval] diz.LBQThread1b__queue.BlockingQueue__first != null
(push) ; 5
(assert (not (= $t@1903 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
(assert (not (not (= $t@1903 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
; [then-branch 340] $t@1903 != Null
(assert (not (= $t@1903 $Ref.null)))
(declare-const $t@1904 $Snap)
(declare-const $k@1905 $Perm)
(assert ($Perm.isValidVar $k@1905))
(assert ($Perm.isReadVar $k@1905 $Perm.Write))
(declare-const $t@1906 $Ref)
(declare-const $k@1907 $Perm)
(assert ($Perm.isValidVar $k@1907))
(assert ($Perm.isReadVar $k@1907 $Perm.Write))
(declare-const $t@1908 $Ref)
(pop) ; 5
(push) ; 5
; [else-branch 340] $t@1903 == Null
(assert (= $t@1903 $Ref.null))
(declare-const $k@1909 $Perm)
(assert ($Perm.isValidVar $k@1909))
(assert ($Perm.isReadVar $k@1909 $Perm.Write))
(declare-const $t@1910 $Ref)
(declare-const $k@1911 $Perm)
(assert ($Perm.isValidVar $k@1911))
(assert ($Perm.isReadVar $k@1911 $Perm.Write))
(declare-const $t@1912 $Ref)
(pop) ; 5
(pop) ; 4
(push) ; 4
; [exec]
; __flatten_58 := BlockingQueue__offer(diz.LBQThread1b__queue, 2)
; [eval] diz != null
(declare-const $k@1913 $Perm)
(assert ($Perm.isValidVar $k@1913))
(assert ($Perm.isReadVar $k@1913 $Perm.Write))
(push) ; 5
(assert (not (or (= $k@1913 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (< $k@1913 $k@1775))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@1914 $Perm)
(assert ($Perm.isValidVar $k@1914))
(assert ($Perm.isReadVar $k@1914 $Perm.Write))
(push) ; 5
(assert (not (or (= $k@1914 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (< $k@1914 $k@1777))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 5
(assert (not (not (= $t@1779 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
; [dead then-branch 341] $t@1779 != Null
(push) ; 5
; [else-branch 341] $t@1779 == Null
(declare-const $k@1915 $Perm)
(assert ($Perm.isValidVar $k@1915))
(assert ($Perm.isReadVar $k@1915 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@1915 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(push) ; 6
(assert (not (not (= $k@1893 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= $k@1893 $Perm.No)))
(assert (< $k@1915 $k@1893))
(declare-const $k@1916 $Perm)
(assert ($Perm.isValidVar $k@1916))
(assert ($Perm.isReadVar $k@1916 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@1916 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(push) ; 6
(assert (not (not (= $k@1895 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= $k@1895 $Perm.No)))
(assert (< $k@1916 $k@1895))
(declare-const sys__result@1917 Bool)
(declare-const $t@1918 $Snap)
(declare-const $t@1919 $Snap)
(declare-const $t@1920 $Ref)
(assert (= $t@1918 ($Snap.combine $t@1919 ($SortWrappers.$RefTo$Snap $t@1920))))
(declare-const $t@1921 $Snap)
(declare-const $t@1922 $Ref)
(assert (= $t@1919 ($Snap.combine $t@1921 ($SortWrappers.$RefTo$Snap $t@1922))))
(declare-const $t@1923 $Snap)
(declare-const $t@1924 $Snap)
(assert (= $t@1921 ($Snap.combine $t@1923 $t@1924)))
(declare-const $t@1925 $Snap)
(declare-const $t@1926 $Ref)
(assert (= $t@1923 ($Snap.combine $t@1925 ($SortWrappers.$RefTo$Snap $t@1926))))
(declare-const $t@1927 $Snap)
(assert (= $t@1925 ($Snap.combine $t@1927 $Snap.unit)))
(declare-const $t@1928 Int)
(declare-const $t@1929 $Ref)
(assert (=
  $t@1927
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@1928)
    ($SortWrappers.$RefTo$Snap $t@1929))))
(declare-const $t@1930 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@1928)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@1930) $Snap.unit)))
(declare-const $k@1931 $Perm)
(assert ($Perm.isValidVar $k@1931))
(assert ($Perm.isReadVar $k@1931 $Perm.Write))
(assert (implies (< $Perm.No (- $k@1775 $k@1913)) (= $t@1930 $t@1776)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 6
(assert (not (not (= (+ (- $k@1775 $k@1913) $k@1931) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= (+ (- $k@1775 $k@1913) $k@1931) $Perm.No)))
(assert (> $t@1930 0))
(declare-const $k@1932 $Perm)
(assert ($Perm.isValidVar $k@1932))
(assert ($Perm.isReadVar $k@1932 $Perm.Write))
(assert (implies (< $Perm.No (- $k@1777 $k@1914)) (= $t@1929 $t@1778)))
; [eval] diz.BlockingQueue__count != null
(push) ; 6
(assert (not (not (= (+ (- $k@1777 $k@1914) $k@1932) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= (+ (- $k@1777 $k@1914) $k@1932) $Perm.No)))
(assert (not (= $t@1929 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 6
(assert (not (= $t@1926 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 6
(push) ; 6
(assert (not (not (= $t@1926 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 6
(push) ; 6
; [then-branch 342] $t@1926 != Null
(assert (not (= $t@1926 $Ref.null)))
(declare-const $k@1933 $Perm)
(assert ($Perm.isValidVar $k@1933))
(assert ($Perm.isReadVar $k@1933 $Perm.Write))
(assert (implies (< $Perm.No (- $k@1893 $k@1915)) (= $t@1922 $t@1894)))
(declare-const $k@1934 $Perm)
(assert ($Perm.isValidVar $k@1934))
(assert ($Perm.isReadVar $k@1934 $Perm.Write))
(assert (implies (< $Perm.No (- $k@1895 $k@1916)) (= $t@1920 $t@1896)))
; [exec]
; b := __flatten_58
; [exec]
; __flatten_59 := BlockingQueue__peek(diz.LBQThread1b__queue)
; [eval] diz != null
(declare-const $k@1935 $Perm)
(assert ($Perm.isValidVar $k@1935))
(assert ($Perm.isReadVar $k@1935 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@1935 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@1935 (+ (- $k@1775 $k@1913) $k@1931)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@1936 $Perm)
(assert ($Perm.isValidVar $k@1936))
(assert ($Perm.isReadVar $k@1936 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@1936 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@1936 (+ (- $k@1777 $k@1914) $k@1932)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 7
(assert (not (= $t@1926 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 7
(push) ; 7
; [then-branch 343] $t@1926 != Null
(declare-const $k@1937 $Perm)
(assert ($Perm.isValidVar $k@1937))
(assert ($Perm.isReadVar $k@1937 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@1937 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= (+ (- $k@1893 $k@1915) $k@1933) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- $k@1893 $k@1915) $k@1933) $Perm.No)))
(assert (< $k@1937 (+ (- $k@1893 $k@1915) $k@1933)))
(declare-const $k@1938 $Perm)
(assert ($Perm.isValidVar $k@1938))
(assert ($Perm.isReadVar $k@1938 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@1938 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= (+ (- $k@1895 $k@1916) $k@1934) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- $k@1895 $k@1916) $k@1934) $Perm.No)))
(assert (< $k@1938 (+ (- $k@1895 $k@1916) $k@1934)))
(declare-const sys__result@1939 $Ref)
(declare-const $t@1940 $Snap)
(declare-const $t@1941 $Snap)
(declare-const $t@1942 $Ref)
(assert (= $t@1940 ($Snap.combine $t@1941 ($SortWrappers.$RefTo$Snap $t@1942))))
(declare-const $t@1943 $Snap)
(declare-const $t@1944 $Ref)
(assert (= $t@1941 ($Snap.combine $t@1943 ($SortWrappers.$RefTo$Snap $t@1944))))
(declare-const $t@1945 $Snap)
(declare-const $t@1946 $Snap)
(assert (= $t@1943 ($Snap.combine $t@1945 $t@1946)))
(declare-const $t@1947 $Snap)
(declare-const $t@1948 $Ref)
(assert (= $t@1945 ($Snap.combine $t@1947 ($SortWrappers.$RefTo$Snap $t@1948))))
(declare-const $t@1949 $Snap)
(assert (= $t@1947 ($Snap.combine $t@1949 $Snap.unit)))
(declare-const $t@1950 Int)
(declare-const $t@1951 $Ref)
(assert (=
  $t@1949
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@1950)
    ($SortWrappers.$RefTo$Snap $t@1951))))
(declare-const $t@1952 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@1950)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@1952) $Snap.unit)))
(declare-const $k@1953 $Perm)
(assert ($Perm.isValidVar $k@1953))
(assert ($Perm.isReadVar $k@1953 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@1775 $k@1913) $k@1931) $k@1935))
  (= $t@1952 $t@1930)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 8
(assert (not (not (= (+ (- (+ (- $k@1775 $k@1913) $k@1931) $k@1935) $k@1953) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- (+ (- $k@1775 $k@1913) $k@1931) $k@1935) $k@1953) $Perm.No)))
(assert (> $t@1952 0))
(declare-const $k@1954 $Perm)
(assert ($Perm.isValidVar $k@1954))
(assert ($Perm.isReadVar $k@1954 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@1777 $k@1914) $k@1932) $k@1936))
  (= $t@1951 $t@1929)))
; [eval] diz.BlockingQueue__count != null
(push) ; 8
(assert (not (not (= (+ (- (+ (- $k@1777 $k@1914) $k@1932) $k@1936) $k@1954) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- (+ (- $k@1777 $k@1914) $k@1932) $k@1936) $k@1954) $Perm.No)))
(assert (not (= $t@1951 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 8
(assert (not (= $t@1948 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= $t@1948 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
(push) ; 8
; [then-branch 344] $t@1948 != Null
(assert (not (= $t@1948 $Ref.null)))
(declare-const $k@1955 $Perm)
(assert ($Perm.isValidVar $k@1955))
(assert ($Perm.isReadVar $k@1955 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@1893 $k@1915) $k@1933) $k@1937))
  (= $t@1944 $t@1922)))
(declare-const $k@1956 $Perm)
(assert ($Perm.isValidVar $k@1956))
(assert ($Perm.isReadVar $k@1956 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@1895 $k@1916) $k@1934) $k@1938))
  (= $t@1942 $t@1920)))
; [exec]
; i := __flatten_59
(declare-const $k@1957 $Perm)
(assert ($Perm.isValidVar $k@1957))
(assert ($Perm.isReadVar $k@1957 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@1957 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@1957 $k@1773))
(declare-const $k@1958 $Perm)
(assert ($Perm.isValidVar $k@1958))
(assert ($Perm.isReadVar $k@1958 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@1958 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@1958 (+ (- (+ (- $k@1775 $k@1913) $k@1931) $k@1935) $k@1953)))
; [eval] diz.LBQThread1b__queue.BlockingQueue__capacity > 0
(declare-const $k@1959 $Perm)
(assert ($Perm.isValidVar $k@1959))
(assert ($Perm.isReadVar $k@1959 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@1959 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@1959 (+ (- (+ (- $k@1777 $k@1914) $k@1932) $k@1936) $k@1954)))
; [eval] diz.LBQThread1b__queue.BlockingQueue__count != null
; [eval] diz.LBQThread1b__queue.BlockingQueue__first != null
(push) ; 9
(assert (not (= $t@1948 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
(push) ; 9
; [then-branch 345] $t@1948 != Null
(declare-const $k@1960 $Perm)
(assert ($Perm.isValidVar $k@1960))
(assert ($Perm.isReadVar $k@1960 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@1960 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= (+ (- (+ (- $k@1893 $k@1915) $k@1933) $k@1937) $k@1955) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not (= (+ (- (+ (- $k@1893 $k@1915) $k@1933) $k@1937) $k@1955) $Perm.No)))
(assert (< $k@1960 (+ (- (+ (- $k@1893 $k@1915) $k@1933) $k@1937) $k@1955)))
(declare-const $k@1961 $Perm)
(assert ($Perm.isValidVar $k@1961))
(assert ($Perm.isReadVar $k@1961 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@1961 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= (+ (- (+ (- $k@1895 $k@1916) $k@1934) $k@1938) $k@1956) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not (= (+ (- (+ (- $k@1895 $k@1916) $k@1934) $k@1938) $k@1956) $Perm.No)))
(assert (< $k@1961 (+ (- (+ (- $k@1895 $k@1916) $k@1934) $k@1938) $k@1956)))
(pop) ; 9
; [dead else-branch 345] $t@1948 == Null
(pop) ; 8
(push) ; 8
; [else-branch 344] $t@1948 == Null
(assert (= $t@1948 $Ref.null))
(declare-const $k@1962 $Perm)
(assert ($Perm.isValidVar $k@1962))
(assert ($Perm.isReadVar $k@1962 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@1893 $k@1915) $k@1933) $k@1937))
  (= $t@1944 $t@1922)))
(declare-const $k@1963 $Perm)
(assert ($Perm.isValidVar $k@1963))
(assert ($Perm.isReadVar $k@1963 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@1895 $k@1916) $k@1934) $k@1938))
  (= $t@1942 $t@1920)))
; [exec]
; i := __flatten_59
(declare-const $k@1964 $Perm)
(assert ($Perm.isValidVar $k@1964))
(assert ($Perm.isReadVar $k@1964 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@1964 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@1964 $k@1773))
(declare-const $k@1965 $Perm)
(assert ($Perm.isValidVar $k@1965))
(assert ($Perm.isReadVar $k@1965 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@1965 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@1965 (+ (- (+ (- $k@1775 $k@1913) $k@1931) $k@1935) $k@1953)))
; [eval] diz.LBQThread1b__queue.BlockingQueue__capacity > 0
(declare-const $k@1966 $Perm)
(assert ($Perm.isValidVar $k@1966))
(assert ($Perm.isReadVar $k@1966 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@1966 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@1966 (+ (- (+ (- $k@1777 $k@1914) $k@1932) $k@1936) $k@1954)))
; [eval] diz.LBQThread1b__queue.BlockingQueue__count != null
; [eval] diz.LBQThread1b__queue.BlockingQueue__first != null
(push) ; 9
(assert (not (not (= $t@1948 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
; [dead then-branch 346] $t@1948 != Null
(push) ; 9
; [else-branch 346] $t@1948 == Null
(declare-const $k@1967 $Perm)
(assert ($Perm.isValidVar $k@1967))
(assert ($Perm.isReadVar $k@1967 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@1967 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= (+ (- (+ (- $k@1893 $k@1915) $k@1933) $k@1937) $k@1962) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not (= (+ (- (+ (- $k@1893 $k@1915) $k@1933) $k@1937) $k@1962) $Perm.No)))
(assert (< $k@1967 (+ (- (+ (- $k@1893 $k@1915) $k@1933) $k@1937) $k@1962)))
(declare-const $k@1968 $Perm)
(assert ($Perm.isValidVar $k@1968))
(assert ($Perm.isReadVar $k@1968 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@1968 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= (+ (- (+ (- $k@1895 $k@1916) $k@1934) $k@1938) $k@1963) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not (= (+ (- (+ (- $k@1895 $k@1916) $k@1934) $k@1938) $k@1963) $Perm.No)))
(assert (< $k@1968 (+ (- (+ (- $k@1895 $k@1916) $k@1934) $k@1938) $k@1963)))
(pop) ; 9
(pop) ; 8
(pop) ; 7
; [dead else-branch 343] $t@1926 == Null
(pop) ; 6
(push) ; 6
; [else-branch 342] $t@1926 == Null
(assert (= $t@1926 $Ref.null))
(declare-const $k@1969 $Perm)
(assert ($Perm.isValidVar $k@1969))
(assert ($Perm.isReadVar $k@1969 $Perm.Write))
(assert (implies (< $Perm.No (- $k@1893 $k@1915)) (= $t@1922 $t@1894)))
(declare-const $k@1970 $Perm)
(assert ($Perm.isValidVar $k@1970))
(assert ($Perm.isReadVar $k@1970 $Perm.Write))
(assert (implies (< $Perm.No (- $k@1895 $k@1916)) (= $t@1920 $t@1896)))
; [exec]
; b := __flatten_58
; [exec]
; __flatten_59 := BlockingQueue__peek(diz.LBQThread1b__queue)
; [eval] diz != null
(declare-const $k@1971 $Perm)
(assert ($Perm.isValidVar $k@1971))
(assert ($Perm.isReadVar $k@1971 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@1971 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@1971 (+ (- $k@1775 $k@1913) $k@1931)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@1972 $Perm)
(assert ($Perm.isValidVar $k@1972))
(assert ($Perm.isReadVar $k@1972 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@1972 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@1972 (+ (- $k@1777 $k@1914) $k@1932)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 7
(assert (not (not (= $t@1926 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 7
; [dead then-branch 347] $t@1926 != Null
(push) ; 7
; [else-branch 347] $t@1926 == Null
(declare-const $k@1973 $Perm)
(assert ($Perm.isValidVar $k@1973))
(assert ($Perm.isReadVar $k@1973 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@1973 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= (+ (- $k@1893 $k@1915) $k@1969) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- $k@1893 $k@1915) $k@1969) $Perm.No)))
(assert (< $k@1973 (+ (- $k@1893 $k@1915) $k@1969)))
(declare-const $k@1974 $Perm)
(assert ($Perm.isValidVar $k@1974))
(assert ($Perm.isReadVar $k@1974 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@1974 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= (+ (- $k@1895 $k@1916) $k@1970) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- $k@1895 $k@1916) $k@1970) $Perm.No)))
(assert (< $k@1974 (+ (- $k@1895 $k@1916) $k@1970)))
(declare-const sys__result@1975 $Ref)
(declare-const $t@1976 $Snap)
(declare-const $t@1977 $Snap)
(declare-const $t@1978 $Ref)
(assert (= $t@1976 ($Snap.combine $t@1977 ($SortWrappers.$RefTo$Snap $t@1978))))
(declare-const $t@1979 $Snap)
(declare-const $t@1980 $Ref)
(assert (= $t@1977 ($Snap.combine $t@1979 ($SortWrappers.$RefTo$Snap $t@1980))))
(declare-const $t@1981 $Snap)
(declare-const $t@1982 $Snap)
(assert (= $t@1979 ($Snap.combine $t@1981 $t@1982)))
(declare-const $t@1983 $Snap)
(declare-const $t@1984 $Ref)
(assert (= $t@1981 ($Snap.combine $t@1983 ($SortWrappers.$RefTo$Snap $t@1984))))
(declare-const $t@1985 $Snap)
(assert (= $t@1983 ($Snap.combine $t@1985 $Snap.unit)))
(declare-const $t@1986 Int)
(declare-const $t@1987 $Ref)
(assert (=
  $t@1985
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@1986)
    ($SortWrappers.$RefTo$Snap $t@1987))))
(declare-const $t@1988 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@1986)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@1988) $Snap.unit)))
(declare-const $k@1989 $Perm)
(assert ($Perm.isValidVar $k@1989))
(assert ($Perm.isReadVar $k@1989 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@1775 $k@1913) $k@1931) $k@1971))
  (= $t@1988 $t@1930)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 8
(assert (not (not (= (+ (- (+ (- $k@1775 $k@1913) $k@1931) $k@1971) $k@1989) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- (+ (- $k@1775 $k@1913) $k@1931) $k@1971) $k@1989) $Perm.No)))
(assert (> $t@1988 0))
(declare-const $k@1990 $Perm)
(assert ($Perm.isValidVar $k@1990))
(assert ($Perm.isReadVar $k@1990 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@1777 $k@1914) $k@1932) $k@1972))
  (= $t@1987 $t@1929)))
; [eval] diz.BlockingQueue__count != null
(push) ; 8
(assert (not (not (= (+ (- (+ (- $k@1777 $k@1914) $k@1932) $k@1972) $k@1990) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- (+ (- $k@1777 $k@1914) $k@1932) $k@1972) $k@1990) $Perm.No)))
(assert (not (= $t@1987 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 8
(assert (not (= $t@1984 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= $t@1984 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
(push) ; 8
; [then-branch 348] $t@1984 != Null
(assert (not (= $t@1984 $Ref.null)))
(declare-const $k@1991 $Perm)
(assert ($Perm.isValidVar $k@1991))
(assert ($Perm.isReadVar $k@1991 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@1893 $k@1915) $k@1969) $k@1973))
  (= $t@1980 $t@1922)))
(declare-const $k@1992 $Perm)
(assert ($Perm.isValidVar $k@1992))
(assert ($Perm.isReadVar $k@1992 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@1895 $k@1916) $k@1970) $k@1974))
  (= $t@1978 $t@1920)))
; [exec]
; i := __flatten_59
(declare-const $k@1993 $Perm)
(assert ($Perm.isValidVar $k@1993))
(assert ($Perm.isReadVar $k@1993 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@1993 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@1993 $k@1773))
(declare-const $k@1994 $Perm)
(assert ($Perm.isValidVar $k@1994))
(assert ($Perm.isReadVar $k@1994 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@1994 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@1994 (+ (- (+ (- $k@1775 $k@1913) $k@1931) $k@1971) $k@1989)))
; [eval] diz.LBQThread1b__queue.BlockingQueue__capacity > 0
(declare-const $k@1995 $Perm)
(assert ($Perm.isValidVar $k@1995))
(assert ($Perm.isReadVar $k@1995 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@1995 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@1995 (+ (- (+ (- $k@1777 $k@1914) $k@1932) $k@1972) $k@1990)))
; [eval] diz.LBQThread1b__queue.BlockingQueue__count != null
; [eval] diz.LBQThread1b__queue.BlockingQueue__first != null
(push) ; 9
(assert (not (= $t@1984 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
(push) ; 9
; [then-branch 349] $t@1984 != Null
(declare-const $k@1996 $Perm)
(assert ($Perm.isValidVar $k@1996))
(assert ($Perm.isReadVar $k@1996 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@1996 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= (+ (- (+ (- $k@1893 $k@1915) $k@1969) $k@1973) $k@1991) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not (= (+ (- (+ (- $k@1893 $k@1915) $k@1969) $k@1973) $k@1991) $Perm.No)))
(assert (< $k@1996 (+ (- (+ (- $k@1893 $k@1915) $k@1969) $k@1973) $k@1991)))
(declare-const $k@1997 $Perm)
(assert ($Perm.isValidVar $k@1997))
(assert ($Perm.isReadVar $k@1997 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@1997 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= (+ (- (+ (- $k@1895 $k@1916) $k@1970) $k@1974) $k@1992) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not (= (+ (- (+ (- $k@1895 $k@1916) $k@1970) $k@1974) $k@1992) $Perm.No)))
(assert (< $k@1997 (+ (- (+ (- $k@1895 $k@1916) $k@1970) $k@1974) $k@1992)))
(pop) ; 9
; [dead else-branch 349] $t@1984 == Null
(pop) ; 8
(push) ; 8
; [else-branch 348] $t@1984 == Null
(assert (= $t@1984 $Ref.null))
(declare-const $k@1998 $Perm)
(assert ($Perm.isValidVar $k@1998))
(assert ($Perm.isReadVar $k@1998 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@1893 $k@1915) $k@1969) $k@1973))
  (= $t@1980 $t@1922)))
(declare-const $k@1999 $Perm)
(assert ($Perm.isValidVar $k@1999))
(assert ($Perm.isReadVar $k@1999 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@1895 $k@1916) $k@1970) $k@1974))
  (= $t@1978 $t@1920)))
; [exec]
; i := __flatten_59
(declare-const $k@2000 $Perm)
(assert ($Perm.isValidVar $k@2000))
(assert ($Perm.isReadVar $k@2000 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@2000 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@2000 $k@1773))
(declare-const $k@2001 $Perm)
(assert ($Perm.isValidVar $k@2001))
(assert ($Perm.isReadVar $k@2001 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@2001 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@2001 (+ (- (+ (- $k@1775 $k@1913) $k@1931) $k@1971) $k@1989)))
; [eval] diz.LBQThread1b__queue.BlockingQueue__capacity > 0
(declare-const $k@2002 $Perm)
(assert ($Perm.isValidVar $k@2002))
(assert ($Perm.isReadVar $k@2002 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@2002 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@2002 (+ (- (+ (- $k@1777 $k@1914) $k@1932) $k@1972) $k@1990)))
; [eval] diz.LBQThread1b__queue.BlockingQueue__count != null
; [eval] diz.LBQThread1b__queue.BlockingQueue__first != null
(push) ; 9
(assert (not (not (= $t@1984 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
; [dead then-branch 350] $t@1984 != Null
(push) ; 9
; [else-branch 350] $t@1984 == Null
(declare-const $k@2003 $Perm)
(assert ($Perm.isValidVar $k@2003))
(assert ($Perm.isReadVar $k@2003 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@2003 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= (+ (- (+ (- $k@1893 $k@1915) $k@1969) $k@1973) $k@1998) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not (= (+ (- (+ (- $k@1893 $k@1915) $k@1969) $k@1973) $k@1998) $Perm.No)))
(assert (< $k@2003 (+ (- (+ (- $k@1893 $k@1915) $k@1969) $k@1973) $k@1998)))
(declare-const $k@2004 $Perm)
(assert ($Perm.isValidVar $k@2004))
(assert ($Perm.isReadVar $k@2004 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@2004 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= (+ (- (+ (- $k@1895 $k@1916) $k@1970) $k@1974) $k@1999) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not (= (+ (- (+ (- $k@1895 $k@1916) $k@1970) $k@1974) $k@1999) $Perm.No)))
(assert (< $k@2004 (+ (- (+ (- $k@1895 $k@1916) $k@1970) $k@1974) $k@1999)))
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
; ---------- LBQThread2a__LBQThread2a ----------
(declare-const queue@2005 $Ref)
(declare-const sys__result@2006 $Ref)
(declare-const diz@2007 $Ref)
(declare-const __flatten_60@2008 $Ref)
(declare-const __flatten_142@2009 $Ref)
(push) ; 2
(assert (not (= queue@2005 $Ref.null)))
(declare-const $k@2010 $Perm)
(assert ($Perm.isValidVar $k@2010))
(assert ($Perm.isReadVar $k@2010 $Perm.Write))
(declare-const $t@2011 Int)
; [eval] queue.BlockingQueue__capacity > 0
(push) ; 3
(assert (not (not (= $k@2010 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 3
(assert (not (= $k@2010 $Perm.No)))
(assert (> $t@2011 0))
(declare-const $k@2012 $Perm)
(assert ($Perm.isValidVar $k@2012))
(assert ($Perm.isReadVar $k@2012 $Perm.Write))
(declare-const $t@2013 $Ref)
; [eval] queue.BlockingQueue__count != null
(push) ; 3
(assert (not (not (= $k@2012 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 3
(assert (not (= $k@2012 $Perm.No)))
(assert (not (= $t@2013 $Ref.null)))
(declare-const $t@2014 $Ref)
; [eval] queue.BlockingQueue__first != null
(push) ; 3
(assert (not (= $t@2014 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 3
(push) ; 3
(assert (not (not (= $t@2014 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 3
(push) ; 3
; [then-branch 351] $t@2014 != Null
(assert (not (= $t@2014 $Ref.null)))
(declare-const $t@2015 $Snap)
(declare-const $k@2016 $Perm)
(assert ($Perm.isValidVar $k@2016))
(assert ($Perm.isReadVar $k@2016 $Perm.Write))
(declare-const $t@2017 $Ref)
(declare-const $k@2018 $Perm)
(assert ($Perm.isValidVar $k@2018))
(assert ($Perm.isReadVar $k@2018 $Perm.Write))
(declare-const $t@2019 $Ref)
(push) ; 4
; [eval] sys__result != null
(assert (not (= sys__result@2006 $Ref.null)))
(declare-const $k@2020 $Perm)
(assert ($Perm.isValidVar $k@2020))
(assert ($Perm.isReadVar $k@2020 $Perm.Write))
(declare-const $t@2021 $Ref)
(push) ; 5
(assert (not (not (= $k@2020 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@2020 $Perm.No)))
(assert (not (= $t@2021 $Ref.null)))
(declare-const $k@2022 $Perm)
(assert ($Perm.isValidVar $k@2022))
(assert ($Perm.isReadVar $k@2022 $Perm.Write))
(declare-const $t@2023 Int)
; [eval] sys__result.LBQThread2a__queue.BlockingQueue__capacity > 0
(push) ; 5
(assert (not (not (= $k@2022 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@2022 $Perm.No)))
(assert (> $t@2023 0))
(declare-const $k@2024 $Perm)
(assert ($Perm.isValidVar $k@2024))
(assert ($Perm.isReadVar $k@2024 $Perm.Write))
(declare-const $t@2025 $Ref)
; [eval] sys__result.LBQThread2a__queue.BlockingQueue__count != null
(push) ; 5
(assert (not (not (= $k@2024 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@2024 $Perm.No)))
(assert (not (= $t@2025 $Ref.null)))
(declare-const $t@2026 $Ref)
; [eval] sys__result.LBQThread2a__queue.BlockingQueue__first != null
(push) ; 5
(assert (not (= $t@2026 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
(assert (not (not (= $t@2026 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
; [then-branch 352] $t@2026 != Null
(assert (not (= $t@2026 $Ref.null)))
(declare-const $t@2027 $Snap)
(declare-const $k@2028 $Perm)
(assert ($Perm.isValidVar $k@2028))
(assert ($Perm.isReadVar $k@2028 $Perm.Write))
(declare-const $t@2029 $Ref)
(declare-const $k@2030 $Perm)
(assert ($Perm.isValidVar $k@2030))
(assert ($Perm.isReadVar $k@2030 $Perm.Write))
(declare-const $t@2031 $Ref)
(pop) ; 5
(push) ; 5
; [else-branch 352] $t@2026 == Null
(assert (= $t@2026 $Ref.null))
(declare-const $k@2032 $Perm)
(assert ($Perm.isValidVar $k@2032))
(assert ($Perm.isReadVar $k@2032 $Perm.Write))
(declare-const $t@2033 $Ref)
(declare-const $k@2034 $Perm)
(assert ($Perm.isValidVar $k@2034))
(assert ($Perm.isReadVar $k@2034 $Perm.Write))
(declare-const $t@2035 $Ref)
(pop) ; 5
(pop) ; 4
(push) ; 4
; [exec]
; diz := new(LBQThread2a__queue)
(declare-const diz@2036 $Ref)
(assert (not (= diz@2036 $Ref.null)))
(declare-const LBQThread2a__queue@2037 $Ref)
(assert (and
  (not (= queue@2005 diz@2036))
  (not (= sys__result@2006 diz@2036))
  (not (= __flatten_60@2008 diz@2036))
  (not (= __flatten_142@2009 diz@2036))
  (not (= $t@2014 diz@2036))
  (not (= LBQThread2a__queue@2037 diz@2036))
  (not (= $t@2013 diz@2036))
  (not (= $t@2017 diz@2036))
  (not (= $t@2019 diz@2036))))
; [exec]
; __flatten_60 := queue
; [exec]
; __flatten_142 := __flatten_60
; [exec]
; diz.LBQThread2a__queue := __flatten_142
; [exec]
; sys__result := diz
; [exec]
; assert (sys__result != null) && acc(sys__result.LBQThread2a__queue, wildcard) && acc(sys__result.LBQThread2a__queue.BlockingQueue__capacity, wildcard) && (sys__result.LBQThread2a__queue.BlockingQueue__capacity > 0) && acc(sys__result.LBQThread2a__queue.BlockingQueue__count, wildcard) && (sys__result.LBQThread2a__queue.BlockingQueue__count != null) && acc(sys__result.LBQThread2a__queue.BlockingQueue__first, write) && ((sys__result.LBQThread2a__queue.BlockingQueue__first != null) ==> acc(Node__state(sys__result.LBQThread2a__queue.BlockingQueue__first), write)) && acc(sys__result.LBQThread2a__queue.BlockingQueue__putLock, wildcard) && acc(sys__result.LBQThread2a__queue.BlockingQueue__takeLock, wildcard)
; [eval] sys__result != null
(declare-const $k@2038 $Perm)
(assert ($Perm.isValidVar $k@2038))
(assert ($Perm.isReadVar $k@2038 $Perm.Write))
(push) ; 5
(assert (not (or (= $k@2038 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (< $k@2038 $Perm.Write))
(declare-const $k@2039 $Perm)
(assert ($Perm.isValidVar $k@2039))
(assert ($Perm.isReadVar $k@2039 $Perm.Write))
(push) ; 5
(assert (not (or (= $k@2039 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (< $k@2039 $k@2010))
; [eval] sys__result.LBQThread2a__queue.BlockingQueue__capacity > 0
(declare-const $k@2040 $Perm)
(assert ($Perm.isValidVar $k@2040))
(assert ($Perm.isReadVar $k@2040 $Perm.Write))
(push) ; 5
(assert (not (or (= $k@2040 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (< $k@2040 $k@2012))
; [eval] sys__result.LBQThread2a__queue.BlockingQueue__count != null
; [eval] sys__result.LBQThread2a__queue.BlockingQueue__first != null
(push) ; 5
(assert (not (= $t@2014 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
; [then-branch 353] $t@2014 != Null
(declare-const $k@2041 $Perm)
(assert ($Perm.isValidVar $k@2041))
(assert ($Perm.isReadVar $k@2041 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@2041 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(push) ; 6
(assert (not (not (= $k@2016 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= $k@2016 $Perm.No)))
(assert (< $k@2041 $k@2016))
(declare-const $k@2042 $Perm)
(assert ($Perm.isValidVar $k@2042))
(assert ($Perm.isReadVar $k@2042 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@2042 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(push) ; 6
(assert (not (not (= $k@2018 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= $k@2018 $Perm.No)))
(assert (< $k@2042 $k@2018))
; [exec]
; inhale false
(pop) ; 5
; [dead else-branch 353] $t@2014 == Null
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch 351] $t@2014 == Null
(assert (= $t@2014 $Ref.null))
(declare-const $k@2043 $Perm)
(assert ($Perm.isValidVar $k@2043))
(assert ($Perm.isReadVar $k@2043 $Perm.Write))
(declare-const $t@2044 $Ref)
(declare-const $k@2045 $Perm)
(assert ($Perm.isValidVar $k@2045))
(assert ($Perm.isReadVar $k@2045 $Perm.Write))
(declare-const $t@2046 $Ref)
(push) ; 4
; [eval] sys__result != null
(assert (not (= sys__result@2006 $Ref.null)))
(declare-const $k@2047 $Perm)
(assert ($Perm.isValidVar $k@2047))
(assert ($Perm.isReadVar $k@2047 $Perm.Write))
(declare-const $t@2048 $Ref)
(push) ; 5
(assert (not (not (= $k@2047 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@2047 $Perm.No)))
(assert (not (= $t@2048 $Ref.null)))
(declare-const $k@2049 $Perm)
(assert ($Perm.isValidVar $k@2049))
(assert ($Perm.isReadVar $k@2049 $Perm.Write))
(declare-const $t@2050 Int)
; [eval] sys__result.LBQThread2a__queue.BlockingQueue__capacity > 0
(push) ; 5
(assert (not (not (= $k@2049 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@2049 $Perm.No)))
(assert (> $t@2050 0))
(declare-const $k@2051 $Perm)
(assert ($Perm.isValidVar $k@2051))
(assert ($Perm.isReadVar $k@2051 $Perm.Write))
(declare-const $t@2052 $Ref)
; [eval] sys__result.LBQThread2a__queue.BlockingQueue__count != null
(push) ; 5
(assert (not (not (= $k@2051 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@2051 $Perm.No)))
(assert (not (= $t@2052 $Ref.null)))
(declare-const $t@2053 $Ref)
; [eval] sys__result.LBQThread2a__queue.BlockingQueue__first != null
(push) ; 5
(assert (not (= $t@2053 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
(assert (not (not (= $t@2053 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
; [then-branch 354] $t@2053 != Null
(assert (not (= $t@2053 $Ref.null)))
(declare-const $t@2054 $Snap)
(declare-const $k@2055 $Perm)
(assert ($Perm.isValidVar $k@2055))
(assert ($Perm.isReadVar $k@2055 $Perm.Write))
(declare-const $t@2056 $Ref)
(declare-const $k@2057 $Perm)
(assert ($Perm.isValidVar $k@2057))
(assert ($Perm.isReadVar $k@2057 $Perm.Write))
(declare-const $t@2058 $Ref)
(pop) ; 5
(push) ; 5
; [else-branch 354] $t@2053 == Null
(assert (= $t@2053 $Ref.null))
(declare-const $k@2059 $Perm)
(assert ($Perm.isValidVar $k@2059))
(assert ($Perm.isReadVar $k@2059 $Perm.Write))
(declare-const $t@2060 $Ref)
(declare-const $k@2061 $Perm)
(assert ($Perm.isValidVar $k@2061))
(assert ($Perm.isReadVar $k@2061 $Perm.Write))
(declare-const $t@2062 $Ref)
(pop) ; 5
(pop) ; 4
(push) ; 4
; [exec]
; diz := new(LBQThread2a__queue)
(declare-const diz@2063 $Ref)
(assert (not (= diz@2063 $Ref.null)))
(declare-const LBQThread2a__queue@2064 $Ref)
(assert (and
  (not (= queue@2005 diz@2063))
  (not (= sys__result@2006 diz@2063))
  (not (= __flatten_60@2008 diz@2063))
  (not (= __flatten_142@2009 diz@2063))
  (not (= LBQThread2a__queue@2064 diz@2063))
  (not (= $t@2013 diz@2063))
  (not (= $t@2014 diz@2063))
  (not (= $t@2044 diz@2063))
  (not (= $t@2046 diz@2063))))
; [exec]
; __flatten_60 := queue
; [exec]
; __flatten_142 := __flatten_60
; [exec]
; diz.LBQThread2a__queue := __flatten_142
; [exec]
; sys__result := diz
; [exec]
; assert (sys__result != null) && acc(sys__result.LBQThread2a__queue, wildcard) && acc(sys__result.LBQThread2a__queue.BlockingQueue__capacity, wildcard) && (sys__result.LBQThread2a__queue.BlockingQueue__capacity > 0) && acc(sys__result.LBQThread2a__queue.BlockingQueue__count, wildcard) && (sys__result.LBQThread2a__queue.BlockingQueue__count != null) && acc(sys__result.LBQThread2a__queue.BlockingQueue__first, write) && ((sys__result.LBQThread2a__queue.BlockingQueue__first != null) ==> acc(Node__state(sys__result.LBQThread2a__queue.BlockingQueue__first), write)) && acc(sys__result.LBQThread2a__queue.BlockingQueue__putLock, wildcard) && acc(sys__result.LBQThread2a__queue.BlockingQueue__takeLock, wildcard)
; [eval] sys__result != null
(declare-const $k@2065 $Perm)
(assert ($Perm.isValidVar $k@2065))
(assert ($Perm.isReadVar $k@2065 $Perm.Write))
(push) ; 5
(assert (not (or (= $k@2065 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (< $k@2065 $Perm.Write))
(declare-const $k@2066 $Perm)
(assert ($Perm.isValidVar $k@2066))
(assert ($Perm.isReadVar $k@2066 $Perm.Write))
(push) ; 5
(assert (not (or (= $k@2066 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (< $k@2066 $k@2010))
; [eval] sys__result.LBQThread2a__queue.BlockingQueue__capacity > 0
(declare-const $k@2067 $Perm)
(assert ($Perm.isValidVar $k@2067))
(assert ($Perm.isReadVar $k@2067 $Perm.Write))
(push) ; 5
(assert (not (or (= $k@2067 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (< $k@2067 $k@2012))
; [eval] sys__result.LBQThread2a__queue.BlockingQueue__count != null
; [eval] sys__result.LBQThread2a__queue.BlockingQueue__first != null
(push) ; 5
(assert (not (not (= $t@2014 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
; [dead then-branch 355] $t@2014 != Null
(push) ; 5
; [else-branch 355] $t@2014 == Null
(declare-const $k@2068 $Perm)
(assert ($Perm.isValidVar $k@2068))
(assert ($Perm.isReadVar $k@2068 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@2068 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(push) ; 6
(assert (not (not (= $k@2043 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= $k@2043 $Perm.No)))
(assert (< $k@2068 $k@2043))
(declare-const $k@2069 $Perm)
(assert ($Perm.isValidVar $k@2069))
(assert ($Perm.isReadVar $k@2069 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@2069 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(push) ; 6
(assert (not (not (= $k@2045 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= $k@2045 $Perm.No)))
(assert (< $k@2069 $k@2045))
; [exec]
; inhale false
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
; ---------- LBQThread2a__forkOperator ----------
(declare-const diz@2070 $Ref)
(push) ; 2
; [eval] diz != null
(assert (not (= diz@2070 $Ref.null)))
(declare-const $k@2071 $Perm)
(assert ($Perm.isValidVar $k@2071))
(assert ($Perm.isReadVar $k@2071 $Perm.Write))
(declare-const $t@2072 $Ref)
(push) ; 3
(assert (not (not (= $k@2071 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 3
(assert (not (= $k@2071 $Perm.No)))
(assert (not (= $t@2072 $Ref.null)))
(declare-const $k@2073 $Perm)
(assert ($Perm.isValidVar $k@2073))
(assert ($Perm.isReadVar $k@2073 $Perm.Write))
(declare-const $t@2074 Int)
; [eval] diz.LBQThread2a__queue.BlockingQueue__capacity > 0
(push) ; 3
(assert (not (not (= $k@2073 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 3
(assert (not (= $k@2073 $Perm.No)))
(assert (> $t@2074 0))
(declare-const $k@2075 $Perm)
(assert ($Perm.isValidVar $k@2075))
(assert ($Perm.isReadVar $k@2075 $Perm.Write))
(declare-const $t@2076 $Ref)
; [eval] diz.LBQThread2a__queue.BlockingQueue__count != null
(push) ; 3
(assert (not (not (= $k@2075 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 3
(assert (not (= $k@2075 $Perm.No)))
(assert (not (= $t@2076 $Ref.null)))
(declare-const $t@2077 $Ref)
; [eval] diz.LBQThread2a__queue.BlockingQueue__first != null
(push) ; 3
(assert (not (= $t@2077 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 3
(push) ; 3
(assert (not (not (= $t@2077 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 3
(push) ; 3
; [then-branch 356] $t@2077 != Null
(assert (not (= $t@2077 $Ref.null)))
(declare-const $t@2078 $Snap)
(declare-const $k@2079 $Perm)
(assert ($Perm.isValidVar $k@2079))
(assert ($Perm.isReadVar $k@2079 $Perm.Write))
(declare-const $t@2080 $Ref)
(declare-const $k@2081 $Perm)
(assert ($Perm.isValidVar $k@2081))
(assert ($Perm.isReadVar $k@2081 $Perm.Write))
(declare-const $t@2082 $Ref)
(push) ; 4
(declare-const $t@2083 $Snap)
(pop) ; 4
(push) ; 4
; [exec]
; inhale false
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch 356] $t@2077 == Null
(assert (= $t@2077 $Ref.null))
(declare-const $k@2084 $Perm)
(assert ($Perm.isValidVar $k@2084))
(assert ($Perm.isReadVar $k@2084 $Perm.Write))
(declare-const $t@2085 $Ref)
(declare-const $k@2086 $Perm)
(assert ($Perm.isValidVar $k@2086))
(assert ($Perm.isReadVar $k@2086 $Perm.Write))
(declare-const $t@2087 $Ref)
(push) ; 4
(declare-const $t@2088 $Snap)
(pop) ; 4
(push) ; 4
; [exec]
; inhale false
(pop) ; 4
(pop) ; 3
(pop) ; 2
; ---------- LBQThread2a__joinOperator ----------
(declare-const diz@2089 $Ref)
(push) ; 2
; [eval] diz != null
(assert (not (= diz@2089 $Ref.null)))
(declare-const $t@2090 $Snap)
(push) ; 3
(declare-const $k@2091 $Perm)
(assert ($Perm.isValidVar $k@2091))
(assert ($Perm.isReadVar $k@2091 $Perm.Write))
(declare-const $t@2092 $Ref)
(push) ; 4
(assert (not (not (= $k@2091 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 4
(assert (not (= $k@2091 $Perm.No)))
(assert (not (= $t@2092 $Ref.null)))
(declare-const $k@2093 $Perm)
(assert ($Perm.isValidVar $k@2093))
(assert ($Perm.isReadVar $k@2093 $Perm.Write))
(declare-const $t@2094 Int)
; [eval] diz.LBQThread2a__queue.BlockingQueue__capacity > 0
(push) ; 4
(assert (not (not (= $k@2093 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 4
(assert (not (= $k@2093 $Perm.No)))
(assert (> $t@2094 0))
(declare-const $k@2095 $Perm)
(assert ($Perm.isValidVar $k@2095))
(assert ($Perm.isReadVar $k@2095 $Perm.Write))
(declare-const $t@2096 $Ref)
; [eval] diz.LBQThread2a__queue.BlockingQueue__count != null
(push) ; 4
(assert (not (not (= $k@2095 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 4
(assert (not (= $k@2095 $Perm.No)))
(assert (not (= $t@2096 $Ref.null)))
(declare-const $t@2097 $Ref)
; [eval] diz.LBQThread2a__queue.BlockingQueue__first != null
(push) ; 4
(assert (not (= $t@2097 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 4
(push) ; 4
(assert (not (not (= $t@2097 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 4
(push) ; 4
; [then-branch 357] $t@2097 != Null
(assert (not (= $t@2097 $Ref.null)))
(declare-const $t@2098 $Snap)
(declare-const $k@2099 $Perm)
(assert ($Perm.isValidVar $k@2099))
(assert ($Perm.isReadVar $k@2099 $Perm.Write))
(declare-const $t@2100 $Ref)
(declare-const $k@2101 $Perm)
(assert ($Perm.isValidVar $k@2101))
(assert ($Perm.isReadVar $k@2101 $Perm.Write))
(declare-const $t@2102 $Ref)
(pop) ; 4
(push) ; 4
; [else-branch 357] $t@2097 == Null
(assert (= $t@2097 $Ref.null))
(declare-const $k@2103 $Perm)
(assert ($Perm.isValidVar $k@2103))
(assert ($Perm.isReadVar $k@2103 $Perm.Write))
(declare-const $t@2104 $Ref)
(declare-const $k@2105 $Perm)
(assert ($Perm.isValidVar $k@2105))
(assert ($Perm.isReadVar $k@2105 $Perm.Write))
(declare-const $t@2106 $Ref)
(pop) ; 4
(pop) ; 3
(push) ; 3
; [exec]
; inhale false
(pop) ; 3
(pop) ; 2
; ---------- LBQThread2a__run ----------
(declare-const diz@2107 $Ref)
(push) ; 2
; [eval] diz != null
(assert (not (= diz@2107 $Ref.null)))
(declare-const $k@2108 $Perm)
(assert ($Perm.isValidVar $k@2108))
(assert ($Perm.isReadVar $k@2108 $Perm.Write))
(declare-const $t@2109 $Ref)
(push) ; 3
(assert (not (not (= $k@2108 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 3
(assert (not (= $k@2108 $Perm.No)))
(assert (not (= $t@2109 $Ref.null)))
(declare-const $k@2110 $Perm)
(assert ($Perm.isValidVar $k@2110))
(assert ($Perm.isReadVar $k@2110 $Perm.Write))
(declare-const $t@2111 Int)
; [eval] diz.LBQThread2a__queue.BlockingQueue__capacity > 0
(push) ; 3
(assert (not (not (= $k@2110 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 3
(assert (not (= $k@2110 $Perm.No)))
(assert (> $t@2111 0))
(declare-const $k@2112 $Perm)
(assert ($Perm.isValidVar $k@2112))
(assert ($Perm.isReadVar $k@2112 $Perm.Write))
(declare-const $t@2113 $Ref)
; [eval] diz.LBQThread2a__queue.BlockingQueue__count != null
(push) ; 3
(assert (not (not (= $k@2112 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 3
(assert (not (= $k@2112 $Perm.No)))
(assert (not (= $t@2113 $Ref.null)))
(declare-const $t@2114 $Ref)
; [eval] diz.LBQThread2a__queue.BlockingQueue__first != null
(push) ; 3
(assert (not (= $t@2114 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 3
(push) ; 3
(assert (not (not (= $t@2114 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 3
(push) ; 3
; [then-branch 358] $t@2114 != Null
(assert (not (= $t@2114 $Ref.null)))
(declare-const $t@2115 $Snap)
(declare-const $k@2116 $Perm)
(assert ($Perm.isValidVar $k@2116))
(assert ($Perm.isReadVar $k@2116 $Perm.Write))
(declare-const $t@2117 $Ref)
(declare-const $k@2118 $Perm)
(assert ($Perm.isValidVar $k@2118))
(assert ($Perm.isReadVar $k@2118 $Perm.Write))
(declare-const $t@2119 $Ref)
(push) ; 4
(declare-const $k@2120 $Perm)
(assert ($Perm.isValidVar $k@2120))
(assert ($Perm.isReadVar $k@2120 $Perm.Write))
(declare-const $t@2121 $Ref)
(push) ; 5
(assert (not (not (= $k@2120 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@2120 $Perm.No)))
(assert (not (= $t@2121 $Ref.null)))
(declare-const $k@2122 $Perm)
(assert ($Perm.isValidVar $k@2122))
(assert ($Perm.isReadVar $k@2122 $Perm.Write))
(declare-const $t@2123 Int)
; [eval] diz.LBQThread2a__queue.BlockingQueue__capacity > 0
(push) ; 5
(assert (not (not (= $k@2122 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@2122 $Perm.No)))
(assert (> $t@2123 0))
(declare-const $k@2124 $Perm)
(assert ($Perm.isValidVar $k@2124))
(assert ($Perm.isReadVar $k@2124 $Perm.Write))
(declare-const $t@2125 $Ref)
; [eval] diz.LBQThread2a__queue.BlockingQueue__count != null
(push) ; 5
(assert (not (not (= $k@2124 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@2124 $Perm.No)))
(assert (not (= $t@2125 $Ref.null)))
(declare-const $t@2126 $Ref)
; [eval] diz.LBQThread2a__queue.BlockingQueue__first != null
(push) ; 5
(assert (not (= $t@2126 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
(assert (not (not (= $t@2126 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
; [then-branch 359] $t@2126 != Null
(assert (not (= $t@2126 $Ref.null)))
(declare-const $t@2127 $Snap)
(declare-const $k@2128 $Perm)
(assert ($Perm.isValidVar $k@2128))
(assert ($Perm.isReadVar $k@2128 $Perm.Write))
(declare-const $t@2129 $Ref)
(declare-const $k@2130 $Perm)
(assert ($Perm.isValidVar $k@2130))
(assert ($Perm.isReadVar $k@2130 $Perm.Write))
(declare-const $t@2131 $Ref)
(pop) ; 5
(push) ; 5
; [else-branch 359] $t@2126 == Null
(assert (= $t@2126 $Ref.null))
(declare-const $k@2132 $Perm)
(assert ($Perm.isValidVar $k@2132))
(assert ($Perm.isReadVar $k@2132 $Perm.Write))
(declare-const $t@2133 $Ref)
(declare-const $k@2134 $Perm)
(assert ($Perm.isValidVar $k@2134))
(assert ($Perm.isReadVar $k@2134 $Perm.Write))
(declare-const $t@2135 $Ref)
(pop) ; 5
(pop) ; 4
(push) ; 4
; [exec]
; BlockingQueue__put(diz.LBQThread2a__queue, 1)
; [eval] diz != null
(declare-const $k@2136 $Perm)
(assert ($Perm.isValidVar $k@2136))
(assert ($Perm.isReadVar $k@2136 $Perm.Write))
(push) ; 5
(assert (not (or (= $k@2136 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (< $k@2136 $k@2110))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@2137 $Perm)
(assert ($Perm.isValidVar $k@2137))
(assert ($Perm.isReadVar $k@2137 $Perm.Write))
(push) ; 5
(assert (not (or (= $k@2137 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (< $k@2137 $k@2112))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 5
(assert (not (= $t@2114 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
; [then-branch 360] $t@2114 != Null
(declare-const $k@2138 $Perm)
(assert ($Perm.isValidVar $k@2138))
(assert ($Perm.isReadVar $k@2138 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@2138 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(push) ; 6
(assert (not (not (= $k@2116 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= $k@2116 $Perm.No)))
(assert (< $k@2138 $k@2116))
(declare-const $k@2139 $Perm)
(assert ($Perm.isValidVar $k@2139))
(assert ($Perm.isReadVar $k@2139 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@2139 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(push) ; 6
(assert (not (not (= $k@2118 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= $k@2118 $Perm.No)))
(assert (< $k@2139 $k@2118))
(declare-const $t@2140 $Snap)
(declare-const $t@2141 $Snap)
(declare-const $t@2142 $Ref)
(assert (= $t@2140 ($Snap.combine $t@2141 ($SortWrappers.$RefTo$Snap $t@2142))))
(declare-const $t@2143 $Snap)
(declare-const $t@2144 $Ref)
(assert (= $t@2141 ($Snap.combine $t@2143 ($SortWrappers.$RefTo$Snap $t@2144))))
(declare-const $t@2145 $Snap)
(declare-const $t@2146 $Snap)
(assert (= $t@2143 ($Snap.combine $t@2145 $t@2146)))
(declare-const $t@2147 $Snap)
(declare-const $t@2148 $Ref)
(assert (= $t@2145 ($Snap.combine $t@2147 ($SortWrappers.$RefTo$Snap $t@2148))))
(declare-const $t@2149 $Snap)
(assert (= $t@2147 ($Snap.combine $t@2149 $Snap.unit)))
(declare-const $t@2150 Int)
(declare-const $t@2151 $Ref)
(assert (=
  $t@2149
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@2150)
    ($SortWrappers.$RefTo$Snap $t@2151))))
(declare-const $t@2152 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@2150)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@2152) $Snap.unit)))
(declare-const $k@2153 $Perm)
(assert ($Perm.isValidVar $k@2153))
(assert ($Perm.isReadVar $k@2153 $Perm.Write))
(assert (implies (< $Perm.No (- $k@2110 $k@2136)) (= $t@2152 $t@2111)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 6
(assert (not (not (= (+ (- $k@2110 $k@2136) $k@2153) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= (+ (- $k@2110 $k@2136) $k@2153) $Perm.No)))
(assert (> $t@2152 0))
(declare-const $k@2154 $Perm)
(assert ($Perm.isValidVar $k@2154))
(assert ($Perm.isReadVar $k@2154 $Perm.Write))
(assert (implies (< $Perm.No (- $k@2112 $k@2137)) (= $t@2151 $t@2113)))
; [eval] diz.BlockingQueue__count != null
(push) ; 6
(assert (not (not (= (+ (- $k@2112 $k@2137) $k@2154) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= (+ (- $k@2112 $k@2137) $k@2154) $Perm.No)))
(assert (not (= $t@2151 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 6
(assert (not (= $t@2148 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 6
(push) ; 6
(assert (not (not (= $t@2148 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 6
(push) ; 6
; [then-branch 361] $t@2148 != Null
(assert (not (= $t@2148 $Ref.null)))
(declare-const $k@2155 $Perm)
(assert ($Perm.isValidVar $k@2155))
(assert ($Perm.isReadVar $k@2155 $Perm.Write))
(assert (implies (< $Perm.No (- $k@2116 $k@2138)) (= $t@2144 $t@2117)))
(declare-const $k@2156 $Perm)
(assert ($Perm.isValidVar $k@2156))
(assert ($Perm.isReadVar $k@2156 $Perm.Write))
(assert (implies (< $Perm.No (- $k@2118 $k@2139)) (= $t@2142 $t@2119)))
(declare-const $k@2157 $Perm)
(assert ($Perm.isValidVar $k@2157))
(assert ($Perm.isReadVar $k@2157 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@2157 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@2157 $k@2108))
(declare-const $k@2158 $Perm)
(assert ($Perm.isValidVar $k@2158))
(assert ($Perm.isReadVar $k@2158 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@2158 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@2158 (+ (- $k@2110 $k@2136) $k@2153)))
; [eval] diz.LBQThread2a__queue.BlockingQueue__capacity > 0
(declare-const $k@2159 $Perm)
(assert ($Perm.isValidVar $k@2159))
(assert ($Perm.isReadVar $k@2159 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@2159 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@2159 (+ (- $k@2112 $k@2137) $k@2154)))
; [eval] diz.LBQThread2a__queue.BlockingQueue__count != null
; [eval] diz.LBQThread2a__queue.BlockingQueue__first != null
(push) ; 7
(assert (not (= $t@2148 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 7
(push) ; 7
; [then-branch 362] $t@2148 != Null
(declare-const $k@2160 $Perm)
(assert ($Perm.isValidVar $k@2160))
(assert ($Perm.isReadVar $k@2160 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@2160 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= (+ (- $k@2116 $k@2138) $k@2155) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- $k@2116 $k@2138) $k@2155) $Perm.No)))
(assert (< $k@2160 (+ (- $k@2116 $k@2138) $k@2155)))
(declare-const $k@2161 $Perm)
(assert ($Perm.isValidVar $k@2161))
(assert ($Perm.isReadVar $k@2161 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@2161 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= (+ (- $k@2118 $k@2139) $k@2156) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- $k@2118 $k@2139) $k@2156) $Perm.No)))
(assert (< $k@2161 (+ (- $k@2118 $k@2139) $k@2156)))
(pop) ; 7
; [dead else-branch 362] $t@2148 == Null
(pop) ; 6
(push) ; 6
; [else-branch 361] $t@2148 == Null
(assert (= $t@2148 $Ref.null))
(declare-const $k@2162 $Perm)
(assert ($Perm.isValidVar $k@2162))
(assert ($Perm.isReadVar $k@2162 $Perm.Write))
(assert (implies (< $Perm.No (- $k@2116 $k@2138)) (= $t@2144 $t@2117)))
(declare-const $k@2163 $Perm)
(assert ($Perm.isValidVar $k@2163))
(assert ($Perm.isReadVar $k@2163 $Perm.Write))
(assert (implies (< $Perm.No (- $k@2118 $k@2139)) (= $t@2142 $t@2119)))
(declare-const $k@2164 $Perm)
(assert ($Perm.isValidVar $k@2164))
(assert ($Perm.isReadVar $k@2164 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@2164 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@2164 $k@2108))
(declare-const $k@2165 $Perm)
(assert ($Perm.isValidVar $k@2165))
(assert ($Perm.isReadVar $k@2165 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@2165 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@2165 (+ (- $k@2110 $k@2136) $k@2153)))
; [eval] diz.LBQThread2a__queue.BlockingQueue__capacity > 0
(declare-const $k@2166 $Perm)
(assert ($Perm.isValidVar $k@2166))
(assert ($Perm.isReadVar $k@2166 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@2166 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@2166 (+ (- $k@2112 $k@2137) $k@2154)))
; [eval] diz.LBQThread2a__queue.BlockingQueue__count != null
; [eval] diz.LBQThread2a__queue.BlockingQueue__first != null
(push) ; 7
(assert (not (not (= $t@2148 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 7
; [dead then-branch 363] $t@2148 != Null
(push) ; 7
; [else-branch 363] $t@2148 == Null
(declare-const $k@2167 $Perm)
(assert ($Perm.isValidVar $k@2167))
(assert ($Perm.isReadVar $k@2167 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@2167 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= (+ (- $k@2116 $k@2138) $k@2162) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- $k@2116 $k@2138) $k@2162) $Perm.No)))
(assert (< $k@2167 (+ (- $k@2116 $k@2138) $k@2162)))
(declare-const $k@2168 $Perm)
(assert ($Perm.isValidVar $k@2168))
(assert ($Perm.isReadVar $k@2168 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@2168 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= (+ (- $k@2118 $k@2139) $k@2163) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- $k@2118 $k@2139) $k@2163) $Perm.No)))
(assert (< $k@2168 (+ (- $k@2118 $k@2139) $k@2163)))
(pop) ; 7
(pop) ; 6
(pop) ; 5
; [dead else-branch 360] $t@2114 == Null
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch 358] $t@2114 == Null
(assert (= $t@2114 $Ref.null))
(declare-const $k@2169 $Perm)
(assert ($Perm.isValidVar $k@2169))
(assert ($Perm.isReadVar $k@2169 $Perm.Write))
(declare-const $t@2170 $Ref)
(declare-const $k@2171 $Perm)
(assert ($Perm.isValidVar $k@2171))
(assert ($Perm.isReadVar $k@2171 $Perm.Write))
(declare-const $t@2172 $Ref)
(push) ; 4
(declare-const $k@2173 $Perm)
(assert ($Perm.isValidVar $k@2173))
(assert ($Perm.isReadVar $k@2173 $Perm.Write))
(declare-const $t@2174 $Ref)
(push) ; 5
(assert (not (not (= $k@2173 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@2173 $Perm.No)))
(assert (not (= $t@2174 $Ref.null)))
(declare-const $k@2175 $Perm)
(assert ($Perm.isValidVar $k@2175))
(assert ($Perm.isReadVar $k@2175 $Perm.Write))
(declare-const $t@2176 Int)
; [eval] diz.LBQThread2a__queue.BlockingQueue__capacity > 0
(push) ; 5
(assert (not (not (= $k@2175 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@2175 $Perm.No)))
(assert (> $t@2176 0))
(declare-const $k@2177 $Perm)
(assert ($Perm.isValidVar $k@2177))
(assert ($Perm.isReadVar $k@2177 $Perm.Write))
(declare-const $t@2178 $Ref)
; [eval] diz.LBQThread2a__queue.BlockingQueue__count != null
(push) ; 5
(assert (not (not (= $k@2177 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@2177 $Perm.No)))
(assert (not (= $t@2178 $Ref.null)))
(declare-const $t@2179 $Ref)
; [eval] diz.LBQThread2a__queue.BlockingQueue__first != null
(push) ; 5
(assert (not (= $t@2179 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
(assert (not (not (= $t@2179 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
; [then-branch 364] $t@2179 != Null
(assert (not (= $t@2179 $Ref.null)))
(declare-const $t@2180 $Snap)
(declare-const $k@2181 $Perm)
(assert ($Perm.isValidVar $k@2181))
(assert ($Perm.isReadVar $k@2181 $Perm.Write))
(declare-const $t@2182 $Ref)
(declare-const $k@2183 $Perm)
(assert ($Perm.isValidVar $k@2183))
(assert ($Perm.isReadVar $k@2183 $Perm.Write))
(declare-const $t@2184 $Ref)
(pop) ; 5
(push) ; 5
; [else-branch 364] $t@2179 == Null
(assert (= $t@2179 $Ref.null))
(declare-const $k@2185 $Perm)
(assert ($Perm.isValidVar $k@2185))
(assert ($Perm.isReadVar $k@2185 $Perm.Write))
(declare-const $t@2186 $Ref)
(declare-const $k@2187 $Perm)
(assert ($Perm.isValidVar $k@2187))
(assert ($Perm.isReadVar $k@2187 $Perm.Write))
(declare-const $t@2188 $Ref)
(pop) ; 5
(pop) ; 4
(push) ; 4
; [exec]
; BlockingQueue__put(diz.LBQThread2a__queue, 1)
; [eval] diz != null
(declare-const $k@2189 $Perm)
(assert ($Perm.isValidVar $k@2189))
(assert ($Perm.isReadVar $k@2189 $Perm.Write))
(push) ; 5
(assert (not (or (= $k@2189 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (< $k@2189 $k@2110))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@2190 $Perm)
(assert ($Perm.isValidVar $k@2190))
(assert ($Perm.isReadVar $k@2190 $Perm.Write))
(push) ; 5
(assert (not (or (= $k@2190 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (< $k@2190 $k@2112))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 5
(assert (not (not (= $t@2114 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
; [dead then-branch 365] $t@2114 != Null
(push) ; 5
; [else-branch 365] $t@2114 == Null
(declare-const $k@2191 $Perm)
(assert ($Perm.isValidVar $k@2191))
(assert ($Perm.isReadVar $k@2191 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@2191 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(push) ; 6
(assert (not (not (= $k@2169 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= $k@2169 $Perm.No)))
(assert (< $k@2191 $k@2169))
(declare-const $k@2192 $Perm)
(assert ($Perm.isValidVar $k@2192))
(assert ($Perm.isReadVar $k@2192 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@2192 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(push) ; 6
(assert (not (not (= $k@2171 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= $k@2171 $Perm.No)))
(assert (< $k@2192 $k@2171))
(declare-const $t@2193 $Snap)
(declare-const $t@2194 $Snap)
(declare-const $t@2195 $Ref)
(assert (= $t@2193 ($Snap.combine $t@2194 ($SortWrappers.$RefTo$Snap $t@2195))))
(declare-const $t@2196 $Snap)
(declare-const $t@2197 $Ref)
(assert (= $t@2194 ($Snap.combine $t@2196 ($SortWrappers.$RefTo$Snap $t@2197))))
(declare-const $t@2198 $Snap)
(declare-const $t@2199 $Snap)
(assert (= $t@2196 ($Snap.combine $t@2198 $t@2199)))
(declare-const $t@2200 $Snap)
(declare-const $t@2201 $Ref)
(assert (= $t@2198 ($Snap.combine $t@2200 ($SortWrappers.$RefTo$Snap $t@2201))))
(declare-const $t@2202 $Snap)
(assert (= $t@2200 ($Snap.combine $t@2202 $Snap.unit)))
(declare-const $t@2203 Int)
(declare-const $t@2204 $Ref)
(assert (=
  $t@2202
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@2203)
    ($SortWrappers.$RefTo$Snap $t@2204))))
(declare-const $t@2205 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@2203)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@2205) $Snap.unit)))
(declare-const $k@2206 $Perm)
(assert ($Perm.isValidVar $k@2206))
(assert ($Perm.isReadVar $k@2206 $Perm.Write))
(assert (implies (< $Perm.No (- $k@2110 $k@2189)) (= $t@2205 $t@2111)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 6
(assert (not (not (= (+ (- $k@2110 $k@2189) $k@2206) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= (+ (- $k@2110 $k@2189) $k@2206) $Perm.No)))
(assert (> $t@2205 0))
(declare-const $k@2207 $Perm)
(assert ($Perm.isValidVar $k@2207))
(assert ($Perm.isReadVar $k@2207 $Perm.Write))
(assert (implies (< $Perm.No (- $k@2112 $k@2190)) (= $t@2204 $t@2113)))
; [eval] diz.BlockingQueue__count != null
(push) ; 6
(assert (not (not (= (+ (- $k@2112 $k@2190) $k@2207) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= (+ (- $k@2112 $k@2190) $k@2207) $Perm.No)))
(assert (not (= $t@2204 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 6
(assert (not (= $t@2201 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 6
(push) ; 6
(assert (not (not (= $t@2201 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 6
(push) ; 6
; [then-branch 366] $t@2201 != Null
(assert (not (= $t@2201 $Ref.null)))
(declare-const $k@2208 $Perm)
(assert ($Perm.isValidVar $k@2208))
(assert ($Perm.isReadVar $k@2208 $Perm.Write))
(assert (implies (< $Perm.No (- $k@2169 $k@2191)) (= $t@2197 $t@2170)))
(declare-const $k@2209 $Perm)
(assert ($Perm.isValidVar $k@2209))
(assert ($Perm.isReadVar $k@2209 $Perm.Write))
(assert (implies (< $Perm.No (- $k@2171 $k@2192)) (= $t@2195 $t@2172)))
(declare-const $k@2210 $Perm)
(assert ($Perm.isValidVar $k@2210))
(assert ($Perm.isReadVar $k@2210 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@2210 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@2210 $k@2108))
(declare-const $k@2211 $Perm)
(assert ($Perm.isValidVar $k@2211))
(assert ($Perm.isReadVar $k@2211 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@2211 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@2211 (+ (- $k@2110 $k@2189) $k@2206)))
; [eval] diz.LBQThread2a__queue.BlockingQueue__capacity > 0
(declare-const $k@2212 $Perm)
(assert ($Perm.isValidVar $k@2212))
(assert ($Perm.isReadVar $k@2212 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@2212 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@2212 (+ (- $k@2112 $k@2190) $k@2207)))
; [eval] diz.LBQThread2a__queue.BlockingQueue__count != null
; [eval] diz.LBQThread2a__queue.BlockingQueue__first != null
(push) ; 7
(assert (not (= $t@2201 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 7
(push) ; 7
; [then-branch 367] $t@2201 != Null
(declare-const $k@2213 $Perm)
(assert ($Perm.isValidVar $k@2213))
(assert ($Perm.isReadVar $k@2213 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@2213 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= (+ (- $k@2169 $k@2191) $k@2208) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- $k@2169 $k@2191) $k@2208) $Perm.No)))
(assert (< $k@2213 (+ (- $k@2169 $k@2191) $k@2208)))
(declare-const $k@2214 $Perm)
(assert ($Perm.isValidVar $k@2214))
(assert ($Perm.isReadVar $k@2214 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@2214 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= (+ (- $k@2171 $k@2192) $k@2209) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- $k@2171 $k@2192) $k@2209) $Perm.No)))
(assert (< $k@2214 (+ (- $k@2171 $k@2192) $k@2209)))
(pop) ; 7
; [dead else-branch 367] $t@2201 == Null
(pop) ; 6
(push) ; 6
; [else-branch 366] $t@2201 == Null
(assert (= $t@2201 $Ref.null))
(declare-const $k@2215 $Perm)
(assert ($Perm.isValidVar $k@2215))
(assert ($Perm.isReadVar $k@2215 $Perm.Write))
(assert (implies (< $Perm.No (- $k@2169 $k@2191)) (= $t@2197 $t@2170)))
(declare-const $k@2216 $Perm)
(assert ($Perm.isValidVar $k@2216))
(assert ($Perm.isReadVar $k@2216 $Perm.Write))
(assert (implies (< $Perm.No (- $k@2171 $k@2192)) (= $t@2195 $t@2172)))
(declare-const $k@2217 $Perm)
(assert ($Perm.isValidVar $k@2217))
(assert ($Perm.isReadVar $k@2217 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@2217 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@2217 $k@2108))
(declare-const $k@2218 $Perm)
(assert ($Perm.isValidVar $k@2218))
(assert ($Perm.isReadVar $k@2218 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@2218 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@2218 (+ (- $k@2110 $k@2189) $k@2206)))
; [eval] diz.LBQThread2a__queue.BlockingQueue__capacity > 0
(declare-const $k@2219 $Perm)
(assert ($Perm.isValidVar $k@2219))
(assert ($Perm.isReadVar $k@2219 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@2219 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@2219 (+ (- $k@2112 $k@2190) $k@2207)))
; [eval] diz.LBQThread2a__queue.BlockingQueue__count != null
; [eval] diz.LBQThread2a__queue.BlockingQueue__first != null
(push) ; 7
(assert (not (not (= $t@2201 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 7
; [dead then-branch 368] $t@2201 != Null
(push) ; 7
; [else-branch 368] $t@2201 == Null
(declare-const $k@2220 $Perm)
(assert ($Perm.isValidVar $k@2220))
(assert ($Perm.isReadVar $k@2220 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@2220 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= (+ (- $k@2169 $k@2191) $k@2215) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- $k@2169 $k@2191) $k@2215) $Perm.No)))
(assert (< $k@2220 (+ (- $k@2169 $k@2191) $k@2215)))
(declare-const $k@2221 $Perm)
(assert ($Perm.isValidVar $k@2221))
(assert ($Perm.isReadVar $k@2221 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@2221 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= (+ (- $k@2171 $k@2192) $k@2216) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- $k@2171 $k@2192) $k@2216) $Perm.No)))
(assert (< $k@2221 (+ (- $k@2171 $k@2192) $k@2216)))
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
; ---------- LBQThread2b__LBQThread2b ----------
(declare-const queue@2222 $Ref)
(declare-const sys__result@2223 $Ref)
(declare-const diz@2224 $Ref)
(declare-const __flatten_62@2225 $Ref)
(declare-const __flatten_144@2226 $Ref)
(push) ; 2
(assert (not (= queue@2222 $Ref.null)))
(declare-const $k@2227 $Perm)
(assert ($Perm.isValidVar $k@2227))
(assert ($Perm.isReadVar $k@2227 $Perm.Write))
(declare-const $t@2228 Int)
; [eval] queue.BlockingQueue__capacity > 0
(push) ; 3
(assert (not (not (= $k@2227 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 3
(assert (not (= $k@2227 $Perm.No)))
(assert (> $t@2228 0))
(declare-const $k@2229 $Perm)
(assert ($Perm.isValidVar $k@2229))
(assert ($Perm.isReadVar $k@2229 $Perm.Write))
(declare-const $t@2230 $Ref)
; [eval] queue.BlockingQueue__count != null
(push) ; 3
(assert (not (not (= $k@2229 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 3
(assert (not (= $k@2229 $Perm.No)))
(assert (not (= $t@2230 $Ref.null)))
(declare-const $t@2231 $Ref)
; [eval] queue.BlockingQueue__first != null
(push) ; 3
(assert (not (= $t@2231 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 3
(push) ; 3
(assert (not (not (= $t@2231 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 3
(push) ; 3
; [then-branch 369] $t@2231 != Null
(assert (not (= $t@2231 $Ref.null)))
(declare-const $t@2232 $Snap)
(declare-const $k@2233 $Perm)
(assert ($Perm.isValidVar $k@2233))
(assert ($Perm.isReadVar $k@2233 $Perm.Write))
(declare-const $t@2234 $Ref)
(declare-const $k@2235 $Perm)
(assert ($Perm.isValidVar $k@2235))
(assert ($Perm.isReadVar $k@2235 $Perm.Write))
(declare-const $t@2236 $Ref)
(push) ; 4
; [eval] sys__result != null
(assert (not (= sys__result@2223 $Ref.null)))
(declare-const $k@2237 $Perm)
(assert ($Perm.isValidVar $k@2237))
(assert ($Perm.isReadVar $k@2237 $Perm.Write))
(declare-const $t@2238 $Ref)
(push) ; 5
(assert (not (not (= $k@2237 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@2237 $Perm.No)))
(assert (not (= $t@2238 $Ref.null)))
(declare-const $k@2239 $Perm)
(assert ($Perm.isValidVar $k@2239))
(assert ($Perm.isReadVar $k@2239 $Perm.Write))
(declare-const $t@2240 Int)
; [eval] sys__result.LBQThread2b__queue.BlockingQueue__capacity > 0
(push) ; 5
(assert (not (not (= $k@2239 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@2239 $Perm.No)))
(assert (> $t@2240 0))
(declare-const $k@2241 $Perm)
(assert ($Perm.isValidVar $k@2241))
(assert ($Perm.isReadVar $k@2241 $Perm.Write))
(declare-const $t@2242 $Ref)
; [eval] sys__result.LBQThread2b__queue.BlockingQueue__count != null
(push) ; 5
(assert (not (not (= $k@2241 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@2241 $Perm.No)))
(assert (not (= $t@2242 $Ref.null)))
(declare-const $t@2243 $Ref)
; [eval] sys__result.LBQThread2b__queue.BlockingQueue__first != null
(push) ; 5
(assert (not (= $t@2243 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
(assert (not (not (= $t@2243 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
; [then-branch 370] $t@2243 != Null
(assert (not (= $t@2243 $Ref.null)))
(declare-const $t@2244 $Snap)
(declare-const $k@2245 $Perm)
(assert ($Perm.isValidVar $k@2245))
(assert ($Perm.isReadVar $k@2245 $Perm.Write))
(declare-const $t@2246 $Ref)
(declare-const $k@2247 $Perm)
(assert ($Perm.isValidVar $k@2247))
(assert ($Perm.isReadVar $k@2247 $Perm.Write))
(declare-const $t@2248 $Ref)
(pop) ; 5
(push) ; 5
; [else-branch 370] $t@2243 == Null
(assert (= $t@2243 $Ref.null))
(declare-const $k@2249 $Perm)
(assert ($Perm.isValidVar $k@2249))
(assert ($Perm.isReadVar $k@2249 $Perm.Write))
(declare-const $t@2250 $Ref)
(declare-const $k@2251 $Perm)
(assert ($Perm.isValidVar $k@2251))
(assert ($Perm.isReadVar $k@2251 $Perm.Write))
(declare-const $t@2252 $Ref)
(pop) ; 5
(pop) ; 4
(push) ; 4
; [exec]
; diz := new(LBQThread2b__queue)
(declare-const diz@2253 $Ref)
(assert (not (= diz@2253 $Ref.null)))
(declare-const LBQThread2b__queue@2254 $Ref)
(assert (and
  (not (= queue@2222 diz@2253))
  (not (= sys__result@2223 diz@2253))
  (not (= __flatten_62@2225 diz@2253))
  (not (= __flatten_144@2226 diz@2253))
  (not (= $t@2231 diz@2253))
  (not (= LBQThread2b__queue@2254 diz@2253))
  (not (= $t@2230 diz@2253))
  (not (= $t@2234 diz@2253))
  (not (= $t@2236 diz@2253))))
; [exec]
; __flatten_62 := queue
; [exec]
; __flatten_144 := __flatten_62
; [exec]
; diz.LBQThread2b__queue := __flatten_144
; [exec]
; sys__result := diz
; [exec]
; assert (sys__result != null) && acc(sys__result.LBQThread2b__queue, wildcard) && acc(sys__result.LBQThread2b__queue.BlockingQueue__capacity, wildcard) && (sys__result.LBQThread2b__queue.BlockingQueue__capacity > 0) && acc(sys__result.LBQThread2b__queue.BlockingQueue__count, wildcard) && (sys__result.LBQThread2b__queue.BlockingQueue__count != null) && acc(sys__result.LBQThread2b__queue.BlockingQueue__first, write) && ((sys__result.LBQThread2b__queue.BlockingQueue__first != null) ==> acc(Node__state(sys__result.LBQThread2b__queue.BlockingQueue__first), write)) && acc(sys__result.LBQThread2b__queue.BlockingQueue__putLock, wildcard) && acc(sys__result.LBQThread2b__queue.BlockingQueue__takeLock, wildcard)
; [eval] sys__result != null
(declare-const $k@2255 $Perm)
(assert ($Perm.isValidVar $k@2255))
(assert ($Perm.isReadVar $k@2255 $Perm.Write))
(push) ; 5
(assert (not (or (= $k@2255 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (< $k@2255 $Perm.Write))
(declare-const $k@2256 $Perm)
(assert ($Perm.isValidVar $k@2256))
(assert ($Perm.isReadVar $k@2256 $Perm.Write))
(push) ; 5
(assert (not (or (= $k@2256 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (< $k@2256 $k@2227))
; [eval] sys__result.LBQThread2b__queue.BlockingQueue__capacity > 0
(declare-const $k@2257 $Perm)
(assert ($Perm.isValidVar $k@2257))
(assert ($Perm.isReadVar $k@2257 $Perm.Write))
(push) ; 5
(assert (not (or (= $k@2257 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (< $k@2257 $k@2229))
; [eval] sys__result.LBQThread2b__queue.BlockingQueue__count != null
; [eval] sys__result.LBQThread2b__queue.BlockingQueue__first != null
(push) ; 5
(assert (not (= $t@2231 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
; [then-branch 371] $t@2231 != Null
(declare-const $k@2258 $Perm)
(assert ($Perm.isValidVar $k@2258))
(assert ($Perm.isReadVar $k@2258 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@2258 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(push) ; 6
(assert (not (not (= $k@2233 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= $k@2233 $Perm.No)))
(assert (< $k@2258 $k@2233))
(declare-const $k@2259 $Perm)
(assert ($Perm.isValidVar $k@2259))
(assert ($Perm.isReadVar $k@2259 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@2259 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(push) ; 6
(assert (not (not (= $k@2235 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= $k@2235 $Perm.No)))
(assert (< $k@2259 $k@2235))
; [exec]
; inhale false
(pop) ; 5
; [dead else-branch 371] $t@2231 == Null
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch 369] $t@2231 == Null
(assert (= $t@2231 $Ref.null))
(declare-const $k@2260 $Perm)
(assert ($Perm.isValidVar $k@2260))
(assert ($Perm.isReadVar $k@2260 $Perm.Write))
(declare-const $t@2261 $Ref)
(declare-const $k@2262 $Perm)
(assert ($Perm.isValidVar $k@2262))
(assert ($Perm.isReadVar $k@2262 $Perm.Write))
(declare-const $t@2263 $Ref)
(push) ; 4
; [eval] sys__result != null
(assert (not (= sys__result@2223 $Ref.null)))
(declare-const $k@2264 $Perm)
(assert ($Perm.isValidVar $k@2264))
(assert ($Perm.isReadVar $k@2264 $Perm.Write))
(declare-const $t@2265 $Ref)
(push) ; 5
(assert (not (not (= $k@2264 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@2264 $Perm.No)))
(assert (not (= $t@2265 $Ref.null)))
(declare-const $k@2266 $Perm)
(assert ($Perm.isValidVar $k@2266))
(assert ($Perm.isReadVar $k@2266 $Perm.Write))
(declare-const $t@2267 Int)
; [eval] sys__result.LBQThread2b__queue.BlockingQueue__capacity > 0
(push) ; 5
(assert (not (not (= $k@2266 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@2266 $Perm.No)))
(assert (> $t@2267 0))
(declare-const $k@2268 $Perm)
(assert ($Perm.isValidVar $k@2268))
(assert ($Perm.isReadVar $k@2268 $Perm.Write))
(declare-const $t@2269 $Ref)
; [eval] sys__result.LBQThread2b__queue.BlockingQueue__count != null
(push) ; 5
(assert (not (not (= $k@2268 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@2268 $Perm.No)))
(assert (not (= $t@2269 $Ref.null)))
(declare-const $t@2270 $Ref)
; [eval] sys__result.LBQThread2b__queue.BlockingQueue__first != null
(push) ; 5
(assert (not (= $t@2270 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
(assert (not (not (= $t@2270 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
; [then-branch 372] $t@2270 != Null
(assert (not (= $t@2270 $Ref.null)))
(declare-const $t@2271 $Snap)
(declare-const $k@2272 $Perm)
(assert ($Perm.isValidVar $k@2272))
(assert ($Perm.isReadVar $k@2272 $Perm.Write))
(declare-const $t@2273 $Ref)
(declare-const $k@2274 $Perm)
(assert ($Perm.isValidVar $k@2274))
(assert ($Perm.isReadVar $k@2274 $Perm.Write))
(declare-const $t@2275 $Ref)
(pop) ; 5
(push) ; 5
; [else-branch 372] $t@2270 == Null
(assert (= $t@2270 $Ref.null))
(declare-const $k@2276 $Perm)
(assert ($Perm.isValidVar $k@2276))
(assert ($Perm.isReadVar $k@2276 $Perm.Write))
(declare-const $t@2277 $Ref)
(declare-const $k@2278 $Perm)
(assert ($Perm.isValidVar $k@2278))
(assert ($Perm.isReadVar $k@2278 $Perm.Write))
(declare-const $t@2279 $Ref)
(pop) ; 5
(pop) ; 4
(push) ; 4
; [exec]
; diz := new(LBQThread2b__queue)
(declare-const diz@2280 $Ref)
(assert (not (= diz@2280 $Ref.null)))
(declare-const LBQThread2b__queue@2281 $Ref)
(assert (and
  (not (= queue@2222 diz@2280))
  (not (= sys__result@2223 diz@2280))
  (not (= __flatten_62@2225 diz@2280))
  (not (= __flatten_144@2226 diz@2280))
  (not (= LBQThread2b__queue@2281 diz@2280))
  (not (= $t@2230 diz@2280))
  (not (= $t@2231 diz@2280))
  (not (= $t@2261 diz@2280))
  (not (= $t@2263 diz@2280))))
; [exec]
; __flatten_62 := queue
; [exec]
; __flatten_144 := __flatten_62
; [exec]
; diz.LBQThread2b__queue := __flatten_144
; [exec]
; sys__result := diz
; [exec]
; assert (sys__result != null) && acc(sys__result.LBQThread2b__queue, wildcard) && acc(sys__result.LBQThread2b__queue.BlockingQueue__capacity, wildcard) && (sys__result.LBQThread2b__queue.BlockingQueue__capacity > 0) && acc(sys__result.LBQThread2b__queue.BlockingQueue__count, wildcard) && (sys__result.LBQThread2b__queue.BlockingQueue__count != null) && acc(sys__result.LBQThread2b__queue.BlockingQueue__first, write) && ((sys__result.LBQThread2b__queue.BlockingQueue__first != null) ==> acc(Node__state(sys__result.LBQThread2b__queue.BlockingQueue__first), write)) && acc(sys__result.LBQThread2b__queue.BlockingQueue__putLock, wildcard) && acc(sys__result.LBQThread2b__queue.BlockingQueue__takeLock, wildcard)
; [eval] sys__result != null
(declare-const $k@2282 $Perm)
(assert ($Perm.isValidVar $k@2282))
(assert ($Perm.isReadVar $k@2282 $Perm.Write))
(push) ; 5
(assert (not (or (= $k@2282 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (< $k@2282 $Perm.Write))
(declare-const $k@2283 $Perm)
(assert ($Perm.isValidVar $k@2283))
(assert ($Perm.isReadVar $k@2283 $Perm.Write))
(push) ; 5
(assert (not (or (= $k@2283 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (< $k@2283 $k@2227))
; [eval] sys__result.LBQThread2b__queue.BlockingQueue__capacity > 0
(declare-const $k@2284 $Perm)
(assert ($Perm.isValidVar $k@2284))
(assert ($Perm.isReadVar $k@2284 $Perm.Write))
(push) ; 5
(assert (not (or (= $k@2284 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (< $k@2284 $k@2229))
; [eval] sys__result.LBQThread2b__queue.BlockingQueue__count != null
; [eval] sys__result.LBQThread2b__queue.BlockingQueue__first != null
(push) ; 5
(assert (not (not (= $t@2231 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
; [dead then-branch 373] $t@2231 != Null
(push) ; 5
; [else-branch 373] $t@2231 == Null
(declare-const $k@2285 $Perm)
(assert ($Perm.isValidVar $k@2285))
(assert ($Perm.isReadVar $k@2285 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@2285 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(push) ; 6
(assert (not (not (= $k@2260 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= $k@2260 $Perm.No)))
(assert (< $k@2285 $k@2260))
(declare-const $k@2286 $Perm)
(assert ($Perm.isValidVar $k@2286))
(assert ($Perm.isReadVar $k@2286 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@2286 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(push) ; 6
(assert (not (not (= $k@2262 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= $k@2262 $Perm.No)))
(assert (< $k@2286 $k@2262))
; [exec]
; inhale false
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
; ---------- LBQThread2b__forkOperator ----------
(declare-const diz@2287 $Ref)
(push) ; 2
; [eval] diz != null
(assert (not (= diz@2287 $Ref.null)))
(declare-const $k@2288 $Perm)
(assert ($Perm.isValidVar $k@2288))
(assert ($Perm.isReadVar $k@2288 $Perm.Write))
(declare-const $t@2289 $Ref)
(push) ; 3
(assert (not (not (= $k@2288 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 3
(assert (not (= $k@2288 $Perm.No)))
(assert (not (= $t@2289 $Ref.null)))
(declare-const $k@2290 $Perm)
(assert ($Perm.isValidVar $k@2290))
(assert ($Perm.isReadVar $k@2290 $Perm.Write))
(declare-const $t@2291 Int)
; [eval] diz.LBQThread2b__queue.BlockingQueue__capacity > 0
(push) ; 3
(assert (not (not (= $k@2290 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 3
(assert (not (= $k@2290 $Perm.No)))
(assert (> $t@2291 0))
(declare-const $k@2292 $Perm)
(assert ($Perm.isValidVar $k@2292))
(assert ($Perm.isReadVar $k@2292 $Perm.Write))
(declare-const $t@2293 $Ref)
; [eval] diz.LBQThread2b__queue.BlockingQueue__count != null
(push) ; 3
(assert (not (not (= $k@2292 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 3
(assert (not (= $k@2292 $Perm.No)))
(assert (not (= $t@2293 $Ref.null)))
(declare-const $t@2294 $Ref)
; [eval] diz.LBQThread2b__queue.BlockingQueue__first != null
(push) ; 3
(assert (not (= $t@2294 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 3
(push) ; 3
(assert (not (not (= $t@2294 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 3
(push) ; 3
; [then-branch 374] $t@2294 != Null
(assert (not (= $t@2294 $Ref.null)))
(declare-const $t@2295 $Snap)
(declare-const $k@2296 $Perm)
(assert ($Perm.isValidVar $k@2296))
(assert ($Perm.isReadVar $k@2296 $Perm.Write))
(declare-const $t@2297 $Ref)
(declare-const $k@2298 $Perm)
(assert ($Perm.isValidVar $k@2298))
(assert ($Perm.isReadVar $k@2298 $Perm.Write))
(declare-const $t@2299 $Ref)
(push) ; 4
(declare-const $t@2300 $Snap)
(pop) ; 4
(push) ; 4
; [exec]
; inhale false
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch 374] $t@2294 == Null
(assert (= $t@2294 $Ref.null))
(declare-const $k@2301 $Perm)
(assert ($Perm.isValidVar $k@2301))
(assert ($Perm.isReadVar $k@2301 $Perm.Write))
(declare-const $t@2302 $Ref)
(declare-const $k@2303 $Perm)
(assert ($Perm.isValidVar $k@2303))
(assert ($Perm.isReadVar $k@2303 $Perm.Write))
(declare-const $t@2304 $Ref)
(push) ; 4
(declare-const $t@2305 $Snap)
(pop) ; 4
(push) ; 4
; [exec]
; inhale false
(pop) ; 4
(pop) ; 3
(pop) ; 2
; ---------- LBQThread2b__joinOperator ----------
(declare-const diz@2306 $Ref)
(push) ; 2
; [eval] diz != null
(assert (not (= diz@2306 $Ref.null)))
(declare-const $t@2307 $Snap)
(push) ; 3
(declare-const $k@2308 $Perm)
(assert ($Perm.isValidVar $k@2308))
(assert ($Perm.isReadVar $k@2308 $Perm.Write))
(declare-const $t@2309 $Ref)
(push) ; 4
(assert (not (not (= $k@2308 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 4
(assert (not (= $k@2308 $Perm.No)))
(assert (not (= $t@2309 $Ref.null)))
(declare-const $k@2310 $Perm)
(assert ($Perm.isValidVar $k@2310))
(assert ($Perm.isReadVar $k@2310 $Perm.Write))
(declare-const $t@2311 Int)
; [eval] diz.LBQThread2b__queue.BlockingQueue__capacity > 0
(push) ; 4
(assert (not (not (= $k@2310 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 4
(assert (not (= $k@2310 $Perm.No)))
(assert (> $t@2311 0))
(declare-const $k@2312 $Perm)
(assert ($Perm.isValidVar $k@2312))
(assert ($Perm.isReadVar $k@2312 $Perm.Write))
(declare-const $t@2313 $Ref)
; [eval] diz.LBQThread2b__queue.BlockingQueue__count != null
(push) ; 4
(assert (not (not (= $k@2312 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 4
(assert (not (= $k@2312 $Perm.No)))
(assert (not (= $t@2313 $Ref.null)))
(declare-const $t@2314 $Ref)
; [eval] diz.LBQThread2b__queue.BlockingQueue__first != null
(push) ; 4
(assert (not (= $t@2314 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 4
(push) ; 4
(assert (not (not (= $t@2314 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 4
(push) ; 4
; [then-branch 375] $t@2314 != Null
(assert (not (= $t@2314 $Ref.null)))
(declare-const $t@2315 $Snap)
(declare-const $k@2316 $Perm)
(assert ($Perm.isValidVar $k@2316))
(assert ($Perm.isReadVar $k@2316 $Perm.Write))
(declare-const $t@2317 $Ref)
(declare-const $k@2318 $Perm)
(assert ($Perm.isValidVar $k@2318))
(assert ($Perm.isReadVar $k@2318 $Perm.Write))
(declare-const $t@2319 $Ref)
(pop) ; 4
(push) ; 4
; [else-branch 375] $t@2314 == Null
(assert (= $t@2314 $Ref.null))
(declare-const $k@2320 $Perm)
(assert ($Perm.isValidVar $k@2320))
(assert ($Perm.isReadVar $k@2320 $Perm.Write))
(declare-const $t@2321 $Ref)
(declare-const $k@2322 $Perm)
(assert ($Perm.isValidVar $k@2322))
(assert ($Perm.isReadVar $k@2322 $Perm.Write))
(declare-const $t@2323 $Ref)
(pop) ; 4
(pop) ; 3
(push) ; 3
; [exec]
; inhale false
(pop) ; 3
(pop) ; 2
; ---------- LBQThread2b__run ----------
(declare-const diz@2324 $Ref)
(declare-const i@2325 $Ref)
(declare-const __flatten_64@2326 $Ref)
(push) ; 2
; [eval] diz != null
(assert (not (= diz@2324 $Ref.null)))
(declare-const $k@2327 $Perm)
(assert ($Perm.isValidVar $k@2327))
(assert ($Perm.isReadVar $k@2327 $Perm.Write))
(declare-const $t@2328 $Ref)
(push) ; 3
(assert (not (not (= $k@2327 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 3
(assert (not (= $k@2327 $Perm.No)))
(assert (not (= $t@2328 $Ref.null)))
(declare-const $k@2329 $Perm)
(assert ($Perm.isValidVar $k@2329))
(assert ($Perm.isReadVar $k@2329 $Perm.Write))
(declare-const $t@2330 Int)
; [eval] diz.LBQThread2b__queue.BlockingQueue__capacity > 0
(push) ; 3
(assert (not (not (= $k@2329 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 3
(assert (not (= $k@2329 $Perm.No)))
(assert (> $t@2330 0))
(declare-const $k@2331 $Perm)
(assert ($Perm.isValidVar $k@2331))
(assert ($Perm.isReadVar $k@2331 $Perm.Write))
(declare-const $t@2332 $Ref)
; [eval] diz.LBQThread2b__queue.BlockingQueue__count != null
(push) ; 3
(assert (not (not (= $k@2331 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 3
(assert (not (= $k@2331 $Perm.No)))
(assert (not (= $t@2332 $Ref.null)))
(declare-const $t@2333 $Ref)
; [eval] diz.LBQThread2b__queue.BlockingQueue__first != null
(push) ; 3
(assert (not (= $t@2333 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 3
(push) ; 3
(assert (not (not (= $t@2333 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 3
(push) ; 3
; [then-branch 376] $t@2333 != Null
(assert (not (= $t@2333 $Ref.null)))
(declare-const $t@2334 $Snap)
(declare-const $k@2335 $Perm)
(assert ($Perm.isValidVar $k@2335))
(assert ($Perm.isReadVar $k@2335 $Perm.Write))
(declare-const $t@2336 $Ref)
(declare-const $k@2337 $Perm)
(assert ($Perm.isValidVar $k@2337))
(assert ($Perm.isReadVar $k@2337 $Perm.Write))
(declare-const $t@2338 $Ref)
(push) ; 4
(declare-const $k@2339 $Perm)
(assert ($Perm.isValidVar $k@2339))
(assert ($Perm.isReadVar $k@2339 $Perm.Write))
(declare-const $t@2340 $Ref)
(push) ; 5
(assert (not (not (= $k@2339 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@2339 $Perm.No)))
(assert (not (= $t@2340 $Ref.null)))
(declare-const $k@2341 $Perm)
(assert ($Perm.isValidVar $k@2341))
(assert ($Perm.isReadVar $k@2341 $Perm.Write))
(declare-const $t@2342 Int)
; [eval] diz.LBQThread2b__queue.BlockingQueue__capacity > 0
(push) ; 5
(assert (not (not (= $k@2341 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@2341 $Perm.No)))
(assert (> $t@2342 0))
(declare-const $k@2343 $Perm)
(assert ($Perm.isValidVar $k@2343))
(assert ($Perm.isReadVar $k@2343 $Perm.Write))
(declare-const $t@2344 $Ref)
; [eval] diz.LBQThread2b__queue.BlockingQueue__count != null
(push) ; 5
(assert (not (not (= $k@2343 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@2343 $Perm.No)))
(assert (not (= $t@2344 $Ref.null)))
(declare-const $t@2345 $Ref)
; [eval] diz.LBQThread2b__queue.BlockingQueue__first != null
(push) ; 5
(assert (not (= $t@2345 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
(assert (not (not (= $t@2345 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
; [then-branch 377] $t@2345 != Null
(assert (not (= $t@2345 $Ref.null)))
(declare-const $t@2346 $Snap)
(declare-const $k@2347 $Perm)
(assert ($Perm.isValidVar $k@2347))
(assert ($Perm.isReadVar $k@2347 $Perm.Write))
(declare-const $t@2348 $Ref)
(declare-const $k@2349 $Perm)
(assert ($Perm.isValidVar $k@2349))
(assert ($Perm.isReadVar $k@2349 $Perm.Write))
(declare-const $t@2350 $Ref)
(pop) ; 5
(push) ; 5
; [else-branch 377] $t@2345 == Null
(assert (= $t@2345 $Ref.null))
(declare-const $k@2351 $Perm)
(assert ($Perm.isValidVar $k@2351))
(assert ($Perm.isReadVar $k@2351 $Perm.Write))
(declare-const $t@2352 $Ref)
(declare-const $k@2353 $Perm)
(assert ($Perm.isValidVar $k@2353))
(assert ($Perm.isReadVar $k@2353 $Perm.Write))
(declare-const $t@2354 $Ref)
(pop) ; 5
(pop) ; 4
(push) ; 4
; [exec]
; BlockingQueue__put(diz.LBQThread2b__queue, 2)
; [eval] diz != null
(declare-const $k@2355 $Perm)
(assert ($Perm.isValidVar $k@2355))
(assert ($Perm.isReadVar $k@2355 $Perm.Write))
(push) ; 5
(assert (not (or (= $k@2355 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (< $k@2355 $k@2329))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@2356 $Perm)
(assert ($Perm.isValidVar $k@2356))
(assert ($Perm.isReadVar $k@2356 $Perm.Write))
(push) ; 5
(assert (not (or (= $k@2356 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (< $k@2356 $k@2331))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 5
(assert (not (= $t@2333 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
; [then-branch 378] $t@2333 != Null
(declare-const $k@2357 $Perm)
(assert ($Perm.isValidVar $k@2357))
(assert ($Perm.isReadVar $k@2357 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@2357 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(push) ; 6
(assert (not (not (= $k@2335 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= $k@2335 $Perm.No)))
(assert (< $k@2357 $k@2335))
(declare-const $k@2358 $Perm)
(assert ($Perm.isValidVar $k@2358))
(assert ($Perm.isReadVar $k@2358 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@2358 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(push) ; 6
(assert (not (not (= $k@2337 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= $k@2337 $Perm.No)))
(assert (< $k@2358 $k@2337))
(declare-const $t@2359 $Snap)
(declare-const $t@2360 $Snap)
(declare-const $t@2361 $Ref)
(assert (= $t@2359 ($Snap.combine $t@2360 ($SortWrappers.$RefTo$Snap $t@2361))))
(declare-const $t@2362 $Snap)
(declare-const $t@2363 $Ref)
(assert (= $t@2360 ($Snap.combine $t@2362 ($SortWrappers.$RefTo$Snap $t@2363))))
(declare-const $t@2364 $Snap)
(declare-const $t@2365 $Snap)
(assert (= $t@2362 ($Snap.combine $t@2364 $t@2365)))
(declare-const $t@2366 $Snap)
(declare-const $t@2367 $Ref)
(assert (= $t@2364 ($Snap.combine $t@2366 ($SortWrappers.$RefTo$Snap $t@2367))))
(declare-const $t@2368 $Snap)
(assert (= $t@2366 ($Snap.combine $t@2368 $Snap.unit)))
(declare-const $t@2369 Int)
(declare-const $t@2370 $Ref)
(assert (=
  $t@2368
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@2369)
    ($SortWrappers.$RefTo$Snap $t@2370))))
(declare-const $t@2371 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@2369)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@2371) $Snap.unit)))
(declare-const $k@2372 $Perm)
(assert ($Perm.isValidVar $k@2372))
(assert ($Perm.isReadVar $k@2372 $Perm.Write))
(assert (implies (< $Perm.No (- $k@2329 $k@2355)) (= $t@2371 $t@2330)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 6
(assert (not (not (= (+ (- $k@2329 $k@2355) $k@2372) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= (+ (- $k@2329 $k@2355) $k@2372) $Perm.No)))
(assert (> $t@2371 0))
(declare-const $k@2373 $Perm)
(assert ($Perm.isValidVar $k@2373))
(assert ($Perm.isReadVar $k@2373 $Perm.Write))
(assert (implies (< $Perm.No (- $k@2331 $k@2356)) (= $t@2370 $t@2332)))
; [eval] diz.BlockingQueue__count != null
(push) ; 6
(assert (not (not (= (+ (- $k@2331 $k@2356) $k@2373) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= (+ (- $k@2331 $k@2356) $k@2373) $Perm.No)))
(assert (not (= $t@2370 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 6
(assert (not (= $t@2367 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 6
(push) ; 6
(assert (not (not (= $t@2367 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 6
(push) ; 6
; [then-branch 379] $t@2367 != Null
(assert (not (= $t@2367 $Ref.null)))
(declare-const $k@2374 $Perm)
(assert ($Perm.isValidVar $k@2374))
(assert ($Perm.isReadVar $k@2374 $Perm.Write))
(assert (implies (< $Perm.No (- $k@2335 $k@2357)) (= $t@2363 $t@2336)))
(declare-const $k@2375 $Perm)
(assert ($Perm.isValidVar $k@2375))
(assert ($Perm.isReadVar $k@2375 $Perm.Write))
(assert (implies (< $Perm.No (- $k@2337 $k@2358)) (= $t@2361 $t@2338)))
; [exec]
; __flatten_64 := BlockingQueue__poll(diz.LBQThread2b__queue)
; [eval] diz != null
(declare-const $k@2376 $Perm)
(assert ($Perm.isValidVar $k@2376))
(assert ($Perm.isReadVar $k@2376 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@2376 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@2376 (+ (- $k@2329 $k@2355) $k@2372)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@2377 $Perm)
(assert ($Perm.isValidVar $k@2377))
(assert ($Perm.isReadVar $k@2377 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@2377 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@2377 (+ (- $k@2331 $k@2356) $k@2373)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 7
(assert (not (= $t@2367 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 7
(push) ; 7
; [then-branch 380] $t@2367 != Null
(declare-const $k@2378 $Perm)
(assert ($Perm.isValidVar $k@2378))
(assert ($Perm.isReadVar $k@2378 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@2378 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= (+ (- $k@2335 $k@2357) $k@2374) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- $k@2335 $k@2357) $k@2374) $Perm.No)))
(assert (< $k@2378 (+ (- $k@2335 $k@2357) $k@2374)))
(declare-const $k@2379 $Perm)
(assert ($Perm.isValidVar $k@2379))
(assert ($Perm.isReadVar $k@2379 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@2379 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= (+ (- $k@2337 $k@2358) $k@2375) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- $k@2337 $k@2358) $k@2375) $Perm.No)))
(assert (< $k@2379 (+ (- $k@2337 $k@2358) $k@2375)))
(declare-const sys__result@2380 $Ref)
(declare-const $t@2381 $Snap)
(declare-const $t@2382 $Snap)
(declare-const $t@2383 $Ref)
(assert (= $t@2381 ($Snap.combine $t@2382 ($SortWrappers.$RefTo$Snap $t@2383))))
(declare-const $t@2384 $Snap)
(declare-const $t@2385 $Ref)
(assert (= $t@2382 ($Snap.combine $t@2384 ($SortWrappers.$RefTo$Snap $t@2385))))
(declare-const $t@2386 $Snap)
(declare-const $t@2387 $Snap)
(assert (= $t@2384 ($Snap.combine $t@2386 $t@2387)))
(declare-const $t@2388 $Snap)
(declare-const $t@2389 $Ref)
(assert (= $t@2386 ($Snap.combine $t@2388 ($SortWrappers.$RefTo$Snap $t@2389))))
(declare-const $t@2390 $Snap)
(assert (= $t@2388 ($Snap.combine $t@2390 $Snap.unit)))
(declare-const $t@2391 Int)
(declare-const $t@2392 $Ref)
(assert (=
  $t@2390
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@2391)
    ($SortWrappers.$RefTo$Snap $t@2392))))
(declare-const $t@2393 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@2391)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@2393) $Snap.unit)))
(declare-const $k@2394 $Perm)
(assert ($Perm.isValidVar $k@2394))
(assert ($Perm.isReadVar $k@2394 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@2329 $k@2355) $k@2372) $k@2376))
  (= $t@2393 $t@2371)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 8
(assert (not (not (= (+ (- (+ (- $k@2329 $k@2355) $k@2372) $k@2376) $k@2394) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- (+ (- $k@2329 $k@2355) $k@2372) $k@2376) $k@2394) $Perm.No)))
(assert (> $t@2393 0))
(declare-const $k@2395 $Perm)
(assert ($Perm.isValidVar $k@2395))
(assert ($Perm.isReadVar $k@2395 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@2331 $k@2356) $k@2373) $k@2377))
  (= $t@2392 $t@2370)))
; [eval] diz.BlockingQueue__count != null
(push) ; 8
(assert (not (not (= (+ (- (+ (- $k@2331 $k@2356) $k@2373) $k@2377) $k@2395) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- (+ (- $k@2331 $k@2356) $k@2373) $k@2377) $k@2395) $Perm.No)))
(assert (not (= $t@2392 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 8
(assert (not (= $t@2389 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= $t@2389 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
(push) ; 8
; [then-branch 381] $t@2389 != Null
(assert (not (= $t@2389 $Ref.null)))
(declare-const $k@2396 $Perm)
(assert ($Perm.isValidVar $k@2396))
(assert ($Perm.isReadVar $k@2396 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@2335 $k@2357) $k@2374) $k@2378))
  (= $t@2385 $t@2363)))
(declare-const $k@2397 $Perm)
(assert ($Perm.isValidVar $k@2397))
(assert ($Perm.isReadVar $k@2397 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@2337 $k@2358) $k@2375) $k@2379))
  (= $t@2383 $t@2361)))
; [exec]
; i := __flatten_64
(declare-const $k@2398 $Perm)
(assert ($Perm.isValidVar $k@2398))
(assert ($Perm.isReadVar $k@2398 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@2398 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@2398 $k@2327))
(declare-const $k@2399 $Perm)
(assert ($Perm.isValidVar $k@2399))
(assert ($Perm.isReadVar $k@2399 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@2399 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@2399 (+ (- (+ (- $k@2329 $k@2355) $k@2372) $k@2376) $k@2394)))
; [eval] diz.LBQThread2b__queue.BlockingQueue__capacity > 0
(declare-const $k@2400 $Perm)
(assert ($Perm.isValidVar $k@2400))
(assert ($Perm.isReadVar $k@2400 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@2400 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@2400 (+ (- (+ (- $k@2331 $k@2356) $k@2373) $k@2377) $k@2395)))
; [eval] diz.LBQThread2b__queue.BlockingQueue__count != null
; [eval] diz.LBQThread2b__queue.BlockingQueue__first != null
(push) ; 9
(assert (not (= $t@2389 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
(push) ; 9
; [then-branch 382] $t@2389 != Null
(declare-const $k@2401 $Perm)
(assert ($Perm.isValidVar $k@2401))
(assert ($Perm.isReadVar $k@2401 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@2401 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= (+ (- (+ (- $k@2335 $k@2357) $k@2374) $k@2378) $k@2396) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not (= (+ (- (+ (- $k@2335 $k@2357) $k@2374) $k@2378) $k@2396) $Perm.No)))
(assert (< $k@2401 (+ (- (+ (- $k@2335 $k@2357) $k@2374) $k@2378) $k@2396)))
(declare-const $k@2402 $Perm)
(assert ($Perm.isValidVar $k@2402))
(assert ($Perm.isReadVar $k@2402 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@2402 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= (+ (- (+ (- $k@2337 $k@2358) $k@2375) $k@2379) $k@2397) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not (= (+ (- (+ (- $k@2337 $k@2358) $k@2375) $k@2379) $k@2397) $Perm.No)))
(assert (< $k@2402 (+ (- (+ (- $k@2337 $k@2358) $k@2375) $k@2379) $k@2397)))
(pop) ; 9
; [dead else-branch 382] $t@2389 == Null
(pop) ; 8
(push) ; 8
; [else-branch 381] $t@2389 == Null
(assert (= $t@2389 $Ref.null))
(declare-const $k@2403 $Perm)
(assert ($Perm.isValidVar $k@2403))
(assert ($Perm.isReadVar $k@2403 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@2335 $k@2357) $k@2374) $k@2378))
  (= $t@2385 $t@2363)))
(declare-const $k@2404 $Perm)
(assert ($Perm.isValidVar $k@2404))
(assert ($Perm.isReadVar $k@2404 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@2337 $k@2358) $k@2375) $k@2379))
  (= $t@2383 $t@2361)))
; [exec]
; i := __flatten_64
(declare-const $k@2405 $Perm)
(assert ($Perm.isValidVar $k@2405))
(assert ($Perm.isReadVar $k@2405 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@2405 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@2405 $k@2327))
(declare-const $k@2406 $Perm)
(assert ($Perm.isValidVar $k@2406))
(assert ($Perm.isReadVar $k@2406 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@2406 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@2406 (+ (- (+ (- $k@2329 $k@2355) $k@2372) $k@2376) $k@2394)))
; [eval] diz.LBQThread2b__queue.BlockingQueue__capacity > 0
(declare-const $k@2407 $Perm)
(assert ($Perm.isValidVar $k@2407))
(assert ($Perm.isReadVar $k@2407 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@2407 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@2407 (+ (- (+ (- $k@2331 $k@2356) $k@2373) $k@2377) $k@2395)))
; [eval] diz.LBQThread2b__queue.BlockingQueue__count != null
; [eval] diz.LBQThread2b__queue.BlockingQueue__first != null
(push) ; 9
(assert (not (not (= $t@2389 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
; [dead then-branch 383] $t@2389 != Null
(push) ; 9
; [else-branch 383] $t@2389 == Null
(declare-const $k@2408 $Perm)
(assert ($Perm.isValidVar $k@2408))
(assert ($Perm.isReadVar $k@2408 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@2408 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= (+ (- (+ (- $k@2335 $k@2357) $k@2374) $k@2378) $k@2403) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not (= (+ (- (+ (- $k@2335 $k@2357) $k@2374) $k@2378) $k@2403) $Perm.No)))
(assert (< $k@2408 (+ (- (+ (- $k@2335 $k@2357) $k@2374) $k@2378) $k@2403)))
(declare-const $k@2409 $Perm)
(assert ($Perm.isValidVar $k@2409))
(assert ($Perm.isReadVar $k@2409 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@2409 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= (+ (- (+ (- $k@2337 $k@2358) $k@2375) $k@2379) $k@2404) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not (= (+ (- (+ (- $k@2337 $k@2358) $k@2375) $k@2379) $k@2404) $Perm.No)))
(assert (< $k@2409 (+ (- (+ (- $k@2337 $k@2358) $k@2375) $k@2379) $k@2404)))
(pop) ; 9
(pop) ; 8
(pop) ; 7
; [dead else-branch 380] $t@2367 == Null
(pop) ; 6
(push) ; 6
; [else-branch 379] $t@2367 == Null
(assert (= $t@2367 $Ref.null))
(declare-const $k@2410 $Perm)
(assert ($Perm.isValidVar $k@2410))
(assert ($Perm.isReadVar $k@2410 $Perm.Write))
(assert (implies (< $Perm.No (- $k@2335 $k@2357)) (= $t@2363 $t@2336)))
(declare-const $k@2411 $Perm)
(assert ($Perm.isValidVar $k@2411))
(assert ($Perm.isReadVar $k@2411 $Perm.Write))
(assert (implies (< $Perm.No (- $k@2337 $k@2358)) (= $t@2361 $t@2338)))
; [exec]
; __flatten_64 := BlockingQueue__poll(diz.LBQThread2b__queue)
; [eval] diz != null
(declare-const $k@2412 $Perm)
(assert ($Perm.isValidVar $k@2412))
(assert ($Perm.isReadVar $k@2412 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@2412 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@2412 (+ (- $k@2329 $k@2355) $k@2372)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@2413 $Perm)
(assert ($Perm.isValidVar $k@2413))
(assert ($Perm.isReadVar $k@2413 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@2413 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@2413 (+ (- $k@2331 $k@2356) $k@2373)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 7
(assert (not (not (= $t@2367 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 7
; [dead then-branch 384] $t@2367 != Null
(push) ; 7
; [else-branch 384] $t@2367 == Null
(declare-const $k@2414 $Perm)
(assert ($Perm.isValidVar $k@2414))
(assert ($Perm.isReadVar $k@2414 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@2414 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= (+ (- $k@2335 $k@2357) $k@2410) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- $k@2335 $k@2357) $k@2410) $Perm.No)))
(assert (< $k@2414 (+ (- $k@2335 $k@2357) $k@2410)))
(declare-const $k@2415 $Perm)
(assert ($Perm.isValidVar $k@2415))
(assert ($Perm.isReadVar $k@2415 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@2415 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= (+ (- $k@2337 $k@2358) $k@2411) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- $k@2337 $k@2358) $k@2411) $Perm.No)))
(assert (< $k@2415 (+ (- $k@2337 $k@2358) $k@2411)))
(declare-const sys__result@2416 $Ref)
(declare-const $t@2417 $Snap)
(declare-const $t@2418 $Snap)
(declare-const $t@2419 $Ref)
(assert (= $t@2417 ($Snap.combine $t@2418 ($SortWrappers.$RefTo$Snap $t@2419))))
(declare-const $t@2420 $Snap)
(declare-const $t@2421 $Ref)
(assert (= $t@2418 ($Snap.combine $t@2420 ($SortWrappers.$RefTo$Snap $t@2421))))
(declare-const $t@2422 $Snap)
(declare-const $t@2423 $Snap)
(assert (= $t@2420 ($Snap.combine $t@2422 $t@2423)))
(declare-const $t@2424 $Snap)
(declare-const $t@2425 $Ref)
(assert (= $t@2422 ($Snap.combine $t@2424 ($SortWrappers.$RefTo$Snap $t@2425))))
(declare-const $t@2426 $Snap)
(assert (= $t@2424 ($Snap.combine $t@2426 $Snap.unit)))
(declare-const $t@2427 Int)
(declare-const $t@2428 $Ref)
(assert (=
  $t@2426
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@2427)
    ($SortWrappers.$RefTo$Snap $t@2428))))
(declare-const $t@2429 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@2427)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@2429) $Snap.unit)))
(declare-const $k@2430 $Perm)
(assert ($Perm.isValidVar $k@2430))
(assert ($Perm.isReadVar $k@2430 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@2329 $k@2355) $k@2372) $k@2412))
  (= $t@2429 $t@2371)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 8
(assert (not (not (= (+ (- (+ (- $k@2329 $k@2355) $k@2372) $k@2412) $k@2430) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- (+ (- $k@2329 $k@2355) $k@2372) $k@2412) $k@2430) $Perm.No)))
(assert (> $t@2429 0))
(declare-const $k@2431 $Perm)
(assert ($Perm.isValidVar $k@2431))
(assert ($Perm.isReadVar $k@2431 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@2331 $k@2356) $k@2373) $k@2413))
  (= $t@2428 $t@2370)))
; [eval] diz.BlockingQueue__count != null
(push) ; 8
(assert (not (not (= (+ (- (+ (- $k@2331 $k@2356) $k@2373) $k@2413) $k@2431) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- (+ (- $k@2331 $k@2356) $k@2373) $k@2413) $k@2431) $Perm.No)))
(assert (not (= $t@2428 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 8
(assert (not (= $t@2425 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= $t@2425 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
(push) ; 8
; [then-branch 385] $t@2425 != Null
(assert (not (= $t@2425 $Ref.null)))
(declare-const $k@2432 $Perm)
(assert ($Perm.isValidVar $k@2432))
(assert ($Perm.isReadVar $k@2432 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@2335 $k@2357) $k@2410) $k@2414))
  (= $t@2421 $t@2363)))
(declare-const $k@2433 $Perm)
(assert ($Perm.isValidVar $k@2433))
(assert ($Perm.isReadVar $k@2433 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@2337 $k@2358) $k@2411) $k@2415))
  (= $t@2419 $t@2361)))
; [exec]
; i := __flatten_64
(declare-const $k@2434 $Perm)
(assert ($Perm.isValidVar $k@2434))
(assert ($Perm.isReadVar $k@2434 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@2434 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@2434 $k@2327))
(declare-const $k@2435 $Perm)
(assert ($Perm.isValidVar $k@2435))
(assert ($Perm.isReadVar $k@2435 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@2435 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@2435 (+ (- (+ (- $k@2329 $k@2355) $k@2372) $k@2412) $k@2430)))
; [eval] diz.LBQThread2b__queue.BlockingQueue__capacity > 0
(declare-const $k@2436 $Perm)
(assert ($Perm.isValidVar $k@2436))
(assert ($Perm.isReadVar $k@2436 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@2436 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@2436 (+ (- (+ (- $k@2331 $k@2356) $k@2373) $k@2413) $k@2431)))
; [eval] diz.LBQThread2b__queue.BlockingQueue__count != null
; [eval] diz.LBQThread2b__queue.BlockingQueue__first != null
(push) ; 9
(assert (not (= $t@2425 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
(push) ; 9
; [then-branch 386] $t@2425 != Null
(declare-const $k@2437 $Perm)
(assert ($Perm.isValidVar $k@2437))
(assert ($Perm.isReadVar $k@2437 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@2437 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= (+ (- (+ (- $k@2335 $k@2357) $k@2410) $k@2414) $k@2432) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not (= (+ (- (+ (- $k@2335 $k@2357) $k@2410) $k@2414) $k@2432) $Perm.No)))
(assert (< $k@2437 (+ (- (+ (- $k@2335 $k@2357) $k@2410) $k@2414) $k@2432)))
(declare-const $k@2438 $Perm)
(assert ($Perm.isValidVar $k@2438))
(assert ($Perm.isReadVar $k@2438 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@2438 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= (+ (- (+ (- $k@2337 $k@2358) $k@2411) $k@2415) $k@2433) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not (= (+ (- (+ (- $k@2337 $k@2358) $k@2411) $k@2415) $k@2433) $Perm.No)))
(assert (< $k@2438 (+ (- (+ (- $k@2337 $k@2358) $k@2411) $k@2415) $k@2433)))
(pop) ; 9
; [dead else-branch 386] $t@2425 == Null
(pop) ; 8
(push) ; 8
; [else-branch 385] $t@2425 == Null
(assert (= $t@2425 $Ref.null))
(declare-const $k@2439 $Perm)
(assert ($Perm.isValidVar $k@2439))
(assert ($Perm.isReadVar $k@2439 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@2335 $k@2357) $k@2410) $k@2414))
  (= $t@2421 $t@2363)))
(declare-const $k@2440 $Perm)
(assert ($Perm.isValidVar $k@2440))
(assert ($Perm.isReadVar $k@2440 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@2337 $k@2358) $k@2411) $k@2415))
  (= $t@2419 $t@2361)))
; [exec]
; i := __flatten_64
(declare-const $k@2441 $Perm)
(assert ($Perm.isValidVar $k@2441))
(assert ($Perm.isReadVar $k@2441 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@2441 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@2441 $k@2327))
(declare-const $k@2442 $Perm)
(assert ($Perm.isValidVar $k@2442))
(assert ($Perm.isReadVar $k@2442 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@2442 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@2442 (+ (- (+ (- $k@2329 $k@2355) $k@2372) $k@2412) $k@2430)))
; [eval] diz.LBQThread2b__queue.BlockingQueue__capacity > 0
(declare-const $k@2443 $Perm)
(assert ($Perm.isValidVar $k@2443))
(assert ($Perm.isReadVar $k@2443 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@2443 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@2443 (+ (- (+ (- $k@2331 $k@2356) $k@2373) $k@2413) $k@2431)))
; [eval] diz.LBQThread2b__queue.BlockingQueue__count != null
; [eval] diz.LBQThread2b__queue.BlockingQueue__first != null
(push) ; 9
(assert (not (not (= $t@2425 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
; [dead then-branch 387] $t@2425 != Null
(push) ; 9
; [else-branch 387] $t@2425 == Null
(declare-const $k@2444 $Perm)
(assert ($Perm.isValidVar $k@2444))
(assert ($Perm.isReadVar $k@2444 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@2444 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= (+ (- (+ (- $k@2335 $k@2357) $k@2410) $k@2414) $k@2439) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not (= (+ (- (+ (- $k@2335 $k@2357) $k@2410) $k@2414) $k@2439) $Perm.No)))
(assert (< $k@2444 (+ (- (+ (- $k@2335 $k@2357) $k@2410) $k@2414) $k@2439)))
(declare-const $k@2445 $Perm)
(assert ($Perm.isValidVar $k@2445))
(assert ($Perm.isReadVar $k@2445 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@2445 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= (+ (- (+ (- $k@2337 $k@2358) $k@2411) $k@2415) $k@2440) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not (= (+ (- (+ (- $k@2337 $k@2358) $k@2411) $k@2415) $k@2440) $Perm.No)))
(assert (< $k@2445 (+ (- (+ (- $k@2337 $k@2358) $k@2411) $k@2415) $k@2440)))
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
; [dead else-branch 378] $t@2333 == Null
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch 376] $t@2333 == Null
(assert (= $t@2333 $Ref.null))
(declare-const $k@2446 $Perm)
(assert ($Perm.isValidVar $k@2446))
(assert ($Perm.isReadVar $k@2446 $Perm.Write))
(declare-const $t@2447 $Ref)
(declare-const $k@2448 $Perm)
(assert ($Perm.isValidVar $k@2448))
(assert ($Perm.isReadVar $k@2448 $Perm.Write))
(declare-const $t@2449 $Ref)
(push) ; 4
(declare-const $k@2450 $Perm)
(assert ($Perm.isValidVar $k@2450))
(assert ($Perm.isReadVar $k@2450 $Perm.Write))
(declare-const $t@2451 $Ref)
(push) ; 5
(assert (not (not (= $k@2450 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@2450 $Perm.No)))
(assert (not (= $t@2451 $Ref.null)))
(declare-const $k@2452 $Perm)
(assert ($Perm.isValidVar $k@2452))
(assert ($Perm.isReadVar $k@2452 $Perm.Write))
(declare-const $t@2453 Int)
; [eval] diz.LBQThread2b__queue.BlockingQueue__capacity > 0
(push) ; 5
(assert (not (not (= $k@2452 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@2452 $Perm.No)))
(assert (> $t@2453 0))
(declare-const $k@2454 $Perm)
(assert ($Perm.isValidVar $k@2454))
(assert ($Perm.isReadVar $k@2454 $Perm.Write))
(declare-const $t@2455 $Ref)
; [eval] diz.LBQThread2b__queue.BlockingQueue__count != null
(push) ; 5
(assert (not (not (= $k@2454 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@2454 $Perm.No)))
(assert (not (= $t@2455 $Ref.null)))
(declare-const $t@2456 $Ref)
; [eval] diz.LBQThread2b__queue.BlockingQueue__first != null
(push) ; 5
(assert (not (= $t@2456 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
(assert (not (not (= $t@2456 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
; [then-branch 388] $t@2456 != Null
(assert (not (= $t@2456 $Ref.null)))
(declare-const $t@2457 $Snap)
(declare-const $k@2458 $Perm)
(assert ($Perm.isValidVar $k@2458))
(assert ($Perm.isReadVar $k@2458 $Perm.Write))
(declare-const $t@2459 $Ref)
(declare-const $k@2460 $Perm)
(assert ($Perm.isValidVar $k@2460))
(assert ($Perm.isReadVar $k@2460 $Perm.Write))
(declare-const $t@2461 $Ref)
(pop) ; 5
(push) ; 5
; [else-branch 388] $t@2456 == Null
(assert (= $t@2456 $Ref.null))
(declare-const $k@2462 $Perm)
(assert ($Perm.isValidVar $k@2462))
(assert ($Perm.isReadVar $k@2462 $Perm.Write))
(declare-const $t@2463 $Ref)
(declare-const $k@2464 $Perm)
(assert ($Perm.isValidVar $k@2464))
(assert ($Perm.isReadVar $k@2464 $Perm.Write))
(declare-const $t@2465 $Ref)
(pop) ; 5
(pop) ; 4
(push) ; 4
; [exec]
; BlockingQueue__put(diz.LBQThread2b__queue, 2)
; [eval] diz != null
(declare-const $k@2466 $Perm)
(assert ($Perm.isValidVar $k@2466))
(assert ($Perm.isReadVar $k@2466 $Perm.Write))
(push) ; 5
(assert (not (or (= $k@2466 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (< $k@2466 $k@2329))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@2467 $Perm)
(assert ($Perm.isValidVar $k@2467))
(assert ($Perm.isReadVar $k@2467 $Perm.Write))
(push) ; 5
(assert (not (or (= $k@2467 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (< $k@2467 $k@2331))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 5
(assert (not (not (= $t@2333 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
; [dead then-branch 389] $t@2333 != Null
(push) ; 5
; [else-branch 389] $t@2333 == Null
(declare-const $k@2468 $Perm)
(assert ($Perm.isValidVar $k@2468))
(assert ($Perm.isReadVar $k@2468 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@2468 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(push) ; 6
(assert (not (not (= $k@2446 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= $k@2446 $Perm.No)))
(assert (< $k@2468 $k@2446))
(declare-const $k@2469 $Perm)
(assert ($Perm.isValidVar $k@2469))
(assert ($Perm.isReadVar $k@2469 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@2469 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(push) ; 6
(assert (not (not (= $k@2448 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= $k@2448 $Perm.No)))
(assert (< $k@2469 $k@2448))
(declare-const $t@2470 $Snap)
(declare-const $t@2471 $Snap)
(declare-const $t@2472 $Ref)
(assert (= $t@2470 ($Snap.combine $t@2471 ($SortWrappers.$RefTo$Snap $t@2472))))
(declare-const $t@2473 $Snap)
(declare-const $t@2474 $Ref)
(assert (= $t@2471 ($Snap.combine $t@2473 ($SortWrappers.$RefTo$Snap $t@2474))))
(declare-const $t@2475 $Snap)
(declare-const $t@2476 $Snap)
(assert (= $t@2473 ($Snap.combine $t@2475 $t@2476)))
(declare-const $t@2477 $Snap)
(declare-const $t@2478 $Ref)
(assert (= $t@2475 ($Snap.combine $t@2477 ($SortWrappers.$RefTo$Snap $t@2478))))
(declare-const $t@2479 $Snap)
(assert (= $t@2477 ($Snap.combine $t@2479 $Snap.unit)))
(declare-const $t@2480 Int)
(declare-const $t@2481 $Ref)
(assert (=
  $t@2479
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@2480)
    ($SortWrappers.$RefTo$Snap $t@2481))))
(declare-const $t@2482 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@2480)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@2482) $Snap.unit)))
(declare-const $k@2483 $Perm)
(assert ($Perm.isValidVar $k@2483))
(assert ($Perm.isReadVar $k@2483 $Perm.Write))
(assert (implies (< $Perm.No (- $k@2329 $k@2466)) (= $t@2482 $t@2330)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 6
(assert (not (not (= (+ (- $k@2329 $k@2466) $k@2483) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= (+ (- $k@2329 $k@2466) $k@2483) $Perm.No)))
(assert (> $t@2482 0))
(declare-const $k@2484 $Perm)
(assert ($Perm.isValidVar $k@2484))
(assert ($Perm.isReadVar $k@2484 $Perm.Write))
(assert (implies (< $Perm.No (- $k@2331 $k@2467)) (= $t@2481 $t@2332)))
; [eval] diz.BlockingQueue__count != null
(push) ; 6
(assert (not (not (= (+ (- $k@2331 $k@2467) $k@2484) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= (+ (- $k@2331 $k@2467) $k@2484) $Perm.No)))
(assert (not (= $t@2481 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 6
(assert (not (= $t@2478 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 6
(push) ; 6
(assert (not (not (= $t@2478 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 6
(push) ; 6
; [then-branch 390] $t@2478 != Null
(assert (not (= $t@2478 $Ref.null)))
(declare-const $k@2485 $Perm)
(assert ($Perm.isValidVar $k@2485))
(assert ($Perm.isReadVar $k@2485 $Perm.Write))
(assert (implies (< $Perm.No (- $k@2446 $k@2468)) (= $t@2474 $t@2447)))
(declare-const $k@2486 $Perm)
(assert ($Perm.isValidVar $k@2486))
(assert ($Perm.isReadVar $k@2486 $Perm.Write))
(assert (implies (< $Perm.No (- $k@2448 $k@2469)) (= $t@2472 $t@2449)))
; [exec]
; __flatten_64 := BlockingQueue__poll(diz.LBQThread2b__queue)
; [eval] diz != null
(declare-const $k@2487 $Perm)
(assert ($Perm.isValidVar $k@2487))
(assert ($Perm.isReadVar $k@2487 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@2487 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@2487 (+ (- $k@2329 $k@2466) $k@2483)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@2488 $Perm)
(assert ($Perm.isValidVar $k@2488))
(assert ($Perm.isReadVar $k@2488 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@2488 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@2488 (+ (- $k@2331 $k@2467) $k@2484)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 7
(assert (not (= $t@2478 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 7
(push) ; 7
; [then-branch 391] $t@2478 != Null
(declare-const $k@2489 $Perm)
(assert ($Perm.isValidVar $k@2489))
(assert ($Perm.isReadVar $k@2489 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@2489 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= (+ (- $k@2446 $k@2468) $k@2485) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- $k@2446 $k@2468) $k@2485) $Perm.No)))
(assert (< $k@2489 (+ (- $k@2446 $k@2468) $k@2485)))
(declare-const $k@2490 $Perm)
(assert ($Perm.isValidVar $k@2490))
(assert ($Perm.isReadVar $k@2490 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@2490 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= (+ (- $k@2448 $k@2469) $k@2486) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- $k@2448 $k@2469) $k@2486) $Perm.No)))
(assert (< $k@2490 (+ (- $k@2448 $k@2469) $k@2486)))
(declare-const sys__result@2491 $Ref)
(declare-const $t@2492 $Snap)
(declare-const $t@2493 $Snap)
(declare-const $t@2494 $Ref)
(assert (= $t@2492 ($Snap.combine $t@2493 ($SortWrappers.$RefTo$Snap $t@2494))))
(declare-const $t@2495 $Snap)
(declare-const $t@2496 $Ref)
(assert (= $t@2493 ($Snap.combine $t@2495 ($SortWrappers.$RefTo$Snap $t@2496))))
(declare-const $t@2497 $Snap)
(declare-const $t@2498 $Snap)
(assert (= $t@2495 ($Snap.combine $t@2497 $t@2498)))
(declare-const $t@2499 $Snap)
(declare-const $t@2500 $Ref)
(assert (= $t@2497 ($Snap.combine $t@2499 ($SortWrappers.$RefTo$Snap $t@2500))))
(declare-const $t@2501 $Snap)
(assert (= $t@2499 ($Snap.combine $t@2501 $Snap.unit)))
(declare-const $t@2502 Int)
(declare-const $t@2503 $Ref)
(assert (=
  $t@2501
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@2502)
    ($SortWrappers.$RefTo$Snap $t@2503))))
(declare-const $t@2504 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@2502)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@2504) $Snap.unit)))
(declare-const $k@2505 $Perm)
(assert ($Perm.isValidVar $k@2505))
(assert ($Perm.isReadVar $k@2505 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@2329 $k@2466) $k@2483) $k@2487))
  (= $t@2504 $t@2482)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 8
(assert (not (not (= (+ (- (+ (- $k@2329 $k@2466) $k@2483) $k@2487) $k@2505) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- (+ (- $k@2329 $k@2466) $k@2483) $k@2487) $k@2505) $Perm.No)))
(assert (> $t@2504 0))
(declare-const $k@2506 $Perm)
(assert ($Perm.isValidVar $k@2506))
(assert ($Perm.isReadVar $k@2506 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@2331 $k@2467) $k@2484) $k@2488))
  (= $t@2503 $t@2481)))
; [eval] diz.BlockingQueue__count != null
(push) ; 8
(assert (not (not (= (+ (- (+ (- $k@2331 $k@2467) $k@2484) $k@2488) $k@2506) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- (+ (- $k@2331 $k@2467) $k@2484) $k@2488) $k@2506) $Perm.No)))
(assert (not (= $t@2503 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 8
(assert (not (= $t@2500 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= $t@2500 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
(push) ; 8
; [then-branch 392] $t@2500 != Null
(assert (not (= $t@2500 $Ref.null)))
(declare-const $k@2507 $Perm)
(assert ($Perm.isValidVar $k@2507))
(assert ($Perm.isReadVar $k@2507 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@2446 $k@2468) $k@2485) $k@2489))
  (= $t@2496 $t@2474)))
(declare-const $k@2508 $Perm)
(assert ($Perm.isValidVar $k@2508))
(assert ($Perm.isReadVar $k@2508 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@2448 $k@2469) $k@2486) $k@2490))
  (= $t@2494 $t@2472)))
; [exec]
; i := __flatten_64
(declare-const $k@2509 $Perm)
(assert ($Perm.isValidVar $k@2509))
(assert ($Perm.isReadVar $k@2509 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@2509 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@2509 $k@2327))
(declare-const $k@2510 $Perm)
(assert ($Perm.isValidVar $k@2510))
(assert ($Perm.isReadVar $k@2510 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@2510 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@2510 (+ (- (+ (- $k@2329 $k@2466) $k@2483) $k@2487) $k@2505)))
; [eval] diz.LBQThread2b__queue.BlockingQueue__capacity > 0
(declare-const $k@2511 $Perm)
(assert ($Perm.isValidVar $k@2511))
(assert ($Perm.isReadVar $k@2511 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@2511 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@2511 (+ (- (+ (- $k@2331 $k@2467) $k@2484) $k@2488) $k@2506)))
; [eval] diz.LBQThread2b__queue.BlockingQueue__count != null
; [eval] diz.LBQThread2b__queue.BlockingQueue__first != null
(push) ; 9
(assert (not (= $t@2500 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
(push) ; 9
; [then-branch 393] $t@2500 != Null
(declare-const $k@2512 $Perm)
(assert ($Perm.isValidVar $k@2512))
(assert ($Perm.isReadVar $k@2512 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@2512 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= (+ (- (+ (- $k@2446 $k@2468) $k@2485) $k@2489) $k@2507) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not (= (+ (- (+ (- $k@2446 $k@2468) $k@2485) $k@2489) $k@2507) $Perm.No)))
(assert (< $k@2512 (+ (- (+ (- $k@2446 $k@2468) $k@2485) $k@2489) $k@2507)))
(declare-const $k@2513 $Perm)
(assert ($Perm.isValidVar $k@2513))
(assert ($Perm.isReadVar $k@2513 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@2513 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= (+ (- (+ (- $k@2448 $k@2469) $k@2486) $k@2490) $k@2508) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not (= (+ (- (+ (- $k@2448 $k@2469) $k@2486) $k@2490) $k@2508) $Perm.No)))
(assert (< $k@2513 (+ (- (+ (- $k@2448 $k@2469) $k@2486) $k@2490) $k@2508)))
(pop) ; 9
; [dead else-branch 393] $t@2500 == Null
(pop) ; 8
(push) ; 8
; [else-branch 392] $t@2500 == Null
(assert (= $t@2500 $Ref.null))
(declare-const $k@2514 $Perm)
(assert ($Perm.isValidVar $k@2514))
(assert ($Perm.isReadVar $k@2514 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@2446 $k@2468) $k@2485) $k@2489))
  (= $t@2496 $t@2474)))
(declare-const $k@2515 $Perm)
(assert ($Perm.isValidVar $k@2515))
(assert ($Perm.isReadVar $k@2515 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@2448 $k@2469) $k@2486) $k@2490))
  (= $t@2494 $t@2472)))
; [exec]
; i := __flatten_64
(declare-const $k@2516 $Perm)
(assert ($Perm.isValidVar $k@2516))
(assert ($Perm.isReadVar $k@2516 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@2516 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@2516 $k@2327))
(declare-const $k@2517 $Perm)
(assert ($Perm.isValidVar $k@2517))
(assert ($Perm.isReadVar $k@2517 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@2517 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@2517 (+ (- (+ (- $k@2329 $k@2466) $k@2483) $k@2487) $k@2505)))
; [eval] diz.LBQThread2b__queue.BlockingQueue__capacity > 0
(declare-const $k@2518 $Perm)
(assert ($Perm.isValidVar $k@2518))
(assert ($Perm.isReadVar $k@2518 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@2518 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@2518 (+ (- (+ (- $k@2331 $k@2467) $k@2484) $k@2488) $k@2506)))
; [eval] diz.LBQThread2b__queue.BlockingQueue__count != null
; [eval] diz.LBQThread2b__queue.BlockingQueue__first != null
(push) ; 9
(assert (not (not (= $t@2500 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
; [dead then-branch 394] $t@2500 != Null
(push) ; 9
; [else-branch 394] $t@2500 == Null
(declare-const $k@2519 $Perm)
(assert ($Perm.isValidVar $k@2519))
(assert ($Perm.isReadVar $k@2519 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@2519 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= (+ (- (+ (- $k@2446 $k@2468) $k@2485) $k@2489) $k@2514) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not (= (+ (- (+ (- $k@2446 $k@2468) $k@2485) $k@2489) $k@2514) $Perm.No)))
(assert (< $k@2519 (+ (- (+ (- $k@2446 $k@2468) $k@2485) $k@2489) $k@2514)))
(declare-const $k@2520 $Perm)
(assert ($Perm.isValidVar $k@2520))
(assert ($Perm.isReadVar $k@2520 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@2520 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= (+ (- (+ (- $k@2448 $k@2469) $k@2486) $k@2490) $k@2515) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not (= (+ (- (+ (- $k@2448 $k@2469) $k@2486) $k@2490) $k@2515) $Perm.No)))
(assert (< $k@2520 (+ (- (+ (- $k@2448 $k@2469) $k@2486) $k@2490) $k@2515)))
(pop) ; 9
(pop) ; 8
(pop) ; 7
; [dead else-branch 391] $t@2478 == Null
(pop) ; 6
(push) ; 6
; [else-branch 390] $t@2478 == Null
(assert (= $t@2478 $Ref.null))
(declare-const $k@2521 $Perm)
(assert ($Perm.isValidVar $k@2521))
(assert ($Perm.isReadVar $k@2521 $Perm.Write))
(assert (implies (< $Perm.No (- $k@2446 $k@2468)) (= $t@2474 $t@2447)))
(declare-const $k@2522 $Perm)
(assert ($Perm.isValidVar $k@2522))
(assert ($Perm.isReadVar $k@2522 $Perm.Write))
(assert (implies (< $Perm.No (- $k@2448 $k@2469)) (= $t@2472 $t@2449)))
; [exec]
; __flatten_64 := BlockingQueue__poll(diz.LBQThread2b__queue)
; [eval] diz != null
(declare-const $k@2523 $Perm)
(assert ($Perm.isValidVar $k@2523))
(assert ($Perm.isReadVar $k@2523 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@2523 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@2523 (+ (- $k@2329 $k@2466) $k@2483)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@2524 $Perm)
(assert ($Perm.isValidVar $k@2524))
(assert ($Perm.isReadVar $k@2524 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@2524 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@2524 (+ (- $k@2331 $k@2467) $k@2484)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 7
(assert (not (not (= $t@2478 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 7
; [dead then-branch 395] $t@2478 != Null
(push) ; 7
; [else-branch 395] $t@2478 == Null
(declare-const $k@2525 $Perm)
(assert ($Perm.isValidVar $k@2525))
(assert ($Perm.isReadVar $k@2525 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@2525 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= (+ (- $k@2446 $k@2468) $k@2521) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- $k@2446 $k@2468) $k@2521) $Perm.No)))
(assert (< $k@2525 (+ (- $k@2446 $k@2468) $k@2521)))
(declare-const $k@2526 $Perm)
(assert ($Perm.isValidVar $k@2526))
(assert ($Perm.isReadVar $k@2526 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@2526 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= (+ (- $k@2448 $k@2469) $k@2522) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- $k@2448 $k@2469) $k@2522) $Perm.No)))
(assert (< $k@2526 (+ (- $k@2448 $k@2469) $k@2522)))
(declare-const sys__result@2527 $Ref)
(declare-const $t@2528 $Snap)
(declare-const $t@2529 $Snap)
(declare-const $t@2530 $Ref)
(assert (= $t@2528 ($Snap.combine $t@2529 ($SortWrappers.$RefTo$Snap $t@2530))))
(declare-const $t@2531 $Snap)
(declare-const $t@2532 $Ref)
(assert (= $t@2529 ($Snap.combine $t@2531 ($SortWrappers.$RefTo$Snap $t@2532))))
(declare-const $t@2533 $Snap)
(declare-const $t@2534 $Snap)
(assert (= $t@2531 ($Snap.combine $t@2533 $t@2534)))
(declare-const $t@2535 $Snap)
(declare-const $t@2536 $Ref)
(assert (= $t@2533 ($Snap.combine $t@2535 ($SortWrappers.$RefTo$Snap $t@2536))))
(declare-const $t@2537 $Snap)
(assert (= $t@2535 ($Snap.combine $t@2537 $Snap.unit)))
(declare-const $t@2538 Int)
(declare-const $t@2539 $Ref)
(assert (=
  $t@2537
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@2538)
    ($SortWrappers.$RefTo$Snap $t@2539))))
(declare-const $t@2540 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@2538)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@2540) $Snap.unit)))
(declare-const $k@2541 $Perm)
(assert ($Perm.isValidVar $k@2541))
(assert ($Perm.isReadVar $k@2541 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@2329 $k@2466) $k@2483) $k@2523))
  (= $t@2540 $t@2482)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 8
(assert (not (not (= (+ (- (+ (- $k@2329 $k@2466) $k@2483) $k@2523) $k@2541) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- (+ (- $k@2329 $k@2466) $k@2483) $k@2523) $k@2541) $Perm.No)))
(assert (> $t@2540 0))
(declare-const $k@2542 $Perm)
(assert ($Perm.isValidVar $k@2542))
(assert ($Perm.isReadVar $k@2542 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@2331 $k@2467) $k@2484) $k@2524))
  (= $t@2539 $t@2481)))
; [eval] diz.BlockingQueue__count != null
(push) ; 8
(assert (not (not (= (+ (- (+ (- $k@2331 $k@2467) $k@2484) $k@2524) $k@2542) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- (+ (- $k@2331 $k@2467) $k@2484) $k@2524) $k@2542) $Perm.No)))
(assert (not (= $t@2539 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 8
(assert (not (= $t@2536 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= $t@2536 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
(push) ; 8
; [then-branch 396] $t@2536 != Null
(assert (not (= $t@2536 $Ref.null)))
(declare-const $k@2543 $Perm)
(assert ($Perm.isValidVar $k@2543))
(assert ($Perm.isReadVar $k@2543 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@2446 $k@2468) $k@2521) $k@2525))
  (= $t@2532 $t@2474)))
(declare-const $k@2544 $Perm)
(assert ($Perm.isValidVar $k@2544))
(assert ($Perm.isReadVar $k@2544 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@2448 $k@2469) $k@2522) $k@2526))
  (= $t@2530 $t@2472)))
; [exec]
; i := __flatten_64
(declare-const $k@2545 $Perm)
(assert ($Perm.isValidVar $k@2545))
(assert ($Perm.isReadVar $k@2545 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@2545 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@2545 $k@2327))
(declare-const $k@2546 $Perm)
(assert ($Perm.isValidVar $k@2546))
(assert ($Perm.isReadVar $k@2546 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@2546 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@2546 (+ (- (+ (- $k@2329 $k@2466) $k@2483) $k@2523) $k@2541)))
; [eval] diz.LBQThread2b__queue.BlockingQueue__capacity > 0
(declare-const $k@2547 $Perm)
(assert ($Perm.isValidVar $k@2547))
(assert ($Perm.isReadVar $k@2547 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@2547 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@2547 (+ (- (+ (- $k@2331 $k@2467) $k@2484) $k@2524) $k@2542)))
; [eval] diz.LBQThread2b__queue.BlockingQueue__count != null
; [eval] diz.LBQThread2b__queue.BlockingQueue__first != null
(push) ; 9
(assert (not (= $t@2536 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
(push) ; 9
; [then-branch 397] $t@2536 != Null
(declare-const $k@2548 $Perm)
(assert ($Perm.isValidVar $k@2548))
(assert ($Perm.isReadVar $k@2548 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@2548 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= (+ (- (+ (- $k@2446 $k@2468) $k@2521) $k@2525) $k@2543) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not (= (+ (- (+ (- $k@2446 $k@2468) $k@2521) $k@2525) $k@2543) $Perm.No)))
(assert (< $k@2548 (+ (- (+ (- $k@2446 $k@2468) $k@2521) $k@2525) $k@2543)))
(declare-const $k@2549 $Perm)
(assert ($Perm.isValidVar $k@2549))
(assert ($Perm.isReadVar $k@2549 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@2549 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= (+ (- (+ (- $k@2448 $k@2469) $k@2522) $k@2526) $k@2544) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not (= (+ (- (+ (- $k@2448 $k@2469) $k@2522) $k@2526) $k@2544) $Perm.No)))
(assert (< $k@2549 (+ (- (+ (- $k@2448 $k@2469) $k@2522) $k@2526) $k@2544)))
(pop) ; 9
; [dead else-branch 397] $t@2536 == Null
(pop) ; 8
(push) ; 8
; [else-branch 396] $t@2536 == Null
(assert (= $t@2536 $Ref.null))
(declare-const $k@2550 $Perm)
(assert ($Perm.isValidVar $k@2550))
(assert ($Perm.isReadVar $k@2550 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@2446 $k@2468) $k@2521) $k@2525))
  (= $t@2532 $t@2474)))
(declare-const $k@2551 $Perm)
(assert ($Perm.isValidVar $k@2551))
(assert ($Perm.isReadVar $k@2551 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@2448 $k@2469) $k@2522) $k@2526))
  (= $t@2530 $t@2472)))
; [exec]
; i := __flatten_64
(declare-const $k@2552 $Perm)
(assert ($Perm.isValidVar $k@2552))
(assert ($Perm.isReadVar $k@2552 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@2552 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@2552 $k@2327))
(declare-const $k@2553 $Perm)
(assert ($Perm.isValidVar $k@2553))
(assert ($Perm.isReadVar $k@2553 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@2553 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@2553 (+ (- (+ (- $k@2329 $k@2466) $k@2483) $k@2523) $k@2541)))
; [eval] diz.LBQThread2b__queue.BlockingQueue__capacity > 0
(declare-const $k@2554 $Perm)
(assert ($Perm.isValidVar $k@2554))
(assert ($Perm.isReadVar $k@2554 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@2554 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@2554 (+ (- (+ (- $k@2331 $k@2467) $k@2484) $k@2524) $k@2542)))
; [eval] diz.LBQThread2b__queue.BlockingQueue__count != null
; [eval] diz.LBQThread2b__queue.BlockingQueue__first != null
(push) ; 9
(assert (not (not (= $t@2536 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
; [dead then-branch 398] $t@2536 != Null
(push) ; 9
; [else-branch 398] $t@2536 == Null
(declare-const $k@2555 $Perm)
(assert ($Perm.isValidVar $k@2555))
(assert ($Perm.isReadVar $k@2555 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@2555 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= (+ (- (+ (- $k@2446 $k@2468) $k@2521) $k@2525) $k@2550) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not (= (+ (- (+ (- $k@2446 $k@2468) $k@2521) $k@2525) $k@2550) $Perm.No)))
(assert (< $k@2555 (+ (- (+ (- $k@2446 $k@2468) $k@2521) $k@2525) $k@2550)))
(declare-const $k@2556 $Perm)
(assert ($Perm.isValidVar $k@2556))
(assert ($Perm.isReadVar $k@2556 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@2556 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= (+ (- (+ (- $k@2448 $k@2469) $k@2522) $k@2526) $k@2551) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not (= (+ (- (+ (- $k@2448 $k@2469) $k@2522) $k@2526) $k@2551) $Perm.No)))
(assert (< $k@2556 (+ (- (+ (- $k@2448 $k@2469) $k@2522) $k@2526) $k@2551)))
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
; ---------- LBQThread3a__LBQThread1a ----------
(declare-const queue@2557 $Ref)
(declare-const sys__result@2558 $Ref)
(declare-const diz@2559 $Ref)
(declare-const __flatten_65@2560 $Ref)
(declare-const __flatten_147@2561 $Ref)
(push) ; 2
(assert (not (= queue@2557 $Ref.null)))
(declare-const $k@2562 $Perm)
(assert ($Perm.isValidVar $k@2562))
(assert ($Perm.isReadVar $k@2562 $Perm.Write))
(declare-const $t@2563 Int)
; [eval] queue.BlockingQueue__capacity > 0
(push) ; 3
(assert (not (not (= $k@2562 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 3
(assert (not (= $k@2562 $Perm.No)))
(assert (> $t@2563 0))
(declare-const $k@2564 $Perm)
(assert ($Perm.isValidVar $k@2564))
(assert ($Perm.isReadVar $k@2564 $Perm.Write))
(declare-const $t@2565 $Ref)
; [eval] queue.BlockingQueue__count != null
(push) ; 3
(assert (not (not (= $k@2564 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 3
(assert (not (= $k@2564 $Perm.No)))
(assert (not (= $t@2565 $Ref.null)))
(declare-const $t@2566 $Ref)
; [eval] queue.BlockingQueue__first != null
(push) ; 3
(assert (not (= $t@2566 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 3
(push) ; 3
(assert (not (not (= $t@2566 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 3
(push) ; 3
; [then-branch 399] $t@2566 != Null
(assert (not (= $t@2566 $Ref.null)))
(declare-const $t@2567 $Snap)
(declare-const $k@2568 $Perm)
(assert ($Perm.isValidVar $k@2568))
(assert ($Perm.isReadVar $k@2568 $Perm.Write))
(declare-const $t@2569 $Ref)
(declare-const $k@2570 $Perm)
(assert ($Perm.isValidVar $k@2570))
(assert ($Perm.isReadVar $k@2570 $Perm.Write))
(declare-const $t@2571 $Ref)
(push) ; 4
; [eval] sys__result != null
(assert (not (= sys__result@2558 $Ref.null)))
(declare-const $k@2572 $Perm)
(assert ($Perm.isValidVar $k@2572))
(assert ($Perm.isReadVar $k@2572 $Perm.Write))
(declare-const $t@2573 $Ref)
(push) ; 5
(assert (not (not (= $k@2572 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@2572 $Perm.No)))
(assert (not (= $t@2573 $Ref.null)))
(declare-const $k@2574 $Perm)
(assert ($Perm.isValidVar $k@2574))
(assert ($Perm.isReadVar $k@2574 $Perm.Write))
(declare-const $t@2575 Int)
; [eval] sys__result.LBQThread3a__queue.BlockingQueue__capacity > 0
(push) ; 5
(assert (not (not (= $k@2574 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@2574 $Perm.No)))
(assert (> $t@2575 0))
(declare-const $k@2576 $Perm)
(assert ($Perm.isValidVar $k@2576))
(assert ($Perm.isReadVar $k@2576 $Perm.Write))
(declare-const $t@2577 $Ref)
; [eval] sys__result.LBQThread3a__queue.BlockingQueue__count != null
(push) ; 5
(assert (not (not (= $k@2576 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@2576 $Perm.No)))
(assert (not (= $t@2577 $Ref.null)))
(declare-const $t@2578 $Ref)
; [eval] sys__result.LBQThread3a__queue.BlockingQueue__first != null
(push) ; 5
(assert (not (= $t@2578 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
(assert (not (not (= $t@2578 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
; [then-branch 400] $t@2578 != Null
(assert (not (= $t@2578 $Ref.null)))
(declare-const $t@2579 $Snap)
(declare-const $k@2580 $Perm)
(assert ($Perm.isValidVar $k@2580))
(assert ($Perm.isReadVar $k@2580 $Perm.Write))
(declare-const $t@2581 $Ref)
(declare-const $k@2582 $Perm)
(assert ($Perm.isValidVar $k@2582))
(assert ($Perm.isReadVar $k@2582 $Perm.Write))
(declare-const $t@2583 $Ref)
(pop) ; 5
(push) ; 5
; [else-branch 400] $t@2578 == Null
(assert (= $t@2578 $Ref.null))
(declare-const $k@2584 $Perm)
(assert ($Perm.isValidVar $k@2584))
(assert ($Perm.isReadVar $k@2584 $Perm.Write))
(declare-const $t@2585 $Ref)
(declare-const $k@2586 $Perm)
(assert ($Perm.isValidVar $k@2586))
(assert ($Perm.isReadVar $k@2586 $Perm.Write))
(declare-const $t@2587 $Ref)
(pop) ; 5
(pop) ; 4
(push) ; 4
; [exec]
; diz := new(LBQThread3a__queue)
(declare-const diz@2588 $Ref)
(assert (not (= diz@2588 $Ref.null)))
(declare-const LBQThread3a__queue@2589 $Ref)
(assert (and
  (not (= queue@2557 diz@2588))
  (not (= sys__result@2558 diz@2588))
  (not (= __flatten_65@2560 diz@2588))
  (not (= __flatten_147@2561 diz@2588))
  (not (= $t@2566 diz@2588))
  (not (= LBQThread3a__queue@2589 diz@2588))
  (not (= $t@2565 diz@2588))
  (not (= $t@2569 diz@2588))
  (not (= $t@2571 diz@2588))))
; [exec]
; __flatten_65 := queue
; [exec]
; __flatten_147 := __flatten_65
; [exec]
; diz.LBQThread3a__queue := __flatten_147
; [exec]
; sys__result := diz
; [exec]
; assert (sys__result != null) && acc(sys__result.LBQThread3a__queue, wildcard) && acc(sys__result.LBQThread3a__queue.BlockingQueue__capacity, wildcard) && (sys__result.LBQThread3a__queue.BlockingQueue__capacity > 0) && acc(sys__result.LBQThread3a__queue.BlockingQueue__count, wildcard) && (sys__result.LBQThread3a__queue.BlockingQueue__count != null) && acc(sys__result.LBQThread3a__queue.BlockingQueue__first, write) && ((sys__result.LBQThread3a__queue.BlockingQueue__first != null) ==> acc(Node__state(sys__result.LBQThread3a__queue.BlockingQueue__first), write)) && acc(sys__result.LBQThread3a__queue.BlockingQueue__putLock, wildcard) && acc(sys__result.LBQThread3a__queue.BlockingQueue__takeLock, wildcard)
; [eval] sys__result != null
(declare-const $k@2590 $Perm)
(assert ($Perm.isValidVar $k@2590))
(assert ($Perm.isReadVar $k@2590 $Perm.Write))
(push) ; 5
(assert (not (or (= $k@2590 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (< $k@2590 $Perm.Write))
(declare-const $k@2591 $Perm)
(assert ($Perm.isValidVar $k@2591))
(assert ($Perm.isReadVar $k@2591 $Perm.Write))
(push) ; 5
(assert (not (or (= $k@2591 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (< $k@2591 $k@2562))
; [eval] sys__result.LBQThread3a__queue.BlockingQueue__capacity > 0
(declare-const $k@2592 $Perm)
(assert ($Perm.isValidVar $k@2592))
(assert ($Perm.isReadVar $k@2592 $Perm.Write))
(push) ; 5
(assert (not (or (= $k@2592 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (< $k@2592 $k@2564))
; [eval] sys__result.LBQThread3a__queue.BlockingQueue__count != null
; [eval] sys__result.LBQThread3a__queue.BlockingQueue__first != null
(push) ; 5
(assert (not (= $t@2566 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
; [then-branch 401] $t@2566 != Null
(declare-const $k@2593 $Perm)
(assert ($Perm.isValidVar $k@2593))
(assert ($Perm.isReadVar $k@2593 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@2593 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(push) ; 6
(assert (not (not (= $k@2568 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= $k@2568 $Perm.No)))
(assert (< $k@2593 $k@2568))
(declare-const $k@2594 $Perm)
(assert ($Perm.isValidVar $k@2594))
(assert ($Perm.isReadVar $k@2594 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@2594 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(push) ; 6
(assert (not (not (= $k@2570 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= $k@2570 $Perm.No)))
(assert (< $k@2594 $k@2570))
; [exec]
; inhale false
(pop) ; 5
; [dead else-branch 401] $t@2566 == Null
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch 399] $t@2566 == Null
(assert (= $t@2566 $Ref.null))
(declare-const $k@2595 $Perm)
(assert ($Perm.isValidVar $k@2595))
(assert ($Perm.isReadVar $k@2595 $Perm.Write))
(declare-const $t@2596 $Ref)
(declare-const $k@2597 $Perm)
(assert ($Perm.isValidVar $k@2597))
(assert ($Perm.isReadVar $k@2597 $Perm.Write))
(declare-const $t@2598 $Ref)
(push) ; 4
; [eval] sys__result != null
(assert (not (= sys__result@2558 $Ref.null)))
(declare-const $k@2599 $Perm)
(assert ($Perm.isValidVar $k@2599))
(assert ($Perm.isReadVar $k@2599 $Perm.Write))
(declare-const $t@2600 $Ref)
(push) ; 5
(assert (not (not (= $k@2599 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@2599 $Perm.No)))
(assert (not (= $t@2600 $Ref.null)))
(declare-const $k@2601 $Perm)
(assert ($Perm.isValidVar $k@2601))
(assert ($Perm.isReadVar $k@2601 $Perm.Write))
(declare-const $t@2602 Int)
; [eval] sys__result.LBQThread3a__queue.BlockingQueue__capacity > 0
(push) ; 5
(assert (not (not (= $k@2601 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@2601 $Perm.No)))
(assert (> $t@2602 0))
(declare-const $k@2603 $Perm)
(assert ($Perm.isValidVar $k@2603))
(assert ($Perm.isReadVar $k@2603 $Perm.Write))
(declare-const $t@2604 $Ref)
; [eval] sys__result.LBQThread3a__queue.BlockingQueue__count != null
(push) ; 5
(assert (not (not (= $k@2603 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@2603 $Perm.No)))
(assert (not (= $t@2604 $Ref.null)))
(declare-const $t@2605 $Ref)
; [eval] sys__result.LBQThread3a__queue.BlockingQueue__first != null
(push) ; 5
(assert (not (= $t@2605 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
(assert (not (not (= $t@2605 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
; [then-branch 402] $t@2605 != Null
(assert (not (= $t@2605 $Ref.null)))
(declare-const $t@2606 $Snap)
(declare-const $k@2607 $Perm)
(assert ($Perm.isValidVar $k@2607))
(assert ($Perm.isReadVar $k@2607 $Perm.Write))
(declare-const $t@2608 $Ref)
(declare-const $k@2609 $Perm)
(assert ($Perm.isValidVar $k@2609))
(assert ($Perm.isReadVar $k@2609 $Perm.Write))
(declare-const $t@2610 $Ref)
(pop) ; 5
(push) ; 5
; [else-branch 402] $t@2605 == Null
(assert (= $t@2605 $Ref.null))
(declare-const $k@2611 $Perm)
(assert ($Perm.isValidVar $k@2611))
(assert ($Perm.isReadVar $k@2611 $Perm.Write))
(declare-const $t@2612 $Ref)
(declare-const $k@2613 $Perm)
(assert ($Perm.isValidVar $k@2613))
(assert ($Perm.isReadVar $k@2613 $Perm.Write))
(declare-const $t@2614 $Ref)
(pop) ; 5
(pop) ; 4
(push) ; 4
; [exec]
; diz := new(LBQThread3a__queue)
(declare-const diz@2615 $Ref)
(assert (not (= diz@2615 $Ref.null)))
(declare-const LBQThread3a__queue@2616 $Ref)
(assert (and
  (not (= queue@2557 diz@2615))
  (not (= sys__result@2558 diz@2615))
  (not (= __flatten_65@2560 diz@2615))
  (not (= __flatten_147@2561 diz@2615))
  (not (= LBQThread3a__queue@2616 diz@2615))
  (not (= $t@2565 diz@2615))
  (not (= $t@2566 diz@2615))
  (not (= $t@2596 diz@2615))
  (not (= $t@2598 diz@2615))))
; [exec]
; __flatten_65 := queue
; [exec]
; __flatten_147 := __flatten_65
; [exec]
; diz.LBQThread3a__queue := __flatten_147
; [exec]
; sys__result := diz
; [exec]
; assert (sys__result != null) && acc(sys__result.LBQThread3a__queue, wildcard) && acc(sys__result.LBQThread3a__queue.BlockingQueue__capacity, wildcard) && (sys__result.LBQThread3a__queue.BlockingQueue__capacity > 0) && acc(sys__result.LBQThread3a__queue.BlockingQueue__count, wildcard) && (sys__result.LBQThread3a__queue.BlockingQueue__count != null) && acc(sys__result.LBQThread3a__queue.BlockingQueue__first, write) && ((sys__result.LBQThread3a__queue.BlockingQueue__first != null) ==> acc(Node__state(sys__result.LBQThread3a__queue.BlockingQueue__first), write)) && acc(sys__result.LBQThread3a__queue.BlockingQueue__putLock, wildcard) && acc(sys__result.LBQThread3a__queue.BlockingQueue__takeLock, wildcard)
; [eval] sys__result != null
(declare-const $k@2617 $Perm)
(assert ($Perm.isValidVar $k@2617))
(assert ($Perm.isReadVar $k@2617 $Perm.Write))
(push) ; 5
(assert (not (or (= $k@2617 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (< $k@2617 $Perm.Write))
(declare-const $k@2618 $Perm)
(assert ($Perm.isValidVar $k@2618))
(assert ($Perm.isReadVar $k@2618 $Perm.Write))
(push) ; 5
(assert (not (or (= $k@2618 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (< $k@2618 $k@2562))
; [eval] sys__result.LBQThread3a__queue.BlockingQueue__capacity > 0
(declare-const $k@2619 $Perm)
(assert ($Perm.isValidVar $k@2619))
(assert ($Perm.isReadVar $k@2619 $Perm.Write))
(push) ; 5
(assert (not (or (= $k@2619 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (< $k@2619 $k@2564))
; [eval] sys__result.LBQThread3a__queue.BlockingQueue__count != null
; [eval] sys__result.LBQThread3a__queue.BlockingQueue__first != null
(push) ; 5
(assert (not (not (= $t@2566 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
; [dead then-branch 403] $t@2566 != Null
(push) ; 5
; [else-branch 403] $t@2566 == Null
(declare-const $k@2620 $Perm)
(assert ($Perm.isValidVar $k@2620))
(assert ($Perm.isReadVar $k@2620 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@2620 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(push) ; 6
(assert (not (not (= $k@2595 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= $k@2595 $Perm.No)))
(assert (< $k@2620 $k@2595))
(declare-const $k@2621 $Perm)
(assert ($Perm.isValidVar $k@2621))
(assert ($Perm.isReadVar $k@2621 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@2621 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(push) ; 6
(assert (not (not (= $k@2597 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= $k@2597 $Perm.No)))
(assert (< $k@2621 $k@2597))
; [exec]
; inhale false
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
; ---------- LBQThread3a__forkOperator ----------
(declare-const diz@2622 $Ref)
(push) ; 2
; [eval] diz != null
(assert (not (= diz@2622 $Ref.null)))
(declare-const $k@2623 $Perm)
(assert ($Perm.isValidVar $k@2623))
(assert ($Perm.isReadVar $k@2623 $Perm.Write))
(declare-const $t@2624 $Ref)
(push) ; 3
(assert (not (not (= $k@2623 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 3
(assert (not (= $k@2623 $Perm.No)))
(assert (not (= $t@2624 $Ref.null)))
(declare-const $k@2625 $Perm)
(assert ($Perm.isValidVar $k@2625))
(assert ($Perm.isReadVar $k@2625 $Perm.Write))
(declare-const $t@2626 Int)
; [eval] diz.LBQThread3a__queue.BlockingQueue__capacity > 0
(push) ; 3
(assert (not (not (= $k@2625 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 3
(assert (not (= $k@2625 $Perm.No)))
(assert (> $t@2626 0))
(declare-const $k@2627 $Perm)
(assert ($Perm.isValidVar $k@2627))
(assert ($Perm.isReadVar $k@2627 $Perm.Write))
(declare-const $t@2628 $Ref)
; [eval] diz.LBQThread3a__queue.BlockingQueue__count != null
(push) ; 3
(assert (not (not (= $k@2627 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 3
(assert (not (= $k@2627 $Perm.No)))
(assert (not (= $t@2628 $Ref.null)))
(declare-const $t@2629 $Ref)
; [eval] diz.LBQThread3a__queue.BlockingQueue__first != null
(push) ; 3
(assert (not (= $t@2629 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 3
(push) ; 3
(assert (not (not (= $t@2629 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 3
(push) ; 3
; [then-branch 404] $t@2629 != Null
(assert (not (= $t@2629 $Ref.null)))
(declare-const $t@2630 $Snap)
(declare-const $k@2631 $Perm)
(assert ($Perm.isValidVar $k@2631))
(assert ($Perm.isReadVar $k@2631 $Perm.Write))
(declare-const $t@2632 $Ref)
(declare-const $k@2633 $Perm)
(assert ($Perm.isValidVar $k@2633))
(assert ($Perm.isReadVar $k@2633 $Perm.Write))
(declare-const $t@2634 $Ref)
(push) ; 4
(declare-const $t@2635 $Snap)
(pop) ; 4
(push) ; 4
; [exec]
; inhale false
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch 404] $t@2629 == Null
(assert (= $t@2629 $Ref.null))
(declare-const $k@2636 $Perm)
(assert ($Perm.isValidVar $k@2636))
(assert ($Perm.isReadVar $k@2636 $Perm.Write))
(declare-const $t@2637 $Ref)
(declare-const $k@2638 $Perm)
(assert ($Perm.isValidVar $k@2638))
(assert ($Perm.isReadVar $k@2638 $Perm.Write))
(declare-const $t@2639 $Ref)
(push) ; 4
(declare-const $t@2640 $Snap)
(pop) ; 4
(push) ; 4
; [exec]
; inhale false
(pop) ; 4
(pop) ; 3
(pop) ; 2
; ---------- LBQThread3a__joinOperator ----------
(declare-const diz@2641 $Ref)
(push) ; 2
; [eval] diz != null
(assert (not (= diz@2641 $Ref.null)))
(declare-const $t@2642 $Snap)
(push) ; 3
(declare-const $k@2643 $Perm)
(assert ($Perm.isValidVar $k@2643))
(assert ($Perm.isReadVar $k@2643 $Perm.Write))
(declare-const $t@2644 $Ref)
(push) ; 4
(assert (not (not (= $k@2643 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 4
(assert (not (= $k@2643 $Perm.No)))
(assert (not (= $t@2644 $Ref.null)))
(declare-const $k@2645 $Perm)
(assert ($Perm.isValidVar $k@2645))
(assert ($Perm.isReadVar $k@2645 $Perm.Write))
(declare-const $t@2646 Int)
; [eval] diz.LBQThread3a__queue.BlockingQueue__capacity > 0
(push) ; 4
(assert (not (not (= $k@2645 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 4
(assert (not (= $k@2645 $Perm.No)))
(assert (> $t@2646 0))
(declare-const $k@2647 $Perm)
(assert ($Perm.isValidVar $k@2647))
(assert ($Perm.isReadVar $k@2647 $Perm.Write))
(declare-const $t@2648 $Ref)
; [eval] diz.LBQThread3a__queue.BlockingQueue__count != null
(push) ; 4
(assert (not (not (= $k@2647 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 4
(assert (not (= $k@2647 $Perm.No)))
(assert (not (= $t@2648 $Ref.null)))
(declare-const $t@2649 $Ref)
; [eval] diz.LBQThread3a__queue.BlockingQueue__first != null
(push) ; 4
(assert (not (= $t@2649 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 4
(push) ; 4
(assert (not (not (= $t@2649 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 4
(push) ; 4
; [then-branch 405] $t@2649 != Null
(assert (not (= $t@2649 $Ref.null)))
(declare-const $t@2650 $Snap)
(declare-const $k@2651 $Perm)
(assert ($Perm.isValidVar $k@2651))
(assert ($Perm.isReadVar $k@2651 $Perm.Write))
(declare-const $t@2652 $Ref)
(declare-const $k@2653 $Perm)
(assert ($Perm.isValidVar $k@2653))
(assert ($Perm.isReadVar $k@2653 $Perm.Write))
(declare-const $t@2654 $Ref)
(pop) ; 4
(push) ; 4
; [else-branch 405] $t@2649 == Null
(assert (= $t@2649 $Ref.null))
(declare-const $k@2655 $Perm)
(assert ($Perm.isValidVar $k@2655))
(assert ($Perm.isReadVar $k@2655 $Perm.Write))
(declare-const $t@2656 $Ref)
(declare-const $k@2657 $Perm)
(assert ($Perm.isValidVar $k@2657))
(assert ($Perm.isReadVar $k@2657 $Perm.Write))
(declare-const $t@2658 $Ref)
(pop) ; 4
(pop) ; 3
(push) ; 3
; [exec]
; inhale false
(pop) ; 3
(pop) ; 2
; ---------- LBQThread3a__run ----------
(declare-const diz@2659 $Ref)
(push) ; 2
; [eval] diz != null
(assert (not (= diz@2659 $Ref.null)))
(declare-const $k@2660 $Perm)
(assert ($Perm.isValidVar $k@2660))
(assert ($Perm.isReadVar $k@2660 $Perm.Write))
(declare-const $t@2661 $Ref)
(push) ; 3
(assert (not (not (= $k@2660 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 3
(assert (not (= $k@2660 $Perm.No)))
(assert (not (= $t@2661 $Ref.null)))
(declare-const $k@2662 $Perm)
(assert ($Perm.isValidVar $k@2662))
(assert ($Perm.isReadVar $k@2662 $Perm.Write))
(declare-const $t@2663 Int)
; [eval] diz.LBQThread3a__queue.BlockingQueue__capacity > 0
(push) ; 3
(assert (not (not (= $k@2662 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 3
(assert (not (= $k@2662 $Perm.No)))
(assert (> $t@2663 0))
(declare-const $k@2664 $Perm)
(assert ($Perm.isValidVar $k@2664))
(assert ($Perm.isReadVar $k@2664 $Perm.Write))
(declare-const $t@2665 $Ref)
; [eval] diz.LBQThread3a__queue.BlockingQueue__count != null
(push) ; 3
(assert (not (not (= $k@2664 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 3
(assert (not (= $k@2664 $Perm.No)))
(assert (not (= $t@2665 $Ref.null)))
(declare-const $t@2666 $Ref)
; [eval] diz.LBQThread3a__queue.BlockingQueue__first != null
(push) ; 3
(assert (not (= $t@2666 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 3
(push) ; 3
(assert (not (not (= $t@2666 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 3
(push) ; 3
; [then-branch 406] $t@2666 != Null
(assert (not (= $t@2666 $Ref.null)))
(declare-const $t@2667 $Snap)
(declare-const $k@2668 $Perm)
(assert ($Perm.isValidVar $k@2668))
(assert ($Perm.isReadVar $k@2668 $Perm.Write))
(declare-const $t@2669 $Ref)
(declare-const $k@2670 $Perm)
(assert ($Perm.isValidVar $k@2670))
(assert ($Perm.isReadVar $k@2670 $Perm.Write))
(declare-const $t@2671 $Ref)
(push) ; 4
(declare-const $k@2672 $Perm)
(assert ($Perm.isValidVar $k@2672))
(assert ($Perm.isReadVar $k@2672 $Perm.Write))
(declare-const $t@2673 $Ref)
(push) ; 5
(assert (not (not (= $k@2672 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@2672 $Perm.No)))
(assert (not (= $t@2673 $Ref.null)))
(declare-const $k@2674 $Perm)
(assert ($Perm.isValidVar $k@2674))
(assert ($Perm.isReadVar $k@2674 $Perm.Write))
(declare-const $t@2675 Int)
; [eval] diz.LBQThread3a__queue.BlockingQueue__capacity > 0
(push) ; 5
(assert (not (not (= $k@2674 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@2674 $Perm.No)))
(assert (> $t@2675 0))
(declare-const $k@2676 $Perm)
(assert ($Perm.isValidVar $k@2676))
(assert ($Perm.isReadVar $k@2676 $Perm.Write))
(declare-const $t@2677 $Ref)
; [eval] diz.LBQThread3a__queue.BlockingQueue__count != null
(push) ; 5
(assert (not (not (= $k@2676 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@2676 $Perm.No)))
(assert (not (= $t@2677 $Ref.null)))
(declare-const $t@2678 $Ref)
; [eval] diz.LBQThread3a__queue.BlockingQueue__first != null
(push) ; 5
(assert (not (= $t@2678 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
(assert (not (not (= $t@2678 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
; [then-branch 407] $t@2678 != Null
(assert (not (= $t@2678 $Ref.null)))
(declare-const $t@2679 $Snap)
(declare-const $k@2680 $Perm)
(assert ($Perm.isValidVar $k@2680))
(assert ($Perm.isReadVar $k@2680 $Perm.Write))
(declare-const $t@2681 $Ref)
(declare-const $k@2682 $Perm)
(assert ($Perm.isValidVar $k@2682))
(assert ($Perm.isReadVar $k@2682 $Perm.Write))
(declare-const $t@2683 $Ref)
(pop) ; 5
(push) ; 5
; [else-branch 407] $t@2678 == Null
(assert (= $t@2678 $Ref.null))
(declare-const $k@2684 $Perm)
(assert ($Perm.isValidVar $k@2684))
(assert ($Perm.isReadVar $k@2684 $Perm.Write))
(declare-const $t@2685 $Ref)
(declare-const $k@2686 $Perm)
(assert ($Perm.isValidVar $k@2686))
(assert ($Perm.isReadVar $k@2686 $Perm.Write))
(declare-const $t@2687 $Ref)
(pop) ; 5
(pop) ; 4
(push) ; 4
; [exec]
; BlockingQueue__put(diz.LBQThread3a__queue, 1)
; [eval] diz != null
(declare-const $k@2688 $Perm)
(assert ($Perm.isValidVar $k@2688))
(assert ($Perm.isReadVar $k@2688 $Perm.Write))
(push) ; 5
(assert (not (or (= $k@2688 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (< $k@2688 $k@2662))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@2689 $Perm)
(assert ($Perm.isValidVar $k@2689))
(assert ($Perm.isReadVar $k@2689 $Perm.Write))
(push) ; 5
(assert (not (or (= $k@2689 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (< $k@2689 $k@2664))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 5
(assert (not (= $t@2666 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
; [then-branch 408] $t@2666 != Null
(declare-const $k@2690 $Perm)
(assert ($Perm.isValidVar $k@2690))
(assert ($Perm.isReadVar $k@2690 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@2690 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(push) ; 6
(assert (not (not (= $k@2668 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= $k@2668 $Perm.No)))
(assert (< $k@2690 $k@2668))
(declare-const $k@2691 $Perm)
(assert ($Perm.isValidVar $k@2691))
(assert ($Perm.isReadVar $k@2691 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@2691 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(push) ; 6
(assert (not (not (= $k@2670 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= $k@2670 $Perm.No)))
(assert (< $k@2691 $k@2670))
(declare-const $t@2692 $Snap)
(declare-const $t@2693 $Snap)
(declare-const $t@2694 $Ref)
(assert (= $t@2692 ($Snap.combine $t@2693 ($SortWrappers.$RefTo$Snap $t@2694))))
(declare-const $t@2695 $Snap)
(declare-const $t@2696 $Ref)
(assert (= $t@2693 ($Snap.combine $t@2695 ($SortWrappers.$RefTo$Snap $t@2696))))
(declare-const $t@2697 $Snap)
(declare-const $t@2698 $Snap)
(assert (= $t@2695 ($Snap.combine $t@2697 $t@2698)))
(declare-const $t@2699 $Snap)
(declare-const $t@2700 $Ref)
(assert (= $t@2697 ($Snap.combine $t@2699 ($SortWrappers.$RefTo$Snap $t@2700))))
(declare-const $t@2701 $Snap)
(assert (= $t@2699 ($Snap.combine $t@2701 $Snap.unit)))
(declare-const $t@2702 Int)
(declare-const $t@2703 $Ref)
(assert (=
  $t@2701
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@2702)
    ($SortWrappers.$RefTo$Snap $t@2703))))
(declare-const $t@2704 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@2702)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@2704) $Snap.unit)))
(declare-const $k@2705 $Perm)
(assert ($Perm.isValidVar $k@2705))
(assert ($Perm.isReadVar $k@2705 $Perm.Write))
(assert (implies (< $Perm.No (- $k@2662 $k@2688)) (= $t@2704 $t@2663)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 6
(assert (not (not (= (+ (- $k@2662 $k@2688) $k@2705) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= (+ (- $k@2662 $k@2688) $k@2705) $Perm.No)))
(assert (> $t@2704 0))
(declare-const $k@2706 $Perm)
(assert ($Perm.isValidVar $k@2706))
(assert ($Perm.isReadVar $k@2706 $Perm.Write))
(assert (implies (< $Perm.No (- $k@2664 $k@2689)) (= $t@2703 $t@2665)))
; [eval] diz.BlockingQueue__count != null
(push) ; 6
(assert (not (not (= (+ (- $k@2664 $k@2689) $k@2706) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= (+ (- $k@2664 $k@2689) $k@2706) $Perm.No)))
(assert (not (= $t@2703 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 6
(assert (not (= $t@2700 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 6
(push) ; 6
(assert (not (not (= $t@2700 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 6
(push) ; 6
; [then-branch 409] $t@2700 != Null
(assert (not (= $t@2700 $Ref.null)))
(declare-const $k@2707 $Perm)
(assert ($Perm.isValidVar $k@2707))
(assert ($Perm.isReadVar $k@2707 $Perm.Write))
(assert (implies (< $Perm.No (- $k@2668 $k@2690)) (= $t@2696 $t@2669)))
(declare-const $k@2708 $Perm)
(assert ($Perm.isValidVar $k@2708))
(assert ($Perm.isReadVar $k@2708 $Perm.Write))
(assert (implies (< $Perm.No (- $k@2670 $k@2691)) (= $t@2694 $t@2671)))
(declare-const $k@2709 $Perm)
(assert ($Perm.isValidVar $k@2709))
(assert ($Perm.isReadVar $k@2709 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@2709 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@2709 $k@2660))
(declare-const $k@2710 $Perm)
(assert ($Perm.isValidVar $k@2710))
(assert ($Perm.isReadVar $k@2710 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@2710 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@2710 (+ (- $k@2662 $k@2688) $k@2705)))
; [eval] diz.LBQThread3a__queue.BlockingQueue__capacity > 0
(declare-const $k@2711 $Perm)
(assert ($Perm.isValidVar $k@2711))
(assert ($Perm.isReadVar $k@2711 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@2711 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@2711 (+ (- $k@2664 $k@2689) $k@2706)))
; [eval] diz.LBQThread3a__queue.BlockingQueue__count != null
; [eval] diz.LBQThread3a__queue.BlockingQueue__first != null
(push) ; 7
(assert (not (= $t@2700 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 7
(push) ; 7
; [then-branch 410] $t@2700 != Null
(declare-const $k@2712 $Perm)
(assert ($Perm.isValidVar $k@2712))
(assert ($Perm.isReadVar $k@2712 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@2712 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= (+ (- $k@2668 $k@2690) $k@2707) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- $k@2668 $k@2690) $k@2707) $Perm.No)))
(assert (< $k@2712 (+ (- $k@2668 $k@2690) $k@2707)))
(declare-const $k@2713 $Perm)
(assert ($Perm.isValidVar $k@2713))
(assert ($Perm.isReadVar $k@2713 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@2713 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= (+ (- $k@2670 $k@2691) $k@2708) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- $k@2670 $k@2691) $k@2708) $Perm.No)))
(assert (< $k@2713 (+ (- $k@2670 $k@2691) $k@2708)))
(pop) ; 7
; [dead else-branch 410] $t@2700 == Null
(pop) ; 6
(push) ; 6
; [else-branch 409] $t@2700 == Null
(assert (= $t@2700 $Ref.null))
(declare-const $k@2714 $Perm)
(assert ($Perm.isValidVar $k@2714))
(assert ($Perm.isReadVar $k@2714 $Perm.Write))
(assert (implies (< $Perm.No (- $k@2668 $k@2690)) (= $t@2696 $t@2669)))
(declare-const $k@2715 $Perm)
(assert ($Perm.isValidVar $k@2715))
(assert ($Perm.isReadVar $k@2715 $Perm.Write))
(assert (implies (< $Perm.No (- $k@2670 $k@2691)) (= $t@2694 $t@2671)))
(declare-const $k@2716 $Perm)
(assert ($Perm.isValidVar $k@2716))
(assert ($Perm.isReadVar $k@2716 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@2716 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@2716 $k@2660))
(declare-const $k@2717 $Perm)
(assert ($Perm.isValidVar $k@2717))
(assert ($Perm.isReadVar $k@2717 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@2717 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@2717 (+ (- $k@2662 $k@2688) $k@2705)))
; [eval] diz.LBQThread3a__queue.BlockingQueue__capacity > 0
(declare-const $k@2718 $Perm)
(assert ($Perm.isValidVar $k@2718))
(assert ($Perm.isReadVar $k@2718 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@2718 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@2718 (+ (- $k@2664 $k@2689) $k@2706)))
; [eval] diz.LBQThread3a__queue.BlockingQueue__count != null
; [eval] diz.LBQThread3a__queue.BlockingQueue__first != null
(push) ; 7
(assert (not (not (= $t@2700 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 7
; [dead then-branch 411] $t@2700 != Null
(push) ; 7
; [else-branch 411] $t@2700 == Null
(declare-const $k@2719 $Perm)
(assert ($Perm.isValidVar $k@2719))
(assert ($Perm.isReadVar $k@2719 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@2719 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= (+ (- $k@2668 $k@2690) $k@2714) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- $k@2668 $k@2690) $k@2714) $Perm.No)))
(assert (< $k@2719 (+ (- $k@2668 $k@2690) $k@2714)))
(declare-const $k@2720 $Perm)
(assert ($Perm.isValidVar $k@2720))
(assert ($Perm.isReadVar $k@2720 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@2720 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= (+ (- $k@2670 $k@2691) $k@2715) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- $k@2670 $k@2691) $k@2715) $Perm.No)))
(assert (< $k@2720 (+ (- $k@2670 $k@2691) $k@2715)))
(pop) ; 7
(pop) ; 6
(pop) ; 5
; [dead else-branch 408] $t@2666 == Null
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch 406] $t@2666 == Null
(assert (= $t@2666 $Ref.null))
(declare-const $k@2721 $Perm)
(assert ($Perm.isValidVar $k@2721))
(assert ($Perm.isReadVar $k@2721 $Perm.Write))
(declare-const $t@2722 $Ref)
(declare-const $k@2723 $Perm)
(assert ($Perm.isValidVar $k@2723))
(assert ($Perm.isReadVar $k@2723 $Perm.Write))
(declare-const $t@2724 $Ref)
(push) ; 4
(declare-const $k@2725 $Perm)
(assert ($Perm.isValidVar $k@2725))
(assert ($Perm.isReadVar $k@2725 $Perm.Write))
(declare-const $t@2726 $Ref)
(push) ; 5
(assert (not (not (= $k@2725 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@2725 $Perm.No)))
(assert (not (= $t@2726 $Ref.null)))
(declare-const $k@2727 $Perm)
(assert ($Perm.isValidVar $k@2727))
(assert ($Perm.isReadVar $k@2727 $Perm.Write))
(declare-const $t@2728 Int)
; [eval] diz.LBQThread3a__queue.BlockingQueue__capacity > 0
(push) ; 5
(assert (not (not (= $k@2727 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@2727 $Perm.No)))
(assert (> $t@2728 0))
(declare-const $k@2729 $Perm)
(assert ($Perm.isValidVar $k@2729))
(assert ($Perm.isReadVar $k@2729 $Perm.Write))
(declare-const $t@2730 $Ref)
; [eval] diz.LBQThread3a__queue.BlockingQueue__count != null
(push) ; 5
(assert (not (not (= $k@2729 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@2729 $Perm.No)))
(assert (not (= $t@2730 $Ref.null)))
(declare-const $t@2731 $Ref)
; [eval] diz.LBQThread3a__queue.BlockingQueue__first != null
(push) ; 5
(assert (not (= $t@2731 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
(assert (not (not (= $t@2731 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
; [then-branch 412] $t@2731 != Null
(assert (not (= $t@2731 $Ref.null)))
(declare-const $t@2732 $Snap)
(declare-const $k@2733 $Perm)
(assert ($Perm.isValidVar $k@2733))
(assert ($Perm.isReadVar $k@2733 $Perm.Write))
(declare-const $t@2734 $Ref)
(declare-const $k@2735 $Perm)
(assert ($Perm.isValidVar $k@2735))
(assert ($Perm.isReadVar $k@2735 $Perm.Write))
(declare-const $t@2736 $Ref)
(pop) ; 5
(push) ; 5
; [else-branch 412] $t@2731 == Null
(assert (= $t@2731 $Ref.null))
(declare-const $k@2737 $Perm)
(assert ($Perm.isValidVar $k@2737))
(assert ($Perm.isReadVar $k@2737 $Perm.Write))
(declare-const $t@2738 $Ref)
(declare-const $k@2739 $Perm)
(assert ($Perm.isValidVar $k@2739))
(assert ($Perm.isReadVar $k@2739 $Perm.Write))
(declare-const $t@2740 $Ref)
(pop) ; 5
(pop) ; 4
(push) ; 4
; [exec]
; BlockingQueue__put(diz.LBQThread3a__queue, 1)
; [eval] diz != null
(declare-const $k@2741 $Perm)
(assert ($Perm.isValidVar $k@2741))
(assert ($Perm.isReadVar $k@2741 $Perm.Write))
(push) ; 5
(assert (not (or (= $k@2741 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (< $k@2741 $k@2662))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@2742 $Perm)
(assert ($Perm.isValidVar $k@2742))
(assert ($Perm.isReadVar $k@2742 $Perm.Write))
(push) ; 5
(assert (not (or (= $k@2742 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (< $k@2742 $k@2664))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 5
(assert (not (not (= $t@2666 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
; [dead then-branch 413] $t@2666 != Null
(push) ; 5
; [else-branch 413] $t@2666 == Null
(declare-const $k@2743 $Perm)
(assert ($Perm.isValidVar $k@2743))
(assert ($Perm.isReadVar $k@2743 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@2743 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(push) ; 6
(assert (not (not (= $k@2721 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= $k@2721 $Perm.No)))
(assert (< $k@2743 $k@2721))
(declare-const $k@2744 $Perm)
(assert ($Perm.isValidVar $k@2744))
(assert ($Perm.isReadVar $k@2744 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@2744 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(push) ; 6
(assert (not (not (= $k@2723 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= $k@2723 $Perm.No)))
(assert (< $k@2744 $k@2723))
(declare-const $t@2745 $Snap)
(declare-const $t@2746 $Snap)
(declare-const $t@2747 $Ref)
(assert (= $t@2745 ($Snap.combine $t@2746 ($SortWrappers.$RefTo$Snap $t@2747))))
(declare-const $t@2748 $Snap)
(declare-const $t@2749 $Ref)
(assert (= $t@2746 ($Snap.combine $t@2748 ($SortWrappers.$RefTo$Snap $t@2749))))
(declare-const $t@2750 $Snap)
(declare-const $t@2751 $Snap)
(assert (= $t@2748 ($Snap.combine $t@2750 $t@2751)))
(declare-const $t@2752 $Snap)
(declare-const $t@2753 $Ref)
(assert (= $t@2750 ($Snap.combine $t@2752 ($SortWrappers.$RefTo$Snap $t@2753))))
(declare-const $t@2754 $Snap)
(assert (= $t@2752 ($Snap.combine $t@2754 $Snap.unit)))
(declare-const $t@2755 Int)
(declare-const $t@2756 $Ref)
(assert (=
  $t@2754
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@2755)
    ($SortWrappers.$RefTo$Snap $t@2756))))
(declare-const $t@2757 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@2755)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@2757) $Snap.unit)))
(declare-const $k@2758 $Perm)
(assert ($Perm.isValidVar $k@2758))
(assert ($Perm.isReadVar $k@2758 $Perm.Write))
(assert (implies (< $Perm.No (- $k@2662 $k@2741)) (= $t@2757 $t@2663)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 6
(assert (not (not (= (+ (- $k@2662 $k@2741) $k@2758) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= (+ (- $k@2662 $k@2741) $k@2758) $Perm.No)))
(assert (> $t@2757 0))
(declare-const $k@2759 $Perm)
(assert ($Perm.isValidVar $k@2759))
(assert ($Perm.isReadVar $k@2759 $Perm.Write))
(assert (implies (< $Perm.No (- $k@2664 $k@2742)) (= $t@2756 $t@2665)))
; [eval] diz.BlockingQueue__count != null
(push) ; 6
(assert (not (not (= (+ (- $k@2664 $k@2742) $k@2759) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= (+ (- $k@2664 $k@2742) $k@2759) $Perm.No)))
(assert (not (= $t@2756 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 6
(assert (not (= $t@2753 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 6
(push) ; 6
(assert (not (not (= $t@2753 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 6
(push) ; 6
; [then-branch 414] $t@2753 != Null
(assert (not (= $t@2753 $Ref.null)))
(declare-const $k@2760 $Perm)
(assert ($Perm.isValidVar $k@2760))
(assert ($Perm.isReadVar $k@2760 $Perm.Write))
(assert (implies (< $Perm.No (- $k@2721 $k@2743)) (= $t@2749 $t@2722)))
(declare-const $k@2761 $Perm)
(assert ($Perm.isValidVar $k@2761))
(assert ($Perm.isReadVar $k@2761 $Perm.Write))
(assert (implies (< $Perm.No (- $k@2723 $k@2744)) (= $t@2747 $t@2724)))
(declare-const $k@2762 $Perm)
(assert ($Perm.isValidVar $k@2762))
(assert ($Perm.isReadVar $k@2762 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@2762 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@2762 $k@2660))
(declare-const $k@2763 $Perm)
(assert ($Perm.isValidVar $k@2763))
(assert ($Perm.isReadVar $k@2763 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@2763 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@2763 (+ (- $k@2662 $k@2741) $k@2758)))
; [eval] diz.LBQThread3a__queue.BlockingQueue__capacity > 0
(declare-const $k@2764 $Perm)
(assert ($Perm.isValidVar $k@2764))
(assert ($Perm.isReadVar $k@2764 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@2764 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@2764 (+ (- $k@2664 $k@2742) $k@2759)))
; [eval] diz.LBQThread3a__queue.BlockingQueue__count != null
; [eval] diz.LBQThread3a__queue.BlockingQueue__first != null
(push) ; 7
(assert (not (= $t@2753 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 7
(push) ; 7
; [then-branch 415] $t@2753 != Null
(declare-const $k@2765 $Perm)
(assert ($Perm.isValidVar $k@2765))
(assert ($Perm.isReadVar $k@2765 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@2765 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= (+ (- $k@2721 $k@2743) $k@2760) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- $k@2721 $k@2743) $k@2760) $Perm.No)))
(assert (< $k@2765 (+ (- $k@2721 $k@2743) $k@2760)))
(declare-const $k@2766 $Perm)
(assert ($Perm.isValidVar $k@2766))
(assert ($Perm.isReadVar $k@2766 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@2766 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= (+ (- $k@2723 $k@2744) $k@2761) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- $k@2723 $k@2744) $k@2761) $Perm.No)))
(assert (< $k@2766 (+ (- $k@2723 $k@2744) $k@2761)))
(pop) ; 7
; [dead else-branch 415] $t@2753 == Null
(pop) ; 6
(push) ; 6
; [else-branch 414] $t@2753 == Null
(assert (= $t@2753 $Ref.null))
(declare-const $k@2767 $Perm)
(assert ($Perm.isValidVar $k@2767))
(assert ($Perm.isReadVar $k@2767 $Perm.Write))
(assert (implies (< $Perm.No (- $k@2721 $k@2743)) (= $t@2749 $t@2722)))
(declare-const $k@2768 $Perm)
(assert ($Perm.isValidVar $k@2768))
(assert ($Perm.isReadVar $k@2768 $Perm.Write))
(assert (implies (< $Perm.No (- $k@2723 $k@2744)) (= $t@2747 $t@2724)))
(declare-const $k@2769 $Perm)
(assert ($Perm.isValidVar $k@2769))
(assert ($Perm.isReadVar $k@2769 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@2769 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@2769 $k@2660))
(declare-const $k@2770 $Perm)
(assert ($Perm.isValidVar $k@2770))
(assert ($Perm.isReadVar $k@2770 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@2770 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@2770 (+ (- $k@2662 $k@2741) $k@2758)))
; [eval] diz.LBQThread3a__queue.BlockingQueue__capacity > 0
(declare-const $k@2771 $Perm)
(assert ($Perm.isValidVar $k@2771))
(assert ($Perm.isReadVar $k@2771 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@2771 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@2771 (+ (- $k@2664 $k@2742) $k@2759)))
; [eval] diz.LBQThread3a__queue.BlockingQueue__count != null
; [eval] diz.LBQThread3a__queue.BlockingQueue__first != null
(push) ; 7
(assert (not (not (= $t@2753 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 7
; [dead then-branch 416] $t@2753 != Null
(push) ; 7
; [else-branch 416] $t@2753 == Null
(declare-const $k@2772 $Perm)
(assert ($Perm.isValidVar $k@2772))
(assert ($Perm.isReadVar $k@2772 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@2772 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= (+ (- $k@2721 $k@2743) $k@2767) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- $k@2721 $k@2743) $k@2767) $Perm.No)))
(assert (< $k@2772 (+ (- $k@2721 $k@2743) $k@2767)))
(declare-const $k@2773 $Perm)
(assert ($Perm.isValidVar $k@2773))
(assert ($Perm.isReadVar $k@2773 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@2773 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= (+ (- $k@2723 $k@2744) $k@2768) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- $k@2723 $k@2744) $k@2768) $Perm.No)))
(assert (< $k@2773 (+ (- $k@2723 $k@2744) $k@2768)))
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
; ---------- LBQThread3b__LBQThread1a ----------
(declare-const queue@2774 $Ref)
(declare-const sys__result@2775 $Ref)
(declare-const diz@2776 $Ref)
(declare-const __flatten_67@2777 $Ref)
(declare-const __flatten_149@2778 $Ref)
(push) ; 2
(assert (not (= queue@2774 $Ref.null)))
(declare-const $k@2779 $Perm)
(assert ($Perm.isValidVar $k@2779))
(assert ($Perm.isReadVar $k@2779 $Perm.Write))
(declare-const $t@2780 Int)
; [eval] queue.BlockingQueue__capacity > 0
(push) ; 3
(assert (not (not (= $k@2779 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 3
(assert (not (= $k@2779 $Perm.No)))
(assert (> $t@2780 0))
(declare-const $k@2781 $Perm)
(assert ($Perm.isValidVar $k@2781))
(assert ($Perm.isReadVar $k@2781 $Perm.Write))
(declare-const $t@2782 $Ref)
; [eval] queue.BlockingQueue__count != null
(push) ; 3
(assert (not (not (= $k@2781 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 3
(assert (not (= $k@2781 $Perm.No)))
(assert (not (= $t@2782 $Ref.null)))
(declare-const $t@2783 $Ref)
; [eval] queue.BlockingQueue__first != null
(push) ; 3
(assert (not (= $t@2783 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 3
(push) ; 3
(assert (not (not (= $t@2783 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 3
(push) ; 3
; [then-branch 417] $t@2783 != Null
(assert (not (= $t@2783 $Ref.null)))
(declare-const $t@2784 $Snap)
(declare-const $k@2785 $Perm)
(assert ($Perm.isValidVar $k@2785))
(assert ($Perm.isReadVar $k@2785 $Perm.Write))
(declare-const $t@2786 $Ref)
(declare-const $k@2787 $Perm)
(assert ($Perm.isValidVar $k@2787))
(assert ($Perm.isReadVar $k@2787 $Perm.Write))
(declare-const $t@2788 $Ref)
(push) ; 4
; [eval] sys__result != null
(assert (not (= sys__result@2775 $Ref.null)))
(declare-const $k@2789 $Perm)
(assert ($Perm.isValidVar $k@2789))
(assert ($Perm.isReadVar $k@2789 $Perm.Write))
(declare-const $t@2790 $Ref)
(push) ; 5
(assert (not (not (= $k@2789 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@2789 $Perm.No)))
(assert (not (= $t@2790 $Ref.null)))
(declare-const $k@2791 $Perm)
(assert ($Perm.isValidVar $k@2791))
(assert ($Perm.isReadVar $k@2791 $Perm.Write))
(declare-const $t@2792 Int)
; [eval] sys__result.LBQThread3b__queue.BlockingQueue__capacity > 0
(push) ; 5
(assert (not (not (= $k@2791 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@2791 $Perm.No)))
(assert (> $t@2792 0))
(declare-const $k@2793 $Perm)
(assert ($Perm.isValidVar $k@2793))
(assert ($Perm.isReadVar $k@2793 $Perm.Write))
(declare-const $t@2794 $Ref)
; [eval] sys__result.LBQThread3b__queue.BlockingQueue__count != null
(push) ; 5
(assert (not (not (= $k@2793 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@2793 $Perm.No)))
(assert (not (= $t@2794 $Ref.null)))
(declare-const $t@2795 $Ref)
; [eval] sys__result.LBQThread3b__queue.BlockingQueue__first != null
(push) ; 5
(assert (not (= $t@2795 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
(assert (not (not (= $t@2795 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
; [then-branch 418] $t@2795 != Null
(assert (not (= $t@2795 $Ref.null)))
(declare-const $t@2796 $Snap)
(declare-const $k@2797 $Perm)
(assert ($Perm.isValidVar $k@2797))
(assert ($Perm.isReadVar $k@2797 $Perm.Write))
(declare-const $t@2798 $Ref)
(declare-const $k@2799 $Perm)
(assert ($Perm.isValidVar $k@2799))
(assert ($Perm.isReadVar $k@2799 $Perm.Write))
(declare-const $t@2800 $Ref)
(pop) ; 5
(push) ; 5
; [else-branch 418] $t@2795 == Null
(assert (= $t@2795 $Ref.null))
(declare-const $k@2801 $Perm)
(assert ($Perm.isValidVar $k@2801))
(assert ($Perm.isReadVar $k@2801 $Perm.Write))
(declare-const $t@2802 $Ref)
(declare-const $k@2803 $Perm)
(assert ($Perm.isValidVar $k@2803))
(assert ($Perm.isReadVar $k@2803 $Perm.Write))
(declare-const $t@2804 $Ref)
(pop) ; 5
(pop) ; 4
(push) ; 4
; [exec]
; diz := new(LBQThread3b__queue)
(declare-const diz@2805 $Ref)
(assert (not (= diz@2805 $Ref.null)))
(declare-const LBQThread3b__queue@2806 $Ref)
(assert (and
  (not (= queue@2774 diz@2805))
  (not (= sys__result@2775 diz@2805))
  (not (= __flatten_67@2777 diz@2805))
  (not (= __flatten_149@2778 diz@2805))
  (not (= $t@2783 diz@2805))
  (not (= LBQThread3b__queue@2806 diz@2805))
  (not (= $t@2782 diz@2805))
  (not (= $t@2786 diz@2805))
  (not (= $t@2788 diz@2805))))
; [exec]
; __flatten_67 := queue
; [exec]
; __flatten_149 := __flatten_67
; [exec]
; diz.LBQThread3b__queue := __flatten_149
; [exec]
; sys__result := diz
; [exec]
; assert (sys__result != null) && acc(sys__result.LBQThread3b__queue, wildcard) && acc(sys__result.LBQThread3b__queue.BlockingQueue__capacity, wildcard) && (sys__result.LBQThread3b__queue.BlockingQueue__capacity > 0) && acc(sys__result.LBQThread3b__queue.BlockingQueue__count, wildcard) && (sys__result.LBQThread3b__queue.BlockingQueue__count != null) && acc(sys__result.LBQThread3b__queue.BlockingQueue__first, write) && ((sys__result.LBQThread3b__queue.BlockingQueue__first != null) ==> acc(Node__state(sys__result.LBQThread3b__queue.BlockingQueue__first), write)) && acc(sys__result.LBQThread3b__queue.BlockingQueue__putLock, wildcard) && acc(sys__result.LBQThread3b__queue.BlockingQueue__takeLock, wildcard)
; [eval] sys__result != null
(declare-const $k@2807 $Perm)
(assert ($Perm.isValidVar $k@2807))
(assert ($Perm.isReadVar $k@2807 $Perm.Write))
(push) ; 5
(assert (not (or (= $k@2807 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (< $k@2807 $Perm.Write))
(declare-const $k@2808 $Perm)
(assert ($Perm.isValidVar $k@2808))
(assert ($Perm.isReadVar $k@2808 $Perm.Write))
(push) ; 5
(assert (not (or (= $k@2808 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (< $k@2808 $k@2779))
; [eval] sys__result.LBQThread3b__queue.BlockingQueue__capacity > 0
(declare-const $k@2809 $Perm)
(assert ($Perm.isValidVar $k@2809))
(assert ($Perm.isReadVar $k@2809 $Perm.Write))
(push) ; 5
(assert (not (or (= $k@2809 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (< $k@2809 $k@2781))
; [eval] sys__result.LBQThread3b__queue.BlockingQueue__count != null
; [eval] sys__result.LBQThread3b__queue.BlockingQueue__first != null
(push) ; 5
(assert (not (= $t@2783 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
; [then-branch 419] $t@2783 != Null
(declare-const $k@2810 $Perm)
(assert ($Perm.isValidVar $k@2810))
(assert ($Perm.isReadVar $k@2810 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@2810 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(push) ; 6
(assert (not (not (= $k@2785 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= $k@2785 $Perm.No)))
(assert (< $k@2810 $k@2785))
(declare-const $k@2811 $Perm)
(assert ($Perm.isValidVar $k@2811))
(assert ($Perm.isReadVar $k@2811 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@2811 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(push) ; 6
(assert (not (not (= $k@2787 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= $k@2787 $Perm.No)))
(assert (< $k@2811 $k@2787))
; [exec]
; inhale false
(pop) ; 5
; [dead else-branch 419] $t@2783 == Null
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch 417] $t@2783 == Null
(assert (= $t@2783 $Ref.null))
(declare-const $k@2812 $Perm)
(assert ($Perm.isValidVar $k@2812))
(assert ($Perm.isReadVar $k@2812 $Perm.Write))
(declare-const $t@2813 $Ref)
(declare-const $k@2814 $Perm)
(assert ($Perm.isValidVar $k@2814))
(assert ($Perm.isReadVar $k@2814 $Perm.Write))
(declare-const $t@2815 $Ref)
(push) ; 4
; [eval] sys__result != null
(assert (not (= sys__result@2775 $Ref.null)))
(declare-const $k@2816 $Perm)
(assert ($Perm.isValidVar $k@2816))
(assert ($Perm.isReadVar $k@2816 $Perm.Write))
(declare-const $t@2817 $Ref)
(push) ; 5
(assert (not (not (= $k@2816 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@2816 $Perm.No)))
(assert (not (= $t@2817 $Ref.null)))
(declare-const $k@2818 $Perm)
(assert ($Perm.isValidVar $k@2818))
(assert ($Perm.isReadVar $k@2818 $Perm.Write))
(declare-const $t@2819 Int)
; [eval] sys__result.LBQThread3b__queue.BlockingQueue__capacity > 0
(push) ; 5
(assert (not (not (= $k@2818 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@2818 $Perm.No)))
(assert (> $t@2819 0))
(declare-const $k@2820 $Perm)
(assert ($Perm.isValidVar $k@2820))
(assert ($Perm.isReadVar $k@2820 $Perm.Write))
(declare-const $t@2821 $Ref)
; [eval] sys__result.LBQThread3b__queue.BlockingQueue__count != null
(push) ; 5
(assert (not (not (= $k@2820 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@2820 $Perm.No)))
(assert (not (= $t@2821 $Ref.null)))
(declare-const $t@2822 $Ref)
; [eval] sys__result.LBQThread3b__queue.BlockingQueue__first != null
(push) ; 5
(assert (not (= $t@2822 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
(assert (not (not (= $t@2822 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
; [then-branch 420] $t@2822 != Null
(assert (not (= $t@2822 $Ref.null)))
(declare-const $t@2823 $Snap)
(declare-const $k@2824 $Perm)
(assert ($Perm.isValidVar $k@2824))
(assert ($Perm.isReadVar $k@2824 $Perm.Write))
(declare-const $t@2825 $Ref)
(declare-const $k@2826 $Perm)
(assert ($Perm.isValidVar $k@2826))
(assert ($Perm.isReadVar $k@2826 $Perm.Write))
(declare-const $t@2827 $Ref)
(pop) ; 5
(push) ; 5
; [else-branch 420] $t@2822 == Null
(assert (= $t@2822 $Ref.null))
(declare-const $k@2828 $Perm)
(assert ($Perm.isValidVar $k@2828))
(assert ($Perm.isReadVar $k@2828 $Perm.Write))
(declare-const $t@2829 $Ref)
(declare-const $k@2830 $Perm)
(assert ($Perm.isValidVar $k@2830))
(assert ($Perm.isReadVar $k@2830 $Perm.Write))
(declare-const $t@2831 $Ref)
(pop) ; 5
(pop) ; 4
(push) ; 4
; [exec]
; diz := new(LBQThread3b__queue)
(declare-const diz@2832 $Ref)
(assert (not (= diz@2832 $Ref.null)))
(declare-const LBQThread3b__queue@2833 $Ref)
(assert (and
  (not (= queue@2774 diz@2832))
  (not (= sys__result@2775 diz@2832))
  (not (= __flatten_67@2777 diz@2832))
  (not (= __flatten_149@2778 diz@2832))
  (not (= LBQThread3b__queue@2833 diz@2832))
  (not (= $t@2782 diz@2832))
  (not (= $t@2783 diz@2832))
  (not (= $t@2813 diz@2832))
  (not (= $t@2815 diz@2832))))
; [exec]
; __flatten_67 := queue
; [exec]
; __flatten_149 := __flatten_67
; [exec]
; diz.LBQThread3b__queue := __flatten_149
; [exec]
; sys__result := diz
; [exec]
; assert (sys__result != null) && acc(sys__result.LBQThread3b__queue, wildcard) && acc(sys__result.LBQThread3b__queue.BlockingQueue__capacity, wildcard) && (sys__result.LBQThread3b__queue.BlockingQueue__capacity > 0) && acc(sys__result.LBQThread3b__queue.BlockingQueue__count, wildcard) && (sys__result.LBQThread3b__queue.BlockingQueue__count != null) && acc(sys__result.LBQThread3b__queue.BlockingQueue__first, write) && ((sys__result.LBQThread3b__queue.BlockingQueue__first != null) ==> acc(Node__state(sys__result.LBQThread3b__queue.BlockingQueue__first), write)) && acc(sys__result.LBQThread3b__queue.BlockingQueue__putLock, wildcard) && acc(sys__result.LBQThread3b__queue.BlockingQueue__takeLock, wildcard)
; [eval] sys__result != null
(declare-const $k@2834 $Perm)
(assert ($Perm.isValidVar $k@2834))
(assert ($Perm.isReadVar $k@2834 $Perm.Write))
(push) ; 5
(assert (not (or (= $k@2834 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (< $k@2834 $Perm.Write))
(declare-const $k@2835 $Perm)
(assert ($Perm.isValidVar $k@2835))
(assert ($Perm.isReadVar $k@2835 $Perm.Write))
(push) ; 5
(assert (not (or (= $k@2835 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (< $k@2835 $k@2779))
; [eval] sys__result.LBQThread3b__queue.BlockingQueue__capacity > 0
(declare-const $k@2836 $Perm)
(assert ($Perm.isValidVar $k@2836))
(assert ($Perm.isReadVar $k@2836 $Perm.Write))
(push) ; 5
(assert (not (or (= $k@2836 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (< $k@2836 $k@2781))
; [eval] sys__result.LBQThread3b__queue.BlockingQueue__count != null
; [eval] sys__result.LBQThread3b__queue.BlockingQueue__first != null
(push) ; 5
(assert (not (not (= $t@2783 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
; [dead then-branch 421] $t@2783 != Null
(push) ; 5
; [else-branch 421] $t@2783 == Null
(declare-const $k@2837 $Perm)
(assert ($Perm.isValidVar $k@2837))
(assert ($Perm.isReadVar $k@2837 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@2837 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(push) ; 6
(assert (not (not (= $k@2812 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= $k@2812 $Perm.No)))
(assert (< $k@2837 $k@2812))
(declare-const $k@2838 $Perm)
(assert ($Perm.isValidVar $k@2838))
(assert ($Perm.isReadVar $k@2838 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@2838 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(push) ; 6
(assert (not (not (= $k@2814 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= $k@2814 $Perm.No)))
(assert (< $k@2838 $k@2814))
; [exec]
; inhale false
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
; ---------- LBQThread3b__forkOperator ----------
(declare-const diz@2839 $Ref)
(push) ; 2
; [eval] diz != null
(assert (not (= diz@2839 $Ref.null)))
(declare-const $k@2840 $Perm)
(assert ($Perm.isValidVar $k@2840))
(assert ($Perm.isReadVar $k@2840 $Perm.Write))
(declare-const $t@2841 $Ref)
(push) ; 3
(assert (not (not (= $k@2840 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 3
(assert (not (= $k@2840 $Perm.No)))
(assert (not (= $t@2841 $Ref.null)))
(declare-const $k@2842 $Perm)
(assert ($Perm.isValidVar $k@2842))
(assert ($Perm.isReadVar $k@2842 $Perm.Write))
(declare-const $t@2843 Int)
; [eval] diz.LBQThread3b__queue.BlockingQueue__capacity > 0
(push) ; 3
(assert (not (not (= $k@2842 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 3
(assert (not (= $k@2842 $Perm.No)))
(assert (> $t@2843 0))
(declare-const $k@2844 $Perm)
(assert ($Perm.isValidVar $k@2844))
(assert ($Perm.isReadVar $k@2844 $Perm.Write))
(declare-const $t@2845 $Ref)
; [eval] diz.LBQThread3b__queue.BlockingQueue__count != null
(push) ; 3
(assert (not (not (= $k@2844 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 3
(assert (not (= $k@2844 $Perm.No)))
(assert (not (= $t@2845 $Ref.null)))
(declare-const $t@2846 $Ref)
; [eval] diz.LBQThread3b__queue.BlockingQueue__first != null
(push) ; 3
(assert (not (= $t@2846 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 3
(push) ; 3
(assert (not (not (= $t@2846 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 3
(push) ; 3
; [then-branch 422] $t@2846 != Null
(assert (not (= $t@2846 $Ref.null)))
(declare-const $t@2847 $Snap)
(declare-const $k@2848 $Perm)
(assert ($Perm.isValidVar $k@2848))
(assert ($Perm.isReadVar $k@2848 $Perm.Write))
(declare-const $t@2849 $Ref)
(declare-const $k@2850 $Perm)
(assert ($Perm.isValidVar $k@2850))
(assert ($Perm.isReadVar $k@2850 $Perm.Write))
(declare-const $t@2851 $Ref)
(push) ; 4
(declare-const $t@2852 $Snap)
(pop) ; 4
(push) ; 4
; [exec]
; inhale false
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch 422] $t@2846 == Null
(assert (= $t@2846 $Ref.null))
(declare-const $k@2853 $Perm)
(assert ($Perm.isValidVar $k@2853))
(assert ($Perm.isReadVar $k@2853 $Perm.Write))
(declare-const $t@2854 $Ref)
(declare-const $k@2855 $Perm)
(assert ($Perm.isValidVar $k@2855))
(assert ($Perm.isReadVar $k@2855 $Perm.Write))
(declare-const $t@2856 $Ref)
(push) ; 4
(declare-const $t@2857 $Snap)
(pop) ; 4
(push) ; 4
; [exec]
; inhale false
(pop) ; 4
(pop) ; 3
(pop) ; 2
; ---------- LBQThread3b__joinOperator ----------
(declare-const diz@2858 $Ref)
(push) ; 2
; [eval] diz != null
(assert (not (= diz@2858 $Ref.null)))
(declare-const $t@2859 $Snap)
(push) ; 3
(declare-const $k@2860 $Perm)
(assert ($Perm.isValidVar $k@2860))
(assert ($Perm.isReadVar $k@2860 $Perm.Write))
(declare-const $t@2861 $Ref)
(push) ; 4
(assert (not (not (= $k@2860 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 4
(assert (not (= $k@2860 $Perm.No)))
(assert (not (= $t@2861 $Ref.null)))
(declare-const $k@2862 $Perm)
(assert ($Perm.isValidVar $k@2862))
(assert ($Perm.isReadVar $k@2862 $Perm.Write))
(declare-const $t@2863 Int)
; [eval] diz.LBQThread3b__queue.BlockingQueue__capacity > 0
(push) ; 4
(assert (not (not (= $k@2862 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 4
(assert (not (= $k@2862 $Perm.No)))
(assert (> $t@2863 0))
(declare-const $k@2864 $Perm)
(assert ($Perm.isValidVar $k@2864))
(assert ($Perm.isReadVar $k@2864 $Perm.Write))
(declare-const $t@2865 $Ref)
; [eval] diz.LBQThread3b__queue.BlockingQueue__count != null
(push) ; 4
(assert (not (not (= $k@2864 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 4
(assert (not (= $k@2864 $Perm.No)))
(assert (not (= $t@2865 $Ref.null)))
(declare-const $t@2866 $Ref)
; [eval] diz.LBQThread3b__queue.BlockingQueue__first != null
(push) ; 4
(assert (not (= $t@2866 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 4
(push) ; 4
(assert (not (not (= $t@2866 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 4
(push) ; 4
; [then-branch 423] $t@2866 != Null
(assert (not (= $t@2866 $Ref.null)))
(declare-const $t@2867 $Snap)
(declare-const $k@2868 $Perm)
(assert ($Perm.isValidVar $k@2868))
(assert ($Perm.isReadVar $k@2868 $Perm.Write))
(declare-const $t@2869 $Ref)
(declare-const $k@2870 $Perm)
(assert ($Perm.isValidVar $k@2870))
(assert ($Perm.isReadVar $k@2870 $Perm.Write))
(declare-const $t@2871 $Ref)
(pop) ; 4
(push) ; 4
; [else-branch 423] $t@2866 == Null
(assert (= $t@2866 $Ref.null))
(declare-const $k@2872 $Perm)
(assert ($Perm.isValidVar $k@2872))
(assert ($Perm.isReadVar $k@2872 $Perm.Write))
(declare-const $t@2873 $Ref)
(declare-const $k@2874 $Perm)
(assert ($Perm.isValidVar $k@2874))
(assert ($Perm.isReadVar $k@2874 $Perm.Write))
(declare-const $t@2875 $Ref)
(pop) ; 4
(pop) ; 3
(push) ; 3
; [exec]
; inhale false
(pop) ; 3
(pop) ; 2
; ---------- LBQThread3b__run ----------
(declare-const diz@2876 $Ref)
(declare-const i@2877 Int)
(declare-const __flatten_68@2878 Int)
(push) ; 2
; [eval] diz != null
(assert (not (= diz@2876 $Ref.null)))
(declare-const $k@2879 $Perm)
(assert ($Perm.isValidVar $k@2879))
(assert ($Perm.isReadVar $k@2879 $Perm.Write))
(declare-const $t@2880 $Ref)
(push) ; 3
(assert (not (not (= $k@2879 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 3
(assert (not (= $k@2879 $Perm.No)))
(assert (not (= $t@2880 $Ref.null)))
(declare-const $k@2881 $Perm)
(assert ($Perm.isValidVar $k@2881))
(assert ($Perm.isReadVar $k@2881 $Perm.Write))
(declare-const $t@2882 Int)
; [eval] diz.LBQThread3b__queue.BlockingQueue__capacity > 0
(push) ; 3
(assert (not (not (= $k@2881 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 3
(assert (not (= $k@2881 $Perm.No)))
(assert (> $t@2882 0))
(declare-const $k@2883 $Perm)
(assert ($Perm.isValidVar $k@2883))
(assert ($Perm.isReadVar $k@2883 $Perm.Write))
(declare-const $t@2884 $Ref)
; [eval] diz.LBQThread3b__queue.BlockingQueue__count != null
(push) ; 3
(assert (not (not (= $k@2883 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 3
(assert (not (= $k@2883 $Perm.No)))
(assert (not (= $t@2884 $Ref.null)))
(declare-const $t@2885 $Ref)
; [eval] diz.LBQThread3b__queue.BlockingQueue__first != null
(push) ; 3
(assert (not (= $t@2885 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 3
(push) ; 3
(assert (not (not (= $t@2885 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 3
(push) ; 3
; [then-branch 424] $t@2885 != Null
(assert (not (= $t@2885 $Ref.null)))
(declare-const $t@2886 $Snap)
(declare-const $k@2887 $Perm)
(assert ($Perm.isValidVar $k@2887))
(assert ($Perm.isReadVar $k@2887 $Perm.Write))
(declare-const $t@2888 $Ref)
(declare-const $k@2889 $Perm)
(assert ($Perm.isValidVar $k@2889))
(assert ($Perm.isReadVar $k@2889 $Perm.Write))
(declare-const $t@2890 $Ref)
(push) ; 4
(declare-const $k@2891 $Perm)
(assert ($Perm.isValidVar $k@2891))
(assert ($Perm.isReadVar $k@2891 $Perm.Write))
(declare-const $t@2892 $Ref)
(push) ; 5
(assert (not (not (= $k@2891 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@2891 $Perm.No)))
(assert (not (= $t@2892 $Ref.null)))
(declare-const $k@2893 $Perm)
(assert ($Perm.isValidVar $k@2893))
(assert ($Perm.isReadVar $k@2893 $Perm.Write))
(declare-const $t@2894 Int)
; [eval] diz.LBQThread3b__queue.BlockingQueue__capacity > 0
(push) ; 5
(assert (not (not (= $k@2893 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@2893 $Perm.No)))
(assert (> $t@2894 0))
(declare-const $k@2895 $Perm)
(assert ($Perm.isValidVar $k@2895))
(assert ($Perm.isReadVar $k@2895 $Perm.Write))
(declare-const $t@2896 $Ref)
; [eval] diz.LBQThread3b__queue.BlockingQueue__count != null
(push) ; 5
(assert (not (not (= $k@2895 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@2895 $Perm.No)))
(assert (not (= $t@2896 $Ref.null)))
(declare-const $t@2897 $Ref)
; [eval] diz.LBQThread3b__queue.BlockingQueue__first != null
(push) ; 5
(assert (not (= $t@2897 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
(assert (not (not (= $t@2897 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
; [then-branch 425] $t@2897 != Null
(assert (not (= $t@2897 $Ref.null)))
(declare-const $t@2898 $Snap)
(declare-const $k@2899 $Perm)
(assert ($Perm.isValidVar $k@2899))
(assert ($Perm.isReadVar $k@2899 $Perm.Write))
(declare-const $t@2900 $Ref)
(declare-const $k@2901 $Perm)
(assert ($Perm.isValidVar $k@2901))
(assert ($Perm.isReadVar $k@2901 $Perm.Write))
(declare-const $t@2902 $Ref)
(pop) ; 5
(push) ; 5
; [else-branch 425] $t@2897 == Null
(assert (= $t@2897 $Ref.null))
(declare-const $k@2903 $Perm)
(assert ($Perm.isValidVar $k@2903))
(assert ($Perm.isReadVar $k@2903 $Perm.Write))
(declare-const $t@2904 $Ref)
(declare-const $k@2905 $Perm)
(assert ($Perm.isValidVar $k@2905))
(assert ($Perm.isReadVar $k@2905 $Perm.Write))
(declare-const $t@2906 $Ref)
(pop) ; 5
(pop) ; 4
(push) ; 4
; [exec]
; __flatten_68 := BlockingQueue__take(diz.LBQThread3b__queue)
; [eval] diz != null
(declare-const $k@2907 $Perm)
(assert ($Perm.isValidVar $k@2907))
(assert ($Perm.isReadVar $k@2907 $Perm.Write))
(push) ; 5
(assert (not (or (= $k@2907 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (< $k@2907 $k@2881))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@2908 $Perm)
(assert ($Perm.isValidVar $k@2908))
(assert ($Perm.isReadVar $k@2908 $Perm.Write))
(push) ; 5
(assert (not (or (= $k@2908 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (< $k@2908 $k@2883))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 5
(assert (not (= $t@2885 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
; [then-branch 426] $t@2885 != Null
(declare-const $k@2909 $Perm)
(assert ($Perm.isValidVar $k@2909))
(assert ($Perm.isReadVar $k@2909 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@2909 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(push) ; 6
(assert (not (not (= $k@2887 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= $k@2887 $Perm.No)))
(assert (< $k@2909 $k@2887))
(declare-const $k@2910 $Perm)
(assert ($Perm.isValidVar $k@2910))
(assert ($Perm.isReadVar $k@2910 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@2910 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(push) ; 6
(assert (not (not (= $k@2889 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= $k@2889 $Perm.No)))
(assert (< $k@2910 $k@2889))
(declare-const sys__result@2911 Int)
(declare-const $t@2912 $Snap)
(declare-const $t@2913 $Snap)
(declare-const $t@2914 $Ref)
(assert (= $t@2912 ($Snap.combine $t@2913 ($SortWrappers.$RefTo$Snap $t@2914))))
(declare-const $t@2915 $Snap)
(declare-const $t@2916 $Ref)
(assert (= $t@2913 ($Snap.combine $t@2915 ($SortWrappers.$RefTo$Snap $t@2916))))
(declare-const $t@2917 $Snap)
(declare-const $t@2918 $Snap)
(assert (= $t@2915 ($Snap.combine $t@2917 $t@2918)))
(declare-const $t@2919 $Snap)
(declare-const $t@2920 $Ref)
(assert (= $t@2917 ($Snap.combine $t@2919 ($SortWrappers.$RefTo$Snap $t@2920))))
(declare-const $t@2921 $Snap)
(assert (= $t@2919 ($Snap.combine $t@2921 $Snap.unit)))
(declare-const $t@2922 Int)
(declare-const $t@2923 $Ref)
(assert (=
  $t@2921
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@2922)
    ($SortWrappers.$RefTo$Snap $t@2923))))
(declare-const $t@2924 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@2922)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@2924) $Snap.unit)))
(declare-const $k@2925 $Perm)
(assert ($Perm.isValidVar $k@2925))
(assert ($Perm.isReadVar $k@2925 $Perm.Write))
(assert (implies (< $Perm.No (- $k@2881 $k@2907)) (= $t@2924 $t@2882)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 6
(assert (not (not (= (+ (- $k@2881 $k@2907) $k@2925) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= (+ (- $k@2881 $k@2907) $k@2925) $Perm.No)))
(assert (> $t@2924 0))
(declare-const $k@2926 $Perm)
(assert ($Perm.isValidVar $k@2926))
(assert ($Perm.isReadVar $k@2926 $Perm.Write))
(assert (implies (< $Perm.No (- $k@2883 $k@2908)) (= $t@2923 $t@2884)))
; [eval] diz.BlockingQueue__count != null
(push) ; 6
(assert (not (not (= (+ (- $k@2883 $k@2908) $k@2926) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= (+ (- $k@2883 $k@2908) $k@2926) $Perm.No)))
(assert (not (= $t@2923 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 6
(assert (not (= $t@2920 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 6
(push) ; 6
(assert (not (not (= $t@2920 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 6
(push) ; 6
; [then-branch 427] $t@2920 != Null
(assert (not (= $t@2920 $Ref.null)))
(declare-const $k@2927 $Perm)
(assert ($Perm.isValidVar $k@2927))
(assert ($Perm.isReadVar $k@2927 $Perm.Write))
(assert (implies (< $Perm.No (- $k@2887 $k@2909)) (= $t@2916 $t@2888)))
(declare-const $k@2928 $Perm)
(assert ($Perm.isValidVar $k@2928))
(assert ($Perm.isReadVar $k@2928 $Perm.Write))
(assert (implies (< $Perm.No (- $k@2889 $k@2910)) (= $t@2914 $t@2890)))
; [exec]
; i := __flatten_68
(declare-const $k@2929 $Perm)
(assert ($Perm.isValidVar $k@2929))
(assert ($Perm.isReadVar $k@2929 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@2929 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@2929 $k@2879))
(declare-const $k@2930 $Perm)
(assert ($Perm.isValidVar $k@2930))
(assert ($Perm.isReadVar $k@2930 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@2930 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@2930 (+ (- $k@2881 $k@2907) $k@2925)))
; [eval] diz.LBQThread3b__queue.BlockingQueue__capacity > 0
(declare-const $k@2931 $Perm)
(assert ($Perm.isValidVar $k@2931))
(assert ($Perm.isReadVar $k@2931 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@2931 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@2931 (+ (- $k@2883 $k@2908) $k@2926)))
; [eval] diz.LBQThread3b__queue.BlockingQueue__count != null
; [eval] diz.LBQThread3b__queue.BlockingQueue__first != null
(push) ; 7
(assert (not (= $t@2920 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 7
(push) ; 7
; [then-branch 428] $t@2920 != Null
(declare-const $k@2932 $Perm)
(assert ($Perm.isValidVar $k@2932))
(assert ($Perm.isReadVar $k@2932 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@2932 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= (+ (- $k@2887 $k@2909) $k@2927) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- $k@2887 $k@2909) $k@2927) $Perm.No)))
(assert (< $k@2932 (+ (- $k@2887 $k@2909) $k@2927)))
(declare-const $k@2933 $Perm)
(assert ($Perm.isValidVar $k@2933))
(assert ($Perm.isReadVar $k@2933 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@2933 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= (+ (- $k@2889 $k@2910) $k@2928) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- $k@2889 $k@2910) $k@2928) $Perm.No)))
(assert (< $k@2933 (+ (- $k@2889 $k@2910) $k@2928)))
(pop) ; 7
; [dead else-branch 428] $t@2920 == Null
(pop) ; 6
(push) ; 6
; [else-branch 427] $t@2920 == Null
(assert (= $t@2920 $Ref.null))
(declare-const $k@2934 $Perm)
(assert ($Perm.isValidVar $k@2934))
(assert ($Perm.isReadVar $k@2934 $Perm.Write))
(assert (implies (< $Perm.No (- $k@2887 $k@2909)) (= $t@2916 $t@2888)))
(declare-const $k@2935 $Perm)
(assert ($Perm.isValidVar $k@2935))
(assert ($Perm.isReadVar $k@2935 $Perm.Write))
(assert (implies (< $Perm.No (- $k@2889 $k@2910)) (= $t@2914 $t@2890)))
; [exec]
; i := __flatten_68
(declare-const $k@2936 $Perm)
(assert ($Perm.isValidVar $k@2936))
(assert ($Perm.isReadVar $k@2936 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@2936 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@2936 $k@2879))
(declare-const $k@2937 $Perm)
(assert ($Perm.isValidVar $k@2937))
(assert ($Perm.isReadVar $k@2937 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@2937 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@2937 (+ (- $k@2881 $k@2907) $k@2925)))
; [eval] diz.LBQThread3b__queue.BlockingQueue__capacity > 0
(declare-const $k@2938 $Perm)
(assert ($Perm.isValidVar $k@2938))
(assert ($Perm.isReadVar $k@2938 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@2938 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@2938 (+ (- $k@2883 $k@2908) $k@2926)))
; [eval] diz.LBQThread3b__queue.BlockingQueue__count != null
; [eval] diz.LBQThread3b__queue.BlockingQueue__first != null
(push) ; 7
(assert (not (not (= $t@2920 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 7
; [dead then-branch 429] $t@2920 != Null
(push) ; 7
; [else-branch 429] $t@2920 == Null
(declare-const $k@2939 $Perm)
(assert ($Perm.isValidVar $k@2939))
(assert ($Perm.isReadVar $k@2939 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@2939 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= (+ (- $k@2887 $k@2909) $k@2934) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- $k@2887 $k@2909) $k@2934) $Perm.No)))
(assert (< $k@2939 (+ (- $k@2887 $k@2909) $k@2934)))
(declare-const $k@2940 $Perm)
(assert ($Perm.isValidVar $k@2940))
(assert ($Perm.isReadVar $k@2940 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@2940 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= (+ (- $k@2889 $k@2910) $k@2935) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- $k@2889 $k@2910) $k@2935) $Perm.No)))
(assert (< $k@2940 (+ (- $k@2889 $k@2910) $k@2935)))
(pop) ; 7
(pop) ; 6
(pop) ; 5
; [dead else-branch 426] $t@2885 == Null
(pop) ; 4
(pop) ; 3
(push) ; 3
; [else-branch 424] $t@2885 == Null
(assert (= $t@2885 $Ref.null))
(declare-const $k@2941 $Perm)
(assert ($Perm.isValidVar $k@2941))
(assert ($Perm.isReadVar $k@2941 $Perm.Write))
(declare-const $t@2942 $Ref)
(declare-const $k@2943 $Perm)
(assert ($Perm.isValidVar $k@2943))
(assert ($Perm.isReadVar $k@2943 $Perm.Write))
(declare-const $t@2944 $Ref)
(push) ; 4
(declare-const $k@2945 $Perm)
(assert ($Perm.isValidVar $k@2945))
(assert ($Perm.isReadVar $k@2945 $Perm.Write))
(declare-const $t@2946 $Ref)
(push) ; 5
(assert (not (not (= $k@2945 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@2945 $Perm.No)))
(assert (not (= $t@2946 $Ref.null)))
(declare-const $k@2947 $Perm)
(assert ($Perm.isValidVar $k@2947))
(assert ($Perm.isReadVar $k@2947 $Perm.Write))
(declare-const $t@2948 Int)
; [eval] diz.LBQThread3b__queue.BlockingQueue__capacity > 0
(push) ; 5
(assert (not (not (= $k@2947 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@2947 $Perm.No)))
(assert (> $t@2948 0))
(declare-const $k@2949 $Perm)
(assert ($Perm.isValidVar $k@2949))
(assert ($Perm.isReadVar $k@2949 $Perm.Write))
(declare-const $t@2950 $Ref)
; [eval] diz.LBQThread3b__queue.BlockingQueue__count != null
(push) ; 5
(assert (not (not (= $k@2949 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (not (= $k@2949 $Perm.No)))
(assert (not (= $t@2950 $Ref.null)))
(declare-const $t@2951 $Ref)
; [eval] diz.LBQThread3b__queue.BlockingQueue__first != null
(push) ; 5
(assert (not (= $t@2951 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
(assert (not (not (= $t@2951 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
(push) ; 5
; [then-branch 430] $t@2951 != Null
(assert (not (= $t@2951 $Ref.null)))
(declare-const $t@2952 $Snap)
(declare-const $k@2953 $Perm)
(assert ($Perm.isValidVar $k@2953))
(assert ($Perm.isReadVar $k@2953 $Perm.Write))
(declare-const $t@2954 $Ref)
(declare-const $k@2955 $Perm)
(assert ($Perm.isValidVar $k@2955))
(assert ($Perm.isReadVar $k@2955 $Perm.Write))
(declare-const $t@2956 $Ref)
(pop) ; 5
(push) ; 5
; [else-branch 430] $t@2951 == Null
(assert (= $t@2951 $Ref.null))
(declare-const $k@2957 $Perm)
(assert ($Perm.isValidVar $k@2957))
(assert ($Perm.isReadVar $k@2957 $Perm.Write))
(declare-const $t@2958 $Ref)
(declare-const $k@2959 $Perm)
(assert ($Perm.isValidVar $k@2959))
(assert ($Perm.isReadVar $k@2959 $Perm.Write))
(declare-const $t@2960 $Ref)
(pop) ; 5
(pop) ; 4
(push) ; 4
; [exec]
; __flatten_68 := BlockingQueue__take(diz.LBQThread3b__queue)
; [eval] diz != null
(declare-const $k@2961 $Perm)
(assert ($Perm.isValidVar $k@2961))
(assert ($Perm.isReadVar $k@2961 $Perm.Write))
(push) ; 5
(assert (not (or (= $k@2961 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (< $k@2961 $k@2881))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@2962 $Perm)
(assert ($Perm.isValidVar $k@2962))
(assert ($Perm.isReadVar $k@2962 $Perm.Write))
(push) ; 5
(assert (not (or (= $k@2962 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (< $k@2962 $k@2883))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 5
(assert (not (not (= $t@2885 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
; [dead then-branch 431] $t@2885 != Null
(push) ; 5
; [else-branch 431] $t@2885 == Null
(declare-const $k@2963 $Perm)
(assert ($Perm.isValidVar $k@2963))
(assert ($Perm.isReadVar $k@2963 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@2963 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(push) ; 6
(assert (not (not (= $k@2941 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= $k@2941 $Perm.No)))
(assert (< $k@2963 $k@2941))
(declare-const $k@2964 $Perm)
(assert ($Perm.isValidVar $k@2964))
(assert ($Perm.isReadVar $k@2964 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@2964 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(push) ; 6
(assert (not (not (= $k@2943 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= $k@2943 $Perm.No)))
(assert (< $k@2964 $k@2943))
(declare-const sys__result@2965 Int)
(declare-const $t@2966 $Snap)
(declare-const $t@2967 $Snap)
(declare-const $t@2968 $Ref)
(assert (= $t@2966 ($Snap.combine $t@2967 ($SortWrappers.$RefTo$Snap $t@2968))))
(declare-const $t@2969 $Snap)
(declare-const $t@2970 $Ref)
(assert (= $t@2967 ($Snap.combine $t@2969 ($SortWrappers.$RefTo$Snap $t@2970))))
(declare-const $t@2971 $Snap)
(declare-const $t@2972 $Snap)
(assert (= $t@2969 ($Snap.combine $t@2971 $t@2972)))
(declare-const $t@2973 $Snap)
(declare-const $t@2974 $Ref)
(assert (= $t@2971 ($Snap.combine $t@2973 ($SortWrappers.$RefTo$Snap $t@2974))))
(declare-const $t@2975 $Snap)
(assert (= $t@2973 ($Snap.combine $t@2975 $Snap.unit)))
(declare-const $t@2976 Int)
(declare-const $t@2977 $Ref)
(assert (=
  $t@2975
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@2976)
    ($SortWrappers.$RefTo$Snap $t@2977))))
(declare-const $t@2978 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@2976)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@2978) $Snap.unit)))
(declare-const $k@2979 $Perm)
(assert ($Perm.isValidVar $k@2979))
(assert ($Perm.isReadVar $k@2979 $Perm.Write))
(assert (implies (< $Perm.No (- $k@2881 $k@2961)) (= $t@2978 $t@2882)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 6
(assert (not (not (= (+ (- $k@2881 $k@2961) $k@2979) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= (+ (- $k@2881 $k@2961) $k@2979) $Perm.No)))
(assert (> $t@2978 0))
(declare-const $k@2980 $Perm)
(assert ($Perm.isValidVar $k@2980))
(assert ($Perm.isReadVar $k@2980 $Perm.Write))
(assert (implies (< $Perm.No (- $k@2883 $k@2962)) (= $t@2977 $t@2884)))
; [eval] diz.BlockingQueue__count != null
(push) ; 6
(assert (not (not (= (+ (- $k@2883 $k@2962) $k@2980) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= (+ (- $k@2883 $k@2962) $k@2980) $Perm.No)))
(assert (not (= $t@2977 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 6
(assert (not (= $t@2974 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 6
(push) ; 6
(assert (not (not (= $t@2974 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 6
(push) ; 6
; [then-branch 432] $t@2974 != Null
(assert (not (= $t@2974 $Ref.null)))
(declare-const $k@2981 $Perm)
(assert ($Perm.isValidVar $k@2981))
(assert ($Perm.isReadVar $k@2981 $Perm.Write))
(assert (implies (< $Perm.No (- $k@2941 $k@2963)) (= $t@2970 $t@2942)))
(declare-const $k@2982 $Perm)
(assert ($Perm.isValidVar $k@2982))
(assert ($Perm.isReadVar $k@2982 $Perm.Write))
(assert (implies (< $Perm.No (- $k@2943 $k@2964)) (= $t@2968 $t@2944)))
; [exec]
; i := __flatten_68
(declare-const $k@2983 $Perm)
(assert ($Perm.isValidVar $k@2983))
(assert ($Perm.isReadVar $k@2983 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@2983 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@2983 $k@2879))
(declare-const $k@2984 $Perm)
(assert ($Perm.isValidVar $k@2984))
(assert ($Perm.isReadVar $k@2984 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@2984 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@2984 (+ (- $k@2881 $k@2961) $k@2979)))
; [eval] diz.LBQThread3b__queue.BlockingQueue__capacity > 0
(declare-const $k@2985 $Perm)
(assert ($Perm.isValidVar $k@2985))
(assert ($Perm.isReadVar $k@2985 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@2985 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@2985 (+ (- $k@2883 $k@2962) $k@2980)))
; [eval] diz.LBQThread3b__queue.BlockingQueue__count != null
; [eval] diz.LBQThread3b__queue.BlockingQueue__first != null
(push) ; 7
(assert (not (= $t@2974 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 7
(push) ; 7
; [then-branch 433] $t@2974 != Null
(declare-const $k@2986 $Perm)
(assert ($Perm.isValidVar $k@2986))
(assert ($Perm.isReadVar $k@2986 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@2986 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= (+ (- $k@2941 $k@2963) $k@2981) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- $k@2941 $k@2963) $k@2981) $Perm.No)))
(assert (< $k@2986 (+ (- $k@2941 $k@2963) $k@2981)))
(declare-const $k@2987 $Perm)
(assert ($Perm.isValidVar $k@2987))
(assert ($Perm.isReadVar $k@2987 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@2987 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= (+ (- $k@2943 $k@2964) $k@2982) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- $k@2943 $k@2964) $k@2982) $Perm.No)))
(assert (< $k@2987 (+ (- $k@2943 $k@2964) $k@2982)))
(pop) ; 7
; [dead else-branch 433] $t@2974 == Null
(pop) ; 6
(push) ; 6
; [else-branch 432] $t@2974 == Null
(assert (= $t@2974 $Ref.null))
(declare-const $k@2988 $Perm)
(assert ($Perm.isValidVar $k@2988))
(assert ($Perm.isReadVar $k@2988 $Perm.Write))
(assert (implies (< $Perm.No (- $k@2941 $k@2963)) (= $t@2970 $t@2942)))
(declare-const $k@2989 $Perm)
(assert ($Perm.isValidVar $k@2989))
(assert ($Perm.isReadVar $k@2989 $Perm.Write))
(assert (implies (< $Perm.No (- $k@2943 $k@2964)) (= $t@2968 $t@2944)))
; [exec]
; i := __flatten_68
(declare-const $k@2990 $Perm)
(assert ($Perm.isValidVar $k@2990))
(assert ($Perm.isReadVar $k@2990 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@2990 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@2990 $k@2879))
(declare-const $k@2991 $Perm)
(assert ($Perm.isValidVar $k@2991))
(assert ($Perm.isReadVar $k@2991 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@2991 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@2991 (+ (- $k@2881 $k@2961) $k@2979)))
; [eval] diz.LBQThread3b__queue.BlockingQueue__capacity > 0
(declare-const $k@2992 $Perm)
(assert ($Perm.isValidVar $k@2992))
(assert ($Perm.isReadVar $k@2992 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@2992 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@2992 (+ (- $k@2883 $k@2962) $k@2980)))
; [eval] diz.LBQThread3b__queue.BlockingQueue__count != null
; [eval] diz.LBQThread3b__queue.BlockingQueue__first != null
(push) ; 7
(assert (not (not (= $t@2974 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 7
; [dead then-branch 434] $t@2974 != Null
(push) ; 7
; [else-branch 434] $t@2974 == Null
(declare-const $k@2993 $Perm)
(assert ($Perm.isValidVar $k@2993))
(assert ($Perm.isReadVar $k@2993 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@2993 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= (+ (- $k@2941 $k@2963) $k@2988) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- $k@2941 $k@2963) $k@2988) $Perm.No)))
(assert (< $k@2993 (+ (- $k@2941 $k@2963) $k@2988)))
(declare-const $k@2994 $Perm)
(assert ($Perm.isValidVar $k@2994))
(assert ($Perm.isReadVar $k@2994 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@2994 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= (+ (- $k@2943 $k@2964) $k@2989) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- $k@2943 $k@2964) $k@2989) $Perm.No)))
(assert (< $k@2994 (+ (- $k@2943 $k@2964) $k@2989)))
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
; ---------- Test__testEmpty ----------
(declare-const diz@2995 $Ref)
(declare-const queue@2996 $Ref)
(declare-const __flatten_69@2997 $Ref)
(declare-const i@2998 $Ref)
(declare-const __flatten_70@2999 $Ref)
(declare-const j@3000 $Ref)
(declare-const __flatten_71@3001 $Ref)
(push) ; 2
; [eval] diz != null
(assert (not (= diz@2995 $Ref.null)))
(push) ; 3
(pop) ; 3
(push) ; 3
; [exec]
; __flatten_69 := BlockingQueue__BlockingQueue(10)
; [eval] capacity > 0
(declare-const sys__result@3002 $Ref)
(declare-const $t@3003 $Snap)
(declare-const $t@3004 $Snap)
(assert (= $t@3003 ($Snap.combine $t@3004 $Snap.unit)))
(declare-const $t@3005 $Snap)
(assert (= $t@3004 ($Snap.combine $t@3005 $Snap.unit)))
(declare-const $t@3006 $Snap)
(declare-const $t@3007 $Ref)
(assert (= $t@3005 ($Snap.combine $t@3006 ($SortWrappers.$RefTo$Snap $t@3007))))
(declare-const $t@3008 $Snap)
(declare-const $t@3009 $Ref)
(assert (= $t@3006 ($Snap.combine $t@3008 ($SortWrappers.$RefTo$Snap $t@3009))))
(declare-const $t@3010 $Snap)
(declare-const $t@3011 $Snap)
(assert (= $t@3008 ($Snap.combine $t@3010 $t@3011)))
(declare-const $t@3012 $Snap)
(declare-const $t@3013 $Ref)
(assert (= $t@3010 ($Snap.combine $t@3012 ($SortWrappers.$RefTo$Snap $t@3013))))
(declare-const $t@3014 $Snap)
(assert (= $t@3012 ($Snap.combine $t@3014 $Snap.unit)))
(declare-const $t@3015 Int)
(declare-const $t@3016 $Ref)
(assert (=
  $t@3014
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@3015)
    ($SortWrappers.$RefTo$Snap $t@3016))))
(declare-const $t@3017 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@3015)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@3017) $Snap.unit)))
(declare-const $t@3018 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@3017)
  ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@3018))))
; [eval] sys__result != null
(assert (not (= sys__result@3002 $Ref.null)))
(declare-const $k@3019 $Perm)
(assert ($Perm.isValidVar $k@3019))
(assert ($Perm.isReadVar $k@3019 $Perm.Write))
; [eval] sys__result.BlockingQueue__capacity > 0
(push) ; 4
(assert (not (not (= $k@3019 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 4
(assert (not (= $k@3019 $Perm.No)))
(assert (> $t@3018 0))
(declare-const $k@3020 $Perm)
(assert ($Perm.isValidVar $k@3020))
(assert ($Perm.isReadVar $k@3020 $Perm.Write))
; [eval] sys__result.BlockingQueue__count != null
(push) ; 4
(assert (not (not (= $k@3020 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 4
(assert (not (= $k@3020 $Perm.No)))
(assert (not (= $t@3016 $Ref.null)))
; [eval] sys__result.BlockingQueue__first != null
(push) ; 4
(assert (not (= $t@3013 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 4
(push) ; 4
(assert (not (not (= $t@3013 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 4
(push) ; 4
; [then-branch 435] $t@3013 != Null
(assert (not (= $t@3013 $Ref.null)))
(declare-const $k@3021 $Perm)
(assert ($Perm.isValidVar $k@3021))
(assert ($Perm.isReadVar $k@3021 $Perm.Write))
(declare-const $k@3022 $Perm)
(assert ($Perm.isValidVar $k@3022))
(assert ($Perm.isReadVar $k@3022 $Perm.Write))
; [eval] sys__result.BlockingQueue__capacity == capacity
(assert (= $t@3018 10))
; [eval] sys__result.BlockingQueue__first == null
(assert (= $t@3013 $Ref.null))
; [exec]
; queue := __flatten_69
; [exec]
; __flatten_70 := BlockingQueue__peek(queue)
; [eval] diz != null
(declare-const $k@3023 $Perm)
(assert ($Perm.isValidVar $k@3023))
(assert ($Perm.isReadVar $k@3023 $Perm.Write))
(push) ; 5
(assert (not (or (= $k@3023 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (< $k@3023 $k@3019))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@3024 $Perm)
(assert ($Perm.isValidVar $k@3024))
(assert ($Perm.isReadVar $k@3024 $Perm.Write))
(push) ; 5
(assert (not (or (= $k@3024 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (< $k@3024 $k@3020))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
; [dead then-branch 436] $t@3013 != Null
; [dead else-branch 436] $t@3013 == Null
(pop) ; 4
(push) ; 4
; [else-branch 435] $t@3013 == Null
(assert (= $t@3013 $Ref.null))
(declare-const $k@3025 $Perm)
(assert ($Perm.isValidVar $k@3025))
(assert ($Perm.isReadVar $k@3025 $Perm.Write))
(declare-const $k@3026 $Perm)
(assert ($Perm.isValidVar $k@3026))
(assert ($Perm.isReadVar $k@3026 $Perm.Write))
; [eval] sys__result.BlockingQueue__capacity == capacity
(assert (= $t@3018 10))
; [eval] sys__result.BlockingQueue__first == null
; [exec]
; queue := __flatten_69
; [exec]
; __flatten_70 := BlockingQueue__peek(queue)
; [eval] diz != null
(declare-const $k@3027 $Perm)
(assert ($Perm.isValidVar $k@3027))
(assert ($Perm.isReadVar $k@3027 $Perm.Write))
(push) ; 5
(assert (not (or (= $k@3027 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (< $k@3027 $k@3019))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@3028 $Perm)
(assert ($Perm.isValidVar $k@3028))
(assert ($Perm.isReadVar $k@3028 $Perm.Write))
(push) ; 5
(assert (not (or (= $k@3028 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (< $k@3028 $k@3020))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 5
(assert (not (not (= $t@3013 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
; [dead then-branch 437] $t@3013 != Null
(push) ; 5
; [else-branch 437] $t@3013 == Null
(declare-const $k@3029 $Perm)
(assert ($Perm.isValidVar $k@3029))
(assert ($Perm.isReadVar $k@3029 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@3029 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(push) ; 6
(assert (not (not (= $k@3025 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= $k@3025 $Perm.No)))
(assert (< $k@3029 $k@3025))
(declare-const $k@3030 $Perm)
(assert ($Perm.isValidVar $k@3030))
(assert ($Perm.isReadVar $k@3030 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@3030 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(push) ; 6
(assert (not (not (= $k@3026 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= $k@3026 $Perm.No)))
(assert (< $k@3030 $k@3026))
(declare-const sys__result@3031 $Ref)
(declare-const $t@3032 $Snap)
(declare-const $t@3033 $Snap)
(declare-const $t@3034 $Ref)
(assert (= $t@3032 ($Snap.combine $t@3033 ($SortWrappers.$RefTo$Snap $t@3034))))
(declare-const $t@3035 $Snap)
(declare-const $t@3036 $Ref)
(assert (= $t@3033 ($Snap.combine $t@3035 ($SortWrappers.$RefTo$Snap $t@3036))))
(declare-const $t@3037 $Snap)
(declare-const $t@3038 $Snap)
(assert (= $t@3035 ($Snap.combine $t@3037 $t@3038)))
(declare-const $t@3039 $Snap)
(declare-const $t@3040 $Ref)
(assert (= $t@3037 ($Snap.combine $t@3039 ($SortWrappers.$RefTo$Snap $t@3040))))
(declare-const $t@3041 $Snap)
(assert (= $t@3039 ($Snap.combine $t@3041 $Snap.unit)))
(declare-const $t@3042 Int)
(declare-const $t@3043 $Ref)
(assert (=
  $t@3041
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@3042)
    ($SortWrappers.$RefTo$Snap $t@3043))))
(declare-const $t@3044 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@3042)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@3044) $Snap.unit)))
(declare-const $k@3045 $Perm)
(assert ($Perm.isValidVar $k@3045))
(assert ($Perm.isReadVar $k@3045 $Perm.Write))
(assert (implies (< $Perm.No (- $k@3019 $k@3027)) (= $t@3044 $t@3018)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 6
(assert (not (not (= (+ (- $k@3019 $k@3027) $k@3045) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= (+ (- $k@3019 $k@3027) $k@3045) $Perm.No)))
(assert (> $t@3044 0))
(declare-const $k@3046 $Perm)
(assert ($Perm.isValidVar $k@3046))
(assert ($Perm.isReadVar $k@3046 $Perm.Write))
(assert (implies (< $Perm.No (- $k@3020 $k@3028)) (= $t@3043 $t@3016)))
; [eval] diz.BlockingQueue__count != null
(push) ; 6
(assert (not (not (= (+ (- $k@3020 $k@3028) $k@3046) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= (+ (- $k@3020 $k@3028) $k@3046) $Perm.No)))
(assert (not (= $t@3043 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 6
(assert (not (= $t@3040 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 6
(push) ; 6
(assert (not (not (= $t@3040 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 6
(push) ; 6
; [then-branch 438] $t@3040 != Null
(assert (not (= $t@3040 $Ref.null)))
(declare-const $k@3047 $Perm)
(assert ($Perm.isValidVar $k@3047))
(assert ($Perm.isReadVar $k@3047 $Perm.Write))
(assert (implies (< $Perm.No (- $k@3025 $k@3029)) (= $t@3036 $t@3009)))
(declare-const $k@3048 $Perm)
(assert ($Perm.isValidVar $k@3048))
(assert ($Perm.isReadVar $k@3048 $Perm.Write))
(assert (implies (< $Perm.No (- $k@3026 $k@3030)) (= $t@3034 $t@3007)))
; [exec]
; i := __flatten_70
; [exec]
; __flatten_71 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@3049 $Perm)
(assert ($Perm.isValidVar $k@3049))
(assert ($Perm.isReadVar $k@3049 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@3049 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@3049 (+ (- $k@3019 $k@3027) $k@3045)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@3050 $Perm)
(assert ($Perm.isValidVar $k@3050))
(assert ($Perm.isReadVar $k@3050 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@3050 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@3050 (+ (- $k@3020 $k@3028) $k@3046)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 7
(assert (not (= $t@3040 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 7
(push) ; 7
; [then-branch 439] $t@3040 != Null
(declare-const $k@3051 $Perm)
(assert ($Perm.isValidVar $k@3051))
(assert ($Perm.isReadVar $k@3051 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@3051 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= (+ (- $k@3025 $k@3029) $k@3047) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- $k@3025 $k@3029) $k@3047) $Perm.No)))
(assert (< $k@3051 (+ (- $k@3025 $k@3029) $k@3047)))
(declare-const $k@3052 $Perm)
(assert ($Perm.isValidVar $k@3052))
(assert ($Perm.isReadVar $k@3052 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@3052 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= (+ (- $k@3026 $k@3030) $k@3048) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- $k@3026 $k@3030) $k@3048) $Perm.No)))
(assert (< $k@3052 (+ (- $k@3026 $k@3030) $k@3048)))
(declare-const sys__result@3053 $Ref)
(declare-const $t@3054 $Snap)
(declare-const $t@3055 $Snap)
(declare-const $t@3056 $Ref)
(assert (= $t@3054 ($Snap.combine $t@3055 ($SortWrappers.$RefTo$Snap $t@3056))))
(declare-const $t@3057 $Snap)
(declare-const $t@3058 $Ref)
(assert (= $t@3055 ($Snap.combine $t@3057 ($SortWrappers.$RefTo$Snap $t@3058))))
(declare-const $t@3059 $Snap)
(declare-const $t@3060 $Snap)
(assert (= $t@3057 ($Snap.combine $t@3059 $t@3060)))
(declare-const $t@3061 $Snap)
(declare-const $t@3062 $Ref)
(assert (= $t@3059 ($Snap.combine $t@3061 ($SortWrappers.$RefTo$Snap $t@3062))))
(declare-const $t@3063 $Snap)
(assert (= $t@3061 ($Snap.combine $t@3063 $Snap.unit)))
(declare-const $t@3064 Int)
(declare-const $t@3065 $Ref)
(assert (=
  $t@3063
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@3064)
    ($SortWrappers.$RefTo$Snap $t@3065))))
(declare-const $t@3066 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@3064)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@3066) $Snap.unit)))
(declare-const $k@3067 $Perm)
(assert ($Perm.isValidVar $k@3067))
(assert ($Perm.isReadVar $k@3067 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@3019 $k@3027) $k@3045) $k@3049))
  (= $t@3066 $t@3044)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 8
(assert (not (not (= (+ (- (+ (- $k@3019 $k@3027) $k@3045) $k@3049) $k@3067) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- (+ (- $k@3019 $k@3027) $k@3045) $k@3049) $k@3067) $Perm.No)))
(assert (> $t@3066 0))
(declare-const $k@3068 $Perm)
(assert ($Perm.isValidVar $k@3068))
(assert ($Perm.isReadVar $k@3068 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@3020 $k@3028) $k@3046) $k@3050))
  (= $t@3065 $t@3043)))
; [eval] diz.BlockingQueue__count != null
(push) ; 8
(assert (not (not (= (+ (- (+ (- $k@3020 $k@3028) $k@3046) $k@3050) $k@3068) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- (+ (- $k@3020 $k@3028) $k@3046) $k@3050) $k@3068) $Perm.No)))
(assert (not (= $t@3065 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 8
(assert (not (= $t@3062 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= $t@3062 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
(push) ; 8
; [then-branch 440] $t@3062 != Null
(assert (not (= $t@3062 $Ref.null)))
(declare-const $k@3069 $Perm)
(assert ($Perm.isValidVar $k@3069))
(assert ($Perm.isReadVar $k@3069 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@3025 $k@3029) $k@3047) $k@3051))
  (= $t@3058 $t@3036)))
(declare-const $k@3070 $Perm)
(assert ($Perm.isValidVar $k@3070))
(assert ($Perm.isReadVar $k@3070 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@3026 $k@3030) $k@3048) $k@3052))
  (= $t@3056 $t@3034)))
; [exec]
; j := __flatten_71
(pop) ; 8
(push) ; 8
; [else-branch 440] $t@3062 == Null
(assert (= $t@3062 $Ref.null))
(declare-const $k@3071 $Perm)
(assert ($Perm.isValidVar $k@3071))
(assert ($Perm.isReadVar $k@3071 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@3025 $k@3029) $k@3047) $k@3051))
  (= $t@3058 $t@3036)))
(declare-const $k@3072 $Perm)
(assert ($Perm.isValidVar $k@3072))
(assert ($Perm.isReadVar $k@3072 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@3026 $k@3030) $k@3048) $k@3052))
  (= $t@3056 $t@3034)))
; [exec]
; j := __flatten_71
(pop) ; 8
(pop) ; 7
; [dead else-branch 439] $t@3040 == Null
(pop) ; 6
(push) ; 6
; [else-branch 438] $t@3040 == Null
(assert (= $t@3040 $Ref.null))
(declare-const $k@3073 $Perm)
(assert ($Perm.isValidVar $k@3073))
(assert ($Perm.isReadVar $k@3073 $Perm.Write))
(assert (implies (< $Perm.No (- $k@3025 $k@3029)) (= $t@3036 $t@3009)))
(declare-const $k@3074 $Perm)
(assert ($Perm.isValidVar $k@3074))
(assert ($Perm.isReadVar $k@3074 $Perm.Write))
(assert (implies (< $Perm.No (- $k@3026 $k@3030)) (= $t@3034 $t@3007)))
; [exec]
; i := __flatten_70
; [exec]
; __flatten_71 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@3075 $Perm)
(assert ($Perm.isValidVar $k@3075))
(assert ($Perm.isReadVar $k@3075 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@3075 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@3075 (+ (- $k@3019 $k@3027) $k@3045)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@3076 $Perm)
(assert ($Perm.isValidVar $k@3076))
(assert ($Perm.isReadVar $k@3076 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@3076 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@3076 (+ (- $k@3020 $k@3028) $k@3046)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 7
(assert (not (not (= $t@3040 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 7
; [dead then-branch 441] $t@3040 != Null
(push) ; 7
; [else-branch 441] $t@3040 == Null
(declare-const $k@3077 $Perm)
(assert ($Perm.isValidVar $k@3077))
(assert ($Perm.isReadVar $k@3077 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@3077 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= (+ (- $k@3025 $k@3029) $k@3073) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- $k@3025 $k@3029) $k@3073) $Perm.No)))
(assert (< $k@3077 (+ (- $k@3025 $k@3029) $k@3073)))
(declare-const $k@3078 $Perm)
(assert ($Perm.isValidVar $k@3078))
(assert ($Perm.isReadVar $k@3078 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@3078 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= (+ (- $k@3026 $k@3030) $k@3074) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- $k@3026 $k@3030) $k@3074) $Perm.No)))
(assert (< $k@3078 (+ (- $k@3026 $k@3030) $k@3074)))
(declare-const sys__result@3079 $Ref)
(declare-const $t@3080 $Snap)
(declare-const $t@3081 $Snap)
(declare-const $t@3082 $Ref)
(assert (= $t@3080 ($Snap.combine $t@3081 ($SortWrappers.$RefTo$Snap $t@3082))))
(declare-const $t@3083 $Snap)
(declare-const $t@3084 $Ref)
(assert (= $t@3081 ($Snap.combine $t@3083 ($SortWrappers.$RefTo$Snap $t@3084))))
(declare-const $t@3085 $Snap)
(declare-const $t@3086 $Snap)
(assert (= $t@3083 ($Snap.combine $t@3085 $t@3086)))
(declare-const $t@3087 $Snap)
(declare-const $t@3088 $Ref)
(assert (= $t@3085 ($Snap.combine $t@3087 ($SortWrappers.$RefTo$Snap $t@3088))))
(declare-const $t@3089 $Snap)
(assert (= $t@3087 ($Snap.combine $t@3089 $Snap.unit)))
(declare-const $t@3090 Int)
(declare-const $t@3091 $Ref)
(assert (=
  $t@3089
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@3090)
    ($SortWrappers.$RefTo$Snap $t@3091))))
(declare-const $t@3092 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@3090)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@3092) $Snap.unit)))
(declare-const $k@3093 $Perm)
(assert ($Perm.isValidVar $k@3093))
(assert ($Perm.isReadVar $k@3093 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@3019 $k@3027) $k@3045) $k@3075))
  (= $t@3092 $t@3044)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 8
(assert (not (not (= (+ (- (+ (- $k@3019 $k@3027) $k@3045) $k@3075) $k@3093) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- (+ (- $k@3019 $k@3027) $k@3045) $k@3075) $k@3093) $Perm.No)))
(assert (> $t@3092 0))
(declare-const $k@3094 $Perm)
(assert ($Perm.isValidVar $k@3094))
(assert ($Perm.isReadVar $k@3094 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@3020 $k@3028) $k@3046) $k@3076))
  (= $t@3091 $t@3043)))
; [eval] diz.BlockingQueue__count != null
(push) ; 8
(assert (not (not (= (+ (- (+ (- $k@3020 $k@3028) $k@3046) $k@3076) $k@3094) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- (+ (- $k@3020 $k@3028) $k@3046) $k@3076) $k@3094) $Perm.No)))
(assert (not (= $t@3091 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 8
(assert (not (= $t@3088 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= $t@3088 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
(push) ; 8
; [then-branch 442] $t@3088 != Null
(assert (not (= $t@3088 $Ref.null)))
(declare-const $k@3095 $Perm)
(assert ($Perm.isValidVar $k@3095))
(assert ($Perm.isReadVar $k@3095 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@3025 $k@3029) $k@3073) $k@3077))
  (= $t@3084 $t@3036)))
(declare-const $k@3096 $Perm)
(assert ($Perm.isValidVar $k@3096))
(assert ($Perm.isReadVar $k@3096 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@3026 $k@3030) $k@3074) $k@3078))
  (= $t@3082 $t@3034)))
; [exec]
; j := __flatten_71
(pop) ; 8
(push) ; 8
; [else-branch 442] $t@3088 == Null
(assert (= $t@3088 $Ref.null))
(declare-const $k@3097 $Perm)
(assert ($Perm.isValidVar $k@3097))
(assert ($Perm.isReadVar $k@3097 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@3025 $k@3029) $k@3073) $k@3077))
  (= $t@3084 $t@3036)))
(declare-const $k@3098 $Perm)
(assert ($Perm.isValidVar $k@3098))
(assert ($Perm.isReadVar $k@3098 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@3026 $k@3030) $k@3074) $k@3078))
  (= $t@3082 $t@3034)))
; [exec]
; j := __flatten_71
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
; ---------- Test__testFillAndEmpty ----------
(declare-const diz@3099 $Ref)
(declare-const queue@3100 $Ref)
(declare-const __flatten_72@3101 $Ref)
(declare-const b@3102 Bool)
(declare-const __flatten_73@3103 Bool)
(declare-const __flatten_74@3104 Bool)
(declare-const m@3105 $Ref)
(declare-const __flatten_75@3106 $Ref)
(declare-const __flatten_76@3107 Bool)
(declare-const n@3108 $Ref)
(declare-const __flatten_77@3109 $Ref)
(declare-const o@3110 $Ref)
(declare-const __flatten_78@3111 $Ref)
(declare-const p@3112 $Ref)
(declare-const __flatten_79@3113 $Ref)
(push) ; 2
; [eval] diz != null
(assert (not (= diz@3099 $Ref.null)))
(push) ; 3
(pop) ; 3
(push) ; 3
; [exec]
; __flatten_72 := BlockingQueue__BlockingQueue(10)
; [eval] capacity > 0
(declare-const sys__result@3114 $Ref)
(declare-const $t@3115 $Snap)
(declare-const $t@3116 $Snap)
(assert (= $t@3115 ($Snap.combine $t@3116 $Snap.unit)))
(declare-const $t@3117 $Snap)
(assert (= $t@3116 ($Snap.combine $t@3117 $Snap.unit)))
(declare-const $t@3118 $Snap)
(declare-const $t@3119 $Ref)
(assert (= $t@3117 ($Snap.combine $t@3118 ($SortWrappers.$RefTo$Snap $t@3119))))
(declare-const $t@3120 $Snap)
(declare-const $t@3121 $Ref)
(assert (= $t@3118 ($Snap.combine $t@3120 ($SortWrappers.$RefTo$Snap $t@3121))))
(declare-const $t@3122 $Snap)
(declare-const $t@3123 $Snap)
(assert (= $t@3120 ($Snap.combine $t@3122 $t@3123)))
(declare-const $t@3124 $Snap)
(declare-const $t@3125 $Ref)
(assert (= $t@3122 ($Snap.combine $t@3124 ($SortWrappers.$RefTo$Snap $t@3125))))
(declare-const $t@3126 $Snap)
(assert (= $t@3124 ($Snap.combine $t@3126 $Snap.unit)))
(declare-const $t@3127 Int)
(declare-const $t@3128 $Ref)
(assert (=
  $t@3126
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@3127)
    ($SortWrappers.$RefTo$Snap $t@3128))))
(declare-const $t@3129 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@3127)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@3129) $Snap.unit)))
(declare-const $t@3130 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@3129)
  ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@3130))))
; [eval] sys__result != null
(assert (not (= sys__result@3114 $Ref.null)))
(declare-const $k@3131 $Perm)
(assert ($Perm.isValidVar $k@3131))
(assert ($Perm.isReadVar $k@3131 $Perm.Write))
; [eval] sys__result.BlockingQueue__capacity > 0
(push) ; 4
(assert (not (not (= $k@3131 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 4
(assert (not (= $k@3131 $Perm.No)))
(assert (> $t@3130 0))
(declare-const $k@3132 $Perm)
(assert ($Perm.isValidVar $k@3132))
(assert ($Perm.isReadVar $k@3132 $Perm.Write))
; [eval] sys__result.BlockingQueue__count != null
(push) ; 4
(assert (not (not (= $k@3132 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 4
(assert (not (= $k@3132 $Perm.No)))
(assert (not (= $t@3128 $Ref.null)))
; [eval] sys__result.BlockingQueue__first != null
(push) ; 4
(assert (not (= $t@3125 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 4
(push) ; 4
(assert (not (not (= $t@3125 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 4
(push) ; 4
; [then-branch 443] $t@3125 != Null
(assert (not (= $t@3125 $Ref.null)))
(declare-const $k@3133 $Perm)
(assert ($Perm.isValidVar $k@3133))
(assert ($Perm.isReadVar $k@3133 $Perm.Write))
(declare-const $k@3134 $Perm)
(assert ($Perm.isValidVar $k@3134))
(assert ($Perm.isReadVar $k@3134 $Perm.Write))
; [eval] sys__result.BlockingQueue__capacity == capacity
(assert (= $t@3130 10))
; [eval] sys__result.BlockingQueue__first == null
(assert (= $t@3125 $Ref.null))
; [exec]
; queue := __flatten_72
; [exec]
; __flatten_73 := BlockingQueue__offer(queue, 3)
; [eval] diz != null
(declare-const $k@3135 $Perm)
(assert ($Perm.isValidVar $k@3135))
(assert ($Perm.isReadVar $k@3135 $Perm.Write))
(push) ; 5
(assert (not (or (= $k@3135 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (< $k@3135 $k@3131))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@3136 $Perm)
(assert ($Perm.isValidVar $k@3136))
(assert ($Perm.isReadVar $k@3136 $Perm.Write))
(push) ; 5
(assert (not (or (= $k@3136 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (< $k@3136 $k@3132))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
; [dead then-branch 444] $t@3125 != Null
; [dead else-branch 444] $t@3125 == Null
(pop) ; 4
(push) ; 4
; [else-branch 443] $t@3125 == Null
(assert (= $t@3125 $Ref.null))
(declare-const $k@3137 $Perm)
(assert ($Perm.isValidVar $k@3137))
(assert ($Perm.isReadVar $k@3137 $Perm.Write))
(declare-const $k@3138 $Perm)
(assert ($Perm.isValidVar $k@3138))
(assert ($Perm.isReadVar $k@3138 $Perm.Write))
; [eval] sys__result.BlockingQueue__capacity == capacity
(assert (= $t@3130 10))
; [eval] sys__result.BlockingQueue__first == null
; [exec]
; queue := __flatten_72
; [exec]
; __flatten_73 := BlockingQueue__offer(queue, 3)
; [eval] diz != null
(declare-const $k@3139 $Perm)
(assert ($Perm.isValidVar $k@3139))
(assert ($Perm.isReadVar $k@3139 $Perm.Write))
(push) ; 5
(assert (not (or (= $k@3139 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (< $k@3139 $k@3131))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@3140 $Perm)
(assert ($Perm.isValidVar $k@3140))
(assert ($Perm.isReadVar $k@3140 $Perm.Write))
(push) ; 5
(assert (not (or (= $k@3140 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (< $k@3140 $k@3132))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 5
(assert (not (not (= $t@3125 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
; [dead then-branch 445] $t@3125 != Null
(push) ; 5
; [else-branch 445] $t@3125 == Null
(declare-const $k@3141 $Perm)
(assert ($Perm.isValidVar $k@3141))
(assert ($Perm.isReadVar $k@3141 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@3141 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(push) ; 6
(assert (not (not (= $k@3137 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= $k@3137 $Perm.No)))
(assert (< $k@3141 $k@3137))
(declare-const $k@3142 $Perm)
(assert ($Perm.isValidVar $k@3142))
(assert ($Perm.isReadVar $k@3142 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@3142 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(push) ; 6
(assert (not (not (= $k@3138 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= $k@3138 $Perm.No)))
(assert (< $k@3142 $k@3138))
(declare-const sys__result@3143 Bool)
(declare-const $t@3144 $Snap)
(declare-const $t@3145 $Snap)
(declare-const $t@3146 $Ref)
(assert (= $t@3144 ($Snap.combine $t@3145 ($SortWrappers.$RefTo$Snap $t@3146))))
(declare-const $t@3147 $Snap)
(declare-const $t@3148 $Ref)
(assert (= $t@3145 ($Snap.combine $t@3147 ($SortWrappers.$RefTo$Snap $t@3148))))
(declare-const $t@3149 $Snap)
(declare-const $t@3150 $Snap)
(assert (= $t@3147 ($Snap.combine $t@3149 $t@3150)))
(declare-const $t@3151 $Snap)
(declare-const $t@3152 $Ref)
(assert (= $t@3149 ($Snap.combine $t@3151 ($SortWrappers.$RefTo$Snap $t@3152))))
(declare-const $t@3153 $Snap)
(assert (= $t@3151 ($Snap.combine $t@3153 $Snap.unit)))
(declare-const $t@3154 Int)
(declare-const $t@3155 $Ref)
(assert (=
  $t@3153
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@3154)
    ($SortWrappers.$RefTo$Snap $t@3155))))
(declare-const $t@3156 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@3154)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@3156) $Snap.unit)))
(declare-const $k@3157 $Perm)
(assert ($Perm.isValidVar $k@3157))
(assert ($Perm.isReadVar $k@3157 $Perm.Write))
(assert (implies (< $Perm.No (- $k@3131 $k@3139)) (= $t@3156 $t@3130)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 6
(assert (not (not (= (+ (- $k@3131 $k@3139) $k@3157) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= (+ (- $k@3131 $k@3139) $k@3157) $Perm.No)))
(assert (> $t@3156 0))
(declare-const $k@3158 $Perm)
(assert ($Perm.isValidVar $k@3158))
(assert ($Perm.isReadVar $k@3158 $Perm.Write))
(assert (implies (< $Perm.No (- $k@3132 $k@3140)) (= $t@3155 $t@3128)))
; [eval] diz.BlockingQueue__count != null
(push) ; 6
(assert (not (not (= (+ (- $k@3132 $k@3140) $k@3158) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= (+ (- $k@3132 $k@3140) $k@3158) $Perm.No)))
(assert (not (= $t@3155 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 6
(assert (not (= $t@3152 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 6
(push) ; 6
(assert (not (not (= $t@3152 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 6
(push) ; 6
; [then-branch 446] $t@3152 != Null
(assert (not (= $t@3152 $Ref.null)))
(declare-const $k@3159 $Perm)
(assert ($Perm.isValidVar $k@3159))
(assert ($Perm.isReadVar $k@3159 $Perm.Write))
(assert (implies (< $Perm.No (- $k@3137 $k@3141)) (= $t@3148 $t@3121)))
(declare-const $k@3160 $Perm)
(assert ($Perm.isValidVar $k@3160))
(assert ($Perm.isReadVar $k@3160 $Perm.Write))
(assert (implies (< $Perm.No (- $k@3138 $k@3142)) (= $t@3146 $t@3119)))
; [exec]
; b := __flatten_73
; [exec]
; __flatten_74 := BlockingQueue__offer(queue, 5)
; [eval] diz != null
(declare-const $k@3161 $Perm)
(assert ($Perm.isValidVar $k@3161))
(assert ($Perm.isReadVar $k@3161 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@3161 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@3161 (+ (- $k@3131 $k@3139) $k@3157)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@3162 $Perm)
(assert ($Perm.isValidVar $k@3162))
(assert ($Perm.isReadVar $k@3162 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@3162 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@3162 (+ (- $k@3132 $k@3140) $k@3158)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 7
(assert (not (= $t@3152 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 7
(push) ; 7
; [then-branch 447] $t@3152 != Null
(declare-const $k@3163 $Perm)
(assert ($Perm.isValidVar $k@3163))
(assert ($Perm.isReadVar $k@3163 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@3163 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= (+ (- $k@3137 $k@3141) $k@3159) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- $k@3137 $k@3141) $k@3159) $Perm.No)))
(assert (< $k@3163 (+ (- $k@3137 $k@3141) $k@3159)))
(declare-const $k@3164 $Perm)
(assert ($Perm.isValidVar $k@3164))
(assert ($Perm.isReadVar $k@3164 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@3164 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= (+ (- $k@3138 $k@3142) $k@3160) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- $k@3138 $k@3142) $k@3160) $Perm.No)))
(assert (< $k@3164 (+ (- $k@3138 $k@3142) $k@3160)))
(declare-const sys__result@3165 Bool)
(declare-const $t@3166 $Snap)
(declare-const $t@3167 $Snap)
(declare-const $t@3168 $Ref)
(assert (= $t@3166 ($Snap.combine $t@3167 ($SortWrappers.$RefTo$Snap $t@3168))))
(declare-const $t@3169 $Snap)
(declare-const $t@3170 $Ref)
(assert (= $t@3167 ($Snap.combine $t@3169 ($SortWrappers.$RefTo$Snap $t@3170))))
(declare-const $t@3171 $Snap)
(declare-const $t@3172 $Snap)
(assert (= $t@3169 ($Snap.combine $t@3171 $t@3172)))
(declare-const $t@3173 $Snap)
(declare-const $t@3174 $Ref)
(assert (= $t@3171 ($Snap.combine $t@3173 ($SortWrappers.$RefTo$Snap $t@3174))))
(declare-const $t@3175 $Snap)
(assert (= $t@3173 ($Snap.combine $t@3175 $Snap.unit)))
(declare-const $t@3176 Int)
(declare-const $t@3177 $Ref)
(assert (=
  $t@3175
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@3176)
    ($SortWrappers.$RefTo$Snap $t@3177))))
(declare-const $t@3178 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@3176)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@3178) $Snap.unit)))
(declare-const $k@3179 $Perm)
(assert ($Perm.isValidVar $k@3179))
(assert ($Perm.isReadVar $k@3179 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161))
  (= $t@3178 $t@3156)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 8
(assert (not (not (= (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179) $Perm.No)))
(assert (> $t@3178 0))
(declare-const $k@3180 $Perm)
(assert ($Perm.isValidVar $k@3180))
(assert ($Perm.isReadVar $k@3180 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162))
  (= $t@3177 $t@3155)))
; [eval] diz.BlockingQueue__count != null
(push) ; 8
(assert (not (not (= (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180) $Perm.No)))
(assert (not (= $t@3177 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 8
(assert (not (= $t@3174 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= $t@3174 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
(push) ; 8
; [then-branch 448] $t@3174 != Null
(assert (not (= $t@3174 $Ref.null)))
(declare-const $k@3181 $Perm)
(assert ($Perm.isValidVar $k@3181))
(assert ($Perm.isReadVar $k@3181 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163))
  (= $t@3170 $t@3148)))
(declare-const $k@3182 $Perm)
(assert ($Perm.isValidVar $k@3182))
(assert ($Perm.isReadVar $k@3182 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164))
  (= $t@3168 $t@3146)))
; [exec]
; b := __flatten_74
; [exec]
; __flatten_75 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@3183 $Perm)
(assert ($Perm.isValidVar $k@3183))
(assert ($Perm.isReadVar $k@3183 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@3183 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@3183 (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@3184 $Perm)
(assert ($Perm.isValidVar $k@3184))
(assert ($Perm.isReadVar $k@3184 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@3184 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@3184 (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 9
(assert (not (= $t@3174 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
(push) ; 9
; [then-branch 449] $t@3174 != Null
(declare-const $k@3185 $Perm)
(assert ($Perm.isValidVar $k@3185))
(assert ($Perm.isReadVar $k@3185 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@3185 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not (= (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181) $Perm.No)))
(assert (< $k@3185 (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)))
(declare-const $k@3186 $Perm)
(assert ($Perm.isValidVar $k@3186))
(assert ($Perm.isReadVar $k@3186 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@3186 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not (= (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182) $Perm.No)))
(assert (< $k@3186 (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)))
(declare-const sys__result@3187 $Ref)
(declare-const $t@3188 $Snap)
(declare-const $t@3189 $Snap)
(declare-const $t@3190 $Ref)
(assert (= $t@3188 ($Snap.combine $t@3189 ($SortWrappers.$RefTo$Snap $t@3190))))
(declare-const $t@3191 $Snap)
(declare-const $t@3192 $Ref)
(assert (= $t@3189 ($Snap.combine $t@3191 ($SortWrappers.$RefTo$Snap $t@3192))))
(declare-const $t@3193 $Snap)
(declare-const $t@3194 $Snap)
(assert (= $t@3191 ($Snap.combine $t@3193 $t@3194)))
(declare-const $t@3195 $Snap)
(declare-const $t@3196 $Ref)
(assert (= $t@3193 ($Snap.combine $t@3195 ($SortWrappers.$RefTo$Snap $t@3196))))
(declare-const $t@3197 $Snap)
(assert (= $t@3195 ($Snap.combine $t@3197 $Snap.unit)))
(declare-const $t@3198 Int)
(declare-const $t@3199 $Ref)
(assert (=
  $t@3197
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@3198)
    ($SortWrappers.$RefTo$Snap $t@3199))))
(declare-const $t@3200 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@3198)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@3200) $Snap.unit)))
(declare-const $k@3201 $Perm)
(assert ($Perm.isValidVar $k@3201))
(assert ($Perm.isReadVar $k@3201 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179) $k@3183))
  (= $t@3200 $t@3178)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 10
(assert (not (not
  (=
    (+
      (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179) $k@3183)
      $k@3201)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not
  (=
    (+
      (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179) $k@3183)
      $k@3201)
    $Perm.No)))
(assert (> $t@3200 0))
(declare-const $k@3202 $Perm)
(assert ($Perm.isValidVar $k@3202))
(assert ($Perm.isReadVar $k@3202 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180) $k@3184))
  (= $t@3199 $t@3177)))
; [eval] diz.BlockingQueue__count != null
(push) ; 10
(assert (not (not
  (=
    (+
      (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180) $k@3184)
      $k@3202)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not
  (=
    (+
      (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180) $k@3184)
      $k@3202)
    $Perm.No)))
(assert (not (= $t@3199 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 10
(assert (not (= $t@3196 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= $t@3196 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 10
(push) ; 10
; [then-branch 450] $t@3196 != Null
(assert (not (= $t@3196 $Ref.null)))
(declare-const $k@3203 $Perm)
(assert ($Perm.isValidVar $k@3203))
(assert ($Perm.isReadVar $k@3203 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181) $k@3185))
  (= $t@3192 $t@3170)))
(declare-const $k@3204 $Perm)
(assert ($Perm.isValidVar $k@3204))
(assert ($Perm.isReadVar $k@3204 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182) $k@3186))
  (= $t@3190 $t@3168)))
; [exec]
; m := __flatten_75
; [exec]
; __flatten_76 := BlockingQueue__offer(queue, 7)
; [eval] diz != null
(declare-const $k@3205 $Perm)
(assert ($Perm.isValidVar $k@3205))
(assert ($Perm.isReadVar $k@3205 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@3205 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (<
  $k@3205
  (+ (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179) $k@3183) $k@3201)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@3206 $Perm)
(assert ($Perm.isValidVar $k@3206))
(assert ($Perm.isReadVar $k@3206 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@3206 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (<
  $k@3206
  (+ (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180) $k@3184) $k@3202)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 11
(assert (not (= $t@3196 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 11
(push) ; 11
; [then-branch 451] $t@3196 != Null
(declare-const $k@3207 $Perm)
(assert ($Perm.isValidVar $k@3207))
(assert ($Perm.isReadVar $k@3207 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@3207 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(push) ; 12
(assert (not (not
  (=
    (+
      (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181) $k@3185)
      $k@3203)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181) $k@3185)
      $k@3203)
    $Perm.No)))
(assert (<
  $k@3207
  (+ (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181) $k@3185) $k@3203)))
(declare-const $k@3208 $Perm)
(assert ($Perm.isValidVar $k@3208))
(assert ($Perm.isReadVar $k@3208 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@3208 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(push) ; 12
(assert (not (not
  (=
    (+
      (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182) $k@3186)
      $k@3204)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182) $k@3186)
      $k@3204)
    $Perm.No)))
(assert (<
  $k@3208
  (+ (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182) $k@3186) $k@3204)))
(declare-const sys__result@3209 Bool)
(declare-const $t@3210 $Snap)
(declare-const $t@3211 $Snap)
(declare-const $t@3212 $Ref)
(assert (= $t@3210 ($Snap.combine $t@3211 ($SortWrappers.$RefTo$Snap $t@3212))))
(declare-const $t@3213 $Snap)
(declare-const $t@3214 $Ref)
(assert (= $t@3211 ($Snap.combine $t@3213 ($SortWrappers.$RefTo$Snap $t@3214))))
(declare-const $t@3215 $Snap)
(declare-const $t@3216 $Snap)
(assert (= $t@3213 ($Snap.combine $t@3215 $t@3216)))
(declare-const $t@3217 $Snap)
(declare-const $t@3218 $Ref)
(assert (= $t@3215 ($Snap.combine $t@3217 ($SortWrappers.$RefTo$Snap $t@3218))))
(declare-const $t@3219 $Snap)
(assert (= $t@3217 ($Snap.combine $t@3219 $Snap.unit)))
(declare-const $t@3220 Int)
(declare-const $t@3221 $Ref)
(assert (=
  $t@3219
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@3220)
    ($SortWrappers.$RefTo$Snap $t@3221))))
(declare-const $t@3222 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@3220)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@3222) $Snap.unit)))
(declare-const $k@3223 $Perm)
(assert ($Perm.isValidVar $k@3223))
(assert ($Perm.isReadVar $k@3223 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179) $k@3183)
        $k@3201)
      $k@3205))
  (= $t@3222 $t@3200)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 12
(assert (not (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179) $k@3183)
          $k@3201)
        $k@3205)
      $k@3223)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179) $k@3183)
          $k@3201)
        $k@3205)
      $k@3223)
    $Perm.No)))
(assert (> $t@3222 0))
(declare-const $k@3224 $Perm)
(assert ($Perm.isValidVar $k@3224))
(assert ($Perm.isReadVar $k@3224 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180) $k@3184)
        $k@3202)
      $k@3206))
  (= $t@3221 $t@3199)))
; [eval] diz.BlockingQueue__count != null
(push) ; 12
(assert (not (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180) $k@3184)
          $k@3202)
        $k@3206)
      $k@3224)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180) $k@3184)
          $k@3202)
        $k@3206)
      $k@3224)
    $Perm.No)))
(assert (not (= $t@3221 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 12
(assert (not (= $t@3218 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 12
(push) ; 12
(assert (not (not (= $t@3218 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 12
(push) ; 12
; [then-branch 452] $t@3218 != Null
(assert (not (= $t@3218 $Ref.null)))
(declare-const $k@3225 $Perm)
(assert ($Perm.isValidVar $k@3225))
(assert ($Perm.isReadVar $k@3225 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181) $k@3185)
        $k@3203)
      $k@3207))
  (= $t@3214 $t@3192)))
(declare-const $k@3226 $Perm)
(assert ($Perm.isValidVar $k@3226))
(assert ($Perm.isReadVar $k@3226 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182) $k@3186)
        $k@3204)
      $k@3208))
  (= $t@3212 $t@3190)))
; [exec]
; b := __flatten_76
; [exec]
; __flatten_77 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@3227 $Perm)
(assert ($Perm.isValidVar $k@3227))
(assert ($Perm.isReadVar $k@3227 $Perm.Write))
(push) ; 13
(assert (not (or (= $k@3227 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 13
(assert (<
  $k@3227
  (+
    (-
      (+
        (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179) $k@3183)
        $k@3201)
      $k@3205)
    $k@3223)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@3228 $Perm)
(assert ($Perm.isValidVar $k@3228))
(assert ($Perm.isReadVar $k@3228 $Perm.Write))
(push) ; 13
(assert (not (or (= $k@3228 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 13
(assert (<
  $k@3228
  (+
    (-
      (+
        (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180) $k@3184)
        $k@3202)
      $k@3206)
    $k@3224)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 13
(assert (not (= $t@3218 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 13
(push) ; 13
; [then-branch 453] $t@3218 != Null
(declare-const $k@3229 $Perm)
(assert ($Perm.isValidVar $k@3229))
(assert ($Perm.isReadVar $k@3229 $Perm.Write))
(push) ; 14
(assert (not (or (= $k@3229 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(push) ; 14
(assert (not (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181) $k@3185)
          $k@3203)
        $k@3207)
      $k@3225)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(assert (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181) $k@3185)
          $k@3203)
        $k@3207)
      $k@3225)
    $Perm.No)))
(assert (<
  $k@3229
  (+
    (-
      (+
        (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181) $k@3185)
        $k@3203)
      $k@3207)
    $k@3225)))
(declare-const $k@3230 $Perm)
(assert ($Perm.isValidVar $k@3230))
(assert ($Perm.isReadVar $k@3230 $Perm.Write))
(push) ; 14
(assert (not (or (= $k@3230 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(push) ; 14
(assert (not (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182) $k@3186)
          $k@3204)
        $k@3208)
      $k@3226)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(assert (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182) $k@3186)
          $k@3204)
        $k@3208)
      $k@3226)
    $Perm.No)))
(assert (<
  $k@3230
  (+
    (-
      (+
        (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182) $k@3186)
        $k@3204)
      $k@3208)
    $k@3226)))
(declare-const sys__result@3231 $Ref)
(declare-const $t@3232 $Snap)
(declare-const $t@3233 $Snap)
(declare-const $t@3234 $Ref)
(assert (= $t@3232 ($Snap.combine $t@3233 ($SortWrappers.$RefTo$Snap $t@3234))))
(declare-const $t@3235 $Snap)
(declare-const $t@3236 $Ref)
(assert (= $t@3233 ($Snap.combine $t@3235 ($SortWrappers.$RefTo$Snap $t@3236))))
(declare-const $t@3237 $Snap)
(declare-const $t@3238 $Snap)
(assert (= $t@3235 ($Snap.combine $t@3237 $t@3238)))
(declare-const $t@3239 $Snap)
(declare-const $t@3240 $Ref)
(assert (= $t@3237 ($Snap.combine $t@3239 ($SortWrappers.$RefTo$Snap $t@3240))))
(declare-const $t@3241 $Snap)
(assert (= $t@3239 ($Snap.combine $t@3241 $Snap.unit)))
(declare-const $t@3242 Int)
(declare-const $t@3243 $Ref)
(assert (=
  $t@3241
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@3242)
    ($SortWrappers.$RefTo$Snap $t@3243))))
(declare-const $t@3244 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@3242)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@3244) $Snap.unit)))
(declare-const $k@3245 $Perm)
(assert ($Perm.isValidVar $k@3245))
(assert ($Perm.isReadVar $k@3245 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179) $k@3183)
            $k@3201)
          $k@3205)
        $k@3223)
      $k@3227))
  (= $t@3244 $t@3222)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 14
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179) $k@3183)
              $k@3201)
            $k@3205)
          $k@3223)
        $k@3227)
      $k@3245)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179) $k@3183)
              $k@3201)
            $k@3205)
          $k@3223)
        $k@3227)
      $k@3245)
    $Perm.No)))
(assert (> $t@3244 0))
(declare-const $k@3246 $Perm)
(assert ($Perm.isValidVar $k@3246))
(assert ($Perm.isReadVar $k@3246 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180) $k@3184)
            $k@3202)
          $k@3206)
        $k@3224)
      $k@3228))
  (= $t@3243 $t@3221)))
; [eval] diz.BlockingQueue__count != null
(push) ; 14
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180) $k@3184)
              $k@3202)
            $k@3206)
          $k@3224)
        $k@3228)
      $k@3246)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180) $k@3184)
              $k@3202)
            $k@3206)
          $k@3224)
        $k@3228)
      $k@3246)
    $Perm.No)))
(assert (not (= $t@3243 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 14
(assert (not (= $t@3240 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 14
(push) ; 14
(assert (not (not (= $t@3240 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 14
(push) ; 14
; [then-branch 454] $t@3240 != Null
(assert (not (= $t@3240 $Ref.null)))
(declare-const $k@3247 $Perm)
(assert ($Perm.isValidVar $k@3247))
(assert ($Perm.isReadVar $k@3247 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181) $k@3185)
            $k@3203)
          $k@3207)
        $k@3225)
      $k@3229))
  (= $t@3236 $t@3214)))
(declare-const $k@3248 $Perm)
(assert ($Perm.isValidVar $k@3248))
(assert ($Perm.isReadVar $k@3248 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182) $k@3186)
            $k@3204)
          $k@3208)
        $k@3226)
      $k@3230))
  (= $t@3234 $t@3212)))
; [exec]
; n := __flatten_77
; [exec]
; __flatten_78 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@3249 $Perm)
(assert ($Perm.isValidVar $k@3249))
(assert ($Perm.isReadVar $k@3249 $Perm.Write))
(push) ; 15
(assert (not (or (= $k@3249 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 15
(assert (<
  $k@3249
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179) $k@3183)
            $k@3201)
          $k@3205)
        $k@3223)
      $k@3227)
    $k@3245)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@3250 $Perm)
(assert ($Perm.isValidVar $k@3250))
(assert ($Perm.isReadVar $k@3250 $Perm.Write))
(push) ; 15
(assert (not (or (= $k@3250 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 15
(assert (<
  $k@3250
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180) $k@3184)
            $k@3202)
          $k@3206)
        $k@3224)
      $k@3228)
    $k@3246)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 15
(assert (not (= $t@3240 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 15
(push) ; 15
; [then-branch 455] $t@3240 != Null
(declare-const $k@3251 $Perm)
(assert ($Perm.isValidVar $k@3251))
(assert ($Perm.isReadVar $k@3251 $Perm.Write))
(push) ; 16
(assert (not (or (= $k@3251 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181) $k@3185)
              $k@3203)
            $k@3207)
          $k@3225)
        $k@3229)
      $k@3247)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181) $k@3185)
              $k@3203)
            $k@3207)
          $k@3225)
        $k@3229)
      $k@3247)
    $Perm.No)))
(assert (<
  $k@3251
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181) $k@3185)
            $k@3203)
          $k@3207)
        $k@3225)
      $k@3229)
    $k@3247)))
(declare-const $k@3252 $Perm)
(assert ($Perm.isValidVar $k@3252))
(assert ($Perm.isReadVar $k@3252 $Perm.Write))
(push) ; 16
(assert (not (or (= $k@3252 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182) $k@3186)
              $k@3204)
            $k@3208)
          $k@3226)
        $k@3230)
      $k@3248)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182) $k@3186)
              $k@3204)
            $k@3208)
          $k@3226)
        $k@3230)
      $k@3248)
    $Perm.No)))
(assert (<
  $k@3252
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182) $k@3186)
            $k@3204)
          $k@3208)
        $k@3226)
      $k@3230)
    $k@3248)))
(declare-const sys__result@3253 $Ref)
(declare-const $t@3254 $Snap)
(declare-const $t@3255 $Snap)
(declare-const $t@3256 $Ref)
(assert (= $t@3254 ($Snap.combine $t@3255 ($SortWrappers.$RefTo$Snap $t@3256))))
(declare-const $t@3257 $Snap)
(declare-const $t@3258 $Ref)
(assert (= $t@3255 ($Snap.combine $t@3257 ($SortWrappers.$RefTo$Snap $t@3258))))
(declare-const $t@3259 $Snap)
(declare-const $t@3260 $Snap)
(assert (= $t@3257 ($Snap.combine $t@3259 $t@3260)))
(declare-const $t@3261 $Snap)
(declare-const $t@3262 $Ref)
(assert (= $t@3259 ($Snap.combine $t@3261 ($SortWrappers.$RefTo$Snap $t@3262))))
(declare-const $t@3263 $Snap)
(assert (= $t@3261 ($Snap.combine $t@3263 $Snap.unit)))
(declare-const $t@3264 Int)
(declare-const $t@3265 $Ref)
(assert (=
  $t@3263
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@3264)
    ($SortWrappers.$RefTo$Snap $t@3265))))
(declare-const $t@3266 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@3264)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@3266) $Snap.unit)))
(declare-const $k@3267 $Perm)
(assert ($Perm.isValidVar $k@3267))
(assert ($Perm.isReadVar $k@3267 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                  $k@3183)
                $k@3201)
              $k@3205)
            $k@3223)
          $k@3227)
        $k@3245)
      $k@3249))
  (= $t@3266 $t@3244)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                    $k@3183)
                  $k@3201)
                $k@3205)
              $k@3223)
            $k@3227)
          $k@3245)
        $k@3249)
      $k@3267)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                    $k@3183)
                  $k@3201)
                $k@3205)
              $k@3223)
            $k@3227)
          $k@3245)
        $k@3249)
      $k@3267)
    $Perm.No)))
(assert (> $t@3266 0))
(declare-const $k@3268 $Perm)
(assert ($Perm.isValidVar $k@3268))
(assert ($Perm.isReadVar $k@3268 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                  $k@3184)
                $k@3202)
              $k@3206)
            $k@3224)
          $k@3228)
        $k@3246)
      $k@3250))
  (= $t@3265 $t@3243)))
; [eval] diz.BlockingQueue__count != null
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                    $k@3184)
                  $k@3202)
                $k@3206)
              $k@3224)
            $k@3228)
          $k@3246)
        $k@3250)
      $k@3268)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                    $k@3184)
                  $k@3202)
                $k@3206)
              $k@3224)
            $k@3228)
          $k@3246)
        $k@3250)
      $k@3268)
    $Perm.No)))
(assert (not (= $t@3265 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 16
(assert (not (= $t@3262 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not (= $t@3262 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 16
(push) ; 16
; [then-branch 456] $t@3262 != Null
(assert (not (= $t@3262 $Ref.null)))
(declare-const $k@3269 $Perm)
(assert ($Perm.isValidVar $k@3269))
(assert ($Perm.isReadVar $k@3269 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                  $k@3185)
                $k@3203)
              $k@3207)
            $k@3225)
          $k@3229)
        $k@3247)
      $k@3251))
  (= $t@3258 $t@3236)))
(declare-const $k@3270 $Perm)
(assert ($Perm.isValidVar $k@3270))
(assert ($Perm.isReadVar $k@3270 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                  $k@3186)
                $k@3204)
              $k@3208)
            $k@3226)
          $k@3230)
        $k@3248)
      $k@3252))
  (= $t@3256 $t@3234)))
; [exec]
; o := __flatten_78
; [exec]
; __flatten_79 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@3271 $Perm)
(assert ($Perm.isValidVar $k@3271))
(assert ($Perm.isReadVar $k@3271 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@3271 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@3271
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                  $k@3183)
                $k@3201)
              $k@3205)
            $k@3223)
          $k@3227)
        $k@3245)
      $k@3249)
    $k@3267)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@3272 $Perm)
(assert ($Perm.isValidVar $k@3272))
(assert ($Perm.isReadVar $k@3272 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@3272 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@3272
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                  $k@3184)
                $k@3202)
              $k@3206)
            $k@3224)
          $k@3228)
        $k@3246)
      $k@3250)
    $k@3268)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 17
(assert (not (= $t@3262 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 17
(push) ; 17
; [then-branch 457] $t@3262 != Null
(declare-const $k@3273 $Perm)
(assert ($Perm.isValidVar $k@3273))
(assert ($Perm.isReadVar $k@3273 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@3273 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                    $k@3185)
                  $k@3203)
                $k@3207)
              $k@3225)
            $k@3229)
          $k@3247)
        $k@3251)
      $k@3269)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                    $k@3185)
                  $k@3203)
                $k@3207)
              $k@3225)
            $k@3229)
          $k@3247)
        $k@3251)
      $k@3269)
    $Perm.No)))
(assert (<
  $k@3273
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                  $k@3185)
                $k@3203)
              $k@3207)
            $k@3225)
          $k@3229)
        $k@3247)
      $k@3251)
    $k@3269)))
(declare-const $k@3274 $Perm)
(assert ($Perm.isValidVar $k@3274))
(assert ($Perm.isReadVar $k@3274 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@3274 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                    $k@3186)
                  $k@3204)
                $k@3208)
              $k@3226)
            $k@3230)
          $k@3248)
        $k@3252)
      $k@3270)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                    $k@3186)
                  $k@3204)
                $k@3208)
              $k@3226)
            $k@3230)
          $k@3248)
        $k@3252)
      $k@3270)
    $Perm.No)))
(assert (<
  $k@3274
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                  $k@3186)
                $k@3204)
              $k@3208)
            $k@3226)
          $k@3230)
        $k@3248)
      $k@3252)
    $k@3270)))
(declare-const sys__result@3275 $Ref)
(declare-const $t@3276 $Snap)
(declare-const $t@3277 $Snap)
(declare-const $t@3278 $Ref)
(assert (= $t@3276 ($Snap.combine $t@3277 ($SortWrappers.$RefTo$Snap $t@3278))))
(declare-const $t@3279 $Snap)
(declare-const $t@3280 $Ref)
(assert (= $t@3277 ($Snap.combine $t@3279 ($SortWrappers.$RefTo$Snap $t@3280))))
(declare-const $t@3281 $Snap)
(declare-const $t@3282 $Snap)
(assert (= $t@3279 ($Snap.combine $t@3281 $t@3282)))
(declare-const $t@3283 $Snap)
(declare-const $t@3284 $Ref)
(assert (= $t@3281 ($Snap.combine $t@3283 ($SortWrappers.$RefTo$Snap $t@3284))))
(declare-const $t@3285 $Snap)
(assert (= $t@3283 ($Snap.combine $t@3285 $Snap.unit)))
(declare-const $t@3286 Int)
(declare-const $t@3287 $Ref)
(assert (=
  $t@3285
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@3286)
    ($SortWrappers.$RefTo$Snap $t@3287))))
(declare-const $t@3288 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@3286)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@3288) $Snap.unit)))
(declare-const $k@3289 $Perm)
(assert ($Perm.isValidVar $k@3289))
(assert ($Perm.isReadVar $k@3289 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                      $k@3183)
                    $k@3201)
                  $k@3205)
                $k@3223)
              $k@3227)
            $k@3245)
          $k@3249)
        $k@3267)
      $k@3271))
  (= $t@3288 $t@3266)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                        $k@3183)
                      $k@3201)
                    $k@3205)
                  $k@3223)
                $k@3227)
              $k@3245)
            $k@3249)
          $k@3267)
        $k@3271)
      $k@3289)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                        $k@3183)
                      $k@3201)
                    $k@3205)
                  $k@3223)
                $k@3227)
              $k@3245)
            $k@3249)
          $k@3267)
        $k@3271)
      $k@3289)
    $Perm.No)))
(assert (> $t@3288 0))
(declare-const $k@3290 $Perm)
(assert ($Perm.isValidVar $k@3290))
(assert ($Perm.isReadVar $k@3290 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                      $k@3184)
                    $k@3202)
                  $k@3206)
                $k@3224)
              $k@3228)
            $k@3246)
          $k@3250)
        $k@3268)
      $k@3272))
  (= $t@3287 $t@3265)))
; [eval] diz.BlockingQueue__count != null
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                        $k@3184)
                      $k@3202)
                    $k@3206)
                  $k@3224)
                $k@3228)
              $k@3246)
            $k@3250)
          $k@3268)
        $k@3272)
      $k@3290)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                        $k@3184)
                      $k@3202)
                    $k@3206)
                  $k@3224)
                $k@3228)
              $k@3246)
            $k@3250)
          $k@3268)
        $k@3272)
      $k@3290)
    $Perm.No)))
(assert (not (= $t@3287 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 18
(assert (not (= $t@3284 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not (= $t@3284 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
; [then-branch 458] $t@3284 != Null
(assert (not (= $t@3284 $Ref.null)))
(declare-const $k@3291 $Perm)
(assert ($Perm.isValidVar $k@3291))
(assert ($Perm.isReadVar $k@3291 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                      $k@3185)
                    $k@3203)
                  $k@3207)
                $k@3225)
              $k@3229)
            $k@3247)
          $k@3251)
        $k@3269)
      $k@3273))
  (= $t@3280 $t@3258)))
(declare-const $k@3292 $Perm)
(assert ($Perm.isValidVar $k@3292))
(assert ($Perm.isReadVar $k@3292 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                      $k@3186)
                    $k@3204)
                  $k@3208)
                $k@3226)
              $k@3230)
            $k@3248)
          $k@3252)
        $k@3270)
      $k@3274))
  (= $t@3278 $t@3256)))
; [exec]
; p := __flatten_79
(pop) ; 18
(push) ; 18
; [else-branch 458] $t@3284 == Null
(assert (= $t@3284 $Ref.null))
(declare-const $k@3293 $Perm)
(assert ($Perm.isValidVar $k@3293))
(assert ($Perm.isReadVar $k@3293 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                      $k@3185)
                    $k@3203)
                  $k@3207)
                $k@3225)
              $k@3229)
            $k@3247)
          $k@3251)
        $k@3269)
      $k@3273))
  (= $t@3280 $t@3258)))
(declare-const $k@3294 $Perm)
(assert ($Perm.isValidVar $k@3294))
(assert ($Perm.isReadVar $k@3294 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                      $k@3186)
                    $k@3204)
                  $k@3208)
                $k@3226)
              $k@3230)
            $k@3248)
          $k@3252)
        $k@3270)
      $k@3274))
  (= $t@3278 $t@3256)))
; [exec]
; p := __flatten_79
(pop) ; 18
(pop) ; 17
; [dead else-branch 457] $t@3262 == Null
(pop) ; 16
(push) ; 16
; [else-branch 456] $t@3262 == Null
(assert (= $t@3262 $Ref.null))
(declare-const $k@3295 $Perm)
(assert ($Perm.isValidVar $k@3295))
(assert ($Perm.isReadVar $k@3295 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                  $k@3185)
                $k@3203)
              $k@3207)
            $k@3225)
          $k@3229)
        $k@3247)
      $k@3251))
  (= $t@3258 $t@3236)))
(declare-const $k@3296 $Perm)
(assert ($Perm.isValidVar $k@3296))
(assert ($Perm.isReadVar $k@3296 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                  $k@3186)
                $k@3204)
              $k@3208)
            $k@3226)
          $k@3230)
        $k@3248)
      $k@3252))
  (= $t@3256 $t@3234)))
; [exec]
; o := __flatten_78
; [exec]
; __flatten_79 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@3297 $Perm)
(assert ($Perm.isValidVar $k@3297))
(assert ($Perm.isReadVar $k@3297 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@3297 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@3297
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                  $k@3183)
                $k@3201)
              $k@3205)
            $k@3223)
          $k@3227)
        $k@3245)
      $k@3249)
    $k@3267)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@3298 $Perm)
(assert ($Perm.isValidVar $k@3298))
(assert ($Perm.isReadVar $k@3298 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@3298 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@3298
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                  $k@3184)
                $k@3202)
              $k@3206)
            $k@3224)
          $k@3228)
        $k@3246)
      $k@3250)
    $k@3268)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 17
(assert (not (not (= $t@3262 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 17
; [dead then-branch 459] $t@3262 != Null
(push) ; 17
; [else-branch 459] $t@3262 == Null
(declare-const $k@3299 $Perm)
(assert ($Perm.isValidVar $k@3299))
(assert ($Perm.isReadVar $k@3299 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@3299 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                    $k@3185)
                  $k@3203)
                $k@3207)
              $k@3225)
            $k@3229)
          $k@3247)
        $k@3251)
      $k@3295)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                    $k@3185)
                  $k@3203)
                $k@3207)
              $k@3225)
            $k@3229)
          $k@3247)
        $k@3251)
      $k@3295)
    $Perm.No)))
(assert (<
  $k@3299
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                  $k@3185)
                $k@3203)
              $k@3207)
            $k@3225)
          $k@3229)
        $k@3247)
      $k@3251)
    $k@3295)))
(declare-const $k@3300 $Perm)
(assert ($Perm.isValidVar $k@3300))
(assert ($Perm.isReadVar $k@3300 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@3300 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                    $k@3186)
                  $k@3204)
                $k@3208)
              $k@3226)
            $k@3230)
          $k@3248)
        $k@3252)
      $k@3296)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                    $k@3186)
                  $k@3204)
                $k@3208)
              $k@3226)
            $k@3230)
          $k@3248)
        $k@3252)
      $k@3296)
    $Perm.No)))
(assert (<
  $k@3300
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                  $k@3186)
                $k@3204)
              $k@3208)
            $k@3226)
          $k@3230)
        $k@3248)
      $k@3252)
    $k@3296)))
(declare-const sys__result@3301 $Ref)
(declare-const $t@3302 $Snap)
(declare-const $t@3303 $Snap)
(declare-const $t@3304 $Ref)
(assert (= $t@3302 ($Snap.combine $t@3303 ($SortWrappers.$RefTo$Snap $t@3304))))
(declare-const $t@3305 $Snap)
(declare-const $t@3306 $Ref)
(assert (= $t@3303 ($Snap.combine $t@3305 ($SortWrappers.$RefTo$Snap $t@3306))))
(declare-const $t@3307 $Snap)
(declare-const $t@3308 $Snap)
(assert (= $t@3305 ($Snap.combine $t@3307 $t@3308)))
(declare-const $t@3309 $Snap)
(declare-const $t@3310 $Ref)
(assert (= $t@3307 ($Snap.combine $t@3309 ($SortWrappers.$RefTo$Snap $t@3310))))
(declare-const $t@3311 $Snap)
(assert (= $t@3309 ($Snap.combine $t@3311 $Snap.unit)))
(declare-const $t@3312 Int)
(declare-const $t@3313 $Ref)
(assert (=
  $t@3311
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@3312)
    ($SortWrappers.$RefTo$Snap $t@3313))))
(declare-const $t@3314 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@3312)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@3314) $Snap.unit)))
(declare-const $k@3315 $Perm)
(assert ($Perm.isValidVar $k@3315))
(assert ($Perm.isReadVar $k@3315 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                      $k@3183)
                    $k@3201)
                  $k@3205)
                $k@3223)
              $k@3227)
            $k@3245)
          $k@3249)
        $k@3267)
      $k@3297))
  (= $t@3314 $t@3266)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                        $k@3183)
                      $k@3201)
                    $k@3205)
                  $k@3223)
                $k@3227)
              $k@3245)
            $k@3249)
          $k@3267)
        $k@3297)
      $k@3315)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                        $k@3183)
                      $k@3201)
                    $k@3205)
                  $k@3223)
                $k@3227)
              $k@3245)
            $k@3249)
          $k@3267)
        $k@3297)
      $k@3315)
    $Perm.No)))
(assert (> $t@3314 0))
(declare-const $k@3316 $Perm)
(assert ($Perm.isValidVar $k@3316))
(assert ($Perm.isReadVar $k@3316 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                      $k@3184)
                    $k@3202)
                  $k@3206)
                $k@3224)
              $k@3228)
            $k@3246)
          $k@3250)
        $k@3268)
      $k@3298))
  (= $t@3313 $t@3265)))
; [eval] diz.BlockingQueue__count != null
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                        $k@3184)
                      $k@3202)
                    $k@3206)
                  $k@3224)
                $k@3228)
              $k@3246)
            $k@3250)
          $k@3268)
        $k@3298)
      $k@3316)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                        $k@3184)
                      $k@3202)
                    $k@3206)
                  $k@3224)
                $k@3228)
              $k@3246)
            $k@3250)
          $k@3268)
        $k@3298)
      $k@3316)
    $Perm.No)))
(assert (not (= $t@3313 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 18
(assert (not (= $t@3310 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not (= $t@3310 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
; [then-branch 460] $t@3310 != Null
(assert (not (= $t@3310 $Ref.null)))
(declare-const $k@3317 $Perm)
(assert ($Perm.isValidVar $k@3317))
(assert ($Perm.isReadVar $k@3317 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                      $k@3185)
                    $k@3203)
                  $k@3207)
                $k@3225)
              $k@3229)
            $k@3247)
          $k@3251)
        $k@3295)
      $k@3299))
  (= $t@3306 $t@3258)))
(declare-const $k@3318 $Perm)
(assert ($Perm.isValidVar $k@3318))
(assert ($Perm.isReadVar $k@3318 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                      $k@3186)
                    $k@3204)
                  $k@3208)
                $k@3226)
              $k@3230)
            $k@3248)
          $k@3252)
        $k@3296)
      $k@3300))
  (= $t@3304 $t@3256)))
; [exec]
; p := __flatten_79
(pop) ; 18
(push) ; 18
; [else-branch 460] $t@3310 == Null
(assert (= $t@3310 $Ref.null))
(declare-const $k@3319 $Perm)
(assert ($Perm.isValidVar $k@3319))
(assert ($Perm.isReadVar $k@3319 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                      $k@3185)
                    $k@3203)
                  $k@3207)
                $k@3225)
              $k@3229)
            $k@3247)
          $k@3251)
        $k@3295)
      $k@3299))
  (= $t@3306 $t@3258)))
(declare-const $k@3320 $Perm)
(assert ($Perm.isValidVar $k@3320))
(assert ($Perm.isReadVar $k@3320 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                      $k@3186)
                    $k@3204)
                  $k@3208)
                $k@3226)
              $k@3230)
            $k@3248)
          $k@3252)
        $k@3296)
      $k@3300))
  (= $t@3304 $t@3256)))
; [exec]
; p := __flatten_79
(pop) ; 18
(pop) ; 17
(pop) ; 16
(pop) ; 15
; [dead else-branch 455] $t@3240 == Null
(pop) ; 14
(push) ; 14
; [else-branch 454] $t@3240 == Null
(assert (= $t@3240 $Ref.null))
(declare-const $k@3321 $Perm)
(assert ($Perm.isValidVar $k@3321))
(assert ($Perm.isReadVar $k@3321 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181) $k@3185)
            $k@3203)
          $k@3207)
        $k@3225)
      $k@3229))
  (= $t@3236 $t@3214)))
(declare-const $k@3322 $Perm)
(assert ($Perm.isValidVar $k@3322))
(assert ($Perm.isReadVar $k@3322 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182) $k@3186)
            $k@3204)
          $k@3208)
        $k@3226)
      $k@3230))
  (= $t@3234 $t@3212)))
; [exec]
; n := __flatten_77
; [exec]
; __flatten_78 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@3323 $Perm)
(assert ($Perm.isValidVar $k@3323))
(assert ($Perm.isReadVar $k@3323 $Perm.Write))
(push) ; 15
(assert (not (or (= $k@3323 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 15
(assert (<
  $k@3323
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179) $k@3183)
            $k@3201)
          $k@3205)
        $k@3223)
      $k@3227)
    $k@3245)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@3324 $Perm)
(assert ($Perm.isValidVar $k@3324))
(assert ($Perm.isReadVar $k@3324 $Perm.Write))
(push) ; 15
(assert (not (or (= $k@3324 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 15
(assert (<
  $k@3324
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180) $k@3184)
            $k@3202)
          $k@3206)
        $k@3224)
      $k@3228)
    $k@3246)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 15
(assert (not (not (= $t@3240 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 15
; [dead then-branch 461] $t@3240 != Null
(push) ; 15
; [else-branch 461] $t@3240 == Null
(declare-const $k@3325 $Perm)
(assert ($Perm.isValidVar $k@3325))
(assert ($Perm.isReadVar $k@3325 $Perm.Write))
(push) ; 16
(assert (not (or (= $k@3325 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181) $k@3185)
              $k@3203)
            $k@3207)
          $k@3225)
        $k@3229)
      $k@3321)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181) $k@3185)
              $k@3203)
            $k@3207)
          $k@3225)
        $k@3229)
      $k@3321)
    $Perm.No)))
(assert (<
  $k@3325
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181) $k@3185)
            $k@3203)
          $k@3207)
        $k@3225)
      $k@3229)
    $k@3321)))
(declare-const $k@3326 $Perm)
(assert ($Perm.isValidVar $k@3326))
(assert ($Perm.isReadVar $k@3326 $Perm.Write))
(push) ; 16
(assert (not (or (= $k@3326 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182) $k@3186)
              $k@3204)
            $k@3208)
          $k@3226)
        $k@3230)
      $k@3322)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182) $k@3186)
              $k@3204)
            $k@3208)
          $k@3226)
        $k@3230)
      $k@3322)
    $Perm.No)))
(assert (<
  $k@3326
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182) $k@3186)
            $k@3204)
          $k@3208)
        $k@3226)
      $k@3230)
    $k@3322)))
(declare-const sys__result@3327 $Ref)
(declare-const $t@3328 $Snap)
(declare-const $t@3329 $Snap)
(declare-const $t@3330 $Ref)
(assert (= $t@3328 ($Snap.combine $t@3329 ($SortWrappers.$RefTo$Snap $t@3330))))
(declare-const $t@3331 $Snap)
(declare-const $t@3332 $Ref)
(assert (= $t@3329 ($Snap.combine $t@3331 ($SortWrappers.$RefTo$Snap $t@3332))))
(declare-const $t@3333 $Snap)
(declare-const $t@3334 $Snap)
(assert (= $t@3331 ($Snap.combine $t@3333 $t@3334)))
(declare-const $t@3335 $Snap)
(declare-const $t@3336 $Ref)
(assert (= $t@3333 ($Snap.combine $t@3335 ($SortWrappers.$RefTo$Snap $t@3336))))
(declare-const $t@3337 $Snap)
(assert (= $t@3335 ($Snap.combine $t@3337 $Snap.unit)))
(declare-const $t@3338 Int)
(declare-const $t@3339 $Ref)
(assert (=
  $t@3337
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@3338)
    ($SortWrappers.$RefTo$Snap $t@3339))))
(declare-const $t@3340 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@3338)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@3340) $Snap.unit)))
(declare-const $k@3341 $Perm)
(assert ($Perm.isValidVar $k@3341))
(assert ($Perm.isReadVar $k@3341 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                  $k@3183)
                $k@3201)
              $k@3205)
            $k@3223)
          $k@3227)
        $k@3245)
      $k@3323))
  (= $t@3340 $t@3244)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                    $k@3183)
                  $k@3201)
                $k@3205)
              $k@3223)
            $k@3227)
          $k@3245)
        $k@3323)
      $k@3341)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                    $k@3183)
                  $k@3201)
                $k@3205)
              $k@3223)
            $k@3227)
          $k@3245)
        $k@3323)
      $k@3341)
    $Perm.No)))
(assert (> $t@3340 0))
(declare-const $k@3342 $Perm)
(assert ($Perm.isValidVar $k@3342))
(assert ($Perm.isReadVar $k@3342 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                  $k@3184)
                $k@3202)
              $k@3206)
            $k@3224)
          $k@3228)
        $k@3246)
      $k@3324))
  (= $t@3339 $t@3243)))
; [eval] diz.BlockingQueue__count != null
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                    $k@3184)
                  $k@3202)
                $k@3206)
              $k@3224)
            $k@3228)
          $k@3246)
        $k@3324)
      $k@3342)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                    $k@3184)
                  $k@3202)
                $k@3206)
              $k@3224)
            $k@3228)
          $k@3246)
        $k@3324)
      $k@3342)
    $Perm.No)))
(assert (not (= $t@3339 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 16
(assert (not (= $t@3336 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not (= $t@3336 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 16
(push) ; 16
; [then-branch 462] $t@3336 != Null
(assert (not (= $t@3336 $Ref.null)))
(declare-const $k@3343 $Perm)
(assert ($Perm.isValidVar $k@3343))
(assert ($Perm.isReadVar $k@3343 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                  $k@3185)
                $k@3203)
              $k@3207)
            $k@3225)
          $k@3229)
        $k@3321)
      $k@3325))
  (= $t@3332 $t@3236)))
(declare-const $k@3344 $Perm)
(assert ($Perm.isValidVar $k@3344))
(assert ($Perm.isReadVar $k@3344 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                  $k@3186)
                $k@3204)
              $k@3208)
            $k@3226)
          $k@3230)
        $k@3322)
      $k@3326))
  (= $t@3330 $t@3234)))
; [exec]
; o := __flatten_78
; [exec]
; __flatten_79 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@3345 $Perm)
(assert ($Perm.isValidVar $k@3345))
(assert ($Perm.isReadVar $k@3345 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@3345 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@3345
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                  $k@3183)
                $k@3201)
              $k@3205)
            $k@3223)
          $k@3227)
        $k@3245)
      $k@3323)
    $k@3341)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@3346 $Perm)
(assert ($Perm.isValidVar $k@3346))
(assert ($Perm.isReadVar $k@3346 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@3346 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@3346
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                  $k@3184)
                $k@3202)
              $k@3206)
            $k@3224)
          $k@3228)
        $k@3246)
      $k@3324)
    $k@3342)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 17
(assert (not (= $t@3336 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 17
(push) ; 17
; [then-branch 463] $t@3336 != Null
(declare-const $k@3347 $Perm)
(assert ($Perm.isValidVar $k@3347))
(assert ($Perm.isReadVar $k@3347 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@3347 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                    $k@3185)
                  $k@3203)
                $k@3207)
              $k@3225)
            $k@3229)
          $k@3321)
        $k@3325)
      $k@3343)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                    $k@3185)
                  $k@3203)
                $k@3207)
              $k@3225)
            $k@3229)
          $k@3321)
        $k@3325)
      $k@3343)
    $Perm.No)))
(assert (<
  $k@3347
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                  $k@3185)
                $k@3203)
              $k@3207)
            $k@3225)
          $k@3229)
        $k@3321)
      $k@3325)
    $k@3343)))
(declare-const $k@3348 $Perm)
(assert ($Perm.isValidVar $k@3348))
(assert ($Perm.isReadVar $k@3348 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@3348 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                    $k@3186)
                  $k@3204)
                $k@3208)
              $k@3226)
            $k@3230)
          $k@3322)
        $k@3326)
      $k@3344)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                    $k@3186)
                  $k@3204)
                $k@3208)
              $k@3226)
            $k@3230)
          $k@3322)
        $k@3326)
      $k@3344)
    $Perm.No)))
(assert (<
  $k@3348
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                  $k@3186)
                $k@3204)
              $k@3208)
            $k@3226)
          $k@3230)
        $k@3322)
      $k@3326)
    $k@3344)))
(declare-const sys__result@3349 $Ref)
(declare-const $t@3350 $Snap)
(declare-const $t@3351 $Snap)
(declare-const $t@3352 $Ref)
(assert (= $t@3350 ($Snap.combine $t@3351 ($SortWrappers.$RefTo$Snap $t@3352))))
(declare-const $t@3353 $Snap)
(declare-const $t@3354 $Ref)
(assert (= $t@3351 ($Snap.combine $t@3353 ($SortWrappers.$RefTo$Snap $t@3354))))
(declare-const $t@3355 $Snap)
(declare-const $t@3356 $Snap)
(assert (= $t@3353 ($Snap.combine $t@3355 $t@3356)))
(declare-const $t@3357 $Snap)
(declare-const $t@3358 $Ref)
(assert (= $t@3355 ($Snap.combine $t@3357 ($SortWrappers.$RefTo$Snap $t@3358))))
(declare-const $t@3359 $Snap)
(assert (= $t@3357 ($Snap.combine $t@3359 $Snap.unit)))
(declare-const $t@3360 Int)
(declare-const $t@3361 $Ref)
(assert (=
  $t@3359
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@3360)
    ($SortWrappers.$RefTo$Snap $t@3361))))
(declare-const $t@3362 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@3360)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@3362) $Snap.unit)))
(declare-const $k@3363 $Perm)
(assert ($Perm.isValidVar $k@3363))
(assert ($Perm.isReadVar $k@3363 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                      $k@3183)
                    $k@3201)
                  $k@3205)
                $k@3223)
              $k@3227)
            $k@3245)
          $k@3323)
        $k@3341)
      $k@3345))
  (= $t@3362 $t@3340)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                        $k@3183)
                      $k@3201)
                    $k@3205)
                  $k@3223)
                $k@3227)
              $k@3245)
            $k@3323)
          $k@3341)
        $k@3345)
      $k@3363)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                        $k@3183)
                      $k@3201)
                    $k@3205)
                  $k@3223)
                $k@3227)
              $k@3245)
            $k@3323)
          $k@3341)
        $k@3345)
      $k@3363)
    $Perm.No)))
(assert (> $t@3362 0))
(declare-const $k@3364 $Perm)
(assert ($Perm.isValidVar $k@3364))
(assert ($Perm.isReadVar $k@3364 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                      $k@3184)
                    $k@3202)
                  $k@3206)
                $k@3224)
              $k@3228)
            $k@3246)
          $k@3324)
        $k@3342)
      $k@3346))
  (= $t@3361 $t@3339)))
; [eval] diz.BlockingQueue__count != null
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                        $k@3184)
                      $k@3202)
                    $k@3206)
                  $k@3224)
                $k@3228)
              $k@3246)
            $k@3324)
          $k@3342)
        $k@3346)
      $k@3364)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                        $k@3184)
                      $k@3202)
                    $k@3206)
                  $k@3224)
                $k@3228)
              $k@3246)
            $k@3324)
          $k@3342)
        $k@3346)
      $k@3364)
    $Perm.No)))
(assert (not (= $t@3361 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 18
(assert (not (= $t@3358 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not (= $t@3358 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
; [then-branch 464] $t@3358 != Null
(assert (not (= $t@3358 $Ref.null)))
(declare-const $k@3365 $Perm)
(assert ($Perm.isValidVar $k@3365))
(assert ($Perm.isReadVar $k@3365 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                      $k@3185)
                    $k@3203)
                  $k@3207)
                $k@3225)
              $k@3229)
            $k@3321)
          $k@3325)
        $k@3343)
      $k@3347))
  (= $t@3354 $t@3332)))
(declare-const $k@3366 $Perm)
(assert ($Perm.isValidVar $k@3366))
(assert ($Perm.isReadVar $k@3366 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                      $k@3186)
                    $k@3204)
                  $k@3208)
                $k@3226)
              $k@3230)
            $k@3322)
          $k@3326)
        $k@3344)
      $k@3348))
  (= $t@3352 $t@3330)))
; [exec]
; p := __flatten_79
(pop) ; 18
(push) ; 18
; [else-branch 464] $t@3358 == Null
(assert (= $t@3358 $Ref.null))
(declare-const $k@3367 $Perm)
(assert ($Perm.isValidVar $k@3367))
(assert ($Perm.isReadVar $k@3367 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                      $k@3185)
                    $k@3203)
                  $k@3207)
                $k@3225)
              $k@3229)
            $k@3321)
          $k@3325)
        $k@3343)
      $k@3347))
  (= $t@3354 $t@3332)))
(declare-const $k@3368 $Perm)
(assert ($Perm.isValidVar $k@3368))
(assert ($Perm.isReadVar $k@3368 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                      $k@3186)
                    $k@3204)
                  $k@3208)
                $k@3226)
              $k@3230)
            $k@3322)
          $k@3326)
        $k@3344)
      $k@3348))
  (= $t@3352 $t@3330)))
; [exec]
; p := __flatten_79
(pop) ; 18
(pop) ; 17
; [dead else-branch 463] $t@3336 == Null
(pop) ; 16
(push) ; 16
; [else-branch 462] $t@3336 == Null
(assert (= $t@3336 $Ref.null))
(declare-const $k@3369 $Perm)
(assert ($Perm.isValidVar $k@3369))
(assert ($Perm.isReadVar $k@3369 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                  $k@3185)
                $k@3203)
              $k@3207)
            $k@3225)
          $k@3229)
        $k@3321)
      $k@3325))
  (= $t@3332 $t@3236)))
(declare-const $k@3370 $Perm)
(assert ($Perm.isValidVar $k@3370))
(assert ($Perm.isReadVar $k@3370 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                  $k@3186)
                $k@3204)
              $k@3208)
            $k@3226)
          $k@3230)
        $k@3322)
      $k@3326))
  (= $t@3330 $t@3234)))
; [exec]
; o := __flatten_78
; [exec]
; __flatten_79 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@3371 $Perm)
(assert ($Perm.isValidVar $k@3371))
(assert ($Perm.isReadVar $k@3371 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@3371 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@3371
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                  $k@3183)
                $k@3201)
              $k@3205)
            $k@3223)
          $k@3227)
        $k@3245)
      $k@3323)
    $k@3341)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@3372 $Perm)
(assert ($Perm.isValidVar $k@3372))
(assert ($Perm.isReadVar $k@3372 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@3372 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@3372
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                  $k@3184)
                $k@3202)
              $k@3206)
            $k@3224)
          $k@3228)
        $k@3246)
      $k@3324)
    $k@3342)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 17
(assert (not (not (= $t@3336 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 17
; [dead then-branch 465] $t@3336 != Null
(push) ; 17
; [else-branch 465] $t@3336 == Null
(declare-const $k@3373 $Perm)
(assert ($Perm.isValidVar $k@3373))
(assert ($Perm.isReadVar $k@3373 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@3373 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                    $k@3185)
                  $k@3203)
                $k@3207)
              $k@3225)
            $k@3229)
          $k@3321)
        $k@3325)
      $k@3369)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                    $k@3185)
                  $k@3203)
                $k@3207)
              $k@3225)
            $k@3229)
          $k@3321)
        $k@3325)
      $k@3369)
    $Perm.No)))
(assert (<
  $k@3373
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                  $k@3185)
                $k@3203)
              $k@3207)
            $k@3225)
          $k@3229)
        $k@3321)
      $k@3325)
    $k@3369)))
(declare-const $k@3374 $Perm)
(assert ($Perm.isValidVar $k@3374))
(assert ($Perm.isReadVar $k@3374 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@3374 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                    $k@3186)
                  $k@3204)
                $k@3208)
              $k@3226)
            $k@3230)
          $k@3322)
        $k@3326)
      $k@3370)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                    $k@3186)
                  $k@3204)
                $k@3208)
              $k@3226)
            $k@3230)
          $k@3322)
        $k@3326)
      $k@3370)
    $Perm.No)))
(assert (<
  $k@3374
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                  $k@3186)
                $k@3204)
              $k@3208)
            $k@3226)
          $k@3230)
        $k@3322)
      $k@3326)
    $k@3370)))
(declare-const sys__result@3375 $Ref)
(declare-const $t@3376 $Snap)
(declare-const $t@3377 $Snap)
(declare-const $t@3378 $Ref)
(assert (= $t@3376 ($Snap.combine $t@3377 ($SortWrappers.$RefTo$Snap $t@3378))))
(declare-const $t@3379 $Snap)
(declare-const $t@3380 $Ref)
(assert (= $t@3377 ($Snap.combine $t@3379 ($SortWrappers.$RefTo$Snap $t@3380))))
(declare-const $t@3381 $Snap)
(declare-const $t@3382 $Snap)
(assert (= $t@3379 ($Snap.combine $t@3381 $t@3382)))
(declare-const $t@3383 $Snap)
(declare-const $t@3384 $Ref)
(assert (= $t@3381 ($Snap.combine $t@3383 ($SortWrappers.$RefTo$Snap $t@3384))))
(declare-const $t@3385 $Snap)
(assert (= $t@3383 ($Snap.combine $t@3385 $Snap.unit)))
(declare-const $t@3386 Int)
(declare-const $t@3387 $Ref)
(assert (=
  $t@3385
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@3386)
    ($SortWrappers.$RefTo$Snap $t@3387))))
(declare-const $t@3388 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@3386)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@3388) $Snap.unit)))
(declare-const $k@3389 $Perm)
(assert ($Perm.isValidVar $k@3389))
(assert ($Perm.isReadVar $k@3389 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                      $k@3183)
                    $k@3201)
                  $k@3205)
                $k@3223)
              $k@3227)
            $k@3245)
          $k@3323)
        $k@3341)
      $k@3371))
  (= $t@3388 $t@3340)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                        $k@3183)
                      $k@3201)
                    $k@3205)
                  $k@3223)
                $k@3227)
              $k@3245)
            $k@3323)
          $k@3341)
        $k@3371)
      $k@3389)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                        $k@3183)
                      $k@3201)
                    $k@3205)
                  $k@3223)
                $k@3227)
              $k@3245)
            $k@3323)
          $k@3341)
        $k@3371)
      $k@3389)
    $Perm.No)))
(assert (> $t@3388 0))
(declare-const $k@3390 $Perm)
(assert ($Perm.isValidVar $k@3390))
(assert ($Perm.isReadVar $k@3390 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                      $k@3184)
                    $k@3202)
                  $k@3206)
                $k@3224)
              $k@3228)
            $k@3246)
          $k@3324)
        $k@3342)
      $k@3372))
  (= $t@3387 $t@3339)))
; [eval] diz.BlockingQueue__count != null
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                        $k@3184)
                      $k@3202)
                    $k@3206)
                  $k@3224)
                $k@3228)
              $k@3246)
            $k@3324)
          $k@3342)
        $k@3372)
      $k@3390)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                        $k@3184)
                      $k@3202)
                    $k@3206)
                  $k@3224)
                $k@3228)
              $k@3246)
            $k@3324)
          $k@3342)
        $k@3372)
      $k@3390)
    $Perm.No)))
(assert (not (= $t@3387 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 18
(assert (not (= $t@3384 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not (= $t@3384 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
; [then-branch 466] $t@3384 != Null
(assert (not (= $t@3384 $Ref.null)))
(declare-const $k@3391 $Perm)
(assert ($Perm.isValidVar $k@3391))
(assert ($Perm.isReadVar $k@3391 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                      $k@3185)
                    $k@3203)
                  $k@3207)
                $k@3225)
              $k@3229)
            $k@3321)
          $k@3325)
        $k@3369)
      $k@3373))
  (= $t@3380 $t@3332)))
(declare-const $k@3392 $Perm)
(assert ($Perm.isValidVar $k@3392))
(assert ($Perm.isReadVar $k@3392 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                      $k@3186)
                    $k@3204)
                  $k@3208)
                $k@3226)
              $k@3230)
            $k@3322)
          $k@3326)
        $k@3370)
      $k@3374))
  (= $t@3378 $t@3330)))
; [exec]
; p := __flatten_79
(pop) ; 18
(push) ; 18
; [else-branch 466] $t@3384 == Null
(assert (= $t@3384 $Ref.null))
(declare-const $k@3393 $Perm)
(assert ($Perm.isValidVar $k@3393))
(assert ($Perm.isReadVar $k@3393 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                      $k@3185)
                    $k@3203)
                  $k@3207)
                $k@3225)
              $k@3229)
            $k@3321)
          $k@3325)
        $k@3369)
      $k@3373))
  (= $t@3380 $t@3332)))
(declare-const $k@3394 $Perm)
(assert ($Perm.isValidVar $k@3394))
(assert ($Perm.isReadVar $k@3394 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                      $k@3186)
                    $k@3204)
                  $k@3208)
                $k@3226)
              $k@3230)
            $k@3322)
          $k@3326)
        $k@3370)
      $k@3374))
  (= $t@3378 $t@3330)))
; [exec]
; p := __flatten_79
(pop) ; 18
(pop) ; 17
(pop) ; 16
(pop) ; 15
(pop) ; 14
(pop) ; 13
; [dead else-branch 453] $t@3218 == Null
(pop) ; 12
(push) ; 12
; [else-branch 452] $t@3218 == Null
(assert (= $t@3218 $Ref.null))
(declare-const $k@3395 $Perm)
(assert ($Perm.isValidVar $k@3395))
(assert ($Perm.isReadVar $k@3395 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181) $k@3185)
        $k@3203)
      $k@3207))
  (= $t@3214 $t@3192)))
(declare-const $k@3396 $Perm)
(assert ($Perm.isValidVar $k@3396))
(assert ($Perm.isReadVar $k@3396 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182) $k@3186)
        $k@3204)
      $k@3208))
  (= $t@3212 $t@3190)))
; [exec]
; b := __flatten_76
; [exec]
; __flatten_77 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@3397 $Perm)
(assert ($Perm.isValidVar $k@3397))
(assert ($Perm.isReadVar $k@3397 $Perm.Write))
(push) ; 13
(assert (not (or (= $k@3397 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 13
(assert (<
  $k@3397
  (+
    (-
      (+
        (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179) $k@3183)
        $k@3201)
      $k@3205)
    $k@3223)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@3398 $Perm)
(assert ($Perm.isValidVar $k@3398))
(assert ($Perm.isReadVar $k@3398 $Perm.Write))
(push) ; 13
(assert (not (or (= $k@3398 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 13
(assert (<
  $k@3398
  (+
    (-
      (+
        (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180) $k@3184)
        $k@3202)
      $k@3206)
    $k@3224)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 13
(assert (not (not (= $t@3218 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 13
; [dead then-branch 467] $t@3218 != Null
(push) ; 13
; [else-branch 467] $t@3218 == Null
(declare-const $k@3399 $Perm)
(assert ($Perm.isValidVar $k@3399))
(assert ($Perm.isReadVar $k@3399 $Perm.Write))
(push) ; 14
(assert (not (or (= $k@3399 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(push) ; 14
(assert (not (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181) $k@3185)
          $k@3203)
        $k@3207)
      $k@3395)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(assert (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181) $k@3185)
          $k@3203)
        $k@3207)
      $k@3395)
    $Perm.No)))
(assert (<
  $k@3399
  (+
    (-
      (+
        (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181) $k@3185)
        $k@3203)
      $k@3207)
    $k@3395)))
(declare-const $k@3400 $Perm)
(assert ($Perm.isValidVar $k@3400))
(assert ($Perm.isReadVar $k@3400 $Perm.Write))
(push) ; 14
(assert (not (or (= $k@3400 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(push) ; 14
(assert (not (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182) $k@3186)
          $k@3204)
        $k@3208)
      $k@3396)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(assert (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182) $k@3186)
          $k@3204)
        $k@3208)
      $k@3396)
    $Perm.No)))
(assert (<
  $k@3400
  (+
    (-
      (+
        (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182) $k@3186)
        $k@3204)
      $k@3208)
    $k@3396)))
(declare-const sys__result@3401 $Ref)
(declare-const $t@3402 $Snap)
(declare-const $t@3403 $Snap)
(declare-const $t@3404 $Ref)
(assert (= $t@3402 ($Snap.combine $t@3403 ($SortWrappers.$RefTo$Snap $t@3404))))
(declare-const $t@3405 $Snap)
(declare-const $t@3406 $Ref)
(assert (= $t@3403 ($Snap.combine $t@3405 ($SortWrappers.$RefTo$Snap $t@3406))))
(declare-const $t@3407 $Snap)
(declare-const $t@3408 $Snap)
(assert (= $t@3405 ($Snap.combine $t@3407 $t@3408)))
(declare-const $t@3409 $Snap)
(declare-const $t@3410 $Ref)
(assert (= $t@3407 ($Snap.combine $t@3409 ($SortWrappers.$RefTo$Snap $t@3410))))
(declare-const $t@3411 $Snap)
(assert (= $t@3409 ($Snap.combine $t@3411 $Snap.unit)))
(declare-const $t@3412 Int)
(declare-const $t@3413 $Ref)
(assert (=
  $t@3411
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@3412)
    ($SortWrappers.$RefTo$Snap $t@3413))))
(declare-const $t@3414 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@3412)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@3414) $Snap.unit)))
(declare-const $k@3415 $Perm)
(assert ($Perm.isValidVar $k@3415))
(assert ($Perm.isReadVar $k@3415 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179) $k@3183)
            $k@3201)
          $k@3205)
        $k@3223)
      $k@3397))
  (= $t@3414 $t@3222)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 14
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179) $k@3183)
              $k@3201)
            $k@3205)
          $k@3223)
        $k@3397)
      $k@3415)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179) $k@3183)
              $k@3201)
            $k@3205)
          $k@3223)
        $k@3397)
      $k@3415)
    $Perm.No)))
(assert (> $t@3414 0))
(declare-const $k@3416 $Perm)
(assert ($Perm.isValidVar $k@3416))
(assert ($Perm.isReadVar $k@3416 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180) $k@3184)
            $k@3202)
          $k@3206)
        $k@3224)
      $k@3398))
  (= $t@3413 $t@3221)))
; [eval] diz.BlockingQueue__count != null
(push) ; 14
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180) $k@3184)
              $k@3202)
            $k@3206)
          $k@3224)
        $k@3398)
      $k@3416)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180) $k@3184)
              $k@3202)
            $k@3206)
          $k@3224)
        $k@3398)
      $k@3416)
    $Perm.No)))
(assert (not (= $t@3413 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 14
(assert (not (= $t@3410 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 14
(push) ; 14
(assert (not (not (= $t@3410 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 14
(push) ; 14
; [then-branch 468] $t@3410 != Null
(assert (not (= $t@3410 $Ref.null)))
(declare-const $k@3417 $Perm)
(assert ($Perm.isValidVar $k@3417))
(assert ($Perm.isReadVar $k@3417 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181) $k@3185)
            $k@3203)
          $k@3207)
        $k@3395)
      $k@3399))
  (= $t@3406 $t@3214)))
(declare-const $k@3418 $Perm)
(assert ($Perm.isValidVar $k@3418))
(assert ($Perm.isReadVar $k@3418 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182) $k@3186)
            $k@3204)
          $k@3208)
        $k@3396)
      $k@3400))
  (= $t@3404 $t@3212)))
; [exec]
; n := __flatten_77
; [exec]
; __flatten_78 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@3419 $Perm)
(assert ($Perm.isValidVar $k@3419))
(assert ($Perm.isReadVar $k@3419 $Perm.Write))
(push) ; 15
(assert (not (or (= $k@3419 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 15
(assert (<
  $k@3419
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179) $k@3183)
            $k@3201)
          $k@3205)
        $k@3223)
      $k@3397)
    $k@3415)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@3420 $Perm)
(assert ($Perm.isValidVar $k@3420))
(assert ($Perm.isReadVar $k@3420 $Perm.Write))
(push) ; 15
(assert (not (or (= $k@3420 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 15
(assert (<
  $k@3420
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180) $k@3184)
            $k@3202)
          $k@3206)
        $k@3224)
      $k@3398)
    $k@3416)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 15
(assert (not (= $t@3410 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 15
(push) ; 15
; [then-branch 469] $t@3410 != Null
(declare-const $k@3421 $Perm)
(assert ($Perm.isValidVar $k@3421))
(assert ($Perm.isReadVar $k@3421 $Perm.Write))
(push) ; 16
(assert (not (or (= $k@3421 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181) $k@3185)
              $k@3203)
            $k@3207)
          $k@3395)
        $k@3399)
      $k@3417)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181) $k@3185)
              $k@3203)
            $k@3207)
          $k@3395)
        $k@3399)
      $k@3417)
    $Perm.No)))
(assert (<
  $k@3421
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181) $k@3185)
            $k@3203)
          $k@3207)
        $k@3395)
      $k@3399)
    $k@3417)))
(declare-const $k@3422 $Perm)
(assert ($Perm.isValidVar $k@3422))
(assert ($Perm.isReadVar $k@3422 $Perm.Write))
(push) ; 16
(assert (not (or (= $k@3422 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182) $k@3186)
              $k@3204)
            $k@3208)
          $k@3396)
        $k@3400)
      $k@3418)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182) $k@3186)
              $k@3204)
            $k@3208)
          $k@3396)
        $k@3400)
      $k@3418)
    $Perm.No)))
(assert (<
  $k@3422
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182) $k@3186)
            $k@3204)
          $k@3208)
        $k@3396)
      $k@3400)
    $k@3418)))
(declare-const sys__result@3423 $Ref)
(declare-const $t@3424 $Snap)
(declare-const $t@3425 $Snap)
(declare-const $t@3426 $Ref)
(assert (= $t@3424 ($Snap.combine $t@3425 ($SortWrappers.$RefTo$Snap $t@3426))))
(declare-const $t@3427 $Snap)
(declare-const $t@3428 $Ref)
(assert (= $t@3425 ($Snap.combine $t@3427 ($SortWrappers.$RefTo$Snap $t@3428))))
(declare-const $t@3429 $Snap)
(declare-const $t@3430 $Snap)
(assert (= $t@3427 ($Snap.combine $t@3429 $t@3430)))
(declare-const $t@3431 $Snap)
(declare-const $t@3432 $Ref)
(assert (= $t@3429 ($Snap.combine $t@3431 ($SortWrappers.$RefTo$Snap $t@3432))))
(declare-const $t@3433 $Snap)
(assert (= $t@3431 ($Snap.combine $t@3433 $Snap.unit)))
(declare-const $t@3434 Int)
(declare-const $t@3435 $Ref)
(assert (=
  $t@3433
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@3434)
    ($SortWrappers.$RefTo$Snap $t@3435))))
(declare-const $t@3436 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@3434)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@3436) $Snap.unit)))
(declare-const $k@3437 $Perm)
(assert ($Perm.isValidVar $k@3437))
(assert ($Perm.isReadVar $k@3437 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                  $k@3183)
                $k@3201)
              $k@3205)
            $k@3223)
          $k@3397)
        $k@3415)
      $k@3419))
  (= $t@3436 $t@3414)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                    $k@3183)
                  $k@3201)
                $k@3205)
              $k@3223)
            $k@3397)
          $k@3415)
        $k@3419)
      $k@3437)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                    $k@3183)
                  $k@3201)
                $k@3205)
              $k@3223)
            $k@3397)
          $k@3415)
        $k@3419)
      $k@3437)
    $Perm.No)))
(assert (> $t@3436 0))
(declare-const $k@3438 $Perm)
(assert ($Perm.isValidVar $k@3438))
(assert ($Perm.isReadVar $k@3438 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                  $k@3184)
                $k@3202)
              $k@3206)
            $k@3224)
          $k@3398)
        $k@3416)
      $k@3420))
  (= $t@3435 $t@3413)))
; [eval] diz.BlockingQueue__count != null
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                    $k@3184)
                  $k@3202)
                $k@3206)
              $k@3224)
            $k@3398)
          $k@3416)
        $k@3420)
      $k@3438)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                    $k@3184)
                  $k@3202)
                $k@3206)
              $k@3224)
            $k@3398)
          $k@3416)
        $k@3420)
      $k@3438)
    $Perm.No)))
(assert (not (= $t@3435 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 16
(assert (not (= $t@3432 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not (= $t@3432 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 16
(push) ; 16
; [then-branch 470] $t@3432 != Null
(assert (not (= $t@3432 $Ref.null)))
(declare-const $k@3439 $Perm)
(assert ($Perm.isValidVar $k@3439))
(assert ($Perm.isReadVar $k@3439 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                  $k@3185)
                $k@3203)
              $k@3207)
            $k@3395)
          $k@3399)
        $k@3417)
      $k@3421))
  (= $t@3428 $t@3406)))
(declare-const $k@3440 $Perm)
(assert ($Perm.isValidVar $k@3440))
(assert ($Perm.isReadVar $k@3440 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                  $k@3186)
                $k@3204)
              $k@3208)
            $k@3396)
          $k@3400)
        $k@3418)
      $k@3422))
  (= $t@3426 $t@3404)))
; [exec]
; o := __flatten_78
; [exec]
; __flatten_79 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@3441 $Perm)
(assert ($Perm.isValidVar $k@3441))
(assert ($Perm.isReadVar $k@3441 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@3441 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@3441
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                  $k@3183)
                $k@3201)
              $k@3205)
            $k@3223)
          $k@3397)
        $k@3415)
      $k@3419)
    $k@3437)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@3442 $Perm)
(assert ($Perm.isValidVar $k@3442))
(assert ($Perm.isReadVar $k@3442 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@3442 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@3442
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                  $k@3184)
                $k@3202)
              $k@3206)
            $k@3224)
          $k@3398)
        $k@3416)
      $k@3420)
    $k@3438)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 17
(assert (not (= $t@3432 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 17
(push) ; 17
; [then-branch 471] $t@3432 != Null
(declare-const $k@3443 $Perm)
(assert ($Perm.isValidVar $k@3443))
(assert ($Perm.isReadVar $k@3443 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@3443 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                    $k@3185)
                  $k@3203)
                $k@3207)
              $k@3395)
            $k@3399)
          $k@3417)
        $k@3421)
      $k@3439)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                    $k@3185)
                  $k@3203)
                $k@3207)
              $k@3395)
            $k@3399)
          $k@3417)
        $k@3421)
      $k@3439)
    $Perm.No)))
(assert (<
  $k@3443
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                  $k@3185)
                $k@3203)
              $k@3207)
            $k@3395)
          $k@3399)
        $k@3417)
      $k@3421)
    $k@3439)))
(declare-const $k@3444 $Perm)
(assert ($Perm.isValidVar $k@3444))
(assert ($Perm.isReadVar $k@3444 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@3444 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                    $k@3186)
                  $k@3204)
                $k@3208)
              $k@3396)
            $k@3400)
          $k@3418)
        $k@3422)
      $k@3440)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                    $k@3186)
                  $k@3204)
                $k@3208)
              $k@3396)
            $k@3400)
          $k@3418)
        $k@3422)
      $k@3440)
    $Perm.No)))
(assert (<
  $k@3444
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                  $k@3186)
                $k@3204)
              $k@3208)
            $k@3396)
          $k@3400)
        $k@3418)
      $k@3422)
    $k@3440)))
(declare-const sys__result@3445 $Ref)
(declare-const $t@3446 $Snap)
(declare-const $t@3447 $Snap)
(declare-const $t@3448 $Ref)
(assert (= $t@3446 ($Snap.combine $t@3447 ($SortWrappers.$RefTo$Snap $t@3448))))
(declare-const $t@3449 $Snap)
(declare-const $t@3450 $Ref)
(assert (= $t@3447 ($Snap.combine $t@3449 ($SortWrappers.$RefTo$Snap $t@3450))))
(declare-const $t@3451 $Snap)
(declare-const $t@3452 $Snap)
(assert (= $t@3449 ($Snap.combine $t@3451 $t@3452)))
(declare-const $t@3453 $Snap)
(declare-const $t@3454 $Ref)
(assert (= $t@3451 ($Snap.combine $t@3453 ($SortWrappers.$RefTo$Snap $t@3454))))
(declare-const $t@3455 $Snap)
(assert (= $t@3453 ($Snap.combine $t@3455 $Snap.unit)))
(declare-const $t@3456 Int)
(declare-const $t@3457 $Ref)
(assert (=
  $t@3455
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@3456)
    ($SortWrappers.$RefTo$Snap $t@3457))))
(declare-const $t@3458 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@3456)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@3458) $Snap.unit)))
(declare-const $k@3459 $Perm)
(assert ($Perm.isValidVar $k@3459))
(assert ($Perm.isReadVar $k@3459 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                      $k@3183)
                    $k@3201)
                  $k@3205)
                $k@3223)
              $k@3397)
            $k@3415)
          $k@3419)
        $k@3437)
      $k@3441))
  (= $t@3458 $t@3436)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                        $k@3183)
                      $k@3201)
                    $k@3205)
                  $k@3223)
                $k@3397)
              $k@3415)
            $k@3419)
          $k@3437)
        $k@3441)
      $k@3459)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                        $k@3183)
                      $k@3201)
                    $k@3205)
                  $k@3223)
                $k@3397)
              $k@3415)
            $k@3419)
          $k@3437)
        $k@3441)
      $k@3459)
    $Perm.No)))
(assert (> $t@3458 0))
(declare-const $k@3460 $Perm)
(assert ($Perm.isValidVar $k@3460))
(assert ($Perm.isReadVar $k@3460 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                      $k@3184)
                    $k@3202)
                  $k@3206)
                $k@3224)
              $k@3398)
            $k@3416)
          $k@3420)
        $k@3438)
      $k@3442))
  (= $t@3457 $t@3435)))
; [eval] diz.BlockingQueue__count != null
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                        $k@3184)
                      $k@3202)
                    $k@3206)
                  $k@3224)
                $k@3398)
              $k@3416)
            $k@3420)
          $k@3438)
        $k@3442)
      $k@3460)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                        $k@3184)
                      $k@3202)
                    $k@3206)
                  $k@3224)
                $k@3398)
              $k@3416)
            $k@3420)
          $k@3438)
        $k@3442)
      $k@3460)
    $Perm.No)))
(assert (not (= $t@3457 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 18
(assert (not (= $t@3454 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not (= $t@3454 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
; [then-branch 472] $t@3454 != Null
(assert (not (= $t@3454 $Ref.null)))
(declare-const $k@3461 $Perm)
(assert ($Perm.isValidVar $k@3461))
(assert ($Perm.isReadVar $k@3461 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                      $k@3185)
                    $k@3203)
                  $k@3207)
                $k@3395)
              $k@3399)
            $k@3417)
          $k@3421)
        $k@3439)
      $k@3443))
  (= $t@3450 $t@3428)))
(declare-const $k@3462 $Perm)
(assert ($Perm.isValidVar $k@3462))
(assert ($Perm.isReadVar $k@3462 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                      $k@3186)
                    $k@3204)
                  $k@3208)
                $k@3396)
              $k@3400)
            $k@3418)
          $k@3422)
        $k@3440)
      $k@3444))
  (= $t@3448 $t@3426)))
; [exec]
; p := __flatten_79
(pop) ; 18
(push) ; 18
; [else-branch 472] $t@3454 == Null
(assert (= $t@3454 $Ref.null))
(declare-const $k@3463 $Perm)
(assert ($Perm.isValidVar $k@3463))
(assert ($Perm.isReadVar $k@3463 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                      $k@3185)
                    $k@3203)
                  $k@3207)
                $k@3395)
              $k@3399)
            $k@3417)
          $k@3421)
        $k@3439)
      $k@3443))
  (= $t@3450 $t@3428)))
(declare-const $k@3464 $Perm)
(assert ($Perm.isValidVar $k@3464))
(assert ($Perm.isReadVar $k@3464 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                      $k@3186)
                    $k@3204)
                  $k@3208)
                $k@3396)
              $k@3400)
            $k@3418)
          $k@3422)
        $k@3440)
      $k@3444))
  (= $t@3448 $t@3426)))
; [exec]
; p := __flatten_79
(pop) ; 18
(pop) ; 17
; [dead else-branch 471] $t@3432 == Null
(pop) ; 16
(push) ; 16
; [else-branch 470] $t@3432 == Null
(assert (= $t@3432 $Ref.null))
(declare-const $k@3465 $Perm)
(assert ($Perm.isValidVar $k@3465))
(assert ($Perm.isReadVar $k@3465 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                  $k@3185)
                $k@3203)
              $k@3207)
            $k@3395)
          $k@3399)
        $k@3417)
      $k@3421))
  (= $t@3428 $t@3406)))
(declare-const $k@3466 $Perm)
(assert ($Perm.isValidVar $k@3466))
(assert ($Perm.isReadVar $k@3466 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                  $k@3186)
                $k@3204)
              $k@3208)
            $k@3396)
          $k@3400)
        $k@3418)
      $k@3422))
  (= $t@3426 $t@3404)))
; [exec]
; o := __flatten_78
; [exec]
; __flatten_79 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@3467 $Perm)
(assert ($Perm.isValidVar $k@3467))
(assert ($Perm.isReadVar $k@3467 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@3467 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@3467
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                  $k@3183)
                $k@3201)
              $k@3205)
            $k@3223)
          $k@3397)
        $k@3415)
      $k@3419)
    $k@3437)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@3468 $Perm)
(assert ($Perm.isValidVar $k@3468))
(assert ($Perm.isReadVar $k@3468 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@3468 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@3468
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                  $k@3184)
                $k@3202)
              $k@3206)
            $k@3224)
          $k@3398)
        $k@3416)
      $k@3420)
    $k@3438)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 17
(assert (not (not (= $t@3432 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 17
; [dead then-branch 473] $t@3432 != Null
(push) ; 17
; [else-branch 473] $t@3432 == Null
(declare-const $k@3469 $Perm)
(assert ($Perm.isValidVar $k@3469))
(assert ($Perm.isReadVar $k@3469 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@3469 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                    $k@3185)
                  $k@3203)
                $k@3207)
              $k@3395)
            $k@3399)
          $k@3417)
        $k@3421)
      $k@3465)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                    $k@3185)
                  $k@3203)
                $k@3207)
              $k@3395)
            $k@3399)
          $k@3417)
        $k@3421)
      $k@3465)
    $Perm.No)))
(assert (<
  $k@3469
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                  $k@3185)
                $k@3203)
              $k@3207)
            $k@3395)
          $k@3399)
        $k@3417)
      $k@3421)
    $k@3465)))
(declare-const $k@3470 $Perm)
(assert ($Perm.isValidVar $k@3470))
(assert ($Perm.isReadVar $k@3470 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@3470 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                    $k@3186)
                  $k@3204)
                $k@3208)
              $k@3396)
            $k@3400)
          $k@3418)
        $k@3422)
      $k@3466)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                    $k@3186)
                  $k@3204)
                $k@3208)
              $k@3396)
            $k@3400)
          $k@3418)
        $k@3422)
      $k@3466)
    $Perm.No)))
(assert (<
  $k@3470
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                  $k@3186)
                $k@3204)
              $k@3208)
            $k@3396)
          $k@3400)
        $k@3418)
      $k@3422)
    $k@3466)))
(declare-const sys__result@3471 $Ref)
(declare-const $t@3472 $Snap)
(declare-const $t@3473 $Snap)
(declare-const $t@3474 $Ref)
(assert (= $t@3472 ($Snap.combine $t@3473 ($SortWrappers.$RefTo$Snap $t@3474))))
(declare-const $t@3475 $Snap)
(declare-const $t@3476 $Ref)
(assert (= $t@3473 ($Snap.combine $t@3475 ($SortWrappers.$RefTo$Snap $t@3476))))
(declare-const $t@3477 $Snap)
(declare-const $t@3478 $Snap)
(assert (= $t@3475 ($Snap.combine $t@3477 $t@3478)))
(declare-const $t@3479 $Snap)
(declare-const $t@3480 $Ref)
(assert (= $t@3477 ($Snap.combine $t@3479 ($SortWrappers.$RefTo$Snap $t@3480))))
(declare-const $t@3481 $Snap)
(assert (= $t@3479 ($Snap.combine $t@3481 $Snap.unit)))
(declare-const $t@3482 Int)
(declare-const $t@3483 $Ref)
(assert (=
  $t@3481
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@3482)
    ($SortWrappers.$RefTo$Snap $t@3483))))
(declare-const $t@3484 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@3482)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@3484) $Snap.unit)))
(declare-const $k@3485 $Perm)
(assert ($Perm.isValidVar $k@3485))
(assert ($Perm.isReadVar $k@3485 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                      $k@3183)
                    $k@3201)
                  $k@3205)
                $k@3223)
              $k@3397)
            $k@3415)
          $k@3419)
        $k@3437)
      $k@3467))
  (= $t@3484 $t@3436)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                        $k@3183)
                      $k@3201)
                    $k@3205)
                  $k@3223)
                $k@3397)
              $k@3415)
            $k@3419)
          $k@3437)
        $k@3467)
      $k@3485)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                        $k@3183)
                      $k@3201)
                    $k@3205)
                  $k@3223)
                $k@3397)
              $k@3415)
            $k@3419)
          $k@3437)
        $k@3467)
      $k@3485)
    $Perm.No)))
(assert (> $t@3484 0))
(declare-const $k@3486 $Perm)
(assert ($Perm.isValidVar $k@3486))
(assert ($Perm.isReadVar $k@3486 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                      $k@3184)
                    $k@3202)
                  $k@3206)
                $k@3224)
              $k@3398)
            $k@3416)
          $k@3420)
        $k@3438)
      $k@3468))
  (= $t@3483 $t@3435)))
; [eval] diz.BlockingQueue__count != null
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                        $k@3184)
                      $k@3202)
                    $k@3206)
                  $k@3224)
                $k@3398)
              $k@3416)
            $k@3420)
          $k@3438)
        $k@3468)
      $k@3486)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                        $k@3184)
                      $k@3202)
                    $k@3206)
                  $k@3224)
                $k@3398)
              $k@3416)
            $k@3420)
          $k@3438)
        $k@3468)
      $k@3486)
    $Perm.No)))
(assert (not (= $t@3483 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 18
(assert (not (= $t@3480 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not (= $t@3480 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
; [then-branch 474] $t@3480 != Null
(assert (not (= $t@3480 $Ref.null)))
(declare-const $k@3487 $Perm)
(assert ($Perm.isValidVar $k@3487))
(assert ($Perm.isReadVar $k@3487 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                      $k@3185)
                    $k@3203)
                  $k@3207)
                $k@3395)
              $k@3399)
            $k@3417)
          $k@3421)
        $k@3465)
      $k@3469))
  (= $t@3476 $t@3428)))
(declare-const $k@3488 $Perm)
(assert ($Perm.isValidVar $k@3488))
(assert ($Perm.isReadVar $k@3488 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                      $k@3186)
                    $k@3204)
                  $k@3208)
                $k@3396)
              $k@3400)
            $k@3418)
          $k@3422)
        $k@3466)
      $k@3470))
  (= $t@3474 $t@3426)))
; [exec]
; p := __flatten_79
(pop) ; 18
(push) ; 18
; [else-branch 474] $t@3480 == Null
(assert (= $t@3480 $Ref.null))
(declare-const $k@3489 $Perm)
(assert ($Perm.isValidVar $k@3489))
(assert ($Perm.isReadVar $k@3489 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                      $k@3185)
                    $k@3203)
                  $k@3207)
                $k@3395)
              $k@3399)
            $k@3417)
          $k@3421)
        $k@3465)
      $k@3469))
  (= $t@3476 $t@3428)))
(declare-const $k@3490 $Perm)
(assert ($Perm.isValidVar $k@3490))
(assert ($Perm.isReadVar $k@3490 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                      $k@3186)
                    $k@3204)
                  $k@3208)
                $k@3396)
              $k@3400)
            $k@3418)
          $k@3422)
        $k@3466)
      $k@3470))
  (= $t@3474 $t@3426)))
; [exec]
; p := __flatten_79
(pop) ; 18
(pop) ; 17
(pop) ; 16
(pop) ; 15
; [dead else-branch 469] $t@3410 == Null
(pop) ; 14
(push) ; 14
; [else-branch 468] $t@3410 == Null
(assert (= $t@3410 $Ref.null))
(declare-const $k@3491 $Perm)
(assert ($Perm.isValidVar $k@3491))
(assert ($Perm.isReadVar $k@3491 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181) $k@3185)
            $k@3203)
          $k@3207)
        $k@3395)
      $k@3399))
  (= $t@3406 $t@3214)))
(declare-const $k@3492 $Perm)
(assert ($Perm.isValidVar $k@3492))
(assert ($Perm.isReadVar $k@3492 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182) $k@3186)
            $k@3204)
          $k@3208)
        $k@3396)
      $k@3400))
  (= $t@3404 $t@3212)))
; [exec]
; n := __flatten_77
; [exec]
; __flatten_78 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@3493 $Perm)
(assert ($Perm.isValidVar $k@3493))
(assert ($Perm.isReadVar $k@3493 $Perm.Write))
(push) ; 15
(assert (not (or (= $k@3493 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 15
(assert (<
  $k@3493
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179) $k@3183)
            $k@3201)
          $k@3205)
        $k@3223)
      $k@3397)
    $k@3415)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@3494 $Perm)
(assert ($Perm.isValidVar $k@3494))
(assert ($Perm.isReadVar $k@3494 $Perm.Write))
(push) ; 15
(assert (not (or (= $k@3494 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 15
(assert (<
  $k@3494
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180) $k@3184)
            $k@3202)
          $k@3206)
        $k@3224)
      $k@3398)
    $k@3416)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 15
(assert (not (not (= $t@3410 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 15
; [dead then-branch 475] $t@3410 != Null
(push) ; 15
; [else-branch 475] $t@3410 == Null
(declare-const $k@3495 $Perm)
(assert ($Perm.isValidVar $k@3495))
(assert ($Perm.isReadVar $k@3495 $Perm.Write))
(push) ; 16
(assert (not (or (= $k@3495 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181) $k@3185)
              $k@3203)
            $k@3207)
          $k@3395)
        $k@3399)
      $k@3491)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181) $k@3185)
              $k@3203)
            $k@3207)
          $k@3395)
        $k@3399)
      $k@3491)
    $Perm.No)))
(assert (<
  $k@3495
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181) $k@3185)
            $k@3203)
          $k@3207)
        $k@3395)
      $k@3399)
    $k@3491)))
(declare-const $k@3496 $Perm)
(assert ($Perm.isValidVar $k@3496))
(assert ($Perm.isReadVar $k@3496 $Perm.Write))
(push) ; 16
(assert (not (or (= $k@3496 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182) $k@3186)
              $k@3204)
            $k@3208)
          $k@3396)
        $k@3400)
      $k@3492)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182) $k@3186)
              $k@3204)
            $k@3208)
          $k@3396)
        $k@3400)
      $k@3492)
    $Perm.No)))
(assert (<
  $k@3496
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182) $k@3186)
            $k@3204)
          $k@3208)
        $k@3396)
      $k@3400)
    $k@3492)))
(declare-const sys__result@3497 $Ref)
(declare-const $t@3498 $Snap)
(declare-const $t@3499 $Snap)
(declare-const $t@3500 $Ref)
(assert (= $t@3498 ($Snap.combine $t@3499 ($SortWrappers.$RefTo$Snap $t@3500))))
(declare-const $t@3501 $Snap)
(declare-const $t@3502 $Ref)
(assert (= $t@3499 ($Snap.combine $t@3501 ($SortWrappers.$RefTo$Snap $t@3502))))
(declare-const $t@3503 $Snap)
(declare-const $t@3504 $Snap)
(assert (= $t@3501 ($Snap.combine $t@3503 $t@3504)))
(declare-const $t@3505 $Snap)
(declare-const $t@3506 $Ref)
(assert (= $t@3503 ($Snap.combine $t@3505 ($SortWrappers.$RefTo$Snap $t@3506))))
(declare-const $t@3507 $Snap)
(assert (= $t@3505 ($Snap.combine $t@3507 $Snap.unit)))
(declare-const $t@3508 Int)
(declare-const $t@3509 $Ref)
(assert (=
  $t@3507
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@3508)
    ($SortWrappers.$RefTo$Snap $t@3509))))
(declare-const $t@3510 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@3508)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@3510) $Snap.unit)))
(declare-const $k@3511 $Perm)
(assert ($Perm.isValidVar $k@3511))
(assert ($Perm.isReadVar $k@3511 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                  $k@3183)
                $k@3201)
              $k@3205)
            $k@3223)
          $k@3397)
        $k@3415)
      $k@3493))
  (= $t@3510 $t@3414)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                    $k@3183)
                  $k@3201)
                $k@3205)
              $k@3223)
            $k@3397)
          $k@3415)
        $k@3493)
      $k@3511)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                    $k@3183)
                  $k@3201)
                $k@3205)
              $k@3223)
            $k@3397)
          $k@3415)
        $k@3493)
      $k@3511)
    $Perm.No)))
(assert (> $t@3510 0))
(declare-const $k@3512 $Perm)
(assert ($Perm.isValidVar $k@3512))
(assert ($Perm.isReadVar $k@3512 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                  $k@3184)
                $k@3202)
              $k@3206)
            $k@3224)
          $k@3398)
        $k@3416)
      $k@3494))
  (= $t@3509 $t@3413)))
; [eval] diz.BlockingQueue__count != null
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                    $k@3184)
                  $k@3202)
                $k@3206)
              $k@3224)
            $k@3398)
          $k@3416)
        $k@3494)
      $k@3512)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                    $k@3184)
                  $k@3202)
                $k@3206)
              $k@3224)
            $k@3398)
          $k@3416)
        $k@3494)
      $k@3512)
    $Perm.No)))
(assert (not (= $t@3509 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 16
(assert (not (= $t@3506 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not (= $t@3506 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 16
(push) ; 16
; [then-branch 476] $t@3506 != Null
(assert (not (= $t@3506 $Ref.null)))
(declare-const $k@3513 $Perm)
(assert ($Perm.isValidVar $k@3513))
(assert ($Perm.isReadVar $k@3513 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                  $k@3185)
                $k@3203)
              $k@3207)
            $k@3395)
          $k@3399)
        $k@3491)
      $k@3495))
  (= $t@3502 $t@3406)))
(declare-const $k@3514 $Perm)
(assert ($Perm.isValidVar $k@3514))
(assert ($Perm.isReadVar $k@3514 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                  $k@3186)
                $k@3204)
              $k@3208)
            $k@3396)
          $k@3400)
        $k@3492)
      $k@3496))
  (= $t@3500 $t@3404)))
; [exec]
; o := __flatten_78
; [exec]
; __flatten_79 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@3515 $Perm)
(assert ($Perm.isValidVar $k@3515))
(assert ($Perm.isReadVar $k@3515 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@3515 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@3515
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                  $k@3183)
                $k@3201)
              $k@3205)
            $k@3223)
          $k@3397)
        $k@3415)
      $k@3493)
    $k@3511)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@3516 $Perm)
(assert ($Perm.isValidVar $k@3516))
(assert ($Perm.isReadVar $k@3516 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@3516 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@3516
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                  $k@3184)
                $k@3202)
              $k@3206)
            $k@3224)
          $k@3398)
        $k@3416)
      $k@3494)
    $k@3512)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 17
(assert (not (= $t@3506 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 17
(push) ; 17
; [then-branch 477] $t@3506 != Null
(declare-const $k@3517 $Perm)
(assert ($Perm.isValidVar $k@3517))
(assert ($Perm.isReadVar $k@3517 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@3517 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                    $k@3185)
                  $k@3203)
                $k@3207)
              $k@3395)
            $k@3399)
          $k@3491)
        $k@3495)
      $k@3513)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                    $k@3185)
                  $k@3203)
                $k@3207)
              $k@3395)
            $k@3399)
          $k@3491)
        $k@3495)
      $k@3513)
    $Perm.No)))
(assert (<
  $k@3517
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                  $k@3185)
                $k@3203)
              $k@3207)
            $k@3395)
          $k@3399)
        $k@3491)
      $k@3495)
    $k@3513)))
(declare-const $k@3518 $Perm)
(assert ($Perm.isValidVar $k@3518))
(assert ($Perm.isReadVar $k@3518 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@3518 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                    $k@3186)
                  $k@3204)
                $k@3208)
              $k@3396)
            $k@3400)
          $k@3492)
        $k@3496)
      $k@3514)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                    $k@3186)
                  $k@3204)
                $k@3208)
              $k@3396)
            $k@3400)
          $k@3492)
        $k@3496)
      $k@3514)
    $Perm.No)))
(assert (<
  $k@3518
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                  $k@3186)
                $k@3204)
              $k@3208)
            $k@3396)
          $k@3400)
        $k@3492)
      $k@3496)
    $k@3514)))
(declare-const sys__result@3519 $Ref)
(declare-const $t@3520 $Snap)
(declare-const $t@3521 $Snap)
(declare-const $t@3522 $Ref)
(assert (= $t@3520 ($Snap.combine $t@3521 ($SortWrappers.$RefTo$Snap $t@3522))))
(declare-const $t@3523 $Snap)
(declare-const $t@3524 $Ref)
(assert (= $t@3521 ($Snap.combine $t@3523 ($SortWrappers.$RefTo$Snap $t@3524))))
(declare-const $t@3525 $Snap)
(declare-const $t@3526 $Snap)
(assert (= $t@3523 ($Snap.combine $t@3525 $t@3526)))
(declare-const $t@3527 $Snap)
(declare-const $t@3528 $Ref)
(assert (= $t@3525 ($Snap.combine $t@3527 ($SortWrappers.$RefTo$Snap $t@3528))))
(declare-const $t@3529 $Snap)
(assert (= $t@3527 ($Snap.combine $t@3529 $Snap.unit)))
(declare-const $t@3530 Int)
(declare-const $t@3531 $Ref)
(assert (=
  $t@3529
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@3530)
    ($SortWrappers.$RefTo$Snap $t@3531))))
(declare-const $t@3532 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@3530)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@3532) $Snap.unit)))
(declare-const $k@3533 $Perm)
(assert ($Perm.isValidVar $k@3533))
(assert ($Perm.isReadVar $k@3533 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                      $k@3183)
                    $k@3201)
                  $k@3205)
                $k@3223)
              $k@3397)
            $k@3415)
          $k@3493)
        $k@3511)
      $k@3515))
  (= $t@3532 $t@3510)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                        $k@3183)
                      $k@3201)
                    $k@3205)
                  $k@3223)
                $k@3397)
              $k@3415)
            $k@3493)
          $k@3511)
        $k@3515)
      $k@3533)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                        $k@3183)
                      $k@3201)
                    $k@3205)
                  $k@3223)
                $k@3397)
              $k@3415)
            $k@3493)
          $k@3511)
        $k@3515)
      $k@3533)
    $Perm.No)))
(assert (> $t@3532 0))
(declare-const $k@3534 $Perm)
(assert ($Perm.isValidVar $k@3534))
(assert ($Perm.isReadVar $k@3534 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                      $k@3184)
                    $k@3202)
                  $k@3206)
                $k@3224)
              $k@3398)
            $k@3416)
          $k@3494)
        $k@3512)
      $k@3516))
  (= $t@3531 $t@3509)))
; [eval] diz.BlockingQueue__count != null
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                        $k@3184)
                      $k@3202)
                    $k@3206)
                  $k@3224)
                $k@3398)
              $k@3416)
            $k@3494)
          $k@3512)
        $k@3516)
      $k@3534)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                        $k@3184)
                      $k@3202)
                    $k@3206)
                  $k@3224)
                $k@3398)
              $k@3416)
            $k@3494)
          $k@3512)
        $k@3516)
      $k@3534)
    $Perm.No)))
(assert (not (= $t@3531 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 18
(assert (not (= $t@3528 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not (= $t@3528 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
; [then-branch 478] $t@3528 != Null
(assert (not (= $t@3528 $Ref.null)))
(declare-const $k@3535 $Perm)
(assert ($Perm.isValidVar $k@3535))
(assert ($Perm.isReadVar $k@3535 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                      $k@3185)
                    $k@3203)
                  $k@3207)
                $k@3395)
              $k@3399)
            $k@3491)
          $k@3495)
        $k@3513)
      $k@3517))
  (= $t@3524 $t@3502)))
(declare-const $k@3536 $Perm)
(assert ($Perm.isValidVar $k@3536))
(assert ($Perm.isReadVar $k@3536 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                      $k@3186)
                    $k@3204)
                  $k@3208)
                $k@3396)
              $k@3400)
            $k@3492)
          $k@3496)
        $k@3514)
      $k@3518))
  (= $t@3522 $t@3500)))
; [exec]
; p := __flatten_79
(pop) ; 18
(push) ; 18
; [else-branch 478] $t@3528 == Null
(assert (= $t@3528 $Ref.null))
(declare-const $k@3537 $Perm)
(assert ($Perm.isValidVar $k@3537))
(assert ($Perm.isReadVar $k@3537 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                      $k@3185)
                    $k@3203)
                  $k@3207)
                $k@3395)
              $k@3399)
            $k@3491)
          $k@3495)
        $k@3513)
      $k@3517))
  (= $t@3524 $t@3502)))
(declare-const $k@3538 $Perm)
(assert ($Perm.isValidVar $k@3538))
(assert ($Perm.isReadVar $k@3538 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                      $k@3186)
                    $k@3204)
                  $k@3208)
                $k@3396)
              $k@3400)
            $k@3492)
          $k@3496)
        $k@3514)
      $k@3518))
  (= $t@3522 $t@3500)))
; [exec]
; p := __flatten_79
(pop) ; 18
(pop) ; 17
; [dead else-branch 477] $t@3506 == Null
(pop) ; 16
(push) ; 16
; [else-branch 476] $t@3506 == Null
(assert (= $t@3506 $Ref.null))
(declare-const $k@3539 $Perm)
(assert ($Perm.isValidVar $k@3539))
(assert ($Perm.isReadVar $k@3539 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                  $k@3185)
                $k@3203)
              $k@3207)
            $k@3395)
          $k@3399)
        $k@3491)
      $k@3495))
  (= $t@3502 $t@3406)))
(declare-const $k@3540 $Perm)
(assert ($Perm.isValidVar $k@3540))
(assert ($Perm.isReadVar $k@3540 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                  $k@3186)
                $k@3204)
              $k@3208)
            $k@3396)
          $k@3400)
        $k@3492)
      $k@3496))
  (= $t@3500 $t@3404)))
; [exec]
; o := __flatten_78
; [exec]
; __flatten_79 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@3541 $Perm)
(assert ($Perm.isValidVar $k@3541))
(assert ($Perm.isReadVar $k@3541 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@3541 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@3541
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                  $k@3183)
                $k@3201)
              $k@3205)
            $k@3223)
          $k@3397)
        $k@3415)
      $k@3493)
    $k@3511)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@3542 $Perm)
(assert ($Perm.isValidVar $k@3542))
(assert ($Perm.isReadVar $k@3542 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@3542 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@3542
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                  $k@3184)
                $k@3202)
              $k@3206)
            $k@3224)
          $k@3398)
        $k@3416)
      $k@3494)
    $k@3512)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 17
(assert (not (not (= $t@3506 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 17
; [dead then-branch 479] $t@3506 != Null
(push) ; 17
; [else-branch 479] $t@3506 == Null
(declare-const $k@3543 $Perm)
(assert ($Perm.isValidVar $k@3543))
(assert ($Perm.isReadVar $k@3543 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@3543 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                    $k@3185)
                  $k@3203)
                $k@3207)
              $k@3395)
            $k@3399)
          $k@3491)
        $k@3495)
      $k@3539)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                    $k@3185)
                  $k@3203)
                $k@3207)
              $k@3395)
            $k@3399)
          $k@3491)
        $k@3495)
      $k@3539)
    $Perm.No)))
(assert (<
  $k@3543
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                  $k@3185)
                $k@3203)
              $k@3207)
            $k@3395)
          $k@3399)
        $k@3491)
      $k@3495)
    $k@3539)))
(declare-const $k@3544 $Perm)
(assert ($Perm.isValidVar $k@3544))
(assert ($Perm.isReadVar $k@3544 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@3544 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                    $k@3186)
                  $k@3204)
                $k@3208)
              $k@3396)
            $k@3400)
          $k@3492)
        $k@3496)
      $k@3540)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                    $k@3186)
                  $k@3204)
                $k@3208)
              $k@3396)
            $k@3400)
          $k@3492)
        $k@3496)
      $k@3540)
    $Perm.No)))
(assert (<
  $k@3544
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                  $k@3186)
                $k@3204)
              $k@3208)
            $k@3396)
          $k@3400)
        $k@3492)
      $k@3496)
    $k@3540)))
(declare-const sys__result@3545 $Ref)
(declare-const $t@3546 $Snap)
(declare-const $t@3547 $Snap)
(declare-const $t@3548 $Ref)
(assert (= $t@3546 ($Snap.combine $t@3547 ($SortWrappers.$RefTo$Snap $t@3548))))
(declare-const $t@3549 $Snap)
(declare-const $t@3550 $Ref)
(assert (= $t@3547 ($Snap.combine $t@3549 ($SortWrappers.$RefTo$Snap $t@3550))))
(declare-const $t@3551 $Snap)
(declare-const $t@3552 $Snap)
(assert (= $t@3549 ($Snap.combine $t@3551 $t@3552)))
(declare-const $t@3553 $Snap)
(declare-const $t@3554 $Ref)
(assert (= $t@3551 ($Snap.combine $t@3553 ($SortWrappers.$RefTo$Snap $t@3554))))
(declare-const $t@3555 $Snap)
(assert (= $t@3553 ($Snap.combine $t@3555 $Snap.unit)))
(declare-const $t@3556 Int)
(declare-const $t@3557 $Ref)
(assert (=
  $t@3555
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@3556)
    ($SortWrappers.$RefTo$Snap $t@3557))))
(declare-const $t@3558 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@3556)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@3558) $Snap.unit)))
(declare-const $k@3559 $Perm)
(assert ($Perm.isValidVar $k@3559))
(assert ($Perm.isReadVar $k@3559 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                      $k@3183)
                    $k@3201)
                  $k@3205)
                $k@3223)
              $k@3397)
            $k@3415)
          $k@3493)
        $k@3511)
      $k@3541))
  (= $t@3558 $t@3510)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                        $k@3183)
                      $k@3201)
                    $k@3205)
                  $k@3223)
                $k@3397)
              $k@3415)
            $k@3493)
          $k@3511)
        $k@3541)
      $k@3559)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                        $k@3183)
                      $k@3201)
                    $k@3205)
                  $k@3223)
                $k@3397)
              $k@3415)
            $k@3493)
          $k@3511)
        $k@3541)
      $k@3559)
    $Perm.No)))
(assert (> $t@3558 0))
(declare-const $k@3560 $Perm)
(assert ($Perm.isValidVar $k@3560))
(assert ($Perm.isReadVar $k@3560 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                      $k@3184)
                    $k@3202)
                  $k@3206)
                $k@3224)
              $k@3398)
            $k@3416)
          $k@3494)
        $k@3512)
      $k@3542))
  (= $t@3557 $t@3509)))
; [eval] diz.BlockingQueue__count != null
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                        $k@3184)
                      $k@3202)
                    $k@3206)
                  $k@3224)
                $k@3398)
              $k@3416)
            $k@3494)
          $k@3512)
        $k@3542)
      $k@3560)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                        $k@3184)
                      $k@3202)
                    $k@3206)
                  $k@3224)
                $k@3398)
              $k@3416)
            $k@3494)
          $k@3512)
        $k@3542)
      $k@3560)
    $Perm.No)))
(assert (not (= $t@3557 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 18
(assert (not (= $t@3554 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not (= $t@3554 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
; [then-branch 480] $t@3554 != Null
(assert (not (= $t@3554 $Ref.null)))
(declare-const $k@3561 $Perm)
(assert ($Perm.isValidVar $k@3561))
(assert ($Perm.isReadVar $k@3561 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                      $k@3185)
                    $k@3203)
                  $k@3207)
                $k@3395)
              $k@3399)
            $k@3491)
          $k@3495)
        $k@3539)
      $k@3543))
  (= $t@3550 $t@3502)))
(declare-const $k@3562 $Perm)
(assert ($Perm.isValidVar $k@3562))
(assert ($Perm.isReadVar $k@3562 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                      $k@3186)
                    $k@3204)
                  $k@3208)
                $k@3396)
              $k@3400)
            $k@3492)
          $k@3496)
        $k@3540)
      $k@3544))
  (= $t@3548 $t@3500)))
; [exec]
; p := __flatten_79
(pop) ; 18
(push) ; 18
; [else-branch 480] $t@3554 == Null
(assert (= $t@3554 $Ref.null))
(declare-const $k@3563 $Perm)
(assert ($Perm.isValidVar $k@3563))
(assert ($Perm.isReadVar $k@3563 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                      $k@3185)
                    $k@3203)
                  $k@3207)
                $k@3395)
              $k@3399)
            $k@3491)
          $k@3495)
        $k@3539)
      $k@3543))
  (= $t@3550 $t@3502)))
(declare-const $k@3564 $Perm)
(assert ($Perm.isValidVar $k@3564))
(assert ($Perm.isReadVar $k@3564 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                      $k@3186)
                    $k@3204)
                  $k@3208)
                $k@3396)
              $k@3400)
            $k@3492)
          $k@3496)
        $k@3540)
      $k@3544))
  (= $t@3548 $t@3500)))
; [exec]
; p := __flatten_79
(pop) ; 18
(pop) ; 17
(pop) ; 16
(pop) ; 15
(pop) ; 14
(pop) ; 13
(pop) ; 12
(pop) ; 11
; [dead else-branch 451] $t@3196 == Null
(pop) ; 10
(push) ; 10
; [else-branch 450] $t@3196 == Null
(assert (= $t@3196 $Ref.null))
(declare-const $k@3565 $Perm)
(assert ($Perm.isValidVar $k@3565))
(assert ($Perm.isReadVar $k@3565 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181) $k@3185))
  (= $t@3192 $t@3170)))
(declare-const $k@3566 $Perm)
(assert ($Perm.isValidVar $k@3566))
(assert ($Perm.isReadVar $k@3566 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182) $k@3186))
  (= $t@3190 $t@3168)))
; [exec]
; m := __flatten_75
; [exec]
; __flatten_76 := BlockingQueue__offer(queue, 7)
; [eval] diz != null
(declare-const $k@3567 $Perm)
(assert ($Perm.isValidVar $k@3567))
(assert ($Perm.isReadVar $k@3567 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@3567 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (<
  $k@3567
  (+ (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179) $k@3183) $k@3201)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@3568 $Perm)
(assert ($Perm.isValidVar $k@3568))
(assert ($Perm.isReadVar $k@3568 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@3568 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (<
  $k@3568
  (+ (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180) $k@3184) $k@3202)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 11
(assert (not (not (= $t@3196 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 11
; [dead then-branch 481] $t@3196 != Null
(push) ; 11
; [else-branch 481] $t@3196 == Null
(declare-const $k@3569 $Perm)
(assert ($Perm.isValidVar $k@3569))
(assert ($Perm.isReadVar $k@3569 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@3569 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(push) ; 12
(assert (not (not
  (=
    (+
      (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181) $k@3185)
      $k@3565)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181) $k@3185)
      $k@3565)
    $Perm.No)))
(assert (<
  $k@3569
  (+ (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181) $k@3185) $k@3565)))
(declare-const $k@3570 $Perm)
(assert ($Perm.isValidVar $k@3570))
(assert ($Perm.isReadVar $k@3570 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@3570 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(push) ; 12
(assert (not (not
  (=
    (+
      (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182) $k@3186)
      $k@3566)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182) $k@3186)
      $k@3566)
    $Perm.No)))
(assert (<
  $k@3570
  (+ (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182) $k@3186) $k@3566)))
(declare-const sys__result@3571 Bool)
(declare-const $t@3572 $Snap)
(declare-const $t@3573 $Snap)
(declare-const $t@3574 $Ref)
(assert (= $t@3572 ($Snap.combine $t@3573 ($SortWrappers.$RefTo$Snap $t@3574))))
(declare-const $t@3575 $Snap)
(declare-const $t@3576 $Ref)
(assert (= $t@3573 ($Snap.combine $t@3575 ($SortWrappers.$RefTo$Snap $t@3576))))
(declare-const $t@3577 $Snap)
(declare-const $t@3578 $Snap)
(assert (= $t@3575 ($Snap.combine $t@3577 $t@3578)))
(declare-const $t@3579 $Snap)
(declare-const $t@3580 $Ref)
(assert (= $t@3577 ($Snap.combine $t@3579 ($SortWrappers.$RefTo$Snap $t@3580))))
(declare-const $t@3581 $Snap)
(assert (= $t@3579 ($Snap.combine $t@3581 $Snap.unit)))
(declare-const $t@3582 Int)
(declare-const $t@3583 $Ref)
(assert (=
  $t@3581
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@3582)
    ($SortWrappers.$RefTo$Snap $t@3583))))
(declare-const $t@3584 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@3582)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@3584) $Snap.unit)))
(declare-const $k@3585 $Perm)
(assert ($Perm.isValidVar $k@3585))
(assert ($Perm.isReadVar $k@3585 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179) $k@3183)
        $k@3201)
      $k@3567))
  (= $t@3584 $t@3200)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 12
(assert (not (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179) $k@3183)
          $k@3201)
        $k@3567)
      $k@3585)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179) $k@3183)
          $k@3201)
        $k@3567)
      $k@3585)
    $Perm.No)))
(assert (> $t@3584 0))
(declare-const $k@3586 $Perm)
(assert ($Perm.isValidVar $k@3586))
(assert ($Perm.isReadVar $k@3586 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180) $k@3184)
        $k@3202)
      $k@3568))
  (= $t@3583 $t@3199)))
; [eval] diz.BlockingQueue__count != null
(push) ; 12
(assert (not (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180) $k@3184)
          $k@3202)
        $k@3568)
      $k@3586)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180) $k@3184)
          $k@3202)
        $k@3568)
      $k@3586)
    $Perm.No)))
(assert (not (= $t@3583 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 12
(assert (not (= $t@3580 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 12
(push) ; 12
(assert (not (not (= $t@3580 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 12
(push) ; 12
; [then-branch 482] $t@3580 != Null
(assert (not (= $t@3580 $Ref.null)))
(declare-const $k@3587 $Perm)
(assert ($Perm.isValidVar $k@3587))
(assert ($Perm.isReadVar $k@3587 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181) $k@3185)
        $k@3565)
      $k@3569))
  (= $t@3576 $t@3192)))
(declare-const $k@3588 $Perm)
(assert ($Perm.isValidVar $k@3588))
(assert ($Perm.isReadVar $k@3588 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182) $k@3186)
        $k@3566)
      $k@3570))
  (= $t@3574 $t@3190)))
; [exec]
; b := __flatten_76
; [exec]
; __flatten_77 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@3589 $Perm)
(assert ($Perm.isValidVar $k@3589))
(assert ($Perm.isReadVar $k@3589 $Perm.Write))
(push) ; 13
(assert (not (or (= $k@3589 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 13
(assert (<
  $k@3589
  (+
    (-
      (+
        (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179) $k@3183)
        $k@3201)
      $k@3567)
    $k@3585)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@3590 $Perm)
(assert ($Perm.isValidVar $k@3590))
(assert ($Perm.isReadVar $k@3590 $Perm.Write))
(push) ; 13
(assert (not (or (= $k@3590 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 13
(assert (<
  $k@3590
  (+
    (-
      (+
        (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180) $k@3184)
        $k@3202)
      $k@3568)
    $k@3586)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 13
(assert (not (= $t@3580 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 13
(push) ; 13
; [then-branch 483] $t@3580 != Null
(declare-const $k@3591 $Perm)
(assert ($Perm.isValidVar $k@3591))
(assert ($Perm.isReadVar $k@3591 $Perm.Write))
(push) ; 14
(assert (not (or (= $k@3591 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(push) ; 14
(assert (not (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181) $k@3185)
          $k@3565)
        $k@3569)
      $k@3587)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(assert (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181) $k@3185)
          $k@3565)
        $k@3569)
      $k@3587)
    $Perm.No)))
(assert (<
  $k@3591
  (+
    (-
      (+
        (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181) $k@3185)
        $k@3565)
      $k@3569)
    $k@3587)))
(declare-const $k@3592 $Perm)
(assert ($Perm.isValidVar $k@3592))
(assert ($Perm.isReadVar $k@3592 $Perm.Write))
(push) ; 14
(assert (not (or (= $k@3592 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(push) ; 14
(assert (not (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182) $k@3186)
          $k@3566)
        $k@3570)
      $k@3588)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(assert (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182) $k@3186)
          $k@3566)
        $k@3570)
      $k@3588)
    $Perm.No)))
(assert (<
  $k@3592
  (+
    (-
      (+
        (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182) $k@3186)
        $k@3566)
      $k@3570)
    $k@3588)))
(declare-const sys__result@3593 $Ref)
(declare-const $t@3594 $Snap)
(declare-const $t@3595 $Snap)
(declare-const $t@3596 $Ref)
(assert (= $t@3594 ($Snap.combine $t@3595 ($SortWrappers.$RefTo$Snap $t@3596))))
(declare-const $t@3597 $Snap)
(declare-const $t@3598 $Ref)
(assert (= $t@3595 ($Snap.combine $t@3597 ($SortWrappers.$RefTo$Snap $t@3598))))
(declare-const $t@3599 $Snap)
(declare-const $t@3600 $Snap)
(assert (= $t@3597 ($Snap.combine $t@3599 $t@3600)))
(declare-const $t@3601 $Snap)
(declare-const $t@3602 $Ref)
(assert (= $t@3599 ($Snap.combine $t@3601 ($SortWrappers.$RefTo$Snap $t@3602))))
(declare-const $t@3603 $Snap)
(assert (= $t@3601 ($Snap.combine $t@3603 $Snap.unit)))
(declare-const $t@3604 Int)
(declare-const $t@3605 $Ref)
(assert (=
  $t@3603
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@3604)
    ($SortWrappers.$RefTo$Snap $t@3605))))
(declare-const $t@3606 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@3604)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@3606) $Snap.unit)))
(declare-const $k@3607 $Perm)
(assert ($Perm.isValidVar $k@3607))
(assert ($Perm.isReadVar $k@3607 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179) $k@3183)
            $k@3201)
          $k@3567)
        $k@3585)
      $k@3589))
  (= $t@3606 $t@3584)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 14
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179) $k@3183)
              $k@3201)
            $k@3567)
          $k@3585)
        $k@3589)
      $k@3607)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179) $k@3183)
              $k@3201)
            $k@3567)
          $k@3585)
        $k@3589)
      $k@3607)
    $Perm.No)))
(assert (> $t@3606 0))
(declare-const $k@3608 $Perm)
(assert ($Perm.isValidVar $k@3608))
(assert ($Perm.isReadVar $k@3608 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180) $k@3184)
            $k@3202)
          $k@3568)
        $k@3586)
      $k@3590))
  (= $t@3605 $t@3583)))
; [eval] diz.BlockingQueue__count != null
(push) ; 14
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180) $k@3184)
              $k@3202)
            $k@3568)
          $k@3586)
        $k@3590)
      $k@3608)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180) $k@3184)
              $k@3202)
            $k@3568)
          $k@3586)
        $k@3590)
      $k@3608)
    $Perm.No)))
(assert (not (= $t@3605 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 14
(assert (not (= $t@3602 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 14
(push) ; 14
(assert (not (not (= $t@3602 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 14
(push) ; 14
; [then-branch 484] $t@3602 != Null
(assert (not (= $t@3602 $Ref.null)))
(declare-const $k@3609 $Perm)
(assert ($Perm.isValidVar $k@3609))
(assert ($Perm.isReadVar $k@3609 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181) $k@3185)
            $k@3565)
          $k@3569)
        $k@3587)
      $k@3591))
  (= $t@3598 $t@3576)))
(declare-const $k@3610 $Perm)
(assert ($Perm.isValidVar $k@3610))
(assert ($Perm.isReadVar $k@3610 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182) $k@3186)
            $k@3566)
          $k@3570)
        $k@3588)
      $k@3592))
  (= $t@3596 $t@3574)))
; [exec]
; n := __flatten_77
; [exec]
; __flatten_78 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@3611 $Perm)
(assert ($Perm.isValidVar $k@3611))
(assert ($Perm.isReadVar $k@3611 $Perm.Write))
(push) ; 15
(assert (not (or (= $k@3611 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 15
(assert (<
  $k@3611
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179) $k@3183)
            $k@3201)
          $k@3567)
        $k@3585)
      $k@3589)
    $k@3607)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@3612 $Perm)
(assert ($Perm.isValidVar $k@3612))
(assert ($Perm.isReadVar $k@3612 $Perm.Write))
(push) ; 15
(assert (not (or (= $k@3612 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 15
(assert (<
  $k@3612
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180) $k@3184)
            $k@3202)
          $k@3568)
        $k@3586)
      $k@3590)
    $k@3608)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 15
(assert (not (= $t@3602 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 15
(push) ; 15
; [then-branch 485] $t@3602 != Null
(declare-const $k@3613 $Perm)
(assert ($Perm.isValidVar $k@3613))
(assert ($Perm.isReadVar $k@3613 $Perm.Write))
(push) ; 16
(assert (not (or (= $k@3613 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181) $k@3185)
              $k@3565)
            $k@3569)
          $k@3587)
        $k@3591)
      $k@3609)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181) $k@3185)
              $k@3565)
            $k@3569)
          $k@3587)
        $k@3591)
      $k@3609)
    $Perm.No)))
(assert (<
  $k@3613
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181) $k@3185)
            $k@3565)
          $k@3569)
        $k@3587)
      $k@3591)
    $k@3609)))
(declare-const $k@3614 $Perm)
(assert ($Perm.isValidVar $k@3614))
(assert ($Perm.isReadVar $k@3614 $Perm.Write))
(push) ; 16
(assert (not (or (= $k@3614 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182) $k@3186)
              $k@3566)
            $k@3570)
          $k@3588)
        $k@3592)
      $k@3610)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182) $k@3186)
              $k@3566)
            $k@3570)
          $k@3588)
        $k@3592)
      $k@3610)
    $Perm.No)))
(assert (<
  $k@3614
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182) $k@3186)
            $k@3566)
          $k@3570)
        $k@3588)
      $k@3592)
    $k@3610)))
(declare-const sys__result@3615 $Ref)
(declare-const $t@3616 $Snap)
(declare-const $t@3617 $Snap)
(declare-const $t@3618 $Ref)
(assert (= $t@3616 ($Snap.combine $t@3617 ($SortWrappers.$RefTo$Snap $t@3618))))
(declare-const $t@3619 $Snap)
(declare-const $t@3620 $Ref)
(assert (= $t@3617 ($Snap.combine $t@3619 ($SortWrappers.$RefTo$Snap $t@3620))))
(declare-const $t@3621 $Snap)
(declare-const $t@3622 $Snap)
(assert (= $t@3619 ($Snap.combine $t@3621 $t@3622)))
(declare-const $t@3623 $Snap)
(declare-const $t@3624 $Ref)
(assert (= $t@3621 ($Snap.combine $t@3623 ($SortWrappers.$RefTo$Snap $t@3624))))
(declare-const $t@3625 $Snap)
(assert (= $t@3623 ($Snap.combine $t@3625 $Snap.unit)))
(declare-const $t@3626 Int)
(declare-const $t@3627 $Ref)
(assert (=
  $t@3625
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@3626)
    ($SortWrappers.$RefTo$Snap $t@3627))))
(declare-const $t@3628 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@3626)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@3628) $Snap.unit)))
(declare-const $k@3629 $Perm)
(assert ($Perm.isValidVar $k@3629))
(assert ($Perm.isReadVar $k@3629 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                  $k@3183)
                $k@3201)
              $k@3567)
            $k@3585)
          $k@3589)
        $k@3607)
      $k@3611))
  (= $t@3628 $t@3606)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                    $k@3183)
                  $k@3201)
                $k@3567)
              $k@3585)
            $k@3589)
          $k@3607)
        $k@3611)
      $k@3629)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                    $k@3183)
                  $k@3201)
                $k@3567)
              $k@3585)
            $k@3589)
          $k@3607)
        $k@3611)
      $k@3629)
    $Perm.No)))
(assert (> $t@3628 0))
(declare-const $k@3630 $Perm)
(assert ($Perm.isValidVar $k@3630))
(assert ($Perm.isReadVar $k@3630 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                  $k@3184)
                $k@3202)
              $k@3568)
            $k@3586)
          $k@3590)
        $k@3608)
      $k@3612))
  (= $t@3627 $t@3605)))
; [eval] diz.BlockingQueue__count != null
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                    $k@3184)
                  $k@3202)
                $k@3568)
              $k@3586)
            $k@3590)
          $k@3608)
        $k@3612)
      $k@3630)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                    $k@3184)
                  $k@3202)
                $k@3568)
              $k@3586)
            $k@3590)
          $k@3608)
        $k@3612)
      $k@3630)
    $Perm.No)))
(assert (not (= $t@3627 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 16
(assert (not (= $t@3624 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not (= $t@3624 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 16
(push) ; 16
; [then-branch 486] $t@3624 != Null
(assert (not (= $t@3624 $Ref.null)))
(declare-const $k@3631 $Perm)
(assert ($Perm.isValidVar $k@3631))
(assert ($Perm.isReadVar $k@3631 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                  $k@3185)
                $k@3565)
              $k@3569)
            $k@3587)
          $k@3591)
        $k@3609)
      $k@3613))
  (= $t@3620 $t@3598)))
(declare-const $k@3632 $Perm)
(assert ($Perm.isValidVar $k@3632))
(assert ($Perm.isReadVar $k@3632 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                  $k@3186)
                $k@3566)
              $k@3570)
            $k@3588)
          $k@3592)
        $k@3610)
      $k@3614))
  (= $t@3618 $t@3596)))
; [exec]
; o := __flatten_78
; [exec]
; __flatten_79 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@3633 $Perm)
(assert ($Perm.isValidVar $k@3633))
(assert ($Perm.isReadVar $k@3633 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@3633 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@3633
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                  $k@3183)
                $k@3201)
              $k@3567)
            $k@3585)
          $k@3589)
        $k@3607)
      $k@3611)
    $k@3629)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@3634 $Perm)
(assert ($Perm.isValidVar $k@3634))
(assert ($Perm.isReadVar $k@3634 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@3634 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@3634
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                  $k@3184)
                $k@3202)
              $k@3568)
            $k@3586)
          $k@3590)
        $k@3608)
      $k@3612)
    $k@3630)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 17
(assert (not (= $t@3624 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 17
(push) ; 17
; [then-branch 487] $t@3624 != Null
(declare-const $k@3635 $Perm)
(assert ($Perm.isValidVar $k@3635))
(assert ($Perm.isReadVar $k@3635 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@3635 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                    $k@3185)
                  $k@3565)
                $k@3569)
              $k@3587)
            $k@3591)
          $k@3609)
        $k@3613)
      $k@3631)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                    $k@3185)
                  $k@3565)
                $k@3569)
              $k@3587)
            $k@3591)
          $k@3609)
        $k@3613)
      $k@3631)
    $Perm.No)))
(assert (<
  $k@3635
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                  $k@3185)
                $k@3565)
              $k@3569)
            $k@3587)
          $k@3591)
        $k@3609)
      $k@3613)
    $k@3631)))
(declare-const $k@3636 $Perm)
(assert ($Perm.isValidVar $k@3636))
(assert ($Perm.isReadVar $k@3636 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@3636 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                    $k@3186)
                  $k@3566)
                $k@3570)
              $k@3588)
            $k@3592)
          $k@3610)
        $k@3614)
      $k@3632)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                    $k@3186)
                  $k@3566)
                $k@3570)
              $k@3588)
            $k@3592)
          $k@3610)
        $k@3614)
      $k@3632)
    $Perm.No)))
(assert (<
  $k@3636
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                  $k@3186)
                $k@3566)
              $k@3570)
            $k@3588)
          $k@3592)
        $k@3610)
      $k@3614)
    $k@3632)))
(declare-const sys__result@3637 $Ref)
(declare-const $t@3638 $Snap)
(declare-const $t@3639 $Snap)
(declare-const $t@3640 $Ref)
(assert (= $t@3638 ($Snap.combine $t@3639 ($SortWrappers.$RefTo$Snap $t@3640))))
(declare-const $t@3641 $Snap)
(declare-const $t@3642 $Ref)
(assert (= $t@3639 ($Snap.combine $t@3641 ($SortWrappers.$RefTo$Snap $t@3642))))
(declare-const $t@3643 $Snap)
(declare-const $t@3644 $Snap)
(assert (= $t@3641 ($Snap.combine $t@3643 $t@3644)))
(declare-const $t@3645 $Snap)
(declare-const $t@3646 $Ref)
(assert (= $t@3643 ($Snap.combine $t@3645 ($SortWrappers.$RefTo$Snap $t@3646))))
(declare-const $t@3647 $Snap)
(assert (= $t@3645 ($Snap.combine $t@3647 $Snap.unit)))
(declare-const $t@3648 Int)
(declare-const $t@3649 $Ref)
(assert (=
  $t@3647
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@3648)
    ($SortWrappers.$RefTo$Snap $t@3649))))
(declare-const $t@3650 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@3648)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@3650) $Snap.unit)))
(declare-const $k@3651 $Perm)
(assert ($Perm.isValidVar $k@3651))
(assert ($Perm.isReadVar $k@3651 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                      $k@3183)
                    $k@3201)
                  $k@3567)
                $k@3585)
              $k@3589)
            $k@3607)
          $k@3611)
        $k@3629)
      $k@3633))
  (= $t@3650 $t@3628)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                        $k@3183)
                      $k@3201)
                    $k@3567)
                  $k@3585)
                $k@3589)
              $k@3607)
            $k@3611)
          $k@3629)
        $k@3633)
      $k@3651)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                        $k@3183)
                      $k@3201)
                    $k@3567)
                  $k@3585)
                $k@3589)
              $k@3607)
            $k@3611)
          $k@3629)
        $k@3633)
      $k@3651)
    $Perm.No)))
(assert (> $t@3650 0))
(declare-const $k@3652 $Perm)
(assert ($Perm.isValidVar $k@3652))
(assert ($Perm.isReadVar $k@3652 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                      $k@3184)
                    $k@3202)
                  $k@3568)
                $k@3586)
              $k@3590)
            $k@3608)
          $k@3612)
        $k@3630)
      $k@3634))
  (= $t@3649 $t@3627)))
; [eval] diz.BlockingQueue__count != null
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                        $k@3184)
                      $k@3202)
                    $k@3568)
                  $k@3586)
                $k@3590)
              $k@3608)
            $k@3612)
          $k@3630)
        $k@3634)
      $k@3652)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                        $k@3184)
                      $k@3202)
                    $k@3568)
                  $k@3586)
                $k@3590)
              $k@3608)
            $k@3612)
          $k@3630)
        $k@3634)
      $k@3652)
    $Perm.No)))
(assert (not (= $t@3649 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 18
(assert (not (= $t@3646 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not (= $t@3646 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
; [then-branch 488] $t@3646 != Null
(assert (not (= $t@3646 $Ref.null)))
(declare-const $k@3653 $Perm)
(assert ($Perm.isValidVar $k@3653))
(assert ($Perm.isReadVar $k@3653 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                      $k@3185)
                    $k@3565)
                  $k@3569)
                $k@3587)
              $k@3591)
            $k@3609)
          $k@3613)
        $k@3631)
      $k@3635))
  (= $t@3642 $t@3620)))
(declare-const $k@3654 $Perm)
(assert ($Perm.isValidVar $k@3654))
(assert ($Perm.isReadVar $k@3654 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                      $k@3186)
                    $k@3566)
                  $k@3570)
                $k@3588)
              $k@3592)
            $k@3610)
          $k@3614)
        $k@3632)
      $k@3636))
  (= $t@3640 $t@3618)))
; [exec]
; p := __flatten_79
(pop) ; 18
(push) ; 18
; [else-branch 488] $t@3646 == Null
(assert (= $t@3646 $Ref.null))
(declare-const $k@3655 $Perm)
(assert ($Perm.isValidVar $k@3655))
(assert ($Perm.isReadVar $k@3655 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                      $k@3185)
                    $k@3565)
                  $k@3569)
                $k@3587)
              $k@3591)
            $k@3609)
          $k@3613)
        $k@3631)
      $k@3635))
  (= $t@3642 $t@3620)))
(declare-const $k@3656 $Perm)
(assert ($Perm.isValidVar $k@3656))
(assert ($Perm.isReadVar $k@3656 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                      $k@3186)
                    $k@3566)
                  $k@3570)
                $k@3588)
              $k@3592)
            $k@3610)
          $k@3614)
        $k@3632)
      $k@3636))
  (= $t@3640 $t@3618)))
; [exec]
; p := __flatten_79
(pop) ; 18
(pop) ; 17
; [dead else-branch 487] $t@3624 == Null
(pop) ; 16
(push) ; 16
; [else-branch 486] $t@3624 == Null
(assert (= $t@3624 $Ref.null))
(declare-const $k@3657 $Perm)
(assert ($Perm.isValidVar $k@3657))
(assert ($Perm.isReadVar $k@3657 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                  $k@3185)
                $k@3565)
              $k@3569)
            $k@3587)
          $k@3591)
        $k@3609)
      $k@3613))
  (= $t@3620 $t@3598)))
(declare-const $k@3658 $Perm)
(assert ($Perm.isValidVar $k@3658))
(assert ($Perm.isReadVar $k@3658 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                  $k@3186)
                $k@3566)
              $k@3570)
            $k@3588)
          $k@3592)
        $k@3610)
      $k@3614))
  (= $t@3618 $t@3596)))
; [exec]
; o := __flatten_78
; [exec]
; __flatten_79 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@3659 $Perm)
(assert ($Perm.isValidVar $k@3659))
(assert ($Perm.isReadVar $k@3659 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@3659 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@3659
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                  $k@3183)
                $k@3201)
              $k@3567)
            $k@3585)
          $k@3589)
        $k@3607)
      $k@3611)
    $k@3629)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@3660 $Perm)
(assert ($Perm.isValidVar $k@3660))
(assert ($Perm.isReadVar $k@3660 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@3660 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@3660
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                  $k@3184)
                $k@3202)
              $k@3568)
            $k@3586)
          $k@3590)
        $k@3608)
      $k@3612)
    $k@3630)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 17
(assert (not (not (= $t@3624 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 17
; [dead then-branch 489] $t@3624 != Null
(push) ; 17
; [else-branch 489] $t@3624 == Null
(declare-const $k@3661 $Perm)
(assert ($Perm.isValidVar $k@3661))
(assert ($Perm.isReadVar $k@3661 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@3661 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                    $k@3185)
                  $k@3565)
                $k@3569)
              $k@3587)
            $k@3591)
          $k@3609)
        $k@3613)
      $k@3657)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                    $k@3185)
                  $k@3565)
                $k@3569)
              $k@3587)
            $k@3591)
          $k@3609)
        $k@3613)
      $k@3657)
    $Perm.No)))
(assert (<
  $k@3661
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                  $k@3185)
                $k@3565)
              $k@3569)
            $k@3587)
          $k@3591)
        $k@3609)
      $k@3613)
    $k@3657)))
(declare-const $k@3662 $Perm)
(assert ($Perm.isValidVar $k@3662))
(assert ($Perm.isReadVar $k@3662 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@3662 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                    $k@3186)
                  $k@3566)
                $k@3570)
              $k@3588)
            $k@3592)
          $k@3610)
        $k@3614)
      $k@3658)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                    $k@3186)
                  $k@3566)
                $k@3570)
              $k@3588)
            $k@3592)
          $k@3610)
        $k@3614)
      $k@3658)
    $Perm.No)))
(assert (<
  $k@3662
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                  $k@3186)
                $k@3566)
              $k@3570)
            $k@3588)
          $k@3592)
        $k@3610)
      $k@3614)
    $k@3658)))
(declare-const sys__result@3663 $Ref)
(declare-const $t@3664 $Snap)
(declare-const $t@3665 $Snap)
(declare-const $t@3666 $Ref)
(assert (= $t@3664 ($Snap.combine $t@3665 ($SortWrappers.$RefTo$Snap $t@3666))))
(declare-const $t@3667 $Snap)
(declare-const $t@3668 $Ref)
(assert (= $t@3665 ($Snap.combine $t@3667 ($SortWrappers.$RefTo$Snap $t@3668))))
(declare-const $t@3669 $Snap)
(declare-const $t@3670 $Snap)
(assert (= $t@3667 ($Snap.combine $t@3669 $t@3670)))
(declare-const $t@3671 $Snap)
(declare-const $t@3672 $Ref)
(assert (= $t@3669 ($Snap.combine $t@3671 ($SortWrappers.$RefTo$Snap $t@3672))))
(declare-const $t@3673 $Snap)
(assert (= $t@3671 ($Snap.combine $t@3673 $Snap.unit)))
(declare-const $t@3674 Int)
(declare-const $t@3675 $Ref)
(assert (=
  $t@3673
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@3674)
    ($SortWrappers.$RefTo$Snap $t@3675))))
(declare-const $t@3676 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@3674)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@3676) $Snap.unit)))
(declare-const $k@3677 $Perm)
(assert ($Perm.isValidVar $k@3677))
(assert ($Perm.isReadVar $k@3677 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                      $k@3183)
                    $k@3201)
                  $k@3567)
                $k@3585)
              $k@3589)
            $k@3607)
          $k@3611)
        $k@3629)
      $k@3659))
  (= $t@3676 $t@3628)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                        $k@3183)
                      $k@3201)
                    $k@3567)
                  $k@3585)
                $k@3589)
              $k@3607)
            $k@3611)
          $k@3629)
        $k@3659)
      $k@3677)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                        $k@3183)
                      $k@3201)
                    $k@3567)
                  $k@3585)
                $k@3589)
              $k@3607)
            $k@3611)
          $k@3629)
        $k@3659)
      $k@3677)
    $Perm.No)))
(assert (> $t@3676 0))
(declare-const $k@3678 $Perm)
(assert ($Perm.isValidVar $k@3678))
(assert ($Perm.isReadVar $k@3678 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                      $k@3184)
                    $k@3202)
                  $k@3568)
                $k@3586)
              $k@3590)
            $k@3608)
          $k@3612)
        $k@3630)
      $k@3660))
  (= $t@3675 $t@3627)))
; [eval] diz.BlockingQueue__count != null
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                        $k@3184)
                      $k@3202)
                    $k@3568)
                  $k@3586)
                $k@3590)
              $k@3608)
            $k@3612)
          $k@3630)
        $k@3660)
      $k@3678)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                        $k@3184)
                      $k@3202)
                    $k@3568)
                  $k@3586)
                $k@3590)
              $k@3608)
            $k@3612)
          $k@3630)
        $k@3660)
      $k@3678)
    $Perm.No)))
(assert (not (= $t@3675 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 18
(assert (not (= $t@3672 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not (= $t@3672 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
; [then-branch 490] $t@3672 != Null
(assert (not (= $t@3672 $Ref.null)))
(declare-const $k@3679 $Perm)
(assert ($Perm.isValidVar $k@3679))
(assert ($Perm.isReadVar $k@3679 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                      $k@3185)
                    $k@3565)
                  $k@3569)
                $k@3587)
              $k@3591)
            $k@3609)
          $k@3613)
        $k@3657)
      $k@3661))
  (= $t@3668 $t@3620)))
(declare-const $k@3680 $Perm)
(assert ($Perm.isValidVar $k@3680))
(assert ($Perm.isReadVar $k@3680 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                      $k@3186)
                    $k@3566)
                  $k@3570)
                $k@3588)
              $k@3592)
            $k@3610)
          $k@3614)
        $k@3658)
      $k@3662))
  (= $t@3666 $t@3618)))
; [exec]
; p := __flatten_79
(pop) ; 18
(push) ; 18
; [else-branch 490] $t@3672 == Null
(assert (= $t@3672 $Ref.null))
(declare-const $k@3681 $Perm)
(assert ($Perm.isValidVar $k@3681))
(assert ($Perm.isReadVar $k@3681 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                      $k@3185)
                    $k@3565)
                  $k@3569)
                $k@3587)
              $k@3591)
            $k@3609)
          $k@3613)
        $k@3657)
      $k@3661))
  (= $t@3668 $t@3620)))
(declare-const $k@3682 $Perm)
(assert ($Perm.isValidVar $k@3682))
(assert ($Perm.isReadVar $k@3682 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                      $k@3186)
                    $k@3566)
                  $k@3570)
                $k@3588)
              $k@3592)
            $k@3610)
          $k@3614)
        $k@3658)
      $k@3662))
  (= $t@3666 $t@3618)))
; [exec]
; p := __flatten_79
(pop) ; 18
(pop) ; 17
(pop) ; 16
(pop) ; 15
; [dead else-branch 485] $t@3602 == Null
(pop) ; 14
(push) ; 14
; [else-branch 484] $t@3602 == Null
(assert (= $t@3602 $Ref.null))
(declare-const $k@3683 $Perm)
(assert ($Perm.isValidVar $k@3683))
(assert ($Perm.isReadVar $k@3683 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181) $k@3185)
            $k@3565)
          $k@3569)
        $k@3587)
      $k@3591))
  (= $t@3598 $t@3576)))
(declare-const $k@3684 $Perm)
(assert ($Perm.isValidVar $k@3684))
(assert ($Perm.isReadVar $k@3684 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182) $k@3186)
            $k@3566)
          $k@3570)
        $k@3588)
      $k@3592))
  (= $t@3596 $t@3574)))
; [exec]
; n := __flatten_77
; [exec]
; __flatten_78 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@3685 $Perm)
(assert ($Perm.isValidVar $k@3685))
(assert ($Perm.isReadVar $k@3685 $Perm.Write))
(push) ; 15
(assert (not (or (= $k@3685 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 15
(assert (<
  $k@3685
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179) $k@3183)
            $k@3201)
          $k@3567)
        $k@3585)
      $k@3589)
    $k@3607)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@3686 $Perm)
(assert ($Perm.isValidVar $k@3686))
(assert ($Perm.isReadVar $k@3686 $Perm.Write))
(push) ; 15
(assert (not (or (= $k@3686 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 15
(assert (<
  $k@3686
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180) $k@3184)
            $k@3202)
          $k@3568)
        $k@3586)
      $k@3590)
    $k@3608)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 15
(assert (not (not (= $t@3602 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 15
; [dead then-branch 491] $t@3602 != Null
(push) ; 15
; [else-branch 491] $t@3602 == Null
(declare-const $k@3687 $Perm)
(assert ($Perm.isValidVar $k@3687))
(assert ($Perm.isReadVar $k@3687 $Perm.Write))
(push) ; 16
(assert (not (or (= $k@3687 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181) $k@3185)
              $k@3565)
            $k@3569)
          $k@3587)
        $k@3591)
      $k@3683)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181) $k@3185)
              $k@3565)
            $k@3569)
          $k@3587)
        $k@3591)
      $k@3683)
    $Perm.No)))
(assert (<
  $k@3687
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181) $k@3185)
            $k@3565)
          $k@3569)
        $k@3587)
      $k@3591)
    $k@3683)))
(declare-const $k@3688 $Perm)
(assert ($Perm.isValidVar $k@3688))
(assert ($Perm.isReadVar $k@3688 $Perm.Write))
(push) ; 16
(assert (not (or (= $k@3688 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182) $k@3186)
              $k@3566)
            $k@3570)
          $k@3588)
        $k@3592)
      $k@3684)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182) $k@3186)
              $k@3566)
            $k@3570)
          $k@3588)
        $k@3592)
      $k@3684)
    $Perm.No)))
(assert (<
  $k@3688
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182) $k@3186)
            $k@3566)
          $k@3570)
        $k@3588)
      $k@3592)
    $k@3684)))
(declare-const sys__result@3689 $Ref)
(declare-const $t@3690 $Snap)
(declare-const $t@3691 $Snap)
(declare-const $t@3692 $Ref)
(assert (= $t@3690 ($Snap.combine $t@3691 ($SortWrappers.$RefTo$Snap $t@3692))))
(declare-const $t@3693 $Snap)
(declare-const $t@3694 $Ref)
(assert (= $t@3691 ($Snap.combine $t@3693 ($SortWrappers.$RefTo$Snap $t@3694))))
(declare-const $t@3695 $Snap)
(declare-const $t@3696 $Snap)
(assert (= $t@3693 ($Snap.combine $t@3695 $t@3696)))
(declare-const $t@3697 $Snap)
(declare-const $t@3698 $Ref)
(assert (= $t@3695 ($Snap.combine $t@3697 ($SortWrappers.$RefTo$Snap $t@3698))))
(declare-const $t@3699 $Snap)
(assert (= $t@3697 ($Snap.combine $t@3699 $Snap.unit)))
(declare-const $t@3700 Int)
(declare-const $t@3701 $Ref)
(assert (=
  $t@3699
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@3700)
    ($SortWrappers.$RefTo$Snap $t@3701))))
(declare-const $t@3702 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@3700)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@3702) $Snap.unit)))
(declare-const $k@3703 $Perm)
(assert ($Perm.isValidVar $k@3703))
(assert ($Perm.isReadVar $k@3703 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                  $k@3183)
                $k@3201)
              $k@3567)
            $k@3585)
          $k@3589)
        $k@3607)
      $k@3685))
  (= $t@3702 $t@3606)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                    $k@3183)
                  $k@3201)
                $k@3567)
              $k@3585)
            $k@3589)
          $k@3607)
        $k@3685)
      $k@3703)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                    $k@3183)
                  $k@3201)
                $k@3567)
              $k@3585)
            $k@3589)
          $k@3607)
        $k@3685)
      $k@3703)
    $Perm.No)))
(assert (> $t@3702 0))
(declare-const $k@3704 $Perm)
(assert ($Perm.isValidVar $k@3704))
(assert ($Perm.isReadVar $k@3704 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                  $k@3184)
                $k@3202)
              $k@3568)
            $k@3586)
          $k@3590)
        $k@3608)
      $k@3686))
  (= $t@3701 $t@3605)))
; [eval] diz.BlockingQueue__count != null
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                    $k@3184)
                  $k@3202)
                $k@3568)
              $k@3586)
            $k@3590)
          $k@3608)
        $k@3686)
      $k@3704)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                    $k@3184)
                  $k@3202)
                $k@3568)
              $k@3586)
            $k@3590)
          $k@3608)
        $k@3686)
      $k@3704)
    $Perm.No)))
(assert (not (= $t@3701 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 16
(assert (not (= $t@3698 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not (= $t@3698 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 16
(push) ; 16
; [then-branch 492] $t@3698 != Null
(assert (not (= $t@3698 $Ref.null)))
(declare-const $k@3705 $Perm)
(assert ($Perm.isValidVar $k@3705))
(assert ($Perm.isReadVar $k@3705 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                  $k@3185)
                $k@3565)
              $k@3569)
            $k@3587)
          $k@3591)
        $k@3683)
      $k@3687))
  (= $t@3694 $t@3598)))
(declare-const $k@3706 $Perm)
(assert ($Perm.isValidVar $k@3706))
(assert ($Perm.isReadVar $k@3706 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                  $k@3186)
                $k@3566)
              $k@3570)
            $k@3588)
          $k@3592)
        $k@3684)
      $k@3688))
  (= $t@3692 $t@3596)))
; [exec]
; o := __flatten_78
; [exec]
; __flatten_79 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@3707 $Perm)
(assert ($Perm.isValidVar $k@3707))
(assert ($Perm.isReadVar $k@3707 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@3707 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@3707
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                  $k@3183)
                $k@3201)
              $k@3567)
            $k@3585)
          $k@3589)
        $k@3607)
      $k@3685)
    $k@3703)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@3708 $Perm)
(assert ($Perm.isValidVar $k@3708))
(assert ($Perm.isReadVar $k@3708 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@3708 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@3708
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                  $k@3184)
                $k@3202)
              $k@3568)
            $k@3586)
          $k@3590)
        $k@3608)
      $k@3686)
    $k@3704)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 17
(assert (not (= $t@3698 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 17
(push) ; 17
; [then-branch 493] $t@3698 != Null
(declare-const $k@3709 $Perm)
(assert ($Perm.isValidVar $k@3709))
(assert ($Perm.isReadVar $k@3709 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@3709 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                    $k@3185)
                  $k@3565)
                $k@3569)
              $k@3587)
            $k@3591)
          $k@3683)
        $k@3687)
      $k@3705)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                    $k@3185)
                  $k@3565)
                $k@3569)
              $k@3587)
            $k@3591)
          $k@3683)
        $k@3687)
      $k@3705)
    $Perm.No)))
(assert (<
  $k@3709
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                  $k@3185)
                $k@3565)
              $k@3569)
            $k@3587)
          $k@3591)
        $k@3683)
      $k@3687)
    $k@3705)))
(declare-const $k@3710 $Perm)
(assert ($Perm.isValidVar $k@3710))
(assert ($Perm.isReadVar $k@3710 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@3710 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                    $k@3186)
                  $k@3566)
                $k@3570)
              $k@3588)
            $k@3592)
          $k@3684)
        $k@3688)
      $k@3706)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                    $k@3186)
                  $k@3566)
                $k@3570)
              $k@3588)
            $k@3592)
          $k@3684)
        $k@3688)
      $k@3706)
    $Perm.No)))
(assert (<
  $k@3710
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                  $k@3186)
                $k@3566)
              $k@3570)
            $k@3588)
          $k@3592)
        $k@3684)
      $k@3688)
    $k@3706)))
(declare-const sys__result@3711 $Ref)
(declare-const $t@3712 $Snap)
(declare-const $t@3713 $Snap)
(declare-const $t@3714 $Ref)
(assert (= $t@3712 ($Snap.combine $t@3713 ($SortWrappers.$RefTo$Snap $t@3714))))
(declare-const $t@3715 $Snap)
(declare-const $t@3716 $Ref)
(assert (= $t@3713 ($Snap.combine $t@3715 ($SortWrappers.$RefTo$Snap $t@3716))))
(declare-const $t@3717 $Snap)
(declare-const $t@3718 $Snap)
(assert (= $t@3715 ($Snap.combine $t@3717 $t@3718)))
(declare-const $t@3719 $Snap)
(declare-const $t@3720 $Ref)
(assert (= $t@3717 ($Snap.combine $t@3719 ($SortWrappers.$RefTo$Snap $t@3720))))
(declare-const $t@3721 $Snap)
(assert (= $t@3719 ($Snap.combine $t@3721 $Snap.unit)))
(declare-const $t@3722 Int)
(declare-const $t@3723 $Ref)
(assert (=
  $t@3721
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@3722)
    ($SortWrappers.$RefTo$Snap $t@3723))))
(declare-const $t@3724 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@3722)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@3724) $Snap.unit)))
(declare-const $k@3725 $Perm)
(assert ($Perm.isValidVar $k@3725))
(assert ($Perm.isReadVar $k@3725 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                      $k@3183)
                    $k@3201)
                  $k@3567)
                $k@3585)
              $k@3589)
            $k@3607)
          $k@3685)
        $k@3703)
      $k@3707))
  (= $t@3724 $t@3702)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                        $k@3183)
                      $k@3201)
                    $k@3567)
                  $k@3585)
                $k@3589)
              $k@3607)
            $k@3685)
          $k@3703)
        $k@3707)
      $k@3725)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                        $k@3183)
                      $k@3201)
                    $k@3567)
                  $k@3585)
                $k@3589)
              $k@3607)
            $k@3685)
          $k@3703)
        $k@3707)
      $k@3725)
    $Perm.No)))
(assert (> $t@3724 0))
(declare-const $k@3726 $Perm)
(assert ($Perm.isValidVar $k@3726))
(assert ($Perm.isReadVar $k@3726 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                      $k@3184)
                    $k@3202)
                  $k@3568)
                $k@3586)
              $k@3590)
            $k@3608)
          $k@3686)
        $k@3704)
      $k@3708))
  (= $t@3723 $t@3701)))
; [eval] diz.BlockingQueue__count != null
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                        $k@3184)
                      $k@3202)
                    $k@3568)
                  $k@3586)
                $k@3590)
              $k@3608)
            $k@3686)
          $k@3704)
        $k@3708)
      $k@3726)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                        $k@3184)
                      $k@3202)
                    $k@3568)
                  $k@3586)
                $k@3590)
              $k@3608)
            $k@3686)
          $k@3704)
        $k@3708)
      $k@3726)
    $Perm.No)))
(assert (not (= $t@3723 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 18
(assert (not (= $t@3720 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not (= $t@3720 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
; [then-branch 494] $t@3720 != Null
(assert (not (= $t@3720 $Ref.null)))
(declare-const $k@3727 $Perm)
(assert ($Perm.isValidVar $k@3727))
(assert ($Perm.isReadVar $k@3727 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                      $k@3185)
                    $k@3565)
                  $k@3569)
                $k@3587)
              $k@3591)
            $k@3683)
          $k@3687)
        $k@3705)
      $k@3709))
  (= $t@3716 $t@3694)))
(declare-const $k@3728 $Perm)
(assert ($Perm.isValidVar $k@3728))
(assert ($Perm.isReadVar $k@3728 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                      $k@3186)
                    $k@3566)
                  $k@3570)
                $k@3588)
              $k@3592)
            $k@3684)
          $k@3688)
        $k@3706)
      $k@3710))
  (= $t@3714 $t@3692)))
; [exec]
; p := __flatten_79
(pop) ; 18
(push) ; 18
; [else-branch 494] $t@3720 == Null
(assert (= $t@3720 $Ref.null))
(declare-const $k@3729 $Perm)
(assert ($Perm.isValidVar $k@3729))
(assert ($Perm.isReadVar $k@3729 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                      $k@3185)
                    $k@3565)
                  $k@3569)
                $k@3587)
              $k@3591)
            $k@3683)
          $k@3687)
        $k@3705)
      $k@3709))
  (= $t@3716 $t@3694)))
(declare-const $k@3730 $Perm)
(assert ($Perm.isValidVar $k@3730))
(assert ($Perm.isReadVar $k@3730 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                      $k@3186)
                    $k@3566)
                  $k@3570)
                $k@3588)
              $k@3592)
            $k@3684)
          $k@3688)
        $k@3706)
      $k@3710))
  (= $t@3714 $t@3692)))
; [exec]
; p := __flatten_79
(pop) ; 18
(pop) ; 17
; [dead else-branch 493] $t@3698 == Null
(pop) ; 16
(push) ; 16
; [else-branch 492] $t@3698 == Null
(assert (= $t@3698 $Ref.null))
(declare-const $k@3731 $Perm)
(assert ($Perm.isValidVar $k@3731))
(assert ($Perm.isReadVar $k@3731 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                  $k@3185)
                $k@3565)
              $k@3569)
            $k@3587)
          $k@3591)
        $k@3683)
      $k@3687))
  (= $t@3694 $t@3598)))
(declare-const $k@3732 $Perm)
(assert ($Perm.isValidVar $k@3732))
(assert ($Perm.isReadVar $k@3732 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                  $k@3186)
                $k@3566)
              $k@3570)
            $k@3588)
          $k@3592)
        $k@3684)
      $k@3688))
  (= $t@3692 $t@3596)))
; [exec]
; o := __flatten_78
; [exec]
; __flatten_79 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@3733 $Perm)
(assert ($Perm.isValidVar $k@3733))
(assert ($Perm.isReadVar $k@3733 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@3733 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@3733
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                  $k@3183)
                $k@3201)
              $k@3567)
            $k@3585)
          $k@3589)
        $k@3607)
      $k@3685)
    $k@3703)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@3734 $Perm)
(assert ($Perm.isValidVar $k@3734))
(assert ($Perm.isReadVar $k@3734 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@3734 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@3734
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                  $k@3184)
                $k@3202)
              $k@3568)
            $k@3586)
          $k@3590)
        $k@3608)
      $k@3686)
    $k@3704)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 17
(assert (not (not (= $t@3698 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 17
; [dead then-branch 495] $t@3698 != Null
(push) ; 17
; [else-branch 495] $t@3698 == Null
(declare-const $k@3735 $Perm)
(assert ($Perm.isValidVar $k@3735))
(assert ($Perm.isReadVar $k@3735 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@3735 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                    $k@3185)
                  $k@3565)
                $k@3569)
              $k@3587)
            $k@3591)
          $k@3683)
        $k@3687)
      $k@3731)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                    $k@3185)
                  $k@3565)
                $k@3569)
              $k@3587)
            $k@3591)
          $k@3683)
        $k@3687)
      $k@3731)
    $Perm.No)))
(assert (<
  $k@3735
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                  $k@3185)
                $k@3565)
              $k@3569)
            $k@3587)
          $k@3591)
        $k@3683)
      $k@3687)
    $k@3731)))
(declare-const $k@3736 $Perm)
(assert ($Perm.isValidVar $k@3736))
(assert ($Perm.isReadVar $k@3736 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@3736 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                    $k@3186)
                  $k@3566)
                $k@3570)
              $k@3588)
            $k@3592)
          $k@3684)
        $k@3688)
      $k@3732)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                    $k@3186)
                  $k@3566)
                $k@3570)
              $k@3588)
            $k@3592)
          $k@3684)
        $k@3688)
      $k@3732)
    $Perm.No)))
(assert (<
  $k@3736
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                  $k@3186)
                $k@3566)
              $k@3570)
            $k@3588)
          $k@3592)
        $k@3684)
      $k@3688)
    $k@3732)))
(declare-const sys__result@3737 $Ref)
(declare-const $t@3738 $Snap)
(declare-const $t@3739 $Snap)
(declare-const $t@3740 $Ref)
(assert (= $t@3738 ($Snap.combine $t@3739 ($SortWrappers.$RefTo$Snap $t@3740))))
(declare-const $t@3741 $Snap)
(declare-const $t@3742 $Ref)
(assert (= $t@3739 ($Snap.combine $t@3741 ($SortWrappers.$RefTo$Snap $t@3742))))
(declare-const $t@3743 $Snap)
(declare-const $t@3744 $Snap)
(assert (= $t@3741 ($Snap.combine $t@3743 $t@3744)))
(declare-const $t@3745 $Snap)
(declare-const $t@3746 $Ref)
(assert (= $t@3743 ($Snap.combine $t@3745 ($SortWrappers.$RefTo$Snap $t@3746))))
(declare-const $t@3747 $Snap)
(assert (= $t@3745 ($Snap.combine $t@3747 $Snap.unit)))
(declare-const $t@3748 Int)
(declare-const $t@3749 $Ref)
(assert (=
  $t@3747
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@3748)
    ($SortWrappers.$RefTo$Snap $t@3749))))
(declare-const $t@3750 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@3748)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@3750) $Snap.unit)))
(declare-const $k@3751 $Perm)
(assert ($Perm.isValidVar $k@3751))
(assert ($Perm.isReadVar $k@3751 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                      $k@3183)
                    $k@3201)
                  $k@3567)
                $k@3585)
              $k@3589)
            $k@3607)
          $k@3685)
        $k@3703)
      $k@3733))
  (= $t@3750 $t@3702)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                        $k@3183)
                      $k@3201)
                    $k@3567)
                  $k@3585)
                $k@3589)
              $k@3607)
            $k@3685)
          $k@3703)
        $k@3733)
      $k@3751)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                        $k@3183)
                      $k@3201)
                    $k@3567)
                  $k@3585)
                $k@3589)
              $k@3607)
            $k@3685)
          $k@3703)
        $k@3733)
      $k@3751)
    $Perm.No)))
(assert (> $t@3750 0))
(declare-const $k@3752 $Perm)
(assert ($Perm.isValidVar $k@3752))
(assert ($Perm.isReadVar $k@3752 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                      $k@3184)
                    $k@3202)
                  $k@3568)
                $k@3586)
              $k@3590)
            $k@3608)
          $k@3686)
        $k@3704)
      $k@3734))
  (= $t@3749 $t@3701)))
; [eval] diz.BlockingQueue__count != null
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                        $k@3184)
                      $k@3202)
                    $k@3568)
                  $k@3586)
                $k@3590)
              $k@3608)
            $k@3686)
          $k@3704)
        $k@3734)
      $k@3752)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                        $k@3184)
                      $k@3202)
                    $k@3568)
                  $k@3586)
                $k@3590)
              $k@3608)
            $k@3686)
          $k@3704)
        $k@3734)
      $k@3752)
    $Perm.No)))
(assert (not (= $t@3749 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 18
(assert (not (= $t@3746 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not (= $t@3746 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
; [then-branch 496] $t@3746 != Null
(assert (not (= $t@3746 $Ref.null)))
(declare-const $k@3753 $Perm)
(assert ($Perm.isValidVar $k@3753))
(assert ($Perm.isReadVar $k@3753 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                      $k@3185)
                    $k@3565)
                  $k@3569)
                $k@3587)
              $k@3591)
            $k@3683)
          $k@3687)
        $k@3731)
      $k@3735))
  (= $t@3742 $t@3694)))
(declare-const $k@3754 $Perm)
(assert ($Perm.isValidVar $k@3754))
(assert ($Perm.isReadVar $k@3754 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                      $k@3186)
                    $k@3566)
                  $k@3570)
                $k@3588)
              $k@3592)
            $k@3684)
          $k@3688)
        $k@3732)
      $k@3736))
  (= $t@3740 $t@3692)))
; [exec]
; p := __flatten_79
(pop) ; 18
(push) ; 18
; [else-branch 496] $t@3746 == Null
(assert (= $t@3746 $Ref.null))
(declare-const $k@3755 $Perm)
(assert ($Perm.isValidVar $k@3755))
(assert ($Perm.isReadVar $k@3755 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                      $k@3185)
                    $k@3565)
                  $k@3569)
                $k@3587)
              $k@3591)
            $k@3683)
          $k@3687)
        $k@3731)
      $k@3735))
  (= $t@3742 $t@3694)))
(declare-const $k@3756 $Perm)
(assert ($Perm.isValidVar $k@3756))
(assert ($Perm.isReadVar $k@3756 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                      $k@3186)
                    $k@3566)
                  $k@3570)
                $k@3588)
              $k@3592)
            $k@3684)
          $k@3688)
        $k@3732)
      $k@3736))
  (= $t@3740 $t@3692)))
; [exec]
; p := __flatten_79
(pop) ; 18
(pop) ; 17
(pop) ; 16
(pop) ; 15
(pop) ; 14
(pop) ; 13
; [dead else-branch 483] $t@3580 == Null
(pop) ; 12
(push) ; 12
; [else-branch 482] $t@3580 == Null
(assert (= $t@3580 $Ref.null))
(declare-const $k@3757 $Perm)
(assert ($Perm.isValidVar $k@3757))
(assert ($Perm.isReadVar $k@3757 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181) $k@3185)
        $k@3565)
      $k@3569))
  (= $t@3576 $t@3192)))
(declare-const $k@3758 $Perm)
(assert ($Perm.isValidVar $k@3758))
(assert ($Perm.isReadVar $k@3758 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182) $k@3186)
        $k@3566)
      $k@3570))
  (= $t@3574 $t@3190)))
; [exec]
; b := __flatten_76
; [exec]
; __flatten_77 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@3759 $Perm)
(assert ($Perm.isValidVar $k@3759))
(assert ($Perm.isReadVar $k@3759 $Perm.Write))
(push) ; 13
(assert (not (or (= $k@3759 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 13
(assert (<
  $k@3759
  (+
    (-
      (+
        (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179) $k@3183)
        $k@3201)
      $k@3567)
    $k@3585)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@3760 $Perm)
(assert ($Perm.isValidVar $k@3760))
(assert ($Perm.isReadVar $k@3760 $Perm.Write))
(push) ; 13
(assert (not (or (= $k@3760 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 13
(assert (<
  $k@3760
  (+
    (-
      (+
        (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180) $k@3184)
        $k@3202)
      $k@3568)
    $k@3586)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 13
(assert (not (not (= $t@3580 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 13
; [dead then-branch 497] $t@3580 != Null
(push) ; 13
; [else-branch 497] $t@3580 == Null
(declare-const $k@3761 $Perm)
(assert ($Perm.isValidVar $k@3761))
(assert ($Perm.isReadVar $k@3761 $Perm.Write))
(push) ; 14
(assert (not (or (= $k@3761 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(push) ; 14
(assert (not (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181) $k@3185)
          $k@3565)
        $k@3569)
      $k@3757)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(assert (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181) $k@3185)
          $k@3565)
        $k@3569)
      $k@3757)
    $Perm.No)))
(assert (<
  $k@3761
  (+
    (-
      (+
        (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181) $k@3185)
        $k@3565)
      $k@3569)
    $k@3757)))
(declare-const $k@3762 $Perm)
(assert ($Perm.isValidVar $k@3762))
(assert ($Perm.isReadVar $k@3762 $Perm.Write))
(push) ; 14
(assert (not (or (= $k@3762 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(push) ; 14
(assert (not (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182) $k@3186)
          $k@3566)
        $k@3570)
      $k@3758)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(assert (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182) $k@3186)
          $k@3566)
        $k@3570)
      $k@3758)
    $Perm.No)))
(assert (<
  $k@3762
  (+
    (-
      (+
        (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182) $k@3186)
        $k@3566)
      $k@3570)
    $k@3758)))
(declare-const sys__result@3763 $Ref)
(declare-const $t@3764 $Snap)
(declare-const $t@3765 $Snap)
(declare-const $t@3766 $Ref)
(assert (= $t@3764 ($Snap.combine $t@3765 ($SortWrappers.$RefTo$Snap $t@3766))))
(declare-const $t@3767 $Snap)
(declare-const $t@3768 $Ref)
(assert (= $t@3765 ($Snap.combine $t@3767 ($SortWrappers.$RefTo$Snap $t@3768))))
(declare-const $t@3769 $Snap)
(declare-const $t@3770 $Snap)
(assert (= $t@3767 ($Snap.combine $t@3769 $t@3770)))
(declare-const $t@3771 $Snap)
(declare-const $t@3772 $Ref)
(assert (= $t@3769 ($Snap.combine $t@3771 ($SortWrappers.$RefTo$Snap $t@3772))))
(declare-const $t@3773 $Snap)
(assert (= $t@3771 ($Snap.combine $t@3773 $Snap.unit)))
(declare-const $t@3774 Int)
(declare-const $t@3775 $Ref)
(assert (=
  $t@3773
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@3774)
    ($SortWrappers.$RefTo$Snap $t@3775))))
(declare-const $t@3776 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@3774)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@3776) $Snap.unit)))
(declare-const $k@3777 $Perm)
(assert ($Perm.isValidVar $k@3777))
(assert ($Perm.isReadVar $k@3777 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179) $k@3183)
            $k@3201)
          $k@3567)
        $k@3585)
      $k@3759))
  (= $t@3776 $t@3584)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 14
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179) $k@3183)
              $k@3201)
            $k@3567)
          $k@3585)
        $k@3759)
      $k@3777)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179) $k@3183)
              $k@3201)
            $k@3567)
          $k@3585)
        $k@3759)
      $k@3777)
    $Perm.No)))
(assert (> $t@3776 0))
(declare-const $k@3778 $Perm)
(assert ($Perm.isValidVar $k@3778))
(assert ($Perm.isReadVar $k@3778 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180) $k@3184)
            $k@3202)
          $k@3568)
        $k@3586)
      $k@3760))
  (= $t@3775 $t@3583)))
; [eval] diz.BlockingQueue__count != null
(push) ; 14
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180) $k@3184)
              $k@3202)
            $k@3568)
          $k@3586)
        $k@3760)
      $k@3778)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180) $k@3184)
              $k@3202)
            $k@3568)
          $k@3586)
        $k@3760)
      $k@3778)
    $Perm.No)))
(assert (not (= $t@3775 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 14
(assert (not (= $t@3772 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 14
(push) ; 14
(assert (not (not (= $t@3772 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 14
(push) ; 14
; [then-branch 498] $t@3772 != Null
(assert (not (= $t@3772 $Ref.null)))
(declare-const $k@3779 $Perm)
(assert ($Perm.isValidVar $k@3779))
(assert ($Perm.isReadVar $k@3779 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181) $k@3185)
            $k@3565)
          $k@3569)
        $k@3757)
      $k@3761))
  (= $t@3768 $t@3576)))
(declare-const $k@3780 $Perm)
(assert ($Perm.isValidVar $k@3780))
(assert ($Perm.isReadVar $k@3780 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182) $k@3186)
            $k@3566)
          $k@3570)
        $k@3758)
      $k@3762))
  (= $t@3766 $t@3574)))
; [exec]
; n := __flatten_77
; [exec]
; __flatten_78 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@3781 $Perm)
(assert ($Perm.isValidVar $k@3781))
(assert ($Perm.isReadVar $k@3781 $Perm.Write))
(push) ; 15
(assert (not (or (= $k@3781 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 15
(assert (<
  $k@3781
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179) $k@3183)
            $k@3201)
          $k@3567)
        $k@3585)
      $k@3759)
    $k@3777)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@3782 $Perm)
(assert ($Perm.isValidVar $k@3782))
(assert ($Perm.isReadVar $k@3782 $Perm.Write))
(push) ; 15
(assert (not (or (= $k@3782 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 15
(assert (<
  $k@3782
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180) $k@3184)
            $k@3202)
          $k@3568)
        $k@3586)
      $k@3760)
    $k@3778)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 15
(assert (not (= $t@3772 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 15
(push) ; 15
; [then-branch 499] $t@3772 != Null
(declare-const $k@3783 $Perm)
(assert ($Perm.isValidVar $k@3783))
(assert ($Perm.isReadVar $k@3783 $Perm.Write))
(push) ; 16
(assert (not (or (= $k@3783 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181) $k@3185)
              $k@3565)
            $k@3569)
          $k@3757)
        $k@3761)
      $k@3779)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181) $k@3185)
              $k@3565)
            $k@3569)
          $k@3757)
        $k@3761)
      $k@3779)
    $Perm.No)))
(assert (<
  $k@3783
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181) $k@3185)
            $k@3565)
          $k@3569)
        $k@3757)
      $k@3761)
    $k@3779)))
(declare-const $k@3784 $Perm)
(assert ($Perm.isValidVar $k@3784))
(assert ($Perm.isReadVar $k@3784 $Perm.Write))
(push) ; 16
(assert (not (or (= $k@3784 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182) $k@3186)
              $k@3566)
            $k@3570)
          $k@3758)
        $k@3762)
      $k@3780)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182) $k@3186)
              $k@3566)
            $k@3570)
          $k@3758)
        $k@3762)
      $k@3780)
    $Perm.No)))
(assert (<
  $k@3784
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182) $k@3186)
            $k@3566)
          $k@3570)
        $k@3758)
      $k@3762)
    $k@3780)))
(declare-const sys__result@3785 $Ref)
(declare-const $t@3786 $Snap)
(declare-const $t@3787 $Snap)
(declare-const $t@3788 $Ref)
(assert (= $t@3786 ($Snap.combine $t@3787 ($SortWrappers.$RefTo$Snap $t@3788))))
(declare-const $t@3789 $Snap)
(declare-const $t@3790 $Ref)
(assert (= $t@3787 ($Snap.combine $t@3789 ($SortWrappers.$RefTo$Snap $t@3790))))
(declare-const $t@3791 $Snap)
(declare-const $t@3792 $Snap)
(assert (= $t@3789 ($Snap.combine $t@3791 $t@3792)))
(declare-const $t@3793 $Snap)
(declare-const $t@3794 $Ref)
(assert (= $t@3791 ($Snap.combine $t@3793 ($SortWrappers.$RefTo$Snap $t@3794))))
(declare-const $t@3795 $Snap)
(assert (= $t@3793 ($Snap.combine $t@3795 $Snap.unit)))
(declare-const $t@3796 Int)
(declare-const $t@3797 $Ref)
(assert (=
  $t@3795
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@3796)
    ($SortWrappers.$RefTo$Snap $t@3797))))
(declare-const $t@3798 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@3796)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@3798) $Snap.unit)))
(declare-const $k@3799 $Perm)
(assert ($Perm.isValidVar $k@3799))
(assert ($Perm.isReadVar $k@3799 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                  $k@3183)
                $k@3201)
              $k@3567)
            $k@3585)
          $k@3759)
        $k@3777)
      $k@3781))
  (= $t@3798 $t@3776)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                    $k@3183)
                  $k@3201)
                $k@3567)
              $k@3585)
            $k@3759)
          $k@3777)
        $k@3781)
      $k@3799)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                    $k@3183)
                  $k@3201)
                $k@3567)
              $k@3585)
            $k@3759)
          $k@3777)
        $k@3781)
      $k@3799)
    $Perm.No)))
(assert (> $t@3798 0))
(declare-const $k@3800 $Perm)
(assert ($Perm.isValidVar $k@3800))
(assert ($Perm.isReadVar $k@3800 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                  $k@3184)
                $k@3202)
              $k@3568)
            $k@3586)
          $k@3760)
        $k@3778)
      $k@3782))
  (= $t@3797 $t@3775)))
; [eval] diz.BlockingQueue__count != null
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                    $k@3184)
                  $k@3202)
                $k@3568)
              $k@3586)
            $k@3760)
          $k@3778)
        $k@3782)
      $k@3800)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                    $k@3184)
                  $k@3202)
                $k@3568)
              $k@3586)
            $k@3760)
          $k@3778)
        $k@3782)
      $k@3800)
    $Perm.No)))
(assert (not (= $t@3797 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 16
(assert (not (= $t@3794 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not (= $t@3794 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 16
(push) ; 16
; [then-branch 500] $t@3794 != Null
(assert (not (= $t@3794 $Ref.null)))
(declare-const $k@3801 $Perm)
(assert ($Perm.isValidVar $k@3801))
(assert ($Perm.isReadVar $k@3801 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                  $k@3185)
                $k@3565)
              $k@3569)
            $k@3757)
          $k@3761)
        $k@3779)
      $k@3783))
  (= $t@3790 $t@3768)))
(declare-const $k@3802 $Perm)
(assert ($Perm.isValidVar $k@3802))
(assert ($Perm.isReadVar $k@3802 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                  $k@3186)
                $k@3566)
              $k@3570)
            $k@3758)
          $k@3762)
        $k@3780)
      $k@3784))
  (= $t@3788 $t@3766)))
; [exec]
; o := __flatten_78
; [exec]
; __flatten_79 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@3803 $Perm)
(assert ($Perm.isValidVar $k@3803))
(assert ($Perm.isReadVar $k@3803 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@3803 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@3803
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                  $k@3183)
                $k@3201)
              $k@3567)
            $k@3585)
          $k@3759)
        $k@3777)
      $k@3781)
    $k@3799)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@3804 $Perm)
(assert ($Perm.isValidVar $k@3804))
(assert ($Perm.isReadVar $k@3804 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@3804 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@3804
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                  $k@3184)
                $k@3202)
              $k@3568)
            $k@3586)
          $k@3760)
        $k@3778)
      $k@3782)
    $k@3800)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 17
(assert (not (= $t@3794 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 17
(push) ; 17
; [then-branch 501] $t@3794 != Null
(declare-const $k@3805 $Perm)
(assert ($Perm.isValidVar $k@3805))
(assert ($Perm.isReadVar $k@3805 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@3805 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                    $k@3185)
                  $k@3565)
                $k@3569)
              $k@3757)
            $k@3761)
          $k@3779)
        $k@3783)
      $k@3801)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                    $k@3185)
                  $k@3565)
                $k@3569)
              $k@3757)
            $k@3761)
          $k@3779)
        $k@3783)
      $k@3801)
    $Perm.No)))
(assert (<
  $k@3805
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                  $k@3185)
                $k@3565)
              $k@3569)
            $k@3757)
          $k@3761)
        $k@3779)
      $k@3783)
    $k@3801)))
(declare-const $k@3806 $Perm)
(assert ($Perm.isValidVar $k@3806))
(assert ($Perm.isReadVar $k@3806 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@3806 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                    $k@3186)
                  $k@3566)
                $k@3570)
              $k@3758)
            $k@3762)
          $k@3780)
        $k@3784)
      $k@3802)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                    $k@3186)
                  $k@3566)
                $k@3570)
              $k@3758)
            $k@3762)
          $k@3780)
        $k@3784)
      $k@3802)
    $Perm.No)))
(assert (<
  $k@3806
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                  $k@3186)
                $k@3566)
              $k@3570)
            $k@3758)
          $k@3762)
        $k@3780)
      $k@3784)
    $k@3802)))
(declare-const sys__result@3807 $Ref)
(declare-const $t@3808 $Snap)
(declare-const $t@3809 $Snap)
(declare-const $t@3810 $Ref)
(assert (= $t@3808 ($Snap.combine $t@3809 ($SortWrappers.$RefTo$Snap $t@3810))))
(declare-const $t@3811 $Snap)
(declare-const $t@3812 $Ref)
(assert (= $t@3809 ($Snap.combine $t@3811 ($SortWrappers.$RefTo$Snap $t@3812))))
(declare-const $t@3813 $Snap)
(declare-const $t@3814 $Snap)
(assert (= $t@3811 ($Snap.combine $t@3813 $t@3814)))
(declare-const $t@3815 $Snap)
(declare-const $t@3816 $Ref)
(assert (= $t@3813 ($Snap.combine $t@3815 ($SortWrappers.$RefTo$Snap $t@3816))))
(declare-const $t@3817 $Snap)
(assert (= $t@3815 ($Snap.combine $t@3817 $Snap.unit)))
(declare-const $t@3818 Int)
(declare-const $t@3819 $Ref)
(assert (=
  $t@3817
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@3818)
    ($SortWrappers.$RefTo$Snap $t@3819))))
(declare-const $t@3820 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@3818)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@3820) $Snap.unit)))
(declare-const $k@3821 $Perm)
(assert ($Perm.isValidVar $k@3821))
(assert ($Perm.isReadVar $k@3821 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                      $k@3183)
                    $k@3201)
                  $k@3567)
                $k@3585)
              $k@3759)
            $k@3777)
          $k@3781)
        $k@3799)
      $k@3803))
  (= $t@3820 $t@3798)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                        $k@3183)
                      $k@3201)
                    $k@3567)
                  $k@3585)
                $k@3759)
              $k@3777)
            $k@3781)
          $k@3799)
        $k@3803)
      $k@3821)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                        $k@3183)
                      $k@3201)
                    $k@3567)
                  $k@3585)
                $k@3759)
              $k@3777)
            $k@3781)
          $k@3799)
        $k@3803)
      $k@3821)
    $Perm.No)))
(assert (> $t@3820 0))
(declare-const $k@3822 $Perm)
(assert ($Perm.isValidVar $k@3822))
(assert ($Perm.isReadVar $k@3822 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                      $k@3184)
                    $k@3202)
                  $k@3568)
                $k@3586)
              $k@3760)
            $k@3778)
          $k@3782)
        $k@3800)
      $k@3804))
  (= $t@3819 $t@3797)))
; [eval] diz.BlockingQueue__count != null
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                        $k@3184)
                      $k@3202)
                    $k@3568)
                  $k@3586)
                $k@3760)
              $k@3778)
            $k@3782)
          $k@3800)
        $k@3804)
      $k@3822)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                        $k@3184)
                      $k@3202)
                    $k@3568)
                  $k@3586)
                $k@3760)
              $k@3778)
            $k@3782)
          $k@3800)
        $k@3804)
      $k@3822)
    $Perm.No)))
(assert (not (= $t@3819 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 18
(assert (not (= $t@3816 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not (= $t@3816 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
; [then-branch 502] $t@3816 != Null
(assert (not (= $t@3816 $Ref.null)))
(declare-const $k@3823 $Perm)
(assert ($Perm.isValidVar $k@3823))
(assert ($Perm.isReadVar $k@3823 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                      $k@3185)
                    $k@3565)
                  $k@3569)
                $k@3757)
              $k@3761)
            $k@3779)
          $k@3783)
        $k@3801)
      $k@3805))
  (= $t@3812 $t@3790)))
(declare-const $k@3824 $Perm)
(assert ($Perm.isValidVar $k@3824))
(assert ($Perm.isReadVar $k@3824 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                      $k@3186)
                    $k@3566)
                  $k@3570)
                $k@3758)
              $k@3762)
            $k@3780)
          $k@3784)
        $k@3802)
      $k@3806))
  (= $t@3810 $t@3788)))
; [exec]
; p := __flatten_79
(pop) ; 18
(push) ; 18
; [else-branch 502] $t@3816 == Null
(assert (= $t@3816 $Ref.null))
(declare-const $k@3825 $Perm)
(assert ($Perm.isValidVar $k@3825))
(assert ($Perm.isReadVar $k@3825 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                      $k@3185)
                    $k@3565)
                  $k@3569)
                $k@3757)
              $k@3761)
            $k@3779)
          $k@3783)
        $k@3801)
      $k@3805))
  (= $t@3812 $t@3790)))
(declare-const $k@3826 $Perm)
(assert ($Perm.isValidVar $k@3826))
(assert ($Perm.isReadVar $k@3826 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                      $k@3186)
                    $k@3566)
                  $k@3570)
                $k@3758)
              $k@3762)
            $k@3780)
          $k@3784)
        $k@3802)
      $k@3806))
  (= $t@3810 $t@3788)))
; [exec]
; p := __flatten_79
(pop) ; 18
(pop) ; 17
; [dead else-branch 501] $t@3794 == Null
(pop) ; 16
(push) ; 16
; [else-branch 500] $t@3794 == Null
(assert (= $t@3794 $Ref.null))
(declare-const $k@3827 $Perm)
(assert ($Perm.isValidVar $k@3827))
(assert ($Perm.isReadVar $k@3827 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                  $k@3185)
                $k@3565)
              $k@3569)
            $k@3757)
          $k@3761)
        $k@3779)
      $k@3783))
  (= $t@3790 $t@3768)))
(declare-const $k@3828 $Perm)
(assert ($Perm.isValidVar $k@3828))
(assert ($Perm.isReadVar $k@3828 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                  $k@3186)
                $k@3566)
              $k@3570)
            $k@3758)
          $k@3762)
        $k@3780)
      $k@3784))
  (= $t@3788 $t@3766)))
; [exec]
; o := __flatten_78
; [exec]
; __flatten_79 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@3829 $Perm)
(assert ($Perm.isValidVar $k@3829))
(assert ($Perm.isReadVar $k@3829 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@3829 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@3829
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                  $k@3183)
                $k@3201)
              $k@3567)
            $k@3585)
          $k@3759)
        $k@3777)
      $k@3781)
    $k@3799)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@3830 $Perm)
(assert ($Perm.isValidVar $k@3830))
(assert ($Perm.isReadVar $k@3830 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@3830 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@3830
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                  $k@3184)
                $k@3202)
              $k@3568)
            $k@3586)
          $k@3760)
        $k@3778)
      $k@3782)
    $k@3800)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 17
(assert (not (not (= $t@3794 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 17
; [dead then-branch 503] $t@3794 != Null
(push) ; 17
; [else-branch 503] $t@3794 == Null
(declare-const $k@3831 $Perm)
(assert ($Perm.isValidVar $k@3831))
(assert ($Perm.isReadVar $k@3831 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@3831 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                    $k@3185)
                  $k@3565)
                $k@3569)
              $k@3757)
            $k@3761)
          $k@3779)
        $k@3783)
      $k@3827)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                    $k@3185)
                  $k@3565)
                $k@3569)
              $k@3757)
            $k@3761)
          $k@3779)
        $k@3783)
      $k@3827)
    $Perm.No)))
(assert (<
  $k@3831
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                  $k@3185)
                $k@3565)
              $k@3569)
            $k@3757)
          $k@3761)
        $k@3779)
      $k@3783)
    $k@3827)))
(declare-const $k@3832 $Perm)
(assert ($Perm.isValidVar $k@3832))
(assert ($Perm.isReadVar $k@3832 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@3832 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                    $k@3186)
                  $k@3566)
                $k@3570)
              $k@3758)
            $k@3762)
          $k@3780)
        $k@3784)
      $k@3828)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                    $k@3186)
                  $k@3566)
                $k@3570)
              $k@3758)
            $k@3762)
          $k@3780)
        $k@3784)
      $k@3828)
    $Perm.No)))
(assert (<
  $k@3832
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                  $k@3186)
                $k@3566)
              $k@3570)
            $k@3758)
          $k@3762)
        $k@3780)
      $k@3784)
    $k@3828)))
(declare-const sys__result@3833 $Ref)
(declare-const $t@3834 $Snap)
(declare-const $t@3835 $Snap)
(declare-const $t@3836 $Ref)
(assert (= $t@3834 ($Snap.combine $t@3835 ($SortWrappers.$RefTo$Snap $t@3836))))
(declare-const $t@3837 $Snap)
(declare-const $t@3838 $Ref)
(assert (= $t@3835 ($Snap.combine $t@3837 ($SortWrappers.$RefTo$Snap $t@3838))))
(declare-const $t@3839 $Snap)
(declare-const $t@3840 $Snap)
(assert (= $t@3837 ($Snap.combine $t@3839 $t@3840)))
(declare-const $t@3841 $Snap)
(declare-const $t@3842 $Ref)
(assert (= $t@3839 ($Snap.combine $t@3841 ($SortWrappers.$RefTo$Snap $t@3842))))
(declare-const $t@3843 $Snap)
(assert (= $t@3841 ($Snap.combine $t@3843 $Snap.unit)))
(declare-const $t@3844 Int)
(declare-const $t@3845 $Ref)
(assert (=
  $t@3843
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@3844)
    ($SortWrappers.$RefTo$Snap $t@3845))))
(declare-const $t@3846 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@3844)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@3846) $Snap.unit)))
(declare-const $k@3847 $Perm)
(assert ($Perm.isValidVar $k@3847))
(assert ($Perm.isReadVar $k@3847 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                      $k@3183)
                    $k@3201)
                  $k@3567)
                $k@3585)
              $k@3759)
            $k@3777)
          $k@3781)
        $k@3799)
      $k@3829))
  (= $t@3846 $t@3798)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                        $k@3183)
                      $k@3201)
                    $k@3567)
                  $k@3585)
                $k@3759)
              $k@3777)
            $k@3781)
          $k@3799)
        $k@3829)
      $k@3847)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                        $k@3183)
                      $k@3201)
                    $k@3567)
                  $k@3585)
                $k@3759)
              $k@3777)
            $k@3781)
          $k@3799)
        $k@3829)
      $k@3847)
    $Perm.No)))
(assert (> $t@3846 0))
(declare-const $k@3848 $Perm)
(assert ($Perm.isValidVar $k@3848))
(assert ($Perm.isReadVar $k@3848 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                      $k@3184)
                    $k@3202)
                  $k@3568)
                $k@3586)
              $k@3760)
            $k@3778)
          $k@3782)
        $k@3800)
      $k@3830))
  (= $t@3845 $t@3797)))
; [eval] diz.BlockingQueue__count != null
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                        $k@3184)
                      $k@3202)
                    $k@3568)
                  $k@3586)
                $k@3760)
              $k@3778)
            $k@3782)
          $k@3800)
        $k@3830)
      $k@3848)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                        $k@3184)
                      $k@3202)
                    $k@3568)
                  $k@3586)
                $k@3760)
              $k@3778)
            $k@3782)
          $k@3800)
        $k@3830)
      $k@3848)
    $Perm.No)))
(assert (not (= $t@3845 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 18
(assert (not (= $t@3842 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not (= $t@3842 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
; [then-branch 504] $t@3842 != Null
(assert (not (= $t@3842 $Ref.null)))
(declare-const $k@3849 $Perm)
(assert ($Perm.isValidVar $k@3849))
(assert ($Perm.isReadVar $k@3849 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                      $k@3185)
                    $k@3565)
                  $k@3569)
                $k@3757)
              $k@3761)
            $k@3779)
          $k@3783)
        $k@3827)
      $k@3831))
  (= $t@3838 $t@3790)))
(declare-const $k@3850 $Perm)
(assert ($Perm.isValidVar $k@3850))
(assert ($Perm.isReadVar $k@3850 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                      $k@3186)
                    $k@3566)
                  $k@3570)
                $k@3758)
              $k@3762)
            $k@3780)
          $k@3784)
        $k@3828)
      $k@3832))
  (= $t@3836 $t@3788)))
; [exec]
; p := __flatten_79
(pop) ; 18
(push) ; 18
; [else-branch 504] $t@3842 == Null
(assert (= $t@3842 $Ref.null))
(declare-const $k@3851 $Perm)
(assert ($Perm.isValidVar $k@3851))
(assert ($Perm.isReadVar $k@3851 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                      $k@3185)
                    $k@3565)
                  $k@3569)
                $k@3757)
              $k@3761)
            $k@3779)
          $k@3783)
        $k@3827)
      $k@3831))
  (= $t@3838 $t@3790)))
(declare-const $k@3852 $Perm)
(assert ($Perm.isValidVar $k@3852))
(assert ($Perm.isReadVar $k@3852 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                      $k@3186)
                    $k@3566)
                  $k@3570)
                $k@3758)
              $k@3762)
            $k@3780)
          $k@3784)
        $k@3828)
      $k@3832))
  (= $t@3836 $t@3788)))
; [exec]
; p := __flatten_79
(pop) ; 18
(pop) ; 17
(pop) ; 16
(pop) ; 15
; [dead else-branch 499] $t@3772 == Null
(pop) ; 14
(push) ; 14
; [else-branch 498] $t@3772 == Null
(assert (= $t@3772 $Ref.null))
(declare-const $k@3853 $Perm)
(assert ($Perm.isValidVar $k@3853))
(assert ($Perm.isReadVar $k@3853 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181) $k@3185)
            $k@3565)
          $k@3569)
        $k@3757)
      $k@3761))
  (= $t@3768 $t@3576)))
(declare-const $k@3854 $Perm)
(assert ($Perm.isValidVar $k@3854))
(assert ($Perm.isReadVar $k@3854 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182) $k@3186)
            $k@3566)
          $k@3570)
        $k@3758)
      $k@3762))
  (= $t@3766 $t@3574)))
; [exec]
; n := __flatten_77
; [exec]
; __flatten_78 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@3855 $Perm)
(assert ($Perm.isValidVar $k@3855))
(assert ($Perm.isReadVar $k@3855 $Perm.Write))
(push) ; 15
(assert (not (or (= $k@3855 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 15
(assert (<
  $k@3855
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179) $k@3183)
            $k@3201)
          $k@3567)
        $k@3585)
      $k@3759)
    $k@3777)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@3856 $Perm)
(assert ($Perm.isValidVar $k@3856))
(assert ($Perm.isReadVar $k@3856 $Perm.Write))
(push) ; 15
(assert (not (or (= $k@3856 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 15
(assert (<
  $k@3856
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180) $k@3184)
            $k@3202)
          $k@3568)
        $k@3586)
      $k@3760)
    $k@3778)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 15
(assert (not (not (= $t@3772 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 15
; [dead then-branch 505] $t@3772 != Null
(push) ; 15
; [else-branch 505] $t@3772 == Null
(declare-const $k@3857 $Perm)
(assert ($Perm.isValidVar $k@3857))
(assert ($Perm.isReadVar $k@3857 $Perm.Write))
(push) ; 16
(assert (not (or (= $k@3857 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181) $k@3185)
              $k@3565)
            $k@3569)
          $k@3757)
        $k@3761)
      $k@3853)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181) $k@3185)
              $k@3565)
            $k@3569)
          $k@3757)
        $k@3761)
      $k@3853)
    $Perm.No)))
(assert (<
  $k@3857
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181) $k@3185)
            $k@3565)
          $k@3569)
        $k@3757)
      $k@3761)
    $k@3853)))
(declare-const $k@3858 $Perm)
(assert ($Perm.isValidVar $k@3858))
(assert ($Perm.isReadVar $k@3858 $Perm.Write))
(push) ; 16
(assert (not (or (= $k@3858 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182) $k@3186)
              $k@3566)
            $k@3570)
          $k@3758)
        $k@3762)
      $k@3854)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182) $k@3186)
              $k@3566)
            $k@3570)
          $k@3758)
        $k@3762)
      $k@3854)
    $Perm.No)))
(assert (<
  $k@3858
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182) $k@3186)
            $k@3566)
          $k@3570)
        $k@3758)
      $k@3762)
    $k@3854)))
(declare-const sys__result@3859 $Ref)
(declare-const $t@3860 $Snap)
(declare-const $t@3861 $Snap)
(declare-const $t@3862 $Ref)
(assert (= $t@3860 ($Snap.combine $t@3861 ($SortWrappers.$RefTo$Snap $t@3862))))
(declare-const $t@3863 $Snap)
(declare-const $t@3864 $Ref)
(assert (= $t@3861 ($Snap.combine $t@3863 ($SortWrappers.$RefTo$Snap $t@3864))))
(declare-const $t@3865 $Snap)
(declare-const $t@3866 $Snap)
(assert (= $t@3863 ($Snap.combine $t@3865 $t@3866)))
(declare-const $t@3867 $Snap)
(declare-const $t@3868 $Ref)
(assert (= $t@3865 ($Snap.combine $t@3867 ($SortWrappers.$RefTo$Snap $t@3868))))
(declare-const $t@3869 $Snap)
(assert (= $t@3867 ($Snap.combine $t@3869 $Snap.unit)))
(declare-const $t@3870 Int)
(declare-const $t@3871 $Ref)
(assert (=
  $t@3869
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@3870)
    ($SortWrappers.$RefTo$Snap $t@3871))))
(declare-const $t@3872 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@3870)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@3872) $Snap.unit)))
(declare-const $k@3873 $Perm)
(assert ($Perm.isValidVar $k@3873))
(assert ($Perm.isReadVar $k@3873 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                  $k@3183)
                $k@3201)
              $k@3567)
            $k@3585)
          $k@3759)
        $k@3777)
      $k@3855))
  (= $t@3872 $t@3776)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                    $k@3183)
                  $k@3201)
                $k@3567)
              $k@3585)
            $k@3759)
          $k@3777)
        $k@3855)
      $k@3873)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                    $k@3183)
                  $k@3201)
                $k@3567)
              $k@3585)
            $k@3759)
          $k@3777)
        $k@3855)
      $k@3873)
    $Perm.No)))
(assert (> $t@3872 0))
(declare-const $k@3874 $Perm)
(assert ($Perm.isValidVar $k@3874))
(assert ($Perm.isReadVar $k@3874 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                  $k@3184)
                $k@3202)
              $k@3568)
            $k@3586)
          $k@3760)
        $k@3778)
      $k@3856))
  (= $t@3871 $t@3775)))
; [eval] diz.BlockingQueue__count != null
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                    $k@3184)
                  $k@3202)
                $k@3568)
              $k@3586)
            $k@3760)
          $k@3778)
        $k@3856)
      $k@3874)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                    $k@3184)
                  $k@3202)
                $k@3568)
              $k@3586)
            $k@3760)
          $k@3778)
        $k@3856)
      $k@3874)
    $Perm.No)))
(assert (not (= $t@3871 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 16
(assert (not (= $t@3868 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not (= $t@3868 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 16
(push) ; 16
; [then-branch 506] $t@3868 != Null
(assert (not (= $t@3868 $Ref.null)))
(declare-const $k@3875 $Perm)
(assert ($Perm.isValidVar $k@3875))
(assert ($Perm.isReadVar $k@3875 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                  $k@3185)
                $k@3565)
              $k@3569)
            $k@3757)
          $k@3761)
        $k@3853)
      $k@3857))
  (= $t@3864 $t@3768)))
(declare-const $k@3876 $Perm)
(assert ($Perm.isValidVar $k@3876))
(assert ($Perm.isReadVar $k@3876 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                  $k@3186)
                $k@3566)
              $k@3570)
            $k@3758)
          $k@3762)
        $k@3854)
      $k@3858))
  (= $t@3862 $t@3766)))
; [exec]
; o := __flatten_78
; [exec]
; __flatten_79 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@3877 $Perm)
(assert ($Perm.isValidVar $k@3877))
(assert ($Perm.isReadVar $k@3877 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@3877 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@3877
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                  $k@3183)
                $k@3201)
              $k@3567)
            $k@3585)
          $k@3759)
        $k@3777)
      $k@3855)
    $k@3873)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@3878 $Perm)
(assert ($Perm.isValidVar $k@3878))
(assert ($Perm.isReadVar $k@3878 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@3878 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@3878
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                  $k@3184)
                $k@3202)
              $k@3568)
            $k@3586)
          $k@3760)
        $k@3778)
      $k@3856)
    $k@3874)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 17
(assert (not (= $t@3868 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 17
(push) ; 17
; [then-branch 507] $t@3868 != Null
(declare-const $k@3879 $Perm)
(assert ($Perm.isValidVar $k@3879))
(assert ($Perm.isReadVar $k@3879 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@3879 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                    $k@3185)
                  $k@3565)
                $k@3569)
              $k@3757)
            $k@3761)
          $k@3853)
        $k@3857)
      $k@3875)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                    $k@3185)
                  $k@3565)
                $k@3569)
              $k@3757)
            $k@3761)
          $k@3853)
        $k@3857)
      $k@3875)
    $Perm.No)))
(assert (<
  $k@3879
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                  $k@3185)
                $k@3565)
              $k@3569)
            $k@3757)
          $k@3761)
        $k@3853)
      $k@3857)
    $k@3875)))
(declare-const $k@3880 $Perm)
(assert ($Perm.isValidVar $k@3880))
(assert ($Perm.isReadVar $k@3880 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@3880 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                    $k@3186)
                  $k@3566)
                $k@3570)
              $k@3758)
            $k@3762)
          $k@3854)
        $k@3858)
      $k@3876)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                    $k@3186)
                  $k@3566)
                $k@3570)
              $k@3758)
            $k@3762)
          $k@3854)
        $k@3858)
      $k@3876)
    $Perm.No)))
(assert (<
  $k@3880
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                  $k@3186)
                $k@3566)
              $k@3570)
            $k@3758)
          $k@3762)
        $k@3854)
      $k@3858)
    $k@3876)))
(declare-const sys__result@3881 $Ref)
(declare-const $t@3882 $Snap)
(declare-const $t@3883 $Snap)
(declare-const $t@3884 $Ref)
(assert (= $t@3882 ($Snap.combine $t@3883 ($SortWrappers.$RefTo$Snap $t@3884))))
(declare-const $t@3885 $Snap)
(declare-const $t@3886 $Ref)
(assert (= $t@3883 ($Snap.combine $t@3885 ($SortWrappers.$RefTo$Snap $t@3886))))
(declare-const $t@3887 $Snap)
(declare-const $t@3888 $Snap)
(assert (= $t@3885 ($Snap.combine $t@3887 $t@3888)))
(declare-const $t@3889 $Snap)
(declare-const $t@3890 $Ref)
(assert (= $t@3887 ($Snap.combine $t@3889 ($SortWrappers.$RefTo$Snap $t@3890))))
(declare-const $t@3891 $Snap)
(assert (= $t@3889 ($Snap.combine $t@3891 $Snap.unit)))
(declare-const $t@3892 Int)
(declare-const $t@3893 $Ref)
(assert (=
  $t@3891
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@3892)
    ($SortWrappers.$RefTo$Snap $t@3893))))
(declare-const $t@3894 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@3892)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@3894) $Snap.unit)))
(declare-const $k@3895 $Perm)
(assert ($Perm.isValidVar $k@3895))
(assert ($Perm.isReadVar $k@3895 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                      $k@3183)
                    $k@3201)
                  $k@3567)
                $k@3585)
              $k@3759)
            $k@3777)
          $k@3855)
        $k@3873)
      $k@3877))
  (= $t@3894 $t@3872)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                        $k@3183)
                      $k@3201)
                    $k@3567)
                  $k@3585)
                $k@3759)
              $k@3777)
            $k@3855)
          $k@3873)
        $k@3877)
      $k@3895)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                        $k@3183)
                      $k@3201)
                    $k@3567)
                  $k@3585)
                $k@3759)
              $k@3777)
            $k@3855)
          $k@3873)
        $k@3877)
      $k@3895)
    $Perm.No)))
(assert (> $t@3894 0))
(declare-const $k@3896 $Perm)
(assert ($Perm.isValidVar $k@3896))
(assert ($Perm.isReadVar $k@3896 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                      $k@3184)
                    $k@3202)
                  $k@3568)
                $k@3586)
              $k@3760)
            $k@3778)
          $k@3856)
        $k@3874)
      $k@3878))
  (= $t@3893 $t@3871)))
; [eval] diz.BlockingQueue__count != null
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                        $k@3184)
                      $k@3202)
                    $k@3568)
                  $k@3586)
                $k@3760)
              $k@3778)
            $k@3856)
          $k@3874)
        $k@3878)
      $k@3896)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                        $k@3184)
                      $k@3202)
                    $k@3568)
                  $k@3586)
                $k@3760)
              $k@3778)
            $k@3856)
          $k@3874)
        $k@3878)
      $k@3896)
    $Perm.No)))
(assert (not (= $t@3893 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 18
(assert (not (= $t@3890 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not (= $t@3890 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
; [then-branch 508] $t@3890 != Null
(assert (not (= $t@3890 $Ref.null)))
(declare-const $k@3897 $Perm)
(assert ($Perm.isValidVar $k@3897))
(assert ($Perm.isReadVar $k@3897 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                      $k@3185)
                    $k@3565)
                  $k@3569)
                $k@3757)
              $k@3761)
            $k@3853)
          $k@3857)
        $k@3875)
      $k@3879))
  (= $t@3886 $t@3864)))
(declare-const $k@3898 $Perm)
(assert ($Perm.isValidVar $k@3898))
(assert ($Perm.isReadVar $k@3898 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                      $k@3186)
                    $k@3566)
                  $k@3570)
                $k@3758)
              $k@3762)
            $k@3854)
          $k@3858)
        $k@3876)
      $k@3880))
  (= $t@3884 $t@3862)))
; [exec]
; p := __flatten_79
(pop) ; 18
(push) ; 18
; [else-branch 508] $t@3890 == Null
(assert (= $t@3890 $Ref.null))
(declare-const $k@3899 $Perm)
(assert ($Perm.isValidVar $k@3899))
(assert ($Perm.isReadVar $k@3899 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                      $k@3185)
                    $k@3565)
                  $k@3569)
                $k@3757)
              $k@3761)
            $k@3853)
          $k@3857)
        $k@3875)
      $k@3879))
  (= $t@3886 $t@3864)))
(declare-const $k@3900 $Perm)
(assert ($Perm.isValidVar $k@3900))
(assert ($Perm.isReadVar $k@3900 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                      $k@3186)
                    $k@3566)
                  $k@3570)
                $k@3758)
              $k@3762)
            $k@3854)
          $k@3858)
        $k@3876)
      $k@3880))
  (= $t@3884 $t@3862)))
; [exec]
; p := __flatten_79
(pop) ; 18
(pop) ; 17
; [dead else-branch 507] $t@3868 == Null
(pop) ; 16
(push) ; 16
; [else-branch 506] $t@3868 == Null
(assert (= $t@3868 $Ref.null))
(declare-const $k@3901 $Perm)
(assert ($Perm.isValidVar $k@3901))
(assert ($Perm.isReadVar $k@3901 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                  $k@3185)
                $k@3565)
              $k@3569)
            $k@3757)
          $k@3761)
        $k@3853)
      $k@3857))
  (= $t@3864 $t@3768)))
(declare-const $k@3902 $Perm)
(assert ($Perm.isValidVar $k@3902))
(assert ($Perm.isReadVar $k@3902 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                  $k@3186)
                $k@3566)
              $k@3570)
            $k@3758)
          $k@3762)
        $k@3854)
      $k@3858))
  (= $t@3862 $t@3766)))
; [exec]
; o := __flatten_78
; [exec]
; __flatten_79 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@3903 $Perm)
(assert ($Perm.isValidVar $k@3903))
(assert ($Perm.isReadVar $k@3903 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@3903 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@3903
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                  $k@3183)
                $k@3201)
              $k@3567)
            $k@3585)
          $k@3759)
        $k@3777)
      $k@3855)
    $k@3873)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@3904 $Perm)
(assert ($Perm.isValidVar $k@3904))
(assert ($Perm.isReadVar $k@3904 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@3904 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@3904
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                  $k@3184)
                $k@3202)
              $k@3568)
            $k@3586)
          $k@3760)
        $k@3778)
      $k@3856)
    $k@3874)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 17
(assert (not (not (= $t@3868 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 17
; [dead then-branch 509] $t@3868 != Null
(push) ; 17
; [else-branch 509] $t@3868 == Null
(declare-const $k@3905 $Perm)
(assert ($Perm.isValidVar $k@3905))
(assert ($Perm.isReadVar $k@3905 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@3905 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                    $k@3185)
                  $k@3565)
                $k@3569)
              $k@3757)
            $k@3761)
          $k@3853)
        $k@3857)
      $k@3901)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                    $k@3185)
                  $k@3565)
                $k@3569)
              $k@3757)
            $k@3761)
          $k@3853)
        $k@3857)
      $k@3901)
    $Perm.No)))
(assert (<
  $k@3905
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                  $k@3185)
                $k@3565)
              $k@3569)
            $k@3757)
          $k@3761)
        $k@3853)
      $k@3857)
    $k@3901)))
(declare-const $k@3906 $Perm)
(assert ($Perm.isValidVar $k@3906))
(assert ($Perm.isReadVar $k@3906 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@3906 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                    $k@3186)
                  $k@3566)
                $k@3570)
              $k@3758)
            $k@3762)
          $k@3854)
        $k@3858)
      $k@3902)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                    $k@3186)
                  $k@3566)
                $k@3570)
              $k@3758)
            $k@3762)
          $k@3854)
        $k@3858)
      $k@3902)
    $Perm.No)))
(assert (<
  $k@3906
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                  $k@3186)
                $k@3566)
              $k@3570)
            $k@3758)
          $k@3762)
        $k@3854)
      $k@3858)
    $k@3902)))
(declare-const sys__result@3907 $Ref)
(declare-const $t@3908 $Snap)
(declare-const $t@3909 $Snap)
(declare-const $t@3910 $Ref)
(assert (= $t@3908 ($Snap.combine $t@3909 ($SortWrappers.$RefTo$Snap $t@3910))))
(declare-const $t@3911 $Snap)
(declare-const $t@3912 $Ref)
(assert (= $t@3909 ($Snap.combine $t@3911 ($SortWrappers.$RefTo$Snap $t@3912))))
(declare-const $t@3913 $Snap)
(declare-const $t@3914 $Snap)
(assert (= $t@3911 ($Snap.combine $t@3913 $t@3914)))
(declare-const $t@3915 $Snap)
(declare-const $t@3916 $Ref)
(assert (= $t@3913 ($Snap.combine $t@3915 ($SortWrappers.$RefTo$Snap $t@3916))))
(declare-const $t@3917 $Snap)
(assert (= $t@3915 ($Snap.combine $t@3917 $Snap.unit)))
(declare-const $t@3918 Int)
(declare-const $t@3919 $Ref)
(assert (=
  $t@3917
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@3918)
    ($SortWrappers.$RefTo$Snap $t@3919))))
(declare-const $t@3920 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@3918)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@3920) $Snap.unit)))
(declare-const $k@3921 $Perm)
(assert ($Perm.isValidVar $k@3921))
(assert ($Perm.isReadVar $k@3921 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                      $k@3183)
                    $k@3201)
                  $k@3567)
                $k@3585)
              $k@3759)
            $k@3777)
          $k@3855)
        $k@3873)
      $k@3903))
  (= $t@3920 $t@3872)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                        $k@3183)
                      $k@3201)
                    $k@3567)
                  $k@3585)
                $k@3759)
              $k@3777)
            $k@3855)
          $k@3873)
        $k@3903)
      $k@3921)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                        $k@3183)
                      $k@3201)
                    $k@3567)
                  $k@3585)
                $k@3759)
              $k@3777)
            $k@3855)
          $k@3873)
        $k@3903)
      $k@3921)
    $Perm.No)))
(assert (> $t@3920 0))
(declare-const $k@3922 $Perm)
(assert ($Perm.isValidVar $k@3922))
(assert ($Perm.isReadVar $k@3922 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                      $k@3184)
                    $k@3202)
                  $k@3568)
                $k@3586)
              $k@3760)
            $k@3778)
          $k@3856)
        $k@3874)
      $k@3904))
  (= $t@3919 $t@3871)))
; [eval] diz.BlockingQueue__count != null
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                        $k@3184)
                      $k@3202)
                    $k@3568)
                  $k@3586)
                $k@3760)
              $k@3778)
            $k@3856)
          $k@3874)
        $k@3904)
      $k@3922)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                        $k@3184)
                      $k@3202)
                    $k@3568)
                  $k@3586)
                $k@3760)
              $k@3778)
            $k@3856)
          $k@3874)
        $k@3904)
      $k@3922)
    $Perm.No)))
(assert (not (= $t@3919 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 18
(assert (not (= $t@3916 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not (= $t@3916 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
; [then-branch 510] $t@3916 != Null
(assert (not (= $t@3916 $Ref.null)))
(declare-const $k@3923 $Perm)
(assert ($Perm.isValidVar $k@3923))
(assert ($Perm.isReadVar $k@3923 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                      $k@3185)
                    $k@3565)
                  $k@3569)
                $k@3757)
              $k@3761)
            $k@3853)
          $k@3857)
        $k@3901)
      $k@3905))
  (= $t@3912 $t@3864)))
(declare-const $k@3924 $Perm)
(assert ($Perm.isValidVar $k@3924))
(assert ($Perm.isReadVar $k@3924 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                      $k@3186)
                    $k@3566)
                  $k@3570)
                $k@3758)
              $k@3762)
            $k@3854)
          $k@3858)
        $k@3902)
      $k@3906))
  (= $t@3910 $t@3862)))
; [exec]
; p := __flatten_79
(pop) ; 18
(push) ; 18
; [else-branch 510] $t@3916 == Null
(assert (= $t@3916 $Ref.null))
(declare-const $k@3925 $Perm)
(assert ($Perm.isValidVar $k@3925))
(assert ($Perm.isReadVar $k@3925 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3181)
                      $k@3185)
                    $k@3565)
                  $k@3569)
                $k@3757)
              $k@3761)
            $k@3853)
          $k@3857)
        $k@3901)
      $k@3905))
  (= $t@3912 $t@3864)))
(declare-const $k@3926 $Perm)
(assert ($Perm.isValidVar $k@3926))
(assert ($Perm.isReadVar $k@3926 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3182)
                      $k@3186)
                    $k@3566)
                  $k@3570)
                $k@3758)
              $k@3762)
            $k@3854)
          $k@3858)
        $k@3902)
      $k@3906))
  (= $t@3910 $t@3862)))
; [exec]
; p := __flatten_79
(pop) ; 18
(pop) ; 17
(pop) ; 16
(pop) ; 15
(pop) ; 14
(pop) ; 13
(pop) ; 12
(pop) ; 11
(pop) ; 10
(pop) ; 9
; [dead else-branch 449] $t@3174 == Null
(pop) ; 8
(push) ; 8
; [else-branch 448] $t@3174 == Null
(assert (= $t@3174 $Ref.null))
(declare-const $k@3927 $Perm)
(assert ($Perm.isValidVar $k@3927))
(assert ($Perm.isReadVar $k@3927 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163))
  (= $t@3170 $t@3148)))
(declare-const $k@3928 $Perm)
(assert ($Perm.isValidVar $k@3928))
(assert ($Perm.isReadVar $k@3928 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164))
  (= $t@3168 $t@3146)))
; [exec]
; b := __flatten_74
; [exec]
; __flatten_75 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@3929 $Perm)
(assert ($Perm.isValidVar $k@3929))
(assert ($Perm.isReadVar $k@3929 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@3929 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@3929 (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@3930 $Perm)
(assert ($Perm.isValidVar $k@3930))
(assert ($Perm.isReadVar $k@3930 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@3930 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@3930 (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 9
(assert (not (not (= $t@3174 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
; [dead then-branch 511] $t@3174 != Null
(push) ; 9
; [else-branch 511] $t@3174 == Null
(declare-const $k@3931 $Perm)
(assert ($Perm.isValidVar $k@3931))
(assert ($Perm.isReadVar $k@3931 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@3931 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not (= (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927) $Perm.No)))
(assert (< $k@3931 (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)))
(declare-const $k@3932 $Perm)
(assert ($Perm.isValidVar $k@3932))
(assert ($Perm.isReadVar $k@3932 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@3932 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not (= (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928) $Perm.No)))
(assert (< $k@3932 (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)))
(declare-const sys__result@3933 $Ref)
(declare-const $t@3934 $Snap)
(declare-const $t@3935 $Snap)
(declare-const $t@3936 $Ref)
(assert (= $t@3934 ($Snap.combine $t@3935 ($SortWrappers.$RefTo$Snap $t@3936))))
(declare-const $t@3937 $Snap)
(declare-const $t@3938 $Ref)
(assert (= $t@3935 ($Snap.combine $t@3937 ($SortWrappers.$RefTo$Snap $t@3938))))
(declare-const $t@3939 $Snap)
(declare-const $t@3940 $Snap)
(assert (= $t@3937 ($Snap.combine $t@3939 $t@3940)))
(declare-const $t@3941 $Snap)
(declare-const $t@3942 $Ref)
(assert (= $t@3939 ($Snap.combine $t@3941 ($SortWrappers.$RefTo$Snap $t@3942))))
(declare-const $t@3943 $Snap)
(assert (= $t@3941 ($Snap.combine $t@3943 $Snap.unit)))
(declare-const $t@3944 Int)
(declare-const $t@3945 $Ref)
(assert (=
  $t@3943
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@3944)
    ($SortWrappers.$RefTo$Snap $t@3945))))
(declare-const $t@3946 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@3944)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@3946) $Snap.unit)))
(declare-const $k@3947 $Perm)
(assert ($Perm.isValidVar $k@3947))
(assert ($Perm.isReadVar $k@3947 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179) $k@3929))
  (= $t@3946 $t@3178)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 10
(assert (not (not
  (=
    (+
      (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179) $k@3929)
      $k@3947)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not
  (=
    (+
      (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179) $k@3929)
      $k@3947)
    $Perm.No)))
(assert (> $t@3946 0))
(declare-const $k@3948 $Perm)
(assert ($Perm.isValidVar $k@3948))
(assert ($Perm.isReadVar $k@3948 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180) $k@3930))
  (= $t@3945 $t@3177)))
; [eval] diz.BlockingQueue__count != null
(push) ; 10
(assert (not (not
  (=
    (+
      (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180) $k@3930)
      $k@3948)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not
  (=
    (+
      (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180) $k@3930)
      $k@3948)
    $Perm.No)))
(assert (not (= $t@3945 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 10
(assert (not (= $t@3942 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= $t@3942 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 10
(push) ; 10
; [then-branch 512] $t@3942 != Null
(assert (not (= $t@3942 $Ref.null)))
(declare-const $k@3949 $Perm)
(assert ($Perm.isValidVar $k@3949))
(assert ($Perm.isReadVar $k@3949 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927) $k@3931))
  (= $t@3938 $t@3170)))
(declare-const $k@3950 $Perm)
(assert ($Perm.isValidVar $k@3950))
(assert ($Perm.isReadVar $k@3950 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928) $k@3932))
  (= $t@3936 $t@3168)))
; [exec]
; m := __flatten_75
; [exec]
; __flatten_76 := BlockingQueue__offer(queue, 7)
; [eval] diz != null
(declare-const $k@3951 $Perm)
(assert ($Perm.isValidVar $k@3951))
(assert ($Perm.isReadVar $k@3951 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@3951 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (<
  $k@3951
  (+ (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179) $k@3929) $k@3947)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@3952 $Perm)
(assert ($Perm.isValidVar $k@3952))
(assert ($Perm.isReadVar $k@3952 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@3952 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (<
  $k@3952
  (+ (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180) $k@3930) $k@3948)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 11
(assert (not (= $t@3942 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 11
(push) ; 11
; [then-branch 513] $t@3942 != Null
(declare-const $k@3953 $Perm)
(assert ($Perm.isValidVar $k@3953))
(assert ($Perm.isReadVar $k@3953 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@3953 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(push) ; 12
(assert (not (not
  (=
    (+
      (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927) $k@3931)
      $k@3949)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927) $k@3931)
      $k@3949)
    $Perm.No)))
(assert (<
  $k@3953
  (+ (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927) $k@3931) $k@3949)))
(declare-const $k@3954 $Perm)
(assert ($Perm.isValidVar $k@3954))
(assert ($Perm.isReadVar $k@3954 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@3954 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(push) ; 12
(assert (not (not
  (=
    (+
      (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928) $k@3932)
      $k@3950)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928) $k@3932)
      $k@3950)
    $Perm.No)))
(assert (<
  $k@3954
  (+ (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928) $k@3932) $k@3950)))
(declare-const sys__result@3955 Bool)
(declare-const $t@3956 $Snap)
(declare-const $t@3957 $Snap)
(declare-const $t@3958 $Ref)
(assert (= $t@3956 ($Snap.combine $t@3957 ($SortWrappers.$RefTo$Snap $t@3958))))
(declare-const $t@3959 $Snap)
(declare-const $t@3960 $Ref)
(assert (= $t@3957 ($Snap.combine $t@3959 ($SortWrappers.$RefTo$Snap $t@3960))))
(declare-const $t@3961 $Snap)
(declare-const $t@3962 $Snap)
(assert (= $t@3959 ($Snap.combine $t@3961 $t@3962)))
(declare-const $t@3963 $Snap)
(declare-const $t@3964 $Ref)
(assert (= $t@3961 ($Snap.combine $t@3963 ($SortWrappers.$RefTo$Snap $t@3964))))
(declare-const $t@3965 $Snap)
(assert (= $t@3963 ($Snap.combine $t@3965 $Snap.unit)))
(declare-const $t@3966 Int)
(declare-const $t@3967 $Ref)
(assert (=
  $t@3965
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@3966)
    ($SortWrappers.$RefTo$Snap $t@3967))))
(declare-const $t@3968 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@3966)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@3968) $Snap.unit)))
(declare-const $k@3969 $Perm)
(assert ($Perm.isValidVar $k@3969))
(assert ($Perm.isReadVar $k@3969 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179) $k@3929)
        $k@3947)
      $k@3951))
  (= $t@3968 $t@3946)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 12
(assert (not (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179) $k@3929)
          $k@3947)
        $k@3951)
      $k@3969)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179) $k@3929)
          $k@3947)
        $k@3951)
      $k@3969)
    $Perm.No)))
(assert (> $t@3968 0))
(declare-const $k@3970 $Perm)
(assert ($Perm.isValidVar $k@3970))
(assert ($Perm.isReadVar $k@3970 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180) $k@3930)
        $k@3948)
      $k@3952))
  (= $t@3967 $t@3945)))
; [eval] diz.BlockingQueue__count != null
(push) ; 12
(assert (not (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180) $k@3930)
          $k@3948)
        $k@3952)
      $k@3970)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180) $k@3930)
          $k@3948)
        $k@3952)
      $k@3970)
    $Perm.No)))
(assert (not (= $t@3967 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 12
(assert (not (= $t@3964 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 12
(push) ; 12
(assert (not (not (= $t@3964 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 12
(push) ; 12
; [then-branch 514] $t@3964 != Null
(assert (not (= $t@3964 $Ref.null)))
(declare-const $k@3971 $Perm)
(assert ($Perm.isValidVar $k@3971))
(assert ($Perm.isReadVar $k@3971 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927) $k@3931)
        $k@3949)
      $k@3953))
  (= $t@3960 $t@3938)))
(declare-const $k@3972 $Perm)
(assert ($Perm.isValidVar $k@3972))
(assert ($Perm.isReadVar $k@3972 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928) $k@3932)
        $k@3950)
      $k@3954))
  (= $t@3958 $t@3936)))
; [exec]
; b := __flatten_76
; [exec]
; __flatten_77 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@3973 $Perm)
(assert ($Perm.isValidVar $k@3973))
(assert ($Perm.isReadVar $k@3973 $Perm.Write))
(push) ; 13
(assert (not (or (= $k@3973 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 13
(assert (<
  $k@3973
  (+
    (-
      (+
        (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179) $k@3929)
        $k@3947)
      $k@3951)
    $k@3969)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@3974 $Perm)
(assert ($Perm.isValidVar $k@3974))
(assert ($Perm.isReadVar $k@3974 $Perm.Write))
(push) ; 13
(assert (not (or (= $k@3974 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 13
(assert (<
  $k@3974
  (+
    (-
      (+
        (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180) $k@3930)
        $k@3948)
      $k@3952)
    $k@3970)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 13
(assert (not (= $t@3964 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 13
(push) ; 13
; [then-branch 515] $t@3964 != Null
(declare-const $k@3975 $Perm)
(assert ($Perm.isValidVar $k@3975))
(assert ($Perm.isReadVar $k@3975 $Perm.Write))
(push) ; 14
(assert (not (or (= $k@3975 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(push) ; 14
(assert (not (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927) $k@3931)
          $k@3949)
        $k@3953)
      $k@3971)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(assert (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927) $k@3931)
          $k@3949)
        $k@3953)
      $k@3971)
    $Perm.No)))
(assert (<
  $k@3975
  (+
    (-
      (+
        (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927) $k@3931)
        $k@3949)
      $k@3953)
    $k@3971)))
(declare-const $k@3976 $Perm)
(assert ($Perm.isValidVar $k@3976))
(assert ($Perm.isReadVar $k@3976 $Perm.Write))
(push) ; 14
(assert (not (or (= $k@3976 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(push) ; 14
(assert (not (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928) $k@3932)
          $k@3950)
        $k@3954)
      $k@3972)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(assert (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928) $k@3932)
          $k@3950)
        $k@3954)
      $k@3972)
    $Perm.No)))
(assert (<
  $k@3976
  (+
    (-
      (+
        (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928) $k@3932)
        $k@3950)
      $k@3954)
    $k@3972)))
(declare-const sys__result@3977 $Ref)
(declare-const $t@3978 $Snap)
(declare-const $t@3979 $Snap)
(declare-const $t@3980 $Ref)
(assert (= $t@3978 ($Snap.combine $t@3979 ($SortWrappers.$RefTo$Snap $t@3980))))
(declare-const $t@3981 $Snap)
(declare-const $t@3982 $Ref)
(assert (= $t@3979 ($Snap.combine $t@3981 ($SortWrappers.$RefTo$Snap $t@3982))))
(declare-const $t@3983 $Snap)
(declare-const $t@3984 $Snap)
(assert (= $t@3981 ($Snap.combine $t@3983 $t@3984)))
(declare-const $t@3985 $Snap)
(declare-const $t@3986 $Ref)
(assert (= $t@3983 ($Snap.combine $t@3985 ($SortWrappers.$RefTo$Snap $t@3986))))
(declare-const $t@3987 $Snap)
(assert (= $t@3985 ($Snap.combine $t@3987 $Snap.unit)))
(declare-const $t@3988 Int)
(declare-const $t@3989 $Ref)
(assert (=
  $t@3987
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@3988)
    ($SortWrappers.$RefTo$Snap $t@3989))))
(declare-const $t@3990 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@3988)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@3990) $Snap.unit)))
(declare-const $k@3991 $Perm)
(assert ($Perm.isValidVar $k@3991))
(assert ($Perm.isReadVar $k@3991 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179) $k@3929)
            $k@3947)
          $k@3951)
        $k@3969)
      $k@3973))
  (= $t@3990 $t@3968)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 14
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179) $k@3929)
              $k@3947)
            $k@3951)
          $k@3969)
        $k@3973)
      $k@3991)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179) $k@3929)
              $k@3947)
            $k@3951)
          $k@3969)
        $k@3973)
      $k@3991)
    $Perm.No)))
(assert (> $t@3990 0))
(declare-const $k@3992 $Perm)
(assert ($Perm.isValidVar $k@3992))
(assert ($Perm.isReadVar $k@3992 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180) $k@3930)
            $k@3948)
          $k@3952)
        $k@3970)
      $k@3974))
  (= $t@3989 $t@3967)))
; [eval] diz.BlockingQueue__count != null
(push) ; 14
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180) $k@3930)
              $k@3948)
            $k@3952)
          $k@3970)
        $k@3974)
      $k@3992)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180) $k@3930)
              $k@3948)
            $k@3952)
          $k@3970)
        $k@3974)
      $k@3992)
    $Perm.No)))
(assert (not (= $t@3989 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 14
(assert (not (= $t@3986 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 14
(push) ; 14
(assert (not (not (= $t@3986 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 14
(push) ; 14
; [then-branch 516] $t@3986 != Null
(assert (not (= $t@3986 $Ref.null)))
(declare-const $k@3993 $Perm)
(assert ($Perm.isValidVar $k@3993))
(assert ($Perm.isReadVar $k@3993 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927) $k@3931)
            $k@3949)
          $k@3953)
        $k@3971)
      $k@3975))
  (= $t@3982 $t@3960)))
(declare-const $k@3994 $Perm)
(assert ($Perm.isValidVar $k@3994))
(assert ($Perm.isReadVar $k@3994 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928) $k@3932)
            $k@3950)
          $k@3954)
        $k@3972)
      $k@3976))
  (= $t@3980 $t@3958)))
; [exec]
; n := __flatten_77
; [exec]
; __flatten_78 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@3995 $Perm)
(assert ($Perm.isValidVar $k@3995))
(assert ($Perm.isReadVar $k@3995 $Perm.Write))
(push) ; 15
(assert (not (or (= $k@3995 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 15
(assert (<
  $k@3995
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179) $k@3929)
            $k@3947)
          $k@3951)
        $k@3969)
      $k@3973)
    $k@3991)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@3996 $Perm)
(assert ($Perm.isValidVar $k@3996))
(assert ($Perm.isReadVar $k@3996 $Perm.Write))
(push) ; 15
(assert (not (or (= $k@3996 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 15
(assert (<
  $k@3996
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180) $k@3930)
            $k@3948)
          $k@3952)
        $k@3970)
      $k@3974)
    $k@3992)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 15
(assert (not (= $t@3986 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 15
(push) ; 15
; [then-branch 517] $t@3986 != Null
(declare-const $k@3997 $Perm)
(assert ($Perm.isValidVar $k@3997))
(assert ($Perm.isReadVar $k@3997 $Perm.Write))
(push) ; 16
(assert (not (or (= $k@3997 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927) $k@3931)
              $k@3949)
            $k@3953)
          $k@3971)
        $k@3975)
      $k@3993)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927) $k@3931)
              $k@3949)
            $k@3953)
          $k@3971)
        $k@3975)
      $k@3993)
    $Perm.No)))
(assert (<
  $k@3997
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927) $k@3931)
            $k@3949)
          $k@3953)
        $k@3971)
      $k@3975)
    $k@3993)))
(declare-const $k@3998 $Perm)
(assert ($Perm.isValidVar $k@3998))
(assert ($Perm.isReadVar $k@3998 $Perm.Write))
(push) ; 16
(assert (not (or (= $k@3998 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928) $k@3932)
              $k@3950)
            $k@3954)
          $k@3972)
        $k@3976)
      $k@3994)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928) $k@3932)
              $k@3950)
            $k@3954)
          $k@3972)
        $k@3976)
      $k@3994)
    $Perm.No)))
(assert (<
  $k@3998
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928) $k@3932)
            $k@3950)
          $k@3954)
        $k@3972)
      $k@3976)
    $k@3994)))
(declare-const sys__result@3999 $Ref)
(declare-const $t@4000 $Snap)
(declare-const $t@4001 $Snap)
(declare-const $t@4002 $Ref)
(assert (= $t@4000 ($Snap.combine $t@4001 ($SortWrappers.$RefTo$Snap $t@4002))))
(declare-const $t@4003 $Snap)
(declare-const $t@4004 $Ref)
(assert (= $t@4001 ($Snap.combine $t@4003 ($SortWrappers.$RefTo$Snap $t@4004))))
(declare-const $t@4005 $Snap)
(declare-const $t@4006 $Snap)
(assert (= $t@4003 ($Snap.combine $t@4005 $t@4006)))
(declare-const $t@4007 $Snap)
(declare-const $t@4008 $Ref)
(assert (= $t@4005 ($Snap.combine $t@4007 ($SortWrappers.$RefTo$Snap $t@4008))))
(declare-const $t@4009 $Snap)
(assert (= $t@4007 ($Snap.combine $t@4009 $Snap.unit)))
(declare-const $t@4010 Int)
(declare-const $t@4011 $Ref)
(assert (=
  $t@4009
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@4010)
    ($SortWrappers.$RefTo$Snap $t@4011))))
(declare-const $t@4012 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@4010)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@4012) $Snap.unit)))
(declare-const $k@4013 $Perm)
(assert ($Perm.isValidVar $k@4013))
(assert ($Perm.isReadVar $k@4013 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                  $k@3929)
                $k@3947)
              $k@3951)
            $k@3969)
          $k@3973)
        $k@3991)
      $k@3995))
  (= $t@4012 $t@3990)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                    $k@3929)
                  $k@3947)
                $k@3951)
              $k@3969)
            $k@3973)
          $k@3991)
        $k@3995)
      $k@4013)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                    $k@3929)
                  $k@3947)
                $k@3951)
              $k@3969)
            $k@3973)
          $k@3991)
        $k@3995)
      $k@4013)
    $Perm.No)))
(assert (> $t@4012 0))
(declare-const $k@4014 $Perm)
(assert ($Perm.isValidVar $k@4014))
(assert ($Perm.isReadVar $k@4014 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                  $k@3930)
                $k@3948)
              $k@3952)
            $k@3970)
          $k@3974)
        $k@3992)
      $k@3996))
  (= $t@4011 $t@3989)))
; [eval] diz.BlockingQueue__count != null
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                    $k@3930)
                  $k@3948)
                $k@3952)
              $k@3970)
            $k@3974)
          $k@3992)
        $k@3996)
      $k@4014)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                    $k@3930)
                  $k@3948)
                $k@3952)
              $k@3970)
            $k@3974)
          $k@3992)
        $k@3996)
      $k@4014)
    $Perm.No)))
(assert (not (= $t@4011 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 16
(assert (not (= $t@4008 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not (= $t@4008 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 16
(push) ; 16
; [then-branch 518] $t@4008 != Null
(assert (not (= $t@4008 $Ref.null)))
(declare-const $k@4015 $Perm)
(assert ($Perm.isValidVar $k@4015))
(assert ($Perm.isReadVar $k@4015 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                  $k@3931)
                $k@3949)
              $k@3953)
            $k@3971)
          $k@3975)
        $k@3993)
      $k@3997))
  (= $t@4004 $t@3982)))
(declare-const $k@4016 $Perm)
(assert ($Perm.isValidVar $k@4016))
(assert ($Perm.isReadVar $k@4016 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                  $k@3932)
                $k@3950)
              $k@3954)
            $k@3972)
          $k@3976)
        $k@3994)
      $k@3998))
  (= $t@4002 $t@3980)))
; [exec]
; o := __flatten_78
; [exec]
; __flatten_79 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@4017 $Perm)
(assert ($Perm.isValidVar $k@4017))
(assert ($Perm.isReadVar $k@4017 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@4017 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@4017
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                  $k@3929)
                $k@3947)
              $k@3951)
            $k@3969)
          $k@3973)
        $k@3991)
      $k@3995)
    $k@4013)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@4018 $Perm)
(assert ($Perm.isValidVar $k@4018))
(assert ($Perm.isReadVar $k@4018 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@4018 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@4018
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                  $k@3930)
                $k@3948)
              $k@3952)
            $k@3970)
          $k@3974)
        $k@3992)
      $k@3996)
    $k@4014)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 17
(assert (not (= $t@4008 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 17
(push) ; 17
; [then-branch 519] $t@4008 != Null
(declare-const $k@4019 $Perm)
(assert ($Perm.isValidVar $k@4019))
(assert ($Perm.isReadVar $k@4019 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@4019 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                    $k@3931)
                  $k@3949)
                $k@3953)
              $k@3971)
            $k@3975)
          $k@3993)
        $k@3997)
      $k@4015)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                    $k@3931)
                  $k@3949)
                $k@3953)
              $k@3971)
            $k@3975)
          $k@3993)
        $k@3997)
      $k@4015)
    $Perm.No)))
(assert (<
  $k@4019
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                  $k@3931)
                $k@3949)
              $k@3953)
            $k@3971)
          $k@3975)
        $k@3993)
      $k@3997)
    $k@4015)))
(declare-const $k@4020 $Perm)
(assert ($Perm.isValidVar $k@4020))
(assert ($Perm.isReadVar $k@4020 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@4020 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                    $k@3932)
                  $k@3950)
                $k@3954)
              $k@3972)
            $k@3976)
          $k@3994)
        $k@3998)
      $k@4016)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                    $k@3932)
                  $k@3950)
                $k@3954)
              $k@3972)
            $k@3976)
          $k@3994)
        $k@3998)
      $k@4016)
    $Perm.No)))
(assert (<
  $k@4020
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                  $k@3932)
                $k@3950)
              $k@3954)
            $k@3972)
          $k@3976)
        $k@3994)
      $k@3998)
    $k@4016)))
(declare-const sys__result@4021 $Ref)
(declare-const $t@4022 $Snap)
(declare-const $t@4023 $Snap)
(declare-const $t@4024 $Ref)
(assert (= $t@4022 ($Snap.combine $t@4023 ($SortWrappers.$RefTo$Snap $t@4024))))
(declare-const $t@4025 $Snap)
(declare-const $t@4026 $Ref)
(assert (= $t@4023 ($Snap.combine $t@4025 ($SortWrappers.$RefTo$Snap $t@4026))))
(declare-const $t@4027 $Snap)
(declare-const $t@4028 $Snap)
(assert (= $t@4025 ($Snap.combine $t@4027 $t@4028)))
(declare-const $t@4029 $Snap)
(declare-const $t@4030 $Ref)
(assert (= $t@4027 ($Snap.combine $t@4029 ($SortWrappers.$RefTo$Snap $t@4030))))
(declare-const $t@4031 $Snap)
(assert (= $t@4029 ($Snap.combine $t@4031 $Snap.unit)))
(declare-const $t@4032 Int)
(declare-const $t@4033 $Ref)
(assert (=
  $t@4031
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@4032)
    ($SortWrappers.$RefTo$Snap $t@4033))))
(declare-const $t@4034 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@4032)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@4034) $Snap.unit)))
(declare-const $k@4035 $Perm)
(assert ($Perm.isValidVar $k@4035))
(assert ($Perm.isReadVar $k@4035 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                      $k@3929)
                    $k@3947)
                  $k@3951)
                $k@3969)
              $k@3973)
            $k@3991)
          $k@3995)
        $k@4013)
      $k@4017))
  (= $t@4034 $t@4012)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                        $k@3929)
                      $k@3947)
                    $k@3951)
                  $k@3969)
                $k@3973)
              $k@3991)
            $k@3995)
          $k@4013)
        $k@4017)
      $k@4035)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                        $k@3929)
                      $k@3947)
                    $k@3951)
                  $k@3969)
                $k@3973)
              $k@3991)
            $k@3995)
          $k@4013)
        $k@4017)
      $k@4035)
    $Perm.No)))
(assert (> $t@4034 0))
(declare-const $k@4036 $Perm)
(assert ($Perm.isValidVar $k@4036))
(assert ($Perm.isReadVar $k@4036 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                      $k@3930)
                    $k@3948)
                  $k@3952)
                $k@3970)
              $k@3974)
            $k@3992)
          $k@3996)
        $k@4014)
      $k@4018))
  (= $t@4033 $t@4011)))
; [eval] diz.BlockingQueue__count != null
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                        $k@3930)
                      $k@3948)
                    $k@3952)
                  $k@3970)
                $k@3974)
              $k@3992)
            $k@3996)
          $k@4014)
        $k@4018)
      $k@4036)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                        $k@3930)
                      $k@3948)
                    $k@3952)
                  $k@3970)
                $k@3974)
              $k@3992)
            $k@3996)
          $k@4014)
        $k@4018)
      $k@4036)
    $Perm.No)))
(assert (not (= $t@4033 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 18
(assert (not (= $t@4030 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not (= $t@4030 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
; [then-branch 520] $t@4030 != Null
(assert (not (= $t@4030 $Ref.null)))
(declare-const $k@4037 $Perm)
(assert ($Perm.isValidVar $k@4037))
(assert ($Perm.isReadVar $k@4037 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                      $k@3931)
                    $k@3949)
                  $k@3953)
                $k@3971)
              $k@3975)
            $k@3993)
          $k@3997)
        $k@4015)
      $k@4019))
  (= $t@4026 $t@4004)))
(declare-const $k@4038 $Perm)
(assert ($Perm.isValidVar $k@4038))
(assert ($Perm.isReadVar $k@4038 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                      $k@3932)
                    $k@3950)
                  $k@3954)
                $k@3972)
              $k@3976)
            $k@3994)
          $k@3998)
        $k@4016)
      $k@4020))
  (= $t@4024 $t@4002)))
; [exec]
; p := __flatten_79
(pop) ; 18
(push) ; 18
; [else-branch 520] $t@4030 == Null
(assert (= $t@4030 $Ref.null))
(declare-const $k@4039 $Perm)
(assert ($Perm.isValidVar $k@4039))
(assert ($Perm.isReadVar $k@4039 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                      $k@3931)
                    $k@3949)
                  $k@3953)
                $k@3971)
              $k@3975)
            $k@3993)
          $k@3997)
        $k@4015)
      $k@4019))
  (= $t@4026 $t@4004)))
(declare-const $k@4040 $Perm)
(assert ($Perm.isValidVar $k@4040))
(assert ($Perm.isReadVar $k@4040 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                      $k@3932)
                    $k@3950)
                  $k@3954)
                $k@3972)
              $k@3976)
            $k@3994)
          $k@3998)
        $k@4016)
      $k@4020))
  (= $t@4024 $t@4002)))
; [exec]
; p := __flatten_79
(pop) ; 18
(pop) ; 17
; [dead else-branch 519] $t@4008 == Null
(pop) ; 16
(push) ; 16
; [else-branch 518] $t@4008 == Null
(assert (= $t@4008 $Ref.null))
(declare-const $k@4041 $Perm)
(assert ($Perm.isValidVar $k@4041))
(assert ($Perm.isReadVar $k@4041 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                  $k@3931)
                $k@3949)
              $k@3953)
            $k@3971)
          $k@3975)
        $k@3993)
      $k@3997))
  (= $t@4004 $t@3982)))
(declare-const $k@4042 $Perm)
(assert ($Perm.isValidVar $k@4042))
(assert ($Perm.isReadVar $k@4042 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                  $k@3932)
                $k@3950)
              $k@3954)
            $k@3972)
          $k@3976)
        $k@3994)
      $k@3998))
  (= $t@4002 $t@3980)))
; [exec]
; o := __flatten_78
; [exec]
; __flatten_79 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@4043 $Perm)
(assert ($Perm.isValidVar $k@4043))
(assert ($Perm.isReadVar $k@4043 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@4043 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@4043
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                  $k@3929)
                $k@3947)
              $k@3951)
            $k@3969)
          $k@3973)
        $k@3991)
      $k@3995)
    $k@4013)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@4044 $Perm)
(assert ($Perm.isValidVar $k@4044))
(assert ($Perm.isReadVar $k@4044 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@4044 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@4044
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                  $k@3930)
                $k@3948)
              $k@3952)
            $k@3970)
          $k@3974)
        $k@3992)
      $k@3996)
    $k@4014)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 17
(assert (not (not (= $t@4008 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 17
; [dead then-branch 521] $t@4008 != Null
(push) ; 17
; [else-branch 521] $t@4008 == Null
(declare-const $k@4045 $Perm)
(assert ($Perm.isValidVar $k@4045))
(assert ($Perm.isReadVar $k@4045 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@4045 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                    $k@3931)
                  $k@3949)
                $k@3953)
              $k@3971)
            $k@3975)
          $k@3993)
        $k@3997)
      $k@4041)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                    $k@3931)
                  $k@3949)
                $k@3953)
              $k@3971)
            $k@3975)
          $k@3993)
        $k@3997)
      $k@4041)
    $Perm.No)))
(assert (<
  $k@4045
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                  $k@3931)
                $k@3949)
              $k@3953)
            $k@3971)
          $k@3975)
        $k@3993)
      $k@3997)
    $k@4041)))
(declare-const $k@4046 $Perm)
(assert ($Perm.isValidVar $k@4046))
(assert ($Perm.isReadVar $k@4046 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@4046 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                    $k@3932)
                  $k@3950)
                $k@3954)
              $k@3972)
            $k@3976)
          $k@3994)
        $k@3998)
      $k@4042)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                    $k@3932)
                  $k@3950)
                $k@3954)
              $k@3972)
            $k@3976)
          $k@3994)
        $k@3998)
      $k@4042)
    $Perm.No)))
(assert (<
  $k@4046
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                  $k@3932)
                $k@3950)
              $k@3954)
            $k@3972)
          $k@3976)
        $k@3994)
      $k@3998)
    $k@4042)))
(declare-const sys__result@4047 $Ref)
(declare-const $t@4048 $Snap)
(declare-const $t@4049 $Snap)
(declare-const $t@4050 $Ref)
(assert (= $t@4048 ($Snap.combine $t@4049 ($SortWrappers.$RefTo$Snap $t@4050))))
(declare-const $t@4051 $Snap)
(declare-const $t@4052 $Ref)
(assert (= $t@4049 ($Snap.combine $t@4051 ($SortWrappers.$RefTo$Snap $t@4052))))
(declare-const $t@4053 $Snap)
(declare-const $t@4054 $Snap)
(assert (= $t@4051 ($Snap.combine $t@4053 $t@4054)))
(declare-const $t@4055 $Snap)
(declare-const $t@4056 $Ref)
(assert (= $t@4053 ($Snap.combine $t@4055 ($SortWrappers.$RefTo$Snap $t@4056))))
(declare-const $t@4057 $Snap)
(assert (= $t@4055 ($Snap.combine $t@4057 $Snap.unit)))
(declare-const $t@4058 Int)
(declare-const $t@4059 $Ref)
(assert (=
  $t@4057
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@4058)
    ($SortWrappers.$RefTo$Snap $t@4059))))
(declare-const $t@4060 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@4058)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@4060) $Snap.unit)))
(declare-const $k@4061 $Perm)
(assert ($Perm.isValidVar $k@4061))
(assert ($Perm.isReadVar $k@4061 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                      $k@3929)
                    $k@3947)
                  $k@3951)
                $k@3969)
              $k@3973)
            $k@3991)
          $k@3995)
        $k@4013)
      $k@4043))
  (= $t@4060 $t@4012)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                        $k@3929)
                      $k@3947)
                    $k@3951)
                  $k@3969)
                $k@3973)
              $k@3991)
            $k@3995)
          $k@4013)
        $k@4043)
      $k@4061)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                        $k@3929)
                      $k@3947)
                    $k@3951)
                  $k@3969)
                $k@3973)
              $k@3991)
            $k@3995)
          $k@4013)
        $k@4043)
      $k@4061)
    $Perm.No)))
(assert (> $t@4060 0))
(declare-const $k@4062 $Perm)
(assert ($Perm.isValidVar $k@4062))
(assert ($Perm.isReadVar $k@4062 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                      $k@3930)
                    $k@3948)
                  $k@3952)
                $k@3970)
              $k@3974)
            $k@3992)
          $k@3996)
        $k@4014)
      $k@4044))
  (= $t@4059 $t@4011)))
; [eval] diz.BlockingQueue__count != null
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                        $k@3930)
                      $k@3948)
                    $k@3952)
                  $k@3970)
                $k@3974)
              $k@3992)
            $k@3996)
          $k@4014)
        $k@4044)
      $k@4062)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                        $k@3930)
                      $k@3948)
                    $k@3952)
                  $k@3970)
                $k@3974)
              $k@3992)
            $k@3996)
          $k@4014)
        $k@4044)
      $k@4062)
    $Perm.No)))
(assert (not (= $t@4059 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 18
(assert (not (= $t@4056 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not (= $t@4056 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
; [then-branch 522] $t@4056 != Null
(assert (not (= $t@4056 $Ref.null)))
(declare-const $k@4063 $Perm)
(assert ($Perm.isValidVar $k@4063))
(assert ($Perm.isReadVar $k@4063 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                      $k@3931)
                    $k@3949)
                  $k@3953)
                $k@3971)
              $k@3975)
            $k@3993)
          $k@3997)
        $k@4041)
      $k@4045))
  (= $t@4052 $t@4004)))
(declare-const $k@4064 $Perm)
(assert ($Perm.isValidVar $k@4064))
(assert ($Perm.isReadVar $k@4064 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                      $k@3932)
                    $k@3950)
                  $k@3954)
                $k@3972)
              $k@3976)
            $k@3994)
          $k@3998)
        $k@4042)
      $k@4046))
  (= $t@4050 $t@4002)))
; [exec]
; p := __flatten_79
(pop) ; 18
(push) ; 18
; [else-branch 522] $t@4056 == Null
(assert (= $t@4056 $Ref.null))
(declare-const $k@4065 $Perm)
(assert ($Perm.isValidVar $k@4065))
(assert ($Perm.isReadVar $k@4065 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                      $k@3931)
                    $k@3949)
                  $k@3953)
                $k@3971)
              $k@3975)
            $k@3993)
          $k@3997)
        $k@4041)
      $k@4045))
  (= $t@4052 $t@4004)))
(declare-const $k@4066 $Perm)
(assert ($Perm.isValidVar $k@4066))
(assert ($Perm.isReadVar $k@4066 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                      $k@3932)
                    $k@3950)
                  $k@3954)
                $k@3972)
              $k@3976)
            $k@3994)
          $k@3998)
        $k@4042)
      $k@4046))
  (= $t@4050 $t@4002)))
; [exec]
; p := __flatten_79
(pop) ; 18
(pop) ; 17
(pop) ; 16
(pop) ; 15
; [dead else-branch 517] $t@3986 == Null
(pop) ; 14
(push) ; 14
; [else-branch 516] $t@3986 == Null
(assert (= $t@3986 $Ref.null))
(declare-const $k@4067 $Perm)
(assert ($Perm.isValidVar $k@4067))
(assert ($Perm.isReadVar $k@4067 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927) $k@3931)
            $k@3949)
          $k@3953)
        $k@3971)
      $k@3975))
  (= $t@3982 $t@3960)))
(declare-const $k@4068 $Perm)
(assert ($Perm.isValidVar $k@4068))
(assert ($Perm.isReadVar $k@4068 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928) $k@3932)
            $k@3950)
          $k@3954)
        $k@3972)
      $k@3976))
  (= $t@3980 $t@3958)))
; [exec]
; n := __flatten_77
; [exec]
; __flatten_78 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@4069 $Perm)
(assert ($Perm.isValidVar $k@4069))
(assert ($Perm.isReadVar $k@4069 $Perm.Write))
(push) ; 15
(assert (not (or (= $k@4069 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 15
(assert (<
  $k@4069
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179) $k@3929)
            $k@3947)
          $k@3951)
        $k@3969)
      $k@3973)
    $k@3991)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@4070 $Perm)
(assert ($Perm.isValidVar $k@4070))
(assert ($Perm.isReadVar $k@4070 $Perm.Write))
(push) ; 15
(assert (not (or (= $k@4070 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 15
(assert (<
  $k@4070
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180) $k@3930)
            $k@3948)
          $k@3952)
        $k@3970)
      $k@3974)
    $k@3992)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 15
(assert (not (not (= $t@3986 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 15
; [dead then-branch 523] $t@3986 != Null
(push) ; 15
; [else-branch 523] $t@3986 == Null
(declare-const $k@4071 $Perm)
(assert ($Perm.isValidVar $k@4071))
(assert ($Perm.isReadVar $k@4071 $Perm.Write))
(push) ; 16
(assert (not (or (= $k@4071 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927) $k@3931)
              $k@3949)
            $k@3953)
          $k@3971)
        $k@3975)
      $k@4067)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927) $k@3931)
              $k@3949)
            $k@3953)
          $k@3971)
        $k@3975)
      $k@4067)
    $Perm.No)))
(assert (<
  $k@4071
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927) $k@3931)
            $k@3949)
          $k@3953)
        $k@3971)
      $k@3975)
    $k@4067)))
(declare-const $k@4072 $Perm)
(assert ($Perm.isValidVar $k@4072))
(assert ($Perm.isReadVar $k@4072 $Perm.Write))
(push) ; 16
(assert (not (or (= $k@4072 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928) $k@3932)
              $k@3950)
            $k@3954)
          $k@3972)
        $k@3976)
      $k@4068)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928) $k@3932)
              $k@3950)
            $k@3954)
          $k@3972)
        $k@3976)
      $k@4068)
    $Perm.No)))
(assert (<
  $k@4072
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928) $k@3932)
            $k@3950)
          $k@3954)
        $k@3972)
      $k@3976)
    $k@4068)))
(declare-const sys__result@4073 $Ref)
(declare-const $t@4074 $Snap)
(declare-const $t@4075 $Snap)
(declare-const $t@4076 $Ref)
(assert (= $t@4074 ($Snap.combine $t@4075 ($SortWrappers.$RefTo$Snap $t@4076))))
(declare-const $t@4077 $Snap)
(declare-const $t@4078 $Ref)
(assert (= $t@4075 ($Snap.combine $t@4077 ($SortWrappers.$RefTo$Snap $t@4078))))
(declare-const $t@4079 $Snap)
(declare-const $t@4080 $Snap)
(assert (= $t@4077 ($Snap.combine $t@4079 $t@4080)))
(declare-const $t@4081 $Snap)
(declare-const $t@4082 $Ref)
(assert (= $t@4079 ($Snap.combine $t@4081 ($SortWrappers.$RefTo$Snap $t@4082))))
(declare-const $t@4083 $Snap)
(assert (= $t@4081 ($Snap.combine $t@4083 $Snap.unit)))
(declare-const $t@4084 Int)
(declare-const $t@4085 $Ref)
(assert (=
  $t@4083
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@4084)
    ($SortWrappers.$RefTo$Snap $t@4085))))
(declare-const $t@4086 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@4084)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@4086) $Snap.unit)))
(declare-const $k@4087 $Perm)
(assert ($Perm.isValidVar $k@4087))
(assert ($Perm.isReadVar $k@4087 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                  $k@3929)
                $k@3947)
              $k@3951)
            $k@3969)
          $k@3973)
        $k@3991)
      $k@4069))
  (= $t@4086 $t@3990)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                    $k@3929)
                  $k@3947)
                $k@3951)
              $k@3969)
            $k@3973)
          $k@3991)
        $k@4069)
      $k@4087)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                    $k@3929)
                  $k@3947)
                $k@3951)
              $k@3969)
            $k@3973)
          $k@3991)
        $k@4069)
      $k@4087)
    $Perm.No)))
(assert (> $t@4086 0))
(declare-const $k@4088 $Perm)
(assert ($Perm.isValidVar $k@4088))
(assert ($Perm.isReadVar $k@4088 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                  $k@3930)
                $k@3948)
              $k@3952)
            $k@3970)
          $k@3974)
        $k@3992)
      $k@4070))
  (= $t@4085 $t@3989)))
; [eval] diz.BlockingQueue__count != null
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                    $k@3930)
                  $k@3948)
                $k@3952)
              $k@3970)
            $k@3974)
          $k@3992)
        $k@4070)
      $k@4088)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                    $k@3930)
                  $k@3948)
                $k@3952)
              $k@3970)
            $k@3974)
          $k@3992)
        $k@4070)
      $k@4088)
    $Perm.No)))
(assert (not (= $t@4085 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 16
(assert (not (= $t@4082 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not (= $t@4082 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 16
(push) ; 16
; [then-branch 524] $t@4082 != Null
(assert (not (= $t@4082 $Ref.null)))
(declare-const $k@4089 $Perm)
(assert ($Perm.isValidVar $k@4089))
(assert ($Perm.isReadVar $k@4089 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                  $k@3931)
                $k@3949)
              $k@3953)
            $k@3971)
          $k@3975)
        $k@4067)
      $k@4071))
  (= $t@4078 $t@3982)))
(declare-const $k@4090 $Perm)
(assert ($Perm.isValidVar $k@4090))
(assert ($Perm.isReadVar $k@4090 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                  $k@3932)
                $k@3950)
              $k@3954)
            $k@3972)
          $k@3976)
        $k@4068)
      $k@4072))
  (= $t@4076 $t@3980)))
; [exec]
; o := __flatten_78
; [exec]
; __flatten_79 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@4091 $Perm)
(assert ($Perm.isValidVar $k@4091))
(assert ($Perm.isReadVar $k@4091 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@4091 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@4091
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                  $k@3929)
                $k@3947)
              $k@3951)
            $k@3969)
          $k@3973)
        $k@3991)
      $k@4069)
    $k@4087)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@4092 $Perm)
(assert ($Perm.isValidVar $k@4092))
(assert ($Perm.isReadVar $k@4092 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@4092 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@4092
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                  $k@3930)
                $k@3948)
              $k@3952)
            $k@3970)
          $k@3974)
        $k@3992)
      $k@4070)
    $k@4088)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 17
(assert (not (= $t@4082 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 17
(push) ; 17
; [then-branch 525] $t@4082 != Null
(declare-const $k@4093 $Perm)
(assert ($Perm.isValidVar $k@4093))
(assert ($Perm.isReadVar $k@4093 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@4093 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                    $k@3931)
                  $k@3949)
                $k@3953)
              $k@3971)
            $k@3975)
          $k@4067)
        $k@4071)
      $k@4089)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                    $k@3931)
                  $k@3949)
                $k@3953)
              $k@3971)
            $k@3975)
          $k@4067)
        $k@4071)
      $k@4089)
    $Perm.No)))
(assert (<
  $k@4093
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                  $k@3931)
                $k@3949)
              $k@3953)
            $k@3971)
          $k@3975)
        $k@4067)
      $k@4071)
    $k@4089)))
(declare-const $k@4094 $Perm)
(assert ($Perm.isValidVar $k@4094))
(assert ($Perm.isReadVar $k@4094 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@4094 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                    $k@3932)
                  $k@3950)
                $k@3954)
              $k@3972)
            $k@3976)
          $k@4068)
        $k@4072)
      $k@4090)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                    $k@3932)
                  $k@3950)
                $k@3954)
              $k@3972)
            $k@3976)
          $k@4068)
        $k@4072)
      $k@4090)
    $Perm.No)))
(assert (<
  $k@4094
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                  $k@3932)
                $k@3950)
              $k@3954)
            $k@3972)
          $k@3976)
        $k@4068)
      $k@4072)
    $k@4090)))
(declare-const sys__result@4095 $Ref)
(declare-const $t@4096 $Snap)
(declare-const $t@4097 $Snap)
(declare-const $t@4098 $Ref)
(assert (= $t@4096 ($Snap.combine $t@4097 ($SortWrappers.$RefTo$Snap $t@4098))))
(declare-const $t@4099 $Snap)
(declare-const $t@4100 $Ref)
(assert (= $t@4097 ($Snap.combine $t@4099 ($SortWrappers.$RefTo$Snap $t@4100))))
(declare-const $t@4101 $Snap)
(declare-const $t@4102 $Snap)
(assert (= $t@4099 ($Snap.combine $t@4101 $t@4102)))
(declare-const $t@4103 $Snap)
(declare-const $t@4104 $Ref)
(assert (= $t@4101 ($Snap.combine $t@4103 ($SortWrappers.$RefTo$Snap $t@4104))))
(declare-const $t@4105 $Snap)
(assert (= $t@4103 ($Snap.combine $t@4105 $Snap.unit)))
(declare-const $t@4106 Int)
(declare-const $t@4107 $Ref)
(assert (=
  $t@4105
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@4106)
    ($SortWrappers.$RefTo$Snap $t@4107))))
(declare-const $t@4108 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@4106)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@4108) $Snap.unit)))
(declare-const $k@4109 $Perm)
(assert ($Perm.isValidVar $k@4109))
(assert ($Perm.isReadVar $k@4109 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                      $k@3929)
                    $k@3947)
                  $k@3951)
                $k@3969)
              $k@3973)
            $k@3991)
          $k@4069)
        $k@4087)
      $k@4091))
  (= $t@4108 $t@4086)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                        $k@3929)
                      $k@3947)
                    $k@3951)
                  $k@3969)
                $k@3973)
              $k@3991)
            $k@4069)
          $k@4087)
        $k@4091)
      $k@4109)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                        $k@3929)
                      $k@3947)
                    $k@3951)
                  $k@3969)
                $k@3973)
              $k@3991)
            $k@4069)
          $k@4087)
        $k@4091)
      $k@4109)
    $Perm.No)))
(assert (> $t@4108 0))
(declare-const $k@4110 $Perm)
(assert ($Perm.isValidVar $k@4110))
(assert ($Perm.isReadVar $k@4110 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                      $k@3930)
                    $k@3948)
                  $k@3952)
                $k@3970)
              $k@3974)
            $k@3992)
          $k@4070)
        $k@4088)
      $k@4092))
  (= $t@4107 $t@4085)))
; [eval] diz.BlockingQueue__count != null
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                        $k@3930)
                      $k@3948)
                    $k@3952)
                  $k@3970)
                $k@3974)
              $k@3992)
            $k@4070)
          $k@4088)
        $k@4092)
      $k@4110)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                        $k@3930)
                      $k@3948)
                    $k@3952)
                  $k@3970)
                $k@3974)
              $k@3992)
            $k@4070)
          $k@4088)
        $k@4092)
      $k@4110)
    $Perm.No)))
(assert (not (= $t@4107 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 18
(assert (not (= $t@4104 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not (= $t@4104 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
; [then-branch 526] $t@4104 != Null
(assert (not (= $t@4104 $Ref.null)))
(declare-const $k@4111 $Perm)
(assert ($Perm.isValidVar $k@4111))
(assert ($Perm.isReadVar $k@4111 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                      $k@3931)
                    $k@3949)
                  $k@3953)
                $k@3971)
              $k@3975)
            $k@4067)
          $k@4071)
        $k@4089)
      $k@4093))
  (= $t@4100 $t@4078)))
(declare-const $k@4112 $Perm)
(assert ($Perm.isValidVar $k@4112))
(assert ($Perm.isReadVar $k@4112 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                      $k@3932)
                    $k@3950)
                  $k@3954)
                $k@3972)
              $k@3976)
            $k@4068)
          $k@4072)
        $k@4090)
      $k@4094))
  (= $t@4098 $t@4076)))
; [exec]
; p := __flatten_79
(pop) ; 18
(push) ; 18
; [else-branch 526] $t@4104 == Null
(assert (= $t@4104 $Ref.null))
(declare-const $k@4113 $Perm)
(assert ($Perm.isValidVar $k@4113))
(assert ($Perm.isReadVar $k@4113 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                      $k@3931)
                    $k@3949)
                  $k@3953)
                $k@3971)
              $k@3975)
            $k@4067)
          $k@4071)
        $k@4089)
      $k@4093))
  (= $t@4100 $t@4078)))
(declare-const $k@4114 $Perm)
(assert ($Perm.isValidVar $k@4114))
(assert ($Perm.isReadVar $k@4114 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                      $k@3932)
                    $k@3950)
                  $k@3954)
                $k@3972)
              $k@3976)
            $k@4068)
          $k@4072)
        $k@4090)
      $k@4094))
  (= $t@4098 $t@4076)))
; [exec]
; p := __flatten_79
(pop) ; 18
(pop) ; 17
; [dead else-branch 525] $t@4082 == Null
(pop) ; 16
(push) ; 16
; [else-branch 524] $t@4082 == Null
(assert (= $t@4082 $Ref.null))
(declare-const $k@4115 $Perm)
(assert ($Perm.isValidVar $k@4115))
(assert ($Perm.isReadVar $k@4115 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                  $k@3931)
                $k@3949)
              $k@3953)
            $k@3971)
          $k@3975)
        $k@4067)
      $k@4071))
  (= $t@4078 $t@3982)))
(declare-const $k@4116 $Perm)
(assert ($Perm.isValidVar $k@4116))
(assert ($Perm.isReadVar $k@4116 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                  $k@3932)
                $k@3950)
              $k@3954)
            $k@3972)
          $k@3976)
        $k@4068)
      $k@4072))
  (= $t@4076 $t@3980)))
; [exec]
; o := __flatten_78
; [exec]
; __flatten_79 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@4117 $Perm)
(assert ($Perm.isValidVar $k@4117))
(assert ($Perm.isReadVar $k@4117 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@4117 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@4117
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                  $k@3929)
                $k@3947)
              $k@3951)
            $k@3969)
          $k@3973)
        $k@3991)
      $k@4069)
    $k@4087)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@4118 $Perm)
(assert ($Perm.isValidVar $k@4118))
(assert ($Perm.isReadVar $k@4118 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@4118 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@4118
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                  $k@3930)
                $k@3948)
              $k@3952)
            $k@3970)
          $k@3974)
        $k@3992)
      $k@4070)
    $k@4088)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 17
(assert (not (not (= $t@4082 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 17
; [dead then-branch 527] $t@4082 != Null
(push) ; 17
; [else-branch 527] $t@4082 == Null
(declare-const $k@4119 $Perm)
(assert ($Perm.isValidVar $k@4119))
(assert ($Perm.isReadVar $k@4119 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@4119 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                    $k@3931)
                  $k@3949)
                $k@3953)
              $k@3971)
            $k@3975)
          $k@4067)
        $k@4071)
      $k@4115)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                    $k@3931)
                  $k@3949)
                $k@3953)
              $k@3971)
            $k@3975)
          $k@4067)
        $k@4071)
      $k@4115)
    $Perm.No)))
(assert (<
  $k@4119
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                  $k@3931)
                $k@3949)
              $k@3953)
            $k@3971)
          $k@3975)
        $k@4067)
      $k@4071)
    $k@4115)))
(declare-const $k@4120 $Perm)
(assert ($Perm.isValidVar $k@4120))
(assert ($Perm.isReadVar $k@4120 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@4120 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                    $k@3932)
                  $k@3950)
                $k@3954)
              $k@3972)
            $k@3976)
          $k@4068)
        $k@4072)
      $k@4116)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                    $k@3932)
                  $k@3950)
                $k@3954)
              $k@3972)
            $k@3976)
          $k@4068)
        $k@4072)
      $k@4116)
    $Perm.No)))
(assert (<
  $k@4120
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                  $k@3932)
                $k@3950)
              $k@3954)
            $k@3972)
          $k@3976)
        $k@4068)
      $k@4072)
    $k@4116)))
(declare-const sys__result@4121 $Ref)
(declare-const $t@4122 $Snap)
(declare-const $t@4123 $Snap)
(declare-const $t@4124 $Ref)
(assert (= $t@4122 ($Snap.combine $t@4123 ($SortWrappers.$RefTo$Snap $t@4124))))
(declare-const $t@4125 $Snap)
(declare-const $t@4126 $Ref)
(assert (= $t@4123 ($Snap.combine $t@4125 ($SortWrappers.$RefTo$Snap $t@4126))))
(declare-const $t@4127 $Snap)
(declare-const $t@4128 $Snap)
(assert (= $t@4125 ($Snap.combine $t@4127 $t@4128)))
(declare-const $t@4129 $Snap)
(declare-const $t@4130 $Ref)
(assert (= $t@4127 ($Snap.combine $t@4129 ($SortWrappers.$RefTo$Snap $t@4130))))
(declare-const $t@4131 $Snap)
(assert (= $t@4129 ($Snap.combine $t@4131 $Snap.unit)))
(declare-const $t@4132 Int)
(declare-const $t@4133 $Ref)
(assert (=
  $t@4131
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@4132)
    ($SortWrappers.$RefTo$Snap $t@4133))))
(declare-const $t@4134 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@4132)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@4134) $Snap.unit)))
(declare-const $k@4135 $Perm)
(assert ($Perm.isValidVar $k@4135))
(assert ($Perm.isReadVar $k@4135 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                      $k@3929)
                    $k@3947)
                  $k@3951)
                $k@3969)
              $k@3973)
            $k@3991)
          $k@4069)
        $k@4087)
      $k@4117))
  (= $t@4134 $t@4086)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                        $k@3929)
                      $k@3947)
                    $k@3951)
                  $k@3969)
                $k@3973)
              $k@3991)
            $k@4069)
          $k@4087)
        $k@4117)
      $k@4135)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                        $k@3929)
                      $k@3947)
                    $k@3951)
                  $k@3969)
                $k@3973)
              $k@3991)
            $k@4069)
          $k@4087)
        $k@4117)
      $k@4135)
    $Perm.No)))
(assert (> $t@4134 0))
(declare-const $k@4136 $Perm)
(assert ($Perm.isValidVar $k@4136))
(assert ($Perm.isReadVar $k@4136 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                      $k@3930)
                    $k@3948)
                  $k@3952)
                $k@3970)
              $k@3974)
            $k@3992)
          $k@4070)
        $k@4088)
      $k@4118))
  (= $t@4133 $t@4085)))
; [eval] diz.BlockingQueue__count != null
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                        $k@3930)
                      $k@3948)
                    $k@3952)
                  $k@3970)
                $k@3974)
              $k@3992)
            $k@4070)
          $k@4088)
        $k@4118)
      $k@4136)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                        $k@3930)
                      $k@3948)
                    $k@3952)
                  $k@3970)
                $k@3974)
              $k@3992)
            $k@4070)
          $k@4088)
        $k@4118)
      $k@4136)
    $Perm.No)))
(assert (not (= $t@4133 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 18
(assert (not (= $t@4130 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not (= $t@4130 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
; [then-branch 528] $t@4130 != Null
(assert (not (= $t@4130 $Ref.null)))
(declare-const $k@4137 $Perm)
(assert ($Perm.isValidVar $k@4137))
(assert ($Perm.isReadVar $k@4137 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                      $k@3931)
                    $k@3949)
                  $k@3953)
                $k@3971)
              $k@3975)
            $k@4067)
          $k@4071)
        $k@4115)
      $k@4119))
  (= $t@4126 $t@4078)))
(declare-const $k@4138 $Perm)
(assert ($Perm.isValidVar $k@4138))
(assert ($Perm.isReadVar $k@4138 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                      $k@3932)
                    $k@3950)
                  $k@3954)
                $k@3972)
              $k@3976)
            $k@4068)
          $k@4072)
        $k@4116)
      $k@4120))
  (= $t@4124 $t@4076)))
; [exec]
; p := __flatten_79
(pop) ; 18
(push) ; 18
; [else-branch 528] $t@4130 == Null
(assert (= $t@4130 $Ref.null))
(declare-const $k@4139 $Perm)
(assert ($Perm.isValidVar $k@4139))
(assert ($Perm.isReadVar $k@4139 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                      $k@3931)
                    $k@3949)
                  $k@3953)
                $k@3971)
              $k@3975)
            $k@4067)
          $k@4071)
        $k@4115)
      $k@4119))
  (= $t@4126 $t@4078)))
(declare-const $k@4140 $Perm)
(assert ($Perm.isValidVar $k@4140))
(assert ($Perm.isReadVar $k@4140 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                      $k@3932)
                    $k@3950)
                  $k@3954)
                $k@3972)
              $k@3976)
            $k@4068)
          $k@4072)
        $k@4116)
      $k@4120))
  (= $t@4124 $t@4076)))
; [exec]
; p := __flatten_79
(pop) ; 18
(pop) ; 17
(pop) ; 16
(pop) ; 15
(pop) ; 14
(pop) ; 13
; [dead else-branch 515] $t@3964 == Null
(pop) ; 12
(push) ; 12
; [else-branch 514] $t@3964 == Null
(assert (= $t@3964 $Ref.null))
(declare-const $k@4141 $Perm)
(assert ($Perm.isValidVar $k@4141))
(assert ($Perm.isReadVar $k@4141 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927) $k@3931)
        $k@3949)
      $k@3953))
  (= $t@3960 $t@3938)))
(declare-const $k@4142 $Perm)
(assert ($Perm.isValidVar $k@4142))
(assert ($Perm.isReadVar $k@4142 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928) $k@3932)
        $k@3950)
      $k@3954))
  (= $t@3958 $t@3936)))
; [exec]
; b := __flatten_76
; [exec]
; __flatten_77 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@4143 $Perm)
(assert ($Perm.isValidVar $k@4143))
(assert ($Perm.isReadVar $k@4143 $Perm.Write))
(push) ; 13
(assert (not (or (= $k@4143 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 13
(assert (<
  $k@4143
  (+
    (-
      (+
        (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179) $k@3929)
        $k@3947)
      $k@3951)
    $k@3969)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@4144 $Perm)
(assert ($Perm.isValidVar $k@4144))
(assert ($Perm.isReadVar $k@4144 $Perm.Write))
(push) ; 13
(assert (not (or (= $k@4144 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 13
(assert (<
  $k@4144
  (+
    (-
      (+
        (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180) $k@3930)
        $k@3948)
      $k@3952)
    $k@3970)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 13
(assert (not (not (= $t@3964 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 13
; [dead then-branch 529] $t@3964 != Null
(push) ; 13
; [else-branch 529] $t@3964 == Null
(declare-const $k@4145 $Perm)
(assert ($Perm.isValidVar $k@4145))
(assert ($Perm.isReadVar $k@4145 $Perm.Write))
(push) ; 14
(assert (not (or (= $k@4145 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(push) ; 14
(assert (not (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927) $k@3931)
          $k@3949)
        $k@3953)
      $k@4141)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(assert (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927) $k@3931)
          $k@3949)
        $k@3953)
      $k@4141)
    $Perm.No)))
(assert (<
  $k@4145
  (+
    (-
      (+
        (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927) $k@3931)
        $k@3949)
      $k@3953)
    $k@4141)))
(declare-const $k@4146 $Perm)
(assert ($Perm.isValidVar $k@4146))
(assert ($Perm.isReadVar $k@4146 $Perm.Write))
(push) ; 14
(assert (not (or (= $k@4146 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(push) ; 14
(assert (not (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928) $k@3932)
          $k@3950)
        $k@3954)
      $k@4142)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(assert (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928) $k@3932)
          $k@3950)
        $k@3954)
      $k@4142)
    $Perm.No)))
(assert (<
  $k@4146
  (+
    (-
      (+
        (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928) $k@3932)
        $k@3950)
      $k@3954)
    $k@4142)))
(declare-const sys__result@4147 $Ref)
(declare-const $t@4148 $Snap)
(declare-const $t@4149 $Snap)
(declare-const $t@4150 $Ref)
(assert (= $t@4148 ($Snap.combine $t@4149 ($SortWrappers.$RefTo$Snap $t@4150))))
(declare-const $t@4151 $Snap)
(declare-const $t@4152 $Ref)
(assert (= $t@4149 ($Snap.combine $t@4151 ($SortWrappers.$RefTo$Snap $t@4152))))
(declare-const $t@4153 $Snap)
(declare-const $t@4154 $Snap)
(assert (= $t@4151 ($Snap.combine $t@4153 $t@4154)))
(declare-const $t@4155 $Snap)
(declare-const $t@4156 $Ref)
(assert (= $t@4153 ($Snap.combine $t@4155 ($SortWrappers.$RefTo$Snap $t@4156))))
(declare-const $t@4157 $Snap)
(assert (= $t@4155 ($Snap.combine $t@4157 $Snap.unit)))
(declare-const $t@4158 Int)
(declare-const $t@4159 $Ref)
(assert (=
  $t@4157
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@4158)
    ($SortWrappers.$RefTo$Snap $t@4159))))
(declare-const $t@4160 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@4158)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@4160) $Snap.unit)))
(declare-const $k@4161 $Perm)
(assert ($Perm.isValidVar $k@4161))
(assert ($Perm.isReadVar $k@4161 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179) $k@3929)
            $k@3947)
          $k@3951)
        $k@3969)
      $k@4143))
  (= $t@4160 $t@3968)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 14
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179) $k@3929)
              $k@3947)
            $k@3951)
          $k@3969)
        $k@4143)
      $k@4161)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179) $k@3929)
              $k@3947)
            $k@3951)
          $k@3969)
        $k@4143)
      $k@4161)
    $Perm.No)))
(assert (> $t@4160 0))
(declare-const $k@4162 $Perm)
(assert ($Perm.isValidVar $k@4162))
(assert ($Perm.isReadVar $k@4162 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180) $k@3930)
            $k@3948)
          $k@3952)
        $k@3970)
      $k@4144))
  (= $t@4159 $t@3967)))
; [eval] diz.BlockingQueue__count != null
(push) ; 14
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180) $k@3930)
              $k@3948)
            $k@3952)
          $k@3970)
        $k@4144)
      $k@4162)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180) $k@3930)
              $k@3948)
            $k@3952)
          $k@3970)
        $k@4144)
      $k@4162)
    $Perm.No)))
(assert (not (= $t@4159 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 14
(assert (not (= $t@4156 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 14
(push) ; 14
(assert (not (not (= $t@4156 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 14
(push) ; 14
; [then-branch 530] $t@4156 != Null
(assert (not (= $t@4156 $Ref.null)))
(declare-const $k@4163 $Perm)
(assert ($Perm.isValidVar $k@4163))
(assert ($Perm.isReadVar $k@4163 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927) $k@3931)
            $k@3949)
          $k@3953)
        $k@4141)
      $k@4145))
  (= $t@4152 $t@3960)))
(declare-const $k@4164 $Perm)
(assert ($Perm.isValidVar $k@4164))
(assert ($Perm.isReadVar $k@4164 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928) $k@3932)
            $k@3950)
          $k@3954)
        $k@4142)
      $k@4146))
  (= $t@4150 $t@3958)))
; [exec]
; n := __flatten_77
; [exec]
; __flatten_78 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@4165 $Perm)
(assert ($Perm.isValidVar $k@4165))
(assert ($Perm.isReadVar $k@4165 $Perm.Write))
(push) ; 15
(assert (not (or (= $k@4165 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 15
(assert (<
  $k@4165
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179) $k@3929)
            $k@3947)
          $k@3951)
        $k@3969)
      $k@4143)
    $k@4161)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@4166 $Perm)
(assert ($Perm.isValidVar $k@4166))
(assert ($Perm.isReadVar $k@4166 $Perm.Write))
(push) ; 15
(assert (not (or (= $k@4166 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 15
(assert (<
  $k@4166
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180) $k@3930)
            $k@3948)
          $k@3952)
        $k@3970)
      $k@4144)
    $k@4162)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 15
(assert (not (= $t@4156 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 15
(push) ; 15
; [then-branch 531] $t@4156 != Null
(declare-const $k@4167 $Perm)
(assert ($Perm.isValidVar $k@4167))
(assert ($Perm.isReadVar $k@4167 $Perm.Write))
(push) ; 16
(assert (not (or (= $k@4167 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927) $k@3931)
              $k@3949)
            $k@3953)
          $k@4141)
        $k@4145)
      $k@4163)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927) $k@3931)
              $k@3949)
            $k@3953)
          $k@4141)
        $k@4145)
      $k@4163)
    $Perm.No)))
(assert (<
  $k@4167
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927) $k@3931)
            $k@3949)
          $k@3953)
        $k@4141)
      $k@4145)
    $k@4163)))
(declare-const $k@4168 $Perm)
(assert ($Perm.isValidVar $k@4168))
(assert ($Perm.isReadVar $k@4168 $Perm.Write))
(push) ; 16
(assert (not (or (= $k@4168 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928) $k@3932)
              $k@3950)
            $k@3954)
          $k@4142)
        $k@4146)
      $k@4164)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928) $k@3932)
              $k@3950)
            $k@3954)
          $k@4142)
        $k@4146)
      $k@4164)
    $Perm.No)))
(assert (<
  $k@4168
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928) $k@3932)
            $k@3950)
          $k@3954)
        $k@4142)
      $k@4146)
    $k@4164)))
(declare-const sys__result@4169 $Ref)
(declare-const $t@4170 $Snap)
(declare-const $t@4171 $Snap)
(declare-const $t@4172 $Ref)
(assert (= $t@4170 ($Snap.combine $t@4171 ($SortWrappers.$RefTo$Snap $t@4172))))
(declare-const $t@4173 $Snap)
(declare-const $t@4174 $Ref)
(assert (= $t@4171 ($Snap.combine $t@4173 ($SortWrappers.$RefTo$Snap $t@4174))))
(declare-const $t@4175 $Snap)
(declare-const $t@4176 $Snap)
(assert (= $t@4173 ($Snap.combine $t@4175 $t@4176)))
(declare-const $t@4177 $Snap)
(declare-const $t@4178 $Ref)
(assert (= $t@4175 ($Snap.combine $t@4177 ($SortWrappers.$RefTo$Snap $t@4178))))
(declare-const $t@4179 $Snap)
(assert (= $t@4177 ($Snap.combine $t@4179 $Snap.unit)))
(declare-const $t@4180 Int)
(declare-const $t@4181 $Ref)
(assert (=
  $t@4179
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@4180)
    ($SortWrappers.$RefTo$Snap $t@4181))))
(declare-const $t@4182 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@4180)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@4182) $Snap.unit)))
(declare-const $k@4183 $Perm)
(assert ($Perm.isValidVar $k@4183))
(assert ($Perm.isReadVar $k@4183 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                  $k@3929)
                $k@3947)
              $k@3951)
            $k@3969)
          $k@4143)
        $k@4161)
      $k@4165))
  (= $t@4182 $t@4160)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                    $k@3929)
                  $k@3947)
                $k@3951)
              $k@3969)
            $k@4143)
          $k@4161)
        $k@4165)
      $k@4183)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                    $k@3929)
                  $k@3947)
                $k@3951)
              $k@3969)
            $k@4143)
          $k@4161)
        $k@4165)
      $k@4183)
    $Perm.No)))
(assert (> $t@4182 0))
(declare-const $k@4184 $Perm)
(assert ($Perm.isValidVar $k@4184))
(assert ($Perm.isReadVar $k@4184 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                  $k@3930)
                $k@3948)
              $k@3952)
            $k@3970)
          $k@4144)
        $k@4162)
      $k@4166))
  (= $t@4181 $t@4159)))
; [eval] diz.BlockingQueue__count != null
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                    $k@3930)
                  $k@3948)
                $k@3952)
              $k@3970)
            $k@4144)
          $k@4162)
        $k@4166)
      $k@4184)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                    $k@3930)
                  $k@3948)
                $k@3952)
              $k@3970)
            $k@4144)
          $k@4162)
        $k@4166)
      $k@4184)
    $Perm.No)))
(assert (not (= $t@4181 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 16
(assert (not (= $t@4178 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not (= $t@4178 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 16
(push) ; 16
; [then-branch 532] $t@4178 != Null
(assert (not (= $t@4178 $Ref.null)))
(declare-const $k@4185 $Perm)
(assert ($Perm.isValidVar $k@4185))
(assert ($Perm.isReadVar $k@4185 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                  $k@3931)
                $k@3949)
              $k@3953)
            $k@4141)
          $k@4145)
        $k@4163)
      $k@4167))
  (= $t@4174 $t@4152)))
(declare-const $k@4186 $Perm)
(assert ($Perm.isValidVar $k@4186))
(assert ($Perm.isReadVar $k@4186 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                  $k@3932)
                $k@3950)
              $k@3954)
            $k@4142)
          $k@4146)
        $k@4164)
      $k@4168))
  (= $t@4172 $t@4150)))
; [exec]
; o := __flatten_78
; [exec]
; __flatten_79 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@4187 $Perm)
(assert ($Perm.isValidVar $k@4187))
(assert ($Perm.isReadVar $k@4187 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@4187 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@4187
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                  $k@3929)
                $k@3947)
              $k@3951)
            $k@3969)
          $k@4143)
        $k@4161)
      $k@4165)
    $k@4183)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@4188 $Perm)
(assert ($Perm.isValidVar $k@4188))
(assert ($Perm.isReadVar $k@4188 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@4188 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@4188
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                  $k@3930)
                $k@3948)
              $k@3952)
            $k@3970)
          $k@4144)
        $k@4162)
      $k@4166)
    $k@4184)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 17
(assert (not (= $t@4178 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 17
(push) ; 17
; [then-branch 533] $t@4178 != Null
(declare-const $k@4189 $Perm)
(assert ($Perm.isValidVar $k@4189))
(assert ($Perm.isReadVar $k@4189 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@4189 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                    $k@3931)
                  $k@3949)
                $k@3953)
              $k@4141)
            $k@4145)
          $k@4163)
        $k@4167)
      $k@4185)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                    $k@3931)
                  $k@3949)
                $k@3953)
              $k@4141)
            $k@4145)
          $k@4163)
        $k@4167)
      $k@4185)
    $Perm.No)))
(assert (<
  $k@4189
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                  $k@3931)
                $k@3949)
              $k@3953)
            $k@4141)
          $k@4145)
        $k@4163)
      $k@4167)
    $k@4185)))
(declare-const $k@4190 $Perm)
(assert ($Perm.isValidVar $k@4190))
(assert ($Perm.isReadVar $k@4190 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@4190 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                    $k@3932)
                  $k@3950)
                $k@3954)
              $k@4142)
            $k@4146)
          $k@4164)
        $k@4168)
      $k@4186)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                    $k@3932)
                  $k@3950)
                $k@3954)
              $k@4142)
            $k@4146)
          $k@4164)
        $k@4168)
      $k@4186)
    $Perm.No)))
(assert (<
  $k@4190
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                  $k@3932)
                $k@3950)
              $k@3954)
            $k@4142)
          $k@4146)
        $k@4164)
      $k@4168)
    $k@4186)))
(declare-const sys__result@4191 $Ref)
(declare-const $t@4192 $Snap)
(declare-const $t@4193 $Snap)
(declare-const $t@4194 $Ref)
(assert (= $t@4192 ($Snap.combine $t@4193 ($SortWrappers.$RefTo$Snap $t@4194))))
(declare-const $t@4195 $Snap)
(declare-const $t@4196 $Ref)
(assert (= $t@4193 ($Snap.combine $t@4195 ($SortWrappers.$RefTo$Snap $t@4196))))
(declare-const $t@4197 $Snap)
(declare-const $t@4198 $Snap)
(assert (= $t@4195 ($Snap.combine $t@4197 $t@4198)))
(declare-const $t@4199 $Snap)
(declare-const $t@4200 $Ref)
(assert (= $t@4197 ($Snap.combine $t@4199 ($SortWrappers.$RefTo$Snap $t@4200))))
(declare-const $t@4201 $Snap)
(assert (= $t@4199 ($Snap.combine $t@4201 $Snap.unit)))
(declare-const $t@4202 Int)
(declare-const $t@4203 $Ref)
(assert (=
  $t@4201
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@4202)
    ($SortWrappers.$RefTo$Snap $t@4203))))
(declare-const $t@4204 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@4202)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@4204) $Snap.unit)))
(declare-const $k@4205 $Perm)
(assert ($Perm.isValidVar $k@4205))
(assert ($Perm.isReadVar $k@4205 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                      $k@3929)
                    $k@3947)
                  $k@3951)
                $k@3969)
              $k@4143)
            $k@4161)
          $k@4165)
        $k@4183)
      $k@4187))
  (= $t@4204 $t@4182)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                        $k@3929)
                      $k@3947)
                    $k@3951)
                  $k@3969)
                $k@4143)
              $k@4161)
            $k@4165)
          $k@4183)
        $k@4187)
      $k@4205)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                        $k@3929)
                      $k@3947)
                    $k@3951)
                  $k@3969)
                $k@4143)
              $k@4161)
            $k@4165)
          $k@4183)
        $k@4187)
      $k@4205)
    $Perm.No)))
(assert (> $t@4204 0))
(declare-const $k@4206 $Perm)
(assert ($Perm.isValidVar $k@4206))
(assert ($Perm.isReadVar $k@4206 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                      $k@3930)
                    $k@3948)
                  $k@3952)
                $k@3970)
              $k@4144)
            $k@4162)
          $k@4166)
        $k@4184)
      $k@4188))
  (= $t@4203 $t@4181)))
; [eval] diz.BlockingQueue__count != null
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                        $k@3930)
                      $k@3948)
                    $k@3952)
                  $k@3970)
                $k@4144)
              $k@4162)
            $k@4166)
          $k@4184)
        $k@4188)
      $k@4206)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                        $k@3930)
                      $k@3948)
                    $k@3952)
                  $k@3970)
                $k@4144)
              $k@4162)
            $k@4166)
          $k@4184)
        $k@4188)
      $k@4206)
    $Perm.No)))
(assert (not (= $t@4203 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 18
(assert (not (= $t@4200 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not (= $t@4200 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
; [then-branch 534] $t@4200 != Null
(assert (not (= $t@4200 $Ref.null)))
(declare-const $k@4207 $Perm)
(assert ($Perm.isValidVar $k@4207))
(assert ($Perm.isReadVar $k@4207 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                      $k@3931)
                    $k@3949)
                  $k@3953)
                $k@4141)
              $k@4145)
            $k@4163)
          $k@4167)
        $k@4185)
      $k@4189))
  (= $t@4196 $t@4174)))
(declare-const $k@4208 $Perm)
(assert ($Perm.isValidVar $k@4208))
(assert ($Perm.isReadVar $k@4208 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                      $k@3932)
                    $k@3950)
                  $k@3954)
                $k@4142)
              $k@4146)
            $k@4164)
          $k@4168)
        $k@4186)
      $k@4190))
  (= $t@4194 $t@4172)))
; [exec]
; p := __flatten_79
(pop) ; 18
(push) ; 18
; [else-branch 534] $t@4200 == Null
(assert (= $t@4200 $Ref.null))
(declare-const $k@4209 $Perm)
(assert ($Perm.isValidVar $k@4209))
(assert ($Perm.isReadVar $k@4209 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                      $k@3931)
                    $k@3949)
                  $k@3953)
                $k@4141)
              $k@4145)
            $k@4163)
          $k@4167)
        $k@4185)
      $k@4189))
  (= $t@4196 $t@4174)))
(declare-const $k@4210 $Perm)
(assert ($Perm.isValidVar $k@4210))
(assert ($Perm.isReadVar $k@4210 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                      $k@3932)
                    $k@3950)
                  $k@3954)
                $k@4142)
              $k@4146)
            $k@4164)
          $k@4168)
        $k@4186)
      $k@4190))
  (= $t@4194 $t@4172)))
; [exec]
; p := __flatten_79
(pop) ; 18
(pop) ; 17
; [dead else-branch 533] $t@4178 == Null
(pop) ; 16
(push) ; 16
; [else-branch 532] $t@4178 == Null
(assert (= $t@4178 $Ref.null))
(declare-const $k@4211 $Perm)
(assert ($Perm.isValidVar $k@4211))
(assert ($Perm.isReadVar $k@4211 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                  $k@3931)
                $k@3949)
              $k@3953)
            $k@4141)
          $k@4145)
        $k@4163)
      $k@4167))
  (= $t@4174 $t@4152)))
(declare-const $k@4212 $Perm)
(assert ($Perm.isValidVar $k@4212))
(assert ($Perm.isReadVar $k@4212 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                  $k@3932)
                $k@3950)
              $k@3954)
            $k@4142)
          $k@4146)
        $k@4164)
      $k@4168))
  (= $t@4172 $t@4150)))
; [exec]
; o := __flatten_78
; [exec]
; __flatten_79 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@4213 $Perm)
(assert ($Perm.isValidVar $k@4213))
(assert ($Perm.isReadVar $k@4213 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@4213 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@4213
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                  $k@3929)
                $k@3947)
              $k@3951)
            $k@3969)
          $k@4143)
        $k@4161)
      $k@4165)
    $k@4183)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@4214 $Perm)
(assert ($Perm.isValidVar $k@4214))
(assert ($Perm.isReadVar $k@4214 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@4214 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@4214
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                  $k@3930)
                $k@3948)
              $k@3952)
            $k@3970)
          $k@4144)
        $k@4162)
      $k@4166)
    $k@4184)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 17
(assert (not (not (= $t@4178 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 17
; [dead then-branch 535] $t@4178 != Null
(push) ; 17
; [else-branch 535] $t@4178 == Null
(declare-const $k@4215 $Perm)
(assert ($Perm.isValidVar $k@4215))
(assert ($Perm.isReadVar $k@4215 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@4215 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                    $k@3931)
                  $k@3949)
                $k@3953)
              $k@4141)
            $k@4145)
          $k@4163)
        $k@4167)
      $k@4211)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                    $k@3931)
                  $k@3949)
                $k@3953)
              $k@4141)
            $k@4145)
          $k@4163)
        $k@4167)
      $k@4211)
    $Perm.No)))
(assert (<
  $k@4215
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                  $k@3931)
                $k@3949)
              $k@3953)
            $k@4141)
          $k@4145)
        $k@4163)
      $k@4167)
    $k@4211)))
(declare-const $k@4216 $Perm)
(assert ($Perm.isValidVar $k@4216))
(assert ($Perm.isReadVar $k@4216 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@4216 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                    $k@3932)
                  $k@3950)
                $k@3954)
              $k@4142)
            $k@4146)
          $k@4164)
        $k@4168)
      $k@4212)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                    $k@3932)
                  $k@3950)
                $k@3954)
              $k@4142)
            $k@4146)
          $k@4164)
        $k@4168)
      $k@4212)
    $Perm.No)))
(assert (<
  $k@4216
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                  $k@3932)
                $k@3950)
              $k@3954)
            $k@4142)
          $k@4146)
        $k@4164)
      $k@4168)
    $k@4212)))
(declare-const sys__result@4217 $Ref)
(declare-const $t@4218 $Snap)
(declare-const $t@4219 $Snap)
(declare-const $t@4220 $Ref)
(assert (= $t@4218 ($Snap.combine $t@4219 ($SortWrappers.$RefTo$Snap $t@4220))))
(declare-const $t@4221 $Snap)
(declare-const $t@4222 $Ref)
(assert (= $t@4219 ($Snap.combine $t@4221 ($SortWrappers.$RefTo$Snap $t@4222))))
(declare-const $t@4223 $Snap)
(declare-const $t@4224 $Snap)
(assert (= $t@4221 ($Snap.combine $t@4223 $t@4224)))
(declare-const $t@4225 $Snap)
(declare-const $t@4226 $Ref)
(assert (= $t@4223 ($Snap.combine $t@4225 ($SortWrappers.$RefTo$Snap $t@4226))))
(declare-const $t@4227 $Snap)
(assert (= $t@4225 ($Snap.combine $t@4227 $Snap.unit)))
(declare-const $t@4228 Int)
(declare-const $t@4229 $Ref)
(assert (=
  $t@4227
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@4228)
    ($SortWrappers.$RefTo$Snap $t@4229))))
(declare-const $t@4230 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@4228)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@4230) $Snap.unit)))
(declare-const $k@4231 $Perm)
(assert ($Perm.isValidVar $k@4231))
(assert ($Perm.isReadVar $k@4231 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                      $k@3929)
                    $k@3947)
                  $k@3951)
                $k@3969)
              $k@4143)
            $k@4161)
          $k@4165)
        $k@4183)
      $k@4213))
  (= $t@4230 $t@4182)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                        $k@3929)
                      $k@3947)
                    $k@3951)
                  $k@3969)
                $k@4143)
              $k@4161)
            $k@4165)
          $k@4183)
        $k@4213)
      $k@4231)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                        $k@3929)
                      $k@3947)
                    $k@3951)
                  $k@3969)
                $k@4143)
              $k@4161)
            $k@4165)
          $k@4183)
        $k@4213)
      $k@4231)
    $Perm.No)))
(assert (> $t@4230 0))
(declare-const $k@4232 $Perm)
(assert ($Perm.isValidVar $k@4232))
(assert ($Perm.isReadVar $k@4232 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                      $k@3930)
                    $k@3948)
                  $k@3952)
                $k@3970)
              $k@4144)
            $k@4162)
          $k@4166)
        $k@4184)
      $k@4214))
  (= $t@4229 $t@4181)))
; [eval] diz.BlockingQueue__count != null
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                        $k@3930)
                      $k@3948)
                    $k@3952)
                  $k@3970)
                $k@4144)
              $k@4162)
            $k@4166)
          $k@4184)
        $k@4214)
      $k@4232)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                        $k@3930)
                      $k@3948)
                    $k@3952)
                  $k@3970)
                $k@4144)
              $k@4162)
            $k@4166)
          $k@4184)
        $k@4214)
      $k@4232)
    $Perm.No)))
(assert (not (= $t@4229 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 18
(assert (not (= $t@4226 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not (= $t@4226 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
; [then-branch 536] $t@4226 != Null
(assert (not (= $t@4226 $Ref.null)))
(declare-const $k@4233 $Perm)
(assert ($Perm.isValidVar $k@4233))
(assert ($Perm.isReadVar $k@4233 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                      $k@3931)
                    $k@3949)
                  $k@3953)
                $k@4141)
              $k@4145)
            $k@4163)
          $k@4167)
        $k@4211)
      $k@4215))
  (= $t@4222 $t@4174)))
(declare-const $k@4234 $Perm)
(assert ($Perm.isValidVar $k@4234))
(assert ($Perm.isReadVar $k@4234 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                      $k@3932)
                    $k@3950)
                  $k@3954)
                $k@4142)
              $k@4146)
            $k@4164)
          $k@4168)
        $k@4212)
      $k@4216))
  (= $t@4220 $t@4172)))
; [exec]
; p := __flatten_79
(pop) ; 18
(push) ; 18
; [else-branch 536] $t@4226 == Null
(assert (= $t@4226 $Ref.null))
(declare-const $k@4235 $Perm)
(assert ($Perm.isValidVar $k@4235))
(assert ($Perm.isReadVar $k@4235 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                      $k@3931)
                    $k@3949)
                  $k@3953)
                $k@4141)
              $k@4145)
            $k@4163)
          $k@4167)
        $k@4211)
      $k@4215))
  (= $t@4222 $t@4174)))
(declare-const $k@4236 $Perm)
(assert ($Perm.isValidVar $k@4236))
(assert ($Perm.isReadVar $k@4236 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                      $k@3932)
                    $k@3950)
                  $k@3954)
                $k@4142)
              $k@4146)
            $k@4164)
          $k@4168)
        $k@4212)
      $k@4216))
  (= $t@4220 $t@4172)))
; [exec]
; p := __flatten_79
(pop) ; 18
(pop) ; 17
(pop) ; 16
(pop) ; 15
; [dead else-branch 531] $t@4156 == Null
(pop) ; 14
(push) ; 14
; [else-branch 530] $t@4156 == Null
(assert (= $t@4156 $Ref.null))
(declare-const $k@4237 $Perm)
(assert ($Perm.isValidVar $k@4237))
(assert ($Perm.isReadVar $k@4237 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927) $k@3931)
            $k@3949)
          $k@3953)
        $k@4141)
      $k@4145))
  (= $t@4152 $t@3960)))
(declare-const $k@4238 $Perm)
(assert ($Perm.isValidVar $k@4238))
(assert ($Perm.isReadVar $k@4238 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928) $k@3932)
            $k@3950)
          $k@3954)
        $k@4142)
      $k@4146))
  (= $t@4150 $t@3958)))
; [exec]
; n := __flatten_77
; [exec]
; __flatten_78 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@4239 $Perm)
(assert ($Perm.isValidVar $k@4239))
(assert ($Perm.isReadVar $k@4239 $Perm.Write))
(push) ; 15
(assert (not (or (= $k@4239 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 15
(assert (<
  $k@4239
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179) $k@3929)
            $k@3947)
          $k@3951)
        $k@3969)
      $k@4143)
    $k@4161)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@4240 $Perm)
(assert ($Perm.isValidVar $k@4240))
(assert ($Perm.isReadVar $k@4240 $Perm.Write))
(push) ; 15
(assert (not (or (= $k@4240 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 15
(assert (<
  $k@4240
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180) $k@3930)
            $k@3948)
          $k@3952)
        $k@3970)
      $k@4144)
    $k@4162)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 15
(assert (not (not (= $t@4156 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 15
; [dead then-branch 537] $t@4156 != Null
(push) ; 15
; [else-branch 537] $t@4156 == Null
(declare-const $k@4241 $Perm)
(assert ($Perm.isValidVar $k@4241))
(assert ($Perm.isReadVar $k@4241 $Perm.Write))
(push) ; 16
(assert (not (or (= $k@4241 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927) $k@3931)
              $k@3949)
            $k@3953)
          $k@4141)
        $k@4145)
      $k@4237)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927) $k@3931)
              $k@3949)
            $k@3953)
          $k@4141)
        $k@4145)
      $k@4237)
    $Perm.No)))
(assert (<
  $k@4241
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927) $k@3931)
            $k@3949)
          $k@3953)
        $k@4141)
      $k@4145)
    $k@4237)))
(declare-const $k@4242 $Perm)
(assert ($Perm.isValidVar $k@4242))
(assert ($Perm.isReadVar $k@4242 $Perm.Write))
(push) ; 16
(assert (not (or (= $k@4242 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928) $k@3932)
              $k@3950)
            $k@3954)
          $k@4142)
        $k@4146)
      $k@4238)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928) $k@3932)
              $k@3950)
            $k@3954)
          $k@4142)
        $k@4146)
      $k@4238)
    $Perm.No)))
(assert (<
  $k@4242
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928) $k@3932)
            $k@3950)
          $k@3954)
        $k@4142)
      $k@4146)
    $k@4238)))
(declare-const sys__result@4243 $Ref)
(declare-const $t@4244 $Snap)
(declare-const $t@4245 $Snap)
(declare-const $t@4246 $Ref)
(assert (= $t@4244 ($Snap.combine $t@4245 ($SortWrappers.$RefTo$Snap $t@4246))))
(declare-const $t@4247 $Snap)
(declare-const $t@4248 $Ref)
(assert (= $t@4245 ($Snap.combine $t@4247 ($SortWrappers.$RefTo$Snap $t@4248))))
(declare-const $t@4249 $Snap)
(declare-const $t@4250 $Snap)
(assert (= $t@4247 ($Snap.combine $t@4249 $t@4250)))
(declare-const $t@4251 $Snap)
(declare-const $t@4252 $Ref)
(assert (= $t@4249 ($Snap.combine $t@4251 ($SortWrappers.$RefTo$Snap $t@4252))))
(declare-const $t@4253 $Snap)
(assert (= $t@4251 ($Snap.combine $t@4253 $Snap.unit)))
(declare-const $t@4254 Int)
(declare-const $t@4255 $Ref)
(assert (=
  $t@4253
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@4254)
    ($SortWrappers.$RefTo$Snap $t@4255))))
(declare-const $t@4256 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@4254)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@4256) $Snap.unit)))
(declare-const $k@4257 $Perm)
(assert ($Perm.isValidVar $k@4257))
(assert ($Perm.isReadVar $k@4257 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                  $k@3929)
                $k@3947)
              $k@3951)
            $k@3969)
          $k@4143)
        $k@4161)
      $k@4239))
  (= $t@4256 $t@4160)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                    $k@3929)
                  $k@3947)
                $k@3951)
              $k@3969)
            $k@4143)
          $k@4161)
        $k@4239)
      $k@4257)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                    $k@3929)
                  $k@3947)
                $k@3951)
              $k@3969)
            $k@4143)
          $k@4161)
        $k@4239)
      $k@4257)
    $Perm.No)))
(assert (> $t@4256 0))
(declare-const $k@4258 $Perm)
(assert ($Perm.isValidVar $k@4258))
(assert ($Perm.isReadVar $k@4258 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                  $k@3930)
                $k@3948)
              $k@3952)
            $k@3970)
          $k@4144)
        $k@4162)
      $k@4240))
  (= $t@4255 $t@4159)))
; [eval] diz.BlockingQueue__count != null
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                    $k@3930)
                  $k@3948)
                $k@3952)
              $k@3970)
            $k@4144)
          $k@4162)
        $k@4240)
      $k@4258)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                    $k@3930)
                  $k@3948)
                $k@3952)
              $k@3970)
            $k@4144)
          $k@4162)
        $k@4240)
      $k@4258)
    $Perm.No)))
(assert (not (= $t@4255 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 16
(assert (not (= $t@4252 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not (= $t@4252 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 16
(push) ; 16
; [then-branch 538] $t@4252 != Null
(assert (not (= $t@4252 $Ref.null)))
(declare-const $k@4259 $Perm)
(assert ($Perm.isValidVar $k@4259))
(assert ($Perm.isReadVar $k@4259 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                  $k@3931)
                $k@3949)
              $k@3953)
            $k@4141)
          $k@4145)
        $k@4237)
      $k@4241))
  (= $t@4248 $t@4152)))
(declare-const $k@4260 $Perm)
(assert ($Perm.isValidVar $k@4260))
(assert ($Perm.isReadVar $k@4260 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                  $k@3932)
                $k@3950)
              $k@3954)
            $k@4142)
          $k@4146)
        $k@4238)
      $k@4242))
  (= $t@4246 $t@4150)))
; [exec]
; o := __flatten_78
; [exec]
; __flatten_79 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@4261 $Perm)
(assert ($Perm.isValidVar $k@4261))
(assert ($Perm.isReadVar $k@4261 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@4261 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@4261
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                  $k@3929)
                $k@3947)
              $k@3951)
            $k@3969)
          $k@4143)
        $k@4161)
      $k@4239)
    $k@4257)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@4262 $Perm)
(assert ($Perm.isValidVar $k@4262))
(assert ($Perm.isReadVar $k@4262 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@4262 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@4262
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                  $k@3930)
                $k@3948)
              $k@3952)
            $k@3970)
          $k@4144)
        $k@4162)
      $k@4240)
    $k@4258)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 17
(assert (not (= $t@4252 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 17
(push) ; 17
; [then-branch 539] $t@4252 != Null
(declare-const $k@4263 $Perm)
(assert ($Perm.isValidVar $k@4263))
(assert ($Perm.isReadVar $k@4263 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@4263 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                    $k@3931)
                  $k@3949)
                $k@3953)
              $k@4141)
            $k@4145)
          $k@4237)
        $k@4241)
      $k@4259)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                    $k@3931)
                  $k@3949)
                $k@3953)
              $k@4141)
            $k@4145)
          $k@4237)
        $k@4241)
      $k@4259)
    $Perm.No)))
(assert (<
  $k@4263
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                  $k@3931)
                $k@3949)
              $k@3953)
            $k@4141)
          $k@4145)
        $k@4237)
      $k@4241)
    $k@4259)))
(declare-const $k@4264 $Perm)
(assert ($Perm.isValidVar $k@4264))
(assert ($Perm.isReadVar $k@4264 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@4264 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                    $k@3932)
                  $k@3950)
                $k@3954)
              $k@4142)
            $k@4146)
          $k@4238)
        $k@4242)
      $k@4260)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                    $k@3932)
                  $k@3950)
                $k@3954)
              $k@4142)
            $k@4146)
          $k@4238)
        $k@4242)
      $k@4260)
    $Perm.No)))
(assert (<
  $k@4264
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                  $k@3932)
                $k@3950)
              $k@3954)
            $k@4142)
          $k@4146)
        $k@4238)
      $k@4242)
    $k@4260)))
(declare-const sys__result@4265 $Ref)
(declare-const $t@4266 $Snap)
(declare-const $t@4267 $Snap)
(declare-const $t@4268 $Ref)
(assert (= $t@4266 ($Snap.combine $t@4267 ($SortWrappers.$RefTo$Snap $t@4268))))
(declare-const $t@4269 $Snap)
(declare-const $t@4270 $Ref)
(assert (= $t@4267 ($Snap.combine $t@4269 ($SortWrappers.$RefTo$Snap $t@4270))))
(declare-const $t@4271 $Snap)
(declare-const $t@4272 $Snap)
(assert (= $t@4269 ($Snap.combine $t@4271 $t@4272)))
(declare-const $t@4273 $Snap)
(declare-const $t@4274 $Ref)
(assert (= $t@4271 ($Snap.combine $t@4273 ($SortWrappers.$RefTo$Snap $t@4274))))
(declare-const $t@4275 $Snap)
(assert (= $t@4273 ($Snap.combine $t@4275 $Snap.unit)))
(declare-const $t@4276 Int)
(declare-const $t@4277 $Ref)
(assert (=
  $t@4275
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@4276)
    ($SortWrappers.$RefTo$Snap $t@4277))))
(declare-const $t@4278 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@4276)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@4278) $Snap.unit)))
(declare-const $k@4279 $Perm)
(assert ($Perm.isValidVar $k@4279))
(assert ($Perm.isReadVar $k@4279 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                      $k@3929)
                    $k@3947)
                  $k@3951)
                $k@3969)
              $k@4143)
            $k@4161)
          $k@4239)
        $k@4257)
      $k@4261))
  (= $t@4278 $t@4256)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                        $k@3929)
                      $k@3947)
                    $k@3951)
                  $k@3969)
                $k@4143)
              $k@4161)
            $k@4239)
          $k@4257)
        $k@4261)
      $k@4279)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                        $k@3929)
                      $k@3947)
                    $k@3951)
                  $k@3969)
                $k@4143)
              $k@4161)
            $k@4239)
          $k@4257)
        $k@4261)
      $k@4279)
    $Perm.No)))
(assert (> $t@4278 0))
(declare-const $k@4280 $Perm)
(assert ($Perm.isValidVar $k@4280))
(assert ($Perm.isReadVar $k@4280 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                      $k@3930)
                    $k@3948)
                  $k@3952)
                $k@3970)
              $k@4144)
            $k@4162)
          $k@4240)
        $k@4258)
      $k@4262))
  (= $t@4277 $t@4255)))
; [eval] diz.BlockingQueue__count != null
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                        $k@3930)
                      $k@3948)
                    $k@3952)
                  $k@3970)
                $k@4144)
              $k@4162)
            $k@4240)
          $k@4258)
        $k@4262)
      $k@4280)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                        $k@3930)
                      $k@3948)
                    $k@3952)
                  $k@3970)
                $k@4144)
              $k@4162)
            $k@4240)
          $k@4258)
        $k@4262)
      $k@4280)
    $Perm.No)))
(assert (not (= $t@4277 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 18
(assert (not (= $t@4274 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not (= $t@4274 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
; [then-branch 540] $t@4274 != Null
(assert (not (= $t@4274 $Ref.null)))
(declare-const $k@4281 $Perm)
(assert ($Perm.isValidVar $k@4281))
(assert ($Perm.isReadVar $k@4281 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                      $k@3931)
                    $k@3949)
                  $k@3953)
                $k@4141)
              $k@4145)
            $k@4237)
          $k@4241)
        $k@4259)
      $k@4263))
  (= $t@4270 $t@4248)))
(declare-const $k@4282 $Perm)
(assert ($Perm.isValidVar $k@4282))
(assert ($Perm.isReadVar $k@4282 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                      $k@3932)
                    $k@3950)
                  $k@3954)
                $k@4142)
              $k@4146)
            $k@4238)
          $k@4242)
        $k@4260)
      $k@4264))
  (= $t@4268 $t@4246)))
; [exec]
; p := __flatten_79
(pop) ; 18
(push) ; 18
; [else-branch 540] $t@4274 == Null
(assert (= $t@4274 $Ref.null))
(declare-const $k@4283 $Perm)
(assert ($Perm.isValidVar $k@4283))
(assert ($Perm.isReadVar $k@4283 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                      $k@3931)
                    $k@3949)
                  $k@3953)
                $k@4141)
              $k@4145)
            $k@4237)
          $k@4241)
        $k@4259)
      $k@4263))
  (= $t@4270 $t@4248)))
(declare-const $k@4284 $Perm)
(assert ($Perm.isValidVar $k@4284))
(assert ($Perm.isReadVar $k@4284 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                      $k@3932)
                    $k@3950)
                  $k@3954)
                $k@4142)
              $k@4146)
            $k@4238)
          $k@4242)
        $k@4260)
      $k@4264))
  (= $t@4268 $t@4246)))
; [exec]
; p := __flatten_79
(pop) ; 18
(pop) ; 17
; [dead else-branch 539] $t@4252 == Null
(pop) ; 16
(push) ; 16
; [else-branch 538] $t@4252 == Null
(assert (= $t@4252 $Ref.null))
(declare-const $k@4285 $Perm)
(assert ($Perm.isValidVar $k@4285))
(assert ($Perm.isReadVar $k@4285 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                  $k@3931)
                $k@3949)
              $k@3953)
            $k@4141)
          $k@4145)
        $k@4237)
      $k@4241))
  (= $t@4248 $t@4152)))
(declare-const $k@4286 $Perm)
(assert ($Perm.isValidVar $k@4286))
(assert ($Perm.isReadVar $k@4286 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                  $k@3932)
                $k@3950)
              $k@3954)
            $k@4142)
          $k@4146)
        $k@4238)
      $k@4242))
  (= $t@4246 $t@4150)))
; [exec]
; o := __flatten_78
; [exec]
; __flatten_79 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@4287 $Perm)
(assert ($Perm.isValidVar $k@4287))
(assert ($Perm.isReadVar $k@4287 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@4287 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@4287
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                  $k@3929)
                $k@3947)
              $k@3951)
            $k@3969)
          $k@4143)
        $k@4161)
      $k@4239)
    $k@4257)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@4288 $Perm)
(assert ($Perm.isValidVar $k@4288))
(assert ($Perm.isReadVar $k@4288 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@4288 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@4288
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                  $k@3930)
                $k@3948)
              $k@3952)
            $k@3970)
          $k@4144)
        $k@4162)
      $k@4240)
    $k@4258)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 17
(assert (not (not (= $t@4252 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 17
; [dead then-branch 541] $t@4252 != Null
(push) ; 17
; [else-branch 541] $t@4252 == Null
(declare-const $k@4289 $Perm)
(assert ($Perm.isValidVar $k@4289))
(assert ($Perm.isReadVar $k@4289 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@4289 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                    $k@3931)
                  $k@3949)
                $k@3953)
              $k@4141)
            $k@4145)
          $k@4237)
        $k@4241)
      $k@4285)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                    $k@3931)
                  $k@3949)
                $k@3953)
              $k@4141)
            $k@4145)
          $k@4237)
        $k@4241)
      $k@4285)
    $Perm.No)))
(assert (<
  $k@4289
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                  $k@3931)
                $k@3949)
              $k@3953)
            $k@4141)
          $k@4145)
        $k@4237)
      $k@4241)
    $k@4285)))
(declare-const $k@4290 $Perm)
(assert ($Perm.isValidVar $k@4290))
(assert ($Perm.isReadVar $k@4290 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@4290 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                    $k@3932)
                  $k@3950)
                $k@3954)
              $k@4142)
            $k@4146)
          $k@4238)
        $k@4242)
      $k@4286)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                    $k@3932)
                  $k@3950)
                $k@3954)
              $k@4142)
            $k@4146)
          $k@4238)
        $k@4242)
      $k@4286)
    $Perm.No)))
(assert (<
  $k@4290
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                  $k@3932)
                $k@3950)
              $k@3954)
            $k@4142)
          $k@4146)
        $k@4238)
      $k@4242)
    $k@4286)))
(declare-const sys__result@4291 $Ref)
(declare-const $t@4292 $Snap)
(declare-const $t@4293 $Snap)
(declare-const $t@4294 $Ref)
(assert (= $t@4292 ($Snap.combine $t@4293 ($SortWrappers.$RefTo$Snap $t@4294))))
(declare-const $t@4295 $Snap)
(declare-const $t@4296 $Ref)
(assert (= $t@4293 ($Snap.combine $t@4295 ($SortWrappers.$RefTo$Snap $t@4296))))
(declare-const $t@4297 $Snap)
(declare-const $t@4298 $Snap)
(assert (= $t@4295 ($Snap.combine $t@4297 $t@4298)))
(declare-const $t@4299 $Snap)
(declare-const $t@4300 $Ref)
(assert (= $t@4297 ($Snap.combine $t@4299 ($SortWrappers.$RefTo$Snap $t@4300))))
(declare-const $t@4301 $Snap)
(assert (= $t@4299 ($Snap.combine $t@4301 $Snap.unit)))
(declare-const $t@4302 Int)
(declare-const $t@4303 $Ref)
(assert (=
  $t@4301
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@4302)
    ($SortWrappers.$RefTo$Snap $t@4303))))
(declare-const $t@4304 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@4302)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@4304) $Snap.unit)))
(declare-const $k@4305 $Perm)
(assert ($Perm.isValidVar $k@4305))
(assert ($Perm.isReadVar $k@4305 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                      $k@3929)
                    $k@3947)
                  $k@3951)
                $k@3969)
              $k@4143)
            $k@4161)
          $k@4239)
        $k@4257)
      $k@4287))
  (= $t@4304 $t@4256)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                        $k@3929)
                      $k@3947)
                    $k@3951)
                  $k@3969)
                $k@4143)
              $k@4161)
            $k@4239)
          $k@4257)
        $k@4287)
      $k@4305)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                        $k@3929)
                      $k@3947)
                    $k@3951)
                  $k@3969)
                $k@4143)
              $k@4161)
            $k@4239)
          $k@4257)
        $k@4287)
      $k@4305)
    $Perm.No)))
(assert (> $t@4304 0))
(declare-const $k@4306 $Perm)
(assert ($Perm.isValidVar $k@4306))
(assert ($Perm.isReadVar $k@4306 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                      $k@3930)
                    $k@3948)
                  $k@3952)
                $k@3970)
              $k@4144)
            $k@4162)
          $k@4240)
        $k@4258)
      $k@4288))
  (= $t@4303 $t@4255)))
; [eval] diz.BlockingQueue__count != null
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                        $k@3930)
                      $k@3948)
                    $k@3952)
                  $k@3970)
                $k@4144)
              $k@4162)
            $k@4240)
          $k@4258)
        $k@4288)
      $k@4306)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                        $k@3930)
                      $k@3948)
                    $k@3952)
                  $k@3970)
                $k@4144)
              $k@4162)
            $k@4240)
          $k@4258)
        $k@4288)
      $k@4306)
    $Perm.No)))
(assert (not (= $t@4303 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 18
(assert (not (= $t@4300 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not (= $t@4300 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
; [then-branch 542] $t@4300 != Null
(assert (not (= $t@4300 $Ref.null)))
(declare-const $k@4307 $Perm)
(assert ($Perm.isValidVar $k@4307))
(assert ($Perm.isReadVar $k@4307 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                      $k@3931)
                    $k@3949)
                  $k@3953)
                $k@4141)
              $k@4145)
            $k@4237)
          $k@4241)
        $k@4285)
      $k@4289))
  (= $t@4296 $t@4248)))
(declare-const $k@4308 $Perm)
(assert ($Perm.isValidVar $k@4308))
(assert ($Perm.isReadVar $k@4308 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                      $k@3932)
                    $k@3950)
                  $k@3954)
                $k@4142)
              $k@4146)
            $k@4238)
          $k@4242)
        $k@4286)
      $k@4290))
  (= $t@4294 $t@4246)))
; [exec]
; p := __flatten_79
(pop) ; 18
(push) ; 18
; [else-branch 542] $t@4300 == Null
(assert (= $t@4300 $Ref.null))
(declare-const $k@4309 $Perm)
(assert ($Perm.isValidVar $k@4309))
(assert ($Perm.isReadVar $k@4309 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                      $k@3931)
                    $k@3949)
                  $k@3953)
                $k@4141)
              $k@4145)
            $k@4237)
          $k@4241)
        $k@4285)
      $k@4289))
  (= $t@4296 $t@4248)))
(declare-const $k@4310 $Perm)
(assert ($Perm.isValidVar $k@4310))
(assert ($Perm.isReadVar $k@4310 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                      $k@3932)
                    $k@3950)
                  $k@3954)
                $k@4142)
              $k@4146)
            $k@4238)
          $k@4242)
        $k@4286)
      $k@4290))
  (= $t@4294 $t@4246)))
; [exec]
; p := __flatten_79
(pop) ; 18
(pop) ; 17
(pop) ; 16
(pop) ; 15
(pop) ; 14
(pop) ; 13
(pop) ; 12
(pop) ; 11
; [dead else-branch 513] $t@3942 == Null
(pop) ; 10
(push) ; 10
; [else-branch 512] $t@3942 == Null
(assert (= $t@3942 $Ref.null))
(declare-const $k@4311 $Perm)
(assert ($Perm.isValidVar $k@4311))
(assert ($Perm.isReadVar $k@4311 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927) $k@3931))
  (= $t@3938 $t@3170)))
(declare-const $k@4312 $Perm)
(assert ($Perm.isValidVar $k@4312))
(assert ($Perm.isReadVar $k@4312 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928) $k@3932))
  (= $t@3936 $t@3168)))
; [exec]
; m := __flatten_75
; [exec]
; __flatten_76 := BlockingQueue__offer(queue, 7)
; [eval] diz != null
(declare-const $k@4313 $Perm)
(assert ($Perm.isValidVar $k@4313))
(assert ($Perm.isReadVar $k@4313 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@4313 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (<
  $k@4313
  (+ (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179) $k@3929) $k@3947)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@4314 $Perm)
(assert ($Perm.isValidVar $k@4314))
(assert ($Perm.isReadVar $k@4314 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@4314 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (<
  $k@4314
  (+ (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180) $k@3930) $k@3948)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 11
(assert (not (not (= $t@3942 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 11
; [dead then-branch 543] $t@3942 != Null
(push) ; 11
; [else-branch 543] $t@3942 == Null
(declare-const $k@4315 $Perm)
(assert ($Perm.isValidVar $k@4315))
(assert ($Perm.isReadVar $k@4315 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@4315 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(push) ; 12
(assert (not (not
  (=
    (+
      (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927) $k@3931)
      $k@4311)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927) $k@3931)
      $k@4311)
    $Perm.No)))
(assert (<
  $k@4315
  (+ (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927) $k@3931) $k@4311)))
(declare-const $k@4316 $Perm)
(assert ($Perm.isValidVar $k@4316))
(assert ($Perm.isReadVar $k@4316 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@4316 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(push) ; 12
(assert (not (not
  (=
    (+
      (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928) $k@3932)
      $k@4312)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928) $k@3932)
      $k@4312)
    $Perm.No)))
(assert (<
  $k@4316
  (+ (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928) $k@3932) $k@4312)))
(declare-const sys__result@4317 Bool)
(declare-const $t@4318 $Snap)
(declare-const $t@4319 $Snap)
(declare-const $t@4320 $Ref)
(assert (= $t@4318 ($Snap.combine $t@4319 ($SortWrappers.$RefTo$Snap $t@4320))))
(declare-const $t@4321 $Snap)
(declare-const $t@4322 $Ref)
(assert (= $t@4319 ($Snap.combine $t@4321 ($SortWrappers.$RefTo$Snap $t@4322))))
(declare-const $t@4323 $Snap)
(declare-const $t@4324 $Snap)
(assert (= $t@4321 ($Snap.combine $t@4323 $t@4324)))
(declare-const $t@4325 $Snap)
(declare-const $t@4326 $Ref)
(assert (= $t@4323 ($Snap.combine $t@4325 ($SortWrappers.$RefTo$Snap $t@4326))))
(declare-const $t@4327 $Snap)
(assert (= $t@4325 ($Snap.combine $t@4327 $Snap.unit)))
(declare-const $t@4328 Int)
(declare-const $t@4329 $Ref)
(assert (=
  $t@4327
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@4328)
    ($SortWrappers.$RefTo$Snap $t@4329))))
(declare-const $t@4330 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@4328)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@4330) $Snap.unit)))
(declare-const $k@4331 $Perm)
(assert ($Perm.isValidVar $k@4331))
(assert ($Perm.isReadVar $k@4331 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179) $k@3929)
        $k@3947)
      $k@4313))
  (= $t@4330 $t@3946)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 12
(assert (not (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179) $k@3929)
          $k@3947)
        $k@4313)
      $k@4331)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179) $k@3929)
          $k@3947)
        $k@4313)
      $k@4331)
    $Perm.No)))
(assert (> $t@4330 0))
(declare-const $k@4332 $Perm)
(assert ($Perm.isValidVar $k@4332))
(assert ($Perm.isReadVar $k@4332 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180) $k@3930)
        $k@3948)
      $k@4314))
  (= $t@4329 $t@3945)))
; [eval] diz.BlockingQueue__count != null
(push) ; 12
(assert (not (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180) $k@3930)
          $k@3948)
        $k@4314)
      $k@4332)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180) $k@3930)
          $k@3948)
        $k@4314)
      $k@4332)
    $Perm.No)))
(assert (not (= $t@4329 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 12
(assert (not (= $t@4326 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 12
(push) ; 12
(assert (not (not (= $t@4326 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 12
(push) ; 12
; [then-branch 544] $t@4326 != Null
(assert (not (= $t@4326 $Ref.null)))
(declare-const $k@4333 $Perm)
(assert ($Perm.isValidVar $k@4333))
(assert ($Perm.isReadVar $k@4333 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927) $k@3931)
        $k@4311)
      $k@4315))
  (= $t@4322 $t@3938)))
(declare-const $k@4334 $Perm)
(assert ($Perm.isValidVar $k@4334))
(assert ($Perm.isReadVar $k@4334 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928) $k@3932)
        $k@4312)
      $k@4316))
  (= $t@4320 $t@3936)))
; [exec]
; b := __flatten_76
; [exec]
; __flatten_77 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@4335 $Perm)
(assert ($Perm.isValidVar $k@4335))
(assert ($Perm.isReadVar $k@4335 $Perm.Write))
(push) ; 13
(assert (not (or (= $k@4335 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 13
(assert (<
  $k@4335
  (+
    (-
      (+
        (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179) $k@3929)
        $k@3947)
      $k@4313)
    $k@4331)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@4336 $Perm)
(assert ($Perm.isValidVar $k@4336))
(assert ($Perm.isReadVar $k@4336 $Perm.Write))
(push) ; 13
(assert (not (or (= $k@4336 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 13
(assert (<
  $k@4336
  (+
    (-
      (+
        (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180) $k@3930)
        $k@3948)
      $k@4314)
    $k@4332)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 13
(assert (not (= $t@4326 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 13
(push) ; 13
; [then-branch 545] $t@4326 != Null
(declare-const $k@4337 $Perm)
(assert ($Perm.isValidVar $k@4337))
(assert ($Perm.isReadVar $k@4337 $Perm.Write))
(push) ; 14
(assert (not (or (= $k@4337 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(push) ; 14
(assert (not (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927) $k@3931)
          $k@4311)
        $k@4315)
      $k@4333)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(assert (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927) $k@3931)
          $k@4311)
        $k@4315)
      $k@4333)
    $Perm.No)))
(assert (<
  $k@4337
  (+
    (-
      (+
        (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927) $k@3931)
        $k@4311)
      $k@4315)
    $k@4333)))
(declare-const $k@4338 $Perm)
(assert ($Perm.isValidVar $k@4338))
(assert ($Perm.isReadVar $k@4338 $Perm.Write))
(push) ; 14
(assert (not (or (= $k@4338 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(push) ; 14
(assert (not (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928) $k@3932)
          $k@4312)
        $k@4316)
      $k@4334)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(assert (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928) $k@3932)
          $k@4312)
        $k@4316)
      $k@4334)
    $Perm.No)))
(assert (<
  $k@4338
  (+
    (-
      (+
        (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928) $k@3932)
        $k@4312)
      $k@4316)
    $k@4334)))
(declare-const sys__result@4339 $Ref)
(declare-const $t@4340 $Snap)
(declare-const $t@4341 $Snap)
(declare-const $t@4342 $Ref)
(assert (= $t@4340 ($Snap.combine $t@4341 ($SortWrappers.$RefTo$Snap $t@4342))))
(declare-const $t@4343 $Snap)
(declare-const $t@4344 $Ref)
(assert (= $t@4341 ($Snap.combine $t@4343 ($SortWrappers.$RefTo$Snap $t@4344))))
(declare-const $t@4345 $Snap)
(declare-const $t@4346 $Snap)
(assert (= $t@4343 ($Snap.combine $t@4345 $t@4346)))
(declare-const $t@4347 $Snap)
(declare-const $t@4348 $Ref)
(assert (= $t@4345 ($Snap.combine $t@4347 ($SortWrappers.$RefTo$Snap $t@4348))))
(declare-const $t@4349 $Snap)
(assert (= $t@4347 ($Snap.combine $t@4349 $Snap.unit)))
(declare-const $t@4350 Int)
(declare-const $t@4351 $Ref)
(assert (=
  $t@4349
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@4350)
    ($SortWrappers.$RefTo$Snap $t@4351))))
(declare-const $t@4352 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@4350)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@4352) $Snap.unit)))
(declare-const $k@4353 $Perm)
(assert ($Perm.isValidVar $k@4353))
(assert ($Perm.isReadVar $k@4353 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179) $k@3929)
            $k@3947)
          $k@4313)
        $k@4331)
      $k@4335))
  (= $t@4352 $t@4330)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 14
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179) $k@3929)
              $k@3947)
            $k@4313)
          $k@4331)
        $k@4335)
      $k@4353)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179) $k@3929)
              $k@3947)
            $k@4313)
          $k@4331)
        $k@4335)
      $k@4353)
    $Perm.No)))
(assert (> $t@4352 0))
(declare-const $k@4354 $Perm)
(assert ($Perm.isValidVar $k@4354))
(assert ($Perm.isReadVar $k@4354 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180) $k@3930)
            $k@3948)
          $k@4314)
        $k@4332)
      $k@4336))
  (= $t@4351 $t@4329)))
; [eval] diz.BlockingQueue__count != null
(push) ; 14
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180) $k@3930)
              $k@3948)
            $k@4314)
          $k@4332)
        $k@4336)
      $k@4354)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180) $k@3930)
              $k@3948)
            $k@4314)
          $k@4332)
        $k@4336)
      $k@4354)
    $Perm.No)))
(assert (not (= $t@4351 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 14
(assert (not (= $t@4348 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 14
(push) ; 14
(assert (not (not (= $t@4348 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 14
(push) ; 14
; [then-branch 546] $t@4348 != Null
(assert (not (= $t@4348 $Ref.null)))
(declare-const $k@4355 $Perm)
(assert ($Perm.isValidVar $k@4355))
(assert ($Perm.isReadVar $k@4355 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927) $k@3931)
            $k@4311)
          $k@4315)
        $k@4333)
      $k@4337))
  (= $t@4344 $t@4322)))
(declare-const $k@4356 $Perm)
(assert ($Perm.isValidVar $k@4356))
(assert ($Perm.isReadVar $k@4356 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928) $k@3932)
            $k@4312)
          $k@4316)
        $k@4334)
      $k@4338))
  (= $t@4342 $t@4320)))
; [exec]
; n := __flatten_77
; [exec]
; __flatten_78 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@4357 $Perm)
(assert ($Perm.isValidVar $k@4357))
(assert ($Perm.isReadVar $k@4357 $Perm.Write))
(push) ; 15
(assert (not (or (= $k@4357 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 15
(assert (<
  $k@4357
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179) $k@3929)
            $k@3947)
          $k@4313)
        $k@4331)
      $k@4335)
    $k@4353)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@4358 $Perm)
(assert ($Perm.isValidVar $k@4358))
(assert ($Perm.isReadVar $k@4358 $Perm.Write))
(push) ; 15
(assert (not (or (= $k@4358 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 15
(assert (<
  $k@4358
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180) $k@3930)
            $k@3948)
          $k@4314)
        $k@4332)
      $k@4336)
    $k@4354)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 15
(assert (not (= $t@4348 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 15
(push) ; 15
; [then-branch 547] $t@4348 != Null
(declare-const $k@4359 $Perm)
(assert ($Perm.isValidVar $k@4359))
(assert ($Perm.isReadVar $k@4359 $Perm.Write))
(push) ; 16
(assert (not (or (= $k@4359 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927) $k@3931)
              $k@4311)
            $k@4315)
          $k@4333)
        $k@4337)
      $k@4355)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927) $k@3931)
              $k@4311)
            $k@4315)
          $k@4333)
        $k@4337)
      $k@4355)
    $Perm.No)))
(assert (<
  $k@4359
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927) $k@3931)
            $k@4311)
          $k@4315)
        $k@4333)
      $k@4337)
    $k@4355)))
(declare-const $k@4360 $Perm)
(assert ($Perm.isValidVar $k@4360))
(assert ($Perm.isReadVar $k@4360 $Perm.Write))
(push) ; 16
(assert (not (or (= $k@4360 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928) $k@3932)
              $k@4312)
            $k@4316)
          $k@4334)
        $k@4338)
      $k@4356)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928) $k@3932)
              $k@4312)
            $k@4316)
          $k@4334)
        $k@4338)
      $k@4356)
    $Perm.No)))
(assert (<
  $k@4360
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928) $k@3932)
            $k@4312)
          $k@4316)
        $k@4334)
      $k@4338)
    $k@4356)))
(declare-const sys__result@4361 $Ref)
(declare-const $t@4362 $Snap)
(declare-const $t@4363 $Snap)
(declare-const $t@4364 $Ref)
(assert (= $t@4362 ($Snap.combine $t@4363 ($SortWrappers.$RefTo$Snap $t@4364))))
(declare-const $t@4365 $Snap)
(declare-const $t@4366 $Ref)
(assert (= $t@4363 ($Snap.combine $t@4365 ($SortWrappers.$RefTo$Snap $t@4366))))
(declare-const $t@4367 $Snap)
(declare-const $t@4368 $Snap)
(assert (= $t@4365 ($Snap.combine $t@4367 $t@4368)))
(declare-const $t@4369 $Snap)
(declare-const $t@4370 $Ref)
(assert (= $t@4367 ($Snap.combine $t@4369 ($SortWrappers.$RefTo$Snap $t@4370))))
(declare-const $t@4371 $Snap)
(assert (= $t@4369 ($Snap.combine $t@4371 $Snap.unit)))
(declare-const $t@4372 Int)
(declare-const $t@4373 $Ref)
(assert (=
  $t@4371
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@4372)
    ($SortWrappers.$RefTo$Snap $t@4373))))
(declare-const $t@4374 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@4372)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@4374) $Snap.unit)))
(declare-const $k@4375 $Perm)
(assert ($Perm.isValidVar $k@4375))
(assert ($Perm.isReadVar $k@4375 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                  $k@3929)
                $k@3947)
              $k@4313)
            $k@4331)
          $k@4335)
        $k@4353)
      $k@4357))
  (= $t@4374 $t@4352)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                    $k@3929)
                  $k@3947)
                $k@4313)
              $k@4331)
            $k@4335)
          $k@4353)
        $k@4357)
      $k@4375)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                    $k@3929)
                  $k@3947)
                $k@4313)
              $k@4331)
            $k@4335)
          $k@4353)
        $k@4357)
      $k@4375)
    $Perm.No)))
(assert (> $t@4374 0))
(declare-const $k@4376 $Perm)
(assert ($Perm.isValidVar $k@4376))
(assert ($Perm.isReadVar $k@4376 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                  $k@3930)
                $k@3948)
              $k@4314)
            $k@4332)
          $k@4336)
        $k@4354)
      $k@4358))
  (= $t@4373 $t@4351)))
; [eval] diz.BlockingQueue__count != null
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                    $k@3930)
                  $k@3948)
                $k@4314)
              $k@4332)
            $k@4336)
          $k@4354)
        $k@4358)
      $k@4376)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                    $k@3930)
                  $k@3948)
                $k@4314)
              $k@4332)
            $k@4336)
          $k@4354)
        $k@4358)
      $k@4376)
    $Perm.No)))
(assert (not (= $t@4373 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 16
(assert (not (= $t@4370 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not (= $t@4370 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 16
(push) ; 16
; [then-branch 548] $t@4370 != Null
(assert (not (= $t@4370 $Ref.null)))
(declare-const $k@4377 $Perm)
(assert ($Perm.isValidVar $k@4377))
(assert ($Perm.isReadVar $k@4377 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                  $k@3931)
                $k@4311)
              $k@4315)
            $k@4333)
          $k@4337)
        $k@4355)
      $k@4359))
  (= $t@4366 $t@4344)))
(declare-const $k@4378 $Perm)
(assert ($Perm.isValidVar $k@4378))
(assert ($Perm.isReadVar $k@4378 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                  $k@3932)
                $k@4312)
              $k@4316)
            $k@4334)
          $k@4338)
        $k@4356)
      $k@4360))
  (= $t@4364 $t@4342)))
; [exec]
; o := __flatten_78
; [exec]
; __flatten_79 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@4379 $Perm)
(assert ($Perm.isValidVar $k@4379))
(assert ($Perm.isReadVar $k@4379 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@4379 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@4379
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                  $k@3929)
                $k@3947)
              $k@4313)
            $k@4331)
          $k@4335)
        $k@4353)
      $k@4357)
    $k@4375)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@4380 $Perm)
(assert ($Perm.isValidVar $k@4380))
(assert ($Perm.isReadVar $k@4380 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@4380 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@4380
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                  $k@3930)
                $k@3948)
              $k@4314)
            $k@4332)
          $k@4336)
        $k@4354)
      $k@4358)
    $k@4376)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 17
(assert (not (= $t@4370 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 17
(push) ; 17
; [then-branch 549] $t@4370 != Null
(declare-const $k@4381 $Perm)
(assert ($Perm.isValidVar $k@4381))
(assert ($Perm.isReadVar $k@4381 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@4381 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                    $k@3931)
                  $k@4311)
                $k@4315)
              $k@4333)
            $k@4337)
          $k@4355)
        $k@4359)
      $k@4377)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                    $k@3931)
                  $k@4311)
                $k@4315)
              $k@4333)
            $k@4337)
          $k@4355)
        $k@4359)
      $k@4377)
    $Perm.No)))
(assert (<
  $k@4381
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                  $k@3931)
                $k@4311)
              $k@4315)
            $k@4333)
          $k@4337)
        $k@4355)
      $k@4359)
    $k@4377)))
(declare-const $k@4382 $Perm)
(assert ($Perm.isValidVar $k@4382))
(assert ($Perm.isReadVar $k@4382 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@4382 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                    $k@3932)
                  $k@4312)
                $k@4316)
              $k@4334)
            $k@4338)
          $k@4356)
        $k@4360)
      $k@4378)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                    $k@3932)
                  $k@4312)
                $k@4316)
              $k@4334)
            $k@4338)
          $k@4356)
        $k@4360)
      $k@4378)
    $Perm.No)))
(assert (<
  $k@4382
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                  $k@3932)
                $k@4312)
              $k@4316)
            $k@4334)
          $k@4338)
        $k@4356)
      $k@4360)
    $k@4378)))
(declare-const sys__result@4383 $Ref)
(declare-const $t@4384 $Snap)
(declare-const $t@4385 $Snap)
(declare-const $t@4386 $Ref)
(assert (= $t@4384 ($Snap.combine $t@4385 ($SortWrappers.$RefTo$Snap $t@4386))))
(declare-const $t@4387 $Snap)
(declare-const $t@4388 $Ref)
(assert (= $t@4385 ($Snap.combine $t@4387 ($SortWrappers.$RefTo$Snap $t@4388))))
(declare-const $t@4389 $Snap)
(declare-const $t@4390 $Snap)
(assert (= $t@4387 ($Snap.combine $t@4389 $t@4390)))
(declare-const $t@4391 $Snap)
(declare-const $t@4392 $Ref)
(assert (= $t@4389 ($Snap.combine $t@4391 ($SortWrappers.$RefTo$Snap $t@4392))))
(declare-const $t@4393 $Snap)
(assert (= $t@4391 ($Snap.combine $t@4393 $Snap.unit)))
(declare-const $t@4394 Int)
(declare-const $t@4395 $Ref)
(assert (=
  $t@4393
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@4394)
    ($SortWrappers.$RefTo$Snap $t@4395))))
(declare-const $t@4396 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@4394)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@4396) $Snap.unit)))
(declare-const $k@4397 $Perm)
(assert ($Perm.isValidVar $k@4397))
(assert ($Perm.isReadVar $k@4397 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                      $k@3929)
                    $k@3947)
                  $k@4313)
                $k@4331)
              $k@4335)
            $k@4353)
          $k@4357)
        $k@4375)
      $k@4379))
  (= $t@4396 $t@4374)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                        $k@3929)
                      $k@3947)
                    $k@4313)
                  $k@4331)
                $k@4335)
              $k@4353)
            $k@4357)
          $k@4375)
        $k@4379)
      $k@4397)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                        $k@3929)
                      $k@3947)
                    $k@4313)
                  $k@4331)
                $k@4335)
              $k@4353)
            $k@4357)
          $k@4375)
        $k@4379)
      $k@4397)
    $Perm.No)))
(assert (> $t@4396 0))
(declare-const $k@4398 $Perm)
(assert ($Perm.isValidVar $k@4398))
(assert ($Perm.isReadVar $k@4398 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                      $k@3930)
                    $k@3948)
                  $k@4314)
                $k@4332)
              $k@4336)
            $k@4354)
          $k@4358)
        $k@4376)
      $k@4380))
  (= $t@4395 $t@4373)))
; [eval] diz.BlockingQueue__count != null
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                        $k@3930)
                      $k@3948)
                    $k@4314)
                  $k@4332)
                $k@4336)
              $k@4354)
            $k@4358)
          $k@4376)
        $k@4380)
      $k@4398)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                        $k@3930)
                      $k@3948)
                    $k@4314)
                  $k@4332)
                $k@4336)
              $k@4354)
            $k@4358)
          $k@4376)
        $k@4380)
      $k@4398)
    $Perm.No)))
(assert (not (= $t@4395 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 18
(assert (not (= $t@4392 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not (= $t@4392 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
; [then-branch 550] $t@4392 != Null
(assert (not (= $t@4392 $Ref.null)))
(declare-const $k@4399 $Perm)
(assert ($Perm.isValidVar $k@4399))
(assert ($Perm.isReadVar $k@4399 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                      $k@3931)
                    $k@4311)
                  $k@4315)
                $k@4333)
              $k@4337)
            $k@4355)
          $k@4359)
        $k@4377)
      $k@4381))
  (= $t@4388 $t@4366)))
(declare-const $k@4400 $Perm)
(assert ($Perm.isValidVar $k@4400))
(assert ($Perm.isReadVar $k@4400 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                      $k@3932)
                    $k@4312)
                  $k@4316)
                $k@4334)
              $k@4338)
            $k@4356)
          $k@4360)
        $k@4378)
      $k@4382))
  (= $t@4386 $t@4364)))
; [exec]
; p := __flatten_79
(pop) ; 18
(push) ; 18
; [else-branch 550] $t@4392 == Null
(assert (= $t@4392 $Ref.null))
(declare-const $k@4401 $Perm)
(assert ($Perm.isValidVar $k@4401))
(assert ($Perm.isReadVar $k@4401 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                      $k@3931)
                    $k@4311)
                  $k@4315)
                $k@4333)
              $k@4337)
            $k@4355)
          $k@4359)
        $k@4377)
      $k@4381))
  (= $t@4388 $t@4366)))
(declare-const $k@4402 $Perm)
(assert ($Perm.isValidVar $k@4402))
(assert ($Perm.isReadVar $k@4402 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                      $k@3932)
                    $k@4312)
                  $k@4316)
                $k@4334)
              $k@4338)
            $k@4356)
          $k@4360)
        $k@4378)
      $k@4382))
  (= $t@4386 $t@4364)))
; [exec]
; p := __flatten_79
(pop) ; 18
(pop) ; 17
; [dead else-branch 549] $t@4370 == Null
(pop) ; 16
(push) ; 16
; [else-branch 548] $t@4370 == Null
(assert (= $t@4370 $Ref.null))
(declare-const $k@4403 $Perm)
(assert ($Perm.isValidVar $k@4403))
(assert ($Perm.isReadVar $k@4403 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                  $k@3931)
                $k@4311)
              $k@4315)
            $k@4333)
          $k@4337)
        $k@4355)
      $k@4359))
  (= $t@4366 $t@4344)))
(declare-const $k@4404 $Perm)
(assert ($Perm.isValidVar $k@4404))
(assert ($Perm.isReadVar $k@4404 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                  $k@3932)
                $k@4312)
              $k@4316)
            $k@4334)
          $k@4338)
        $k@4356)
      $k@4360))
  (= $t@4364 $t@4342)))
; [exec]
; o := __flatten_78
; [exec]
; __flatten_79 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@4405 $Perm)
(assert ($Perm.isValidVar $k@4405))
(assert ($Perm.isReadVar $k@4405 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@4405 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@4405
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                  $k@3929)
                $k@3947)
              $k@4313)
            $k@4331)
          $k@4335)
        $k@4353)
      $k@4357)
    $k@4375)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@4406 $Perm)
(assert ($Perm.isValidVar $k@4406))
(assert ($Perm.isReadVar $k@4406 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@4406 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@4406
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                  $k@3930)
                $k@3948)
              $k@4314)
            $k@4332)
          $k@4336)
        $k@4354)
      $k@4358)
    $k@4376)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 17
(assert (not (not (= $t@4370 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 17
; [dead then-branch 551] $t@4370 != Null
(push) ; 17
; [else-branch 551] $t@4370 == Null
(declare-const $k@4407 $Perm)
(assert ($Perm.isValidVar $k@4407))
(assert ($Perm.isReadVar $k@4407 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@4407 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                    $k@3931)
                  $k@4311)
                $k@4315)
              $k@4333)
            $k@4337)
          $k@4355)
        $k@4359)
      $k@4403)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                    $k@3931)
                  $k@4311)
                $k@4315)
              $k@4333)
            $k@4337)
          $k@4355)
        $k@4359)
      $k@4403)
    $Perm.No)))
(assert (<
  $k@4407
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                  $k@3931)
                $k@4311)
              $k@4315)
            $k@4333)
          $k@4337)
        $k@4355)
      $k@4359)
    $k@4403)))
(declare-const $k@4408 $Perm)
(assert ($Perm.isValidVar $k@4408))
(assert ($Perm.isReadVar $k@4408 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@4408 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                    $k@3932)
                  $k@4312)
                $k@4316)
              $k@4334)
            $k@4338)
          $k@4356)
        $k@4360)
      $k@4404)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                    $k@3932)
                  $k@4312)
                $k@4316)
              $k@4334)
            $k@4338)
          $k@4356)
        $k@4360)
      $k@4404)
    $Perm.No)))
(assert (<
  $k@4408
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                  $k@3932)
                $k@4312)
              $k@4316)
            $k@4334)
          $k@4338)
        $k@4356)
      $k@4360)
    $k@4404)))
(declare-const sys__result@4409 $Ref)
(declare-const $t@4410 $Snap)
(declare-const $t@4411 $Snap)
(declare-const $t@4412 $Ref)
(assert (= $t@4410 ($Snap.combine $t@4411 ($SortWrappers.$RefTo$Snap $t@4412))))
(declare-const $t@4413 $Snap)
(declare-const $t@4414 $Ref)
(assert (= $t@4411 ($Snap.combine $t@4413 ($SortWrappers.$RefTo$Snap $t@4414))))
(declare-const $t@4415 $Snap)
(declare-const $t@4416 $Snap)
(assert (= $t@4413 ($Snap.combine $t@4415 $t@4416)))
(declare-const $t@4417 $Snap)
(declare-const $t@4418 $Ref)
(assert (= $t@4415 ($Snap.combine $t@4417 ($SortWrappers.$RefTo$Snap $t@4418))))
(declare-const $t@4419 $Snap)
(assert (= $t@4417 ($Snap.combine $t@4419 $Snap.unit)))
(declare-const $t@4420 Int)
(declare-const $t@4421 $Ref)
(assert (=
  $t@4419
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@4420)
    ($SortWrappers.$RefTo$Snap $t@4421))))
(declare-const $t@4422 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@4420)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@4422) $Snap.unit)))
(declare-const $k@4423 $Perm)
(assert ($Perm.isValidVar $k@4423))
(assert ($Perm.isReadVar $k@4423 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                      $k@3929)
                    $k@3947)
                  $k@4313)
                $k@4331)
              $k@4335)
            $k@4353)
          $k@4357)
        $k@4375)
      $k@4405))
  (= $t@4422 $t@4374)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                        $k@3929)
                      $k@3947)
                    $k@4313)
                  $k@4331)
                $k@4335)
              $k@4353)
            $k@4357)
          $k@4375)
        $k@4405)
      $k@4423)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                        $k@3929)
                      $k@3947)
                    $k@4313)
                  $k@4331)
                $k@4335)
              $k@4353)
            $k@4357)
          $k@4375)
        $k@4405)
      $k@4423)
    $Perm.No)))
(assert (> $t@4422 0))
(declare-const $k@4424 $Perm)
(assert ($Perm.isValidVar $k@4424))
(assert ($Perm.isReadVar $k@4424 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                      $k@3930)
                    $k@3948)
                  $k@4314)
                $k@4332)
              $k@4336)
            $k@4354)
          $k@4358)
        $k@4376)
      $k@4406))
  (= $t@4421 $t@4373)))
; [eval] diz.BlockingQueue__count != null
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                        $k@3930)
                      $k@3948)
                    $k@4314)
                  $k@4332)
                $k@4336)
              $k@4354)
            $k@4358)
          $k@4376)
        $k@4406)
      $k@4424)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                        $k@3930)
                      $k@3948)
                    $k@4314)
                  $k@4332)
                $k@4336)
              $k@4354)
            $k@4358)
          $k@4376)
        $k@4406)
      $k@4424)
    $Perm.No)))
(assert (not (= $t@4421 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 18
(assert (not (= $t@4418 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not (= $t@4418 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
; [then-branch 552] $t@4418 != Null
(assert (not (= $t@4418 $Ref.null)))
(declare-const $k@4425 $Perm)
(assert ($Perm.isValidVar $k@4425))
(assert ($Perm.isReadVar $k@4425 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                      $k@3931)
                    $k@4311)
                  $k@4315)
                $k@4333)
              $k@4337)
            $k@4355)
          $k@4359)
        $k@4403)
      $k@4407))
  (= $t@4414 $t@4366)))
(declare-const $k@4426 $Perm)
(assert ($Perm.isValidVar $k@4426))
(assert ($Perm.isReadVar $k@4426 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                      $k@3932)
                    $k@4312)
                  $k@4316)
                $k@4334)
              $k@4338)
            $k@4356)
          $k@4360)
        $k@4404)
      $k@4408))
  (= $t@4412 $t@4364)))
; [exec]
; p := __flatten_79
(pop) ; 18
(push) ; 18
; [else-branch 552] $t@4418 == Null
(assert (= $t@4418 $Ref.null))
(declare-const $k@4427 $Perm)
(assert ($Perm.isValidVar $k@4427))
(assert ($Perm.isReadVar $k@4427 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                      $k@3931)
                    $k@4311)
                  $k@4315)
                $k@4333)
              $k@4337)
            $k@4355)
          $k@4359)
        $k@4403)
      $k@4407))
  (= $t@4414 $t@4366)))
(declare-const $k@4428 $Perm)
(assert ($Perm.isValidVar $k@4428))
(assert ($Perm.isReadVar $k@4428 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                      $k@3932)
                    $k@4312)
                  $k@4316)
                $k@4334)
              $k@4338)
            $k@4356)
          $k@4360)
        $k@4404)
      $k@4408))
  (= $t@4412 $t@4364)))
; [exec]
; p := __flatten_79
(pop) ; 18
(pop) ; 17
(pop) ; 16
(pop) ; 15
; [dead else-branch 547] $t@4348 == Null
(pop) ; 14
(push) ; 14
; [else-branch 546] $t@4348 == Null
(assert (= $t@4348 $Ref.null))
(declare-const $k@4429 $Perm)
(assert ($Perm.isValidVar $k@4429))
(assert ($Perm.isReadVar $k@4429 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927) $k@3931)
            $k@4311)
          $k@4315)
        $k@4333)
      $k@4337))
  (= $t@4344 $t@4322)))
(declare-const $k@4430 $Perm)
(assert ($Perm.isValidVar $k@4430))
(assert ($Perm.isReadVar $k@4430 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928) $k@3932)
            $k@4312)
          $k@4316)
        $k@4334)
      $k@4338))
  (= $t@4342 $t@4320)))
; [exec]
; n := __flatten_77
; [exec]
; __flatten_78 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@4431 $Perm)
(assert ($Perm.isValidVar $k@4431))
(assert ($Perm.isReadVar $k@4431 $Perm.Write))
(push) ; 15
(assert (not (or (= $k@4431 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 15
(assert (<
  $k@4431
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179) $k@3929)
            $k@3947)
          $k@4313)
        $k@4331)
      $k@4335)
    $k@4353)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@4432 $Perm)
(assert ($Perm.isValidVar $k@4432))
(assert ($Perm.isReadVar $k@4432 $Perm.Write))
(push) ; 15
(assert (not (or (= $k@4432 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 15
(assert (<
  $k@4432
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180) $k@3930)
            $k@3948)
          $k@4314)
        $k@4332)
      $k@4336)
    $k@4354)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 15
(assert (not (not (= $t@4348 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 15
; [dead then-branch 553] $t@4348 != Null
(push) ; 15
; [else-branch 553] $t@4348 == Null
(declare-const $k@4433 $Perm)
(assert ($Perm.isValidVar $k@4433))
(assert ($Perm.isReadVar $k@4433 $Perm.Write))
(push) ; 16
(assert (not (or (= $k@4433 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927) $k@3931)
              $k@4311)
            $k@4315)
          $k@4333)
        $k@4337)
      $k@4429)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927) $k@3931)
              $k@4311)
            $k@4315)
          $k@4333)
        $k@4337)
      $k@4429)
    $Perm.No)))
(assert (<
  $k@4433
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927) $k@3931)
            $k@4311)
          $k@4315)
        $k@4333)
      $k@4337)
    $k@4429)))
(declare-const $k@4434 $Perm)
(assert ($Perm.isValidVar $k@4434))
(assert ($Perm.isReadVar $k@4434 $Perm.Write))
(push) ; 16
(assert (not (or (= $k@4434 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928) $k@3932)
              $k@4312)
            $k@4316)
          $k@4334)
        $k@4338)
      $k@4430)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928) $k@3932)
              $k@4312)
            $k@4316)
          $k@4334)
        $k@4338)
      $k@4430)
    $Perm.No)))
(assert (<
  $k@4434
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928) $k@3932)
            $k@4312)
          $k@4316)
        $k@4334)
      $k@4338)
    $k@4430)))
(declare-const sys__result@4435 $Ref)
(declare-const $t@4436 $Snap)
(declare-const $t@4437 $Snap)
(declare-const $t@4438 $Ref)
(assert (= $t@4436 ($Snap.combine $t@4437 ($SortWrappers.$RefTo$Snap $t@4438))))
(declare-const $t@4439 $Snap)
(declare-const $t@4440 $Ref)
(assert (= $t@4437 ($Snap.combine $t@4439 ($SortWrappers.$RefTo$Snap $t@4440))))
(declare-const $t@4441 $Snap)
(declare-const $t@4442 $Snap)
(assert (= $t@4439 ($Snap.combine $t@4441 $t@4442)))
(declare-const $t@4443 $Snap)
(declare-const $t@4444 $Ref)
(assert (= $t@4441 ($Snap.combine $t@4443 ($SortWrappers.$RefTo$Snap $t@4444))))
(declare-const $t@4445 $Snap)
(assert (= $t@4443 ($Snap.combine $t@4445 $Snap.unit)))
(declare-const $t@4446 Int)
(declare-const $t@4447 $Ref)
(assert (=
  $t@4445
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@4446)
    ($SortWrappers.$RefTo$Snap $t@4447))))
(declare-const $t@4448 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@4446)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@4448) $Snap.unit)))
(declare-const $k@4449 $Perm)
(assert ($Perm.isValidVar $k@4449))
(assert ($Perm.isReadVar $k@4449 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                  $k@3929)
                $k@3947)
              $k@4313)
            $k@4331)
          $k@4335)
        $k@4353)
      $k@4431))
  (= $t@4448 $t@4352)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                    $k@3929)
                  $k@3947)
                $k@4313)
              $k@4331)
            $k@4335)
          $k@4353)
        $k@4431)
      $k@4449)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                    $k@3929)
                  $k@3947)
                $k@4313)
              $k@4331)
            $k@4335)
          $k@4353)
        $k@4431)
      $k@4449)
    $Perm.No)))
(assert (> $t@4448 0))
(declare-const $k@4450 $Perm)
(assert ($Perm.isValidVar $k@4450))
(assert ($Perm.isReadVar $k@4450 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                  $k@3930)
                $k@3948)
              $k@4314)
            $k@4332)
          $k@4336)
        $k@4354)
      $k@4432))
  (= $t@4447 $t@4351)))
; [eval] diz.BlockingQueue__count != null
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                    $k@3930)
                  $k@3948)
                $k@4314)
              $k@4332)
            $k@4336)
          $k@4354)
        $k@4432)
      $k@4450)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                    $k@3930)
                  $k@3948)
                $k@4314)
              $k@4332)
            $k@4336)
          $k@4354)
        $k@4432)
      $k@4450)
    $Perm.No)))
(assert (not (= $t@4447 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 16
(assert (not (= $t@4444 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not (= $t@4444 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 16
(push) ; 16
; [then-branch 554] $t@4444 != Null
(assert (not (= $t@4444 $Ref.null)))
(declare-const $k@4451 $Perm)
(assert ($Perm.isValidVar $k@4451))
(assert ($Perm.isReadVar $k@4451 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                  $k@3931)
                $k@4311)
              $k@4315)
            $k@4333)
          $k@4337)
        $k@4429)
      $k@4433))
  (= $t@4440 $t@4344)))
(declare-const $k@4452 $Perm)
(assert ($Perm.isValidVar $k@4452))
(assert ($Perm.isReadVar $k@4452 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                  $k@3932)
                $k@4312)
              $k@4316)
            $k@4334)
          $k@4338)
        $k@4430)
      $k@4434))
  (= $t@4438 $t@4342)))
; [exec]
; o := __flatten_78
; [exec]
; __flatten_79 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@4453 $Perm)
(assert ($Perm.isValidVar $k@4453))
(assert ($Perm.isReadVar $k@4453 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@4453 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@4453
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                  $k@3929)
                $k@3947)
              $k@4313)
            $k@4331)
          $k@4335)
        $k@4353)
      $k@4431)
    $k@4449)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@4454 $Perm)
(assert ($Perm.isValidVar $k@4454))
(assert ($Perm.isReadVar $k@4454 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@4454 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@4454
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                  $k@3930)
                $k@3948)
              $k@4314)
            $k@4332)
          $k@4336)
        $k@4354)
      $k@4432)
    $k@4450)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 17
(assert (not (= $t@4444 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 17
(push) ; 17
; [then-branch 555] $t@4444 != Null
(declare-const $k@4455 $Perm)
(assert ($Perm.isValidVar $k@4455))
(assert ($Perm.isReadVar $k@4455 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@4455 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                    $k@3931)
                  $k@4311)
                $k@4315)
              $k@4333)
            $k@4337)
          $k@4429)
        $k@4433)
      $k@4451)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                    $k@3931)
                  $k@4311)
                $k@4315)
              $k@4333)
            $k@4337)
          $k@4429)
        $k@4433)
      $k@4451)
    $Perm.No)))
(assert (<
  $k@4455
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                  $k@3931)
                $k@4311)
              $k@4315)
            $k@4333)
          $k@4337)
        $k@4429)
      $k@4433)
    $k@4451)))
(declare-const $k@4456 $Perm)
(assert ($Perm.isValidVar $k@4456))
(assert ($Perm.isReadVar $k@4456 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@4456 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                    $k@3932)
                  $k@4312)
                $k@4316)
              $k@4334)
            $k@4338)
          $k@4430)
        $k@4434)
      $k@4452)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                    $k@3932)
                  $k@4312)
                $k@4316)
              $k@4334)
            $k@4338)
          $k@4430)
        $k@4434)
      $k@4452)
    $Perm.No)))
(assert (<
  $k@4456
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                  $k@3932)
                $k@4312)
              $k@4316)
            $k@4334)
          $k@4338)
        $k@4430)
      $k@4434)
    $k@4452)))
(declare-const sys__result@4457 $Ref)
(declare-const $t@4458 $Snap)
(declare-const $t@4459 $Snap)
(declare-const $t@4460 $Ref)
(assert (= $t@4458 ($Snap.combine $t@4459 ($SortWrappers.$RefTo$Snap $t@4460))))
(declare-const $t@4461 $Snap)
(declare-const $t@4462 $Ref)
(assert (= $t@4459 ($Snap.combine $t@4461 ($SortWrappers.$RefTo$Snap $t@4462))))
(declare-const $t@4463 $Snap)
(declare-const $t@4464 $Snap)
(assert (= $t@4461 ($Snap.combine $t@4463 $t@4464)))
(declare-const $t@4465 $Snap)
(declare-const $t@4466 $Ref)
(assert (= $t@4463 ($Snap.combine $t@4465 ($SortWrappers.$RefTo$Snap $t@4466))))
(declare-const $t@4467 $Snap)
(assert (= $t@4465 ($Snap.combine $t@4467 $Snap.unit)))
(declare-const $t@4468 Int)
(declare-const $t@4469 $Ref)
(assert (=
  $t@4467
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@4468)
    ($SortWrappers.$RefTo$Snap $t@4469))))
(declare-const $t@4470 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@4468)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@4470) $Snap.unit)))
(declare-const $k@4471 $Perm)
(assert ($Perm.isValidVar $k@4471))
(assert ($Perm.isReadVar $k@4471 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                      $k@3929)
                    $k@3947)
                  $k@4313)
                $k@4331)
              $k@4335)
            $k@4353)
          $k@4431)
        $k@4449)
      $k@4453))
  (= $t@4470 $t@4448)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                        $k@3929)
                      $k@3947)
                    $k@4313)
                  $k@4331)
                $k@4335)
              $k@4353)
            $k@4431)
          $k@4449)
        $k@4453)
      $k@4471)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                        $k@3929)
                      $k@3947)
                    $k@4313)
                  $k@4331)
                $k@4335)
              $k@4353)
            $k@4431)
          $k@4449)
        $k@4453)
      $k@4471)
    $Perm.No)))
(assert (> $t@4470 0))
(declare-const $k@4472 $Perm)
(assert ($Perm.isValidVar $k@4472))
(assert ($Perm.isReadVar $k@4472 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                      $k@3930)
                    $k@3948)
                  $k@4314)
                $k@4332)
              $k@4336)
            $k@4354)
          $k@4432)
        $k@4450)
      $k@4454))
  (= $t@4469 $t@4447)))
; [eval] diz.BlockingQueue__count != null
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                        $k@3930)
                      $k@3948)
                    $k@4314)
                  $k@4332)
                $k@4336)
              $k@4354)
            $k@4432)
          $k@4450)
        $k@4454)
      $k@4472)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                        $k@3930)
                      $k@3948)
                    $k@4314)
                  $k@4332)
                $k@4336)
              $k@4354)
            $k@4432)
          $k@4450)
        $k@4454)
      $k@4472)
    $Perm.No)))
(assert (not (= $t@4469 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 18
(assert (not (= $t@4466 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not (= $t@4466 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
; [then-branch 556] $t@4466 != Null
(assert (not (= $t@4466 $Ref.null)))
(declare-const $k@4473 $Perm)
(assert ($Perm.isValidVar $k@4473))
(assert ($Perm.isReadVar $k@4473 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                      $k@3931)
                    $k@4311)
                  $k@4315)
                $k@4333)
              $k@4337)
            $k@4429)
          $k@4433)
        $k@4451)
      $k@4455))
  (= $t@4462 $t@4440)))
(declare-const $k@4474 $Perm)
(assert ($Perm.isValidVar $k@4474))
(assert ($Perm.isReadVar $k@4474 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                      $k@3932)
                    $k@4312)
                  $k@4316)
                $k@4334)
              $k@4338)
            $k@4430)
          $k@4434)
        $k@4452)
      $k@4456))
  (= $t@4460 $t@4438)))
; [exec]
; p := __flatten_79
(pop) ; 18
(push) ; 18
; [else-branch 556] $t@4466 == Null
(assert (= $t@4466 $Ref.null))
(declare-const $k@4475 $Perm)
(assert ($Perm.isValidVar $k@4475))
(assert ($Perm.isReadVar $k@4475 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                      $k@3931)
                    $k@4311)
                  $k@4315)
                $k@4333)
              $k@4337)
            $k@4429)
          $k@4433)
        $k@4451)
      $k@4455))
  (= $t@4462 $t@4440)))
(declare-const $k@4476 $Perm)
(assert ($Perm.isValidVar $k@4476))
(assert ($Perm.isReadVar $k@4476 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                      $k@3932)
                    $k@4312)
                  $k@4316)
                $k@4334)
              $k@4338)
            $k@4430)
          $k@4434)
        $k@4452)
      $k@4456))
  (= $t@4460 $t@4438)))
; [exec]
; p := __flatten_79
(pop) ; 18
(pop) ; 17
; [dead else-branch 555] $t@4444 == Null
(pop) ; 16
(push) ; 16
; [else-branch 554] $t@4444 == Null
(assert (= $t@4444 $Ref.null))
(declare-const $k@4477 $Perm)
(assert ($Perm.isValidVar $k@4477))
(assert ($Perm.isReadVar $k@4477 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                  $k@3931)
                $k@4311)
              $k@4315)
            $k@4333)
          $k@4337)
        $k@4429)
      $k@4433))
  (= $t@4440 $t@4344)))
(declare-const $k@4478 $Perm)
(assert ($Perm.isValidVar $k@4478))
(assert ($Perm.isReadVar $k@4478 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                  $k@3932)
                $k@4312)
              $k@4316)
            $k@4334)
          $k@4338)
        $k@4430)
      $k@4434))
  (= $t@4438 $t@4342)))
; [exec]
; o := __flatten_78
; [exec]
; __flatten_79 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@4479 $Perm)
(assert ($Perm.isValidVar $k@4479))
(assert ($Perm.isReadVar $k@4479 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@4479 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@4479
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                  $k@3929)
                $k@3947)
              $k@4313)
            $k@4331)
          $k@4335)
        $k@4353)
      $k@4431)
    $k@4449)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@4480 $Perm)
(assert ($Perm.isValidVar $k@4480))
(assert ($Perm.isReadVar $k@4480 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@4480 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@4480
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                  $k@3930)
                $k@3948)
              $k@4314)
            $k@4332)
          $k@4336)
        $k@4354)
      $k@4432)
    $k@4450)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 17
(assert (not (not (= $t@4444 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 17
; [dead then-branch 557] $t@4444 != Null
(push) ; 17
; [else-branch 557] $t@4444 == Null
(declare-const $k@4481 $Perm)
(assert ($Perm.isValidVar $k@4481))
(assert ($Perm.isReadVar $k@4481 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@4481 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                    $k@3931)
                  $k@4311)
                $k@4315)
              $k@4333)
            $k@4337)
          $k@4429)
        $k@4433)
      $k@4477)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                    $k@3931)
                  $k@4311)
                $k@4315)
              $k@4333)
            $k@4337)
          $k@4429)
        $k@4433)
      $k@4477)
    $Perm.No)))
(assert (<
  $k@4481
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                  $k@3931)
                $k@4311)
              $k@4315)
            $k@4333)
          $k@4337)
        $k@4429)
      $k@4433)
    $k@4477)))
(declare-const $k@4482 $Perm)
(assert ($Perm.isValidVar $k@4482))
(assert ($Perm.isReadVar $k@4482 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@4482 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                    $k@3932)
                  $k@4312)
                $k@4316)
              $k@4334)
            $k@4338)
          $k@4430)
        $k@4434)
      $k@4478)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                    $k@3932)
                  $k@4312)
                $k@4316)
              $k@4334)
            $k@4338)
          $k@4430)
        $k@4434)
      $k@4478)
    $Perm.No)))
(assert (<
  $k@4482
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                  $k@3932)
                $k@4312)
              $k@4316)
            $k@4334)
          $k@4338)
        $k@4430)
      $k@4434)
    $k@4478)))
(declare-const sys__result@4483 $Ref)
(declare-const $t@4484 $Snap)
(declare-const $t@4485 $Snap)
(declare-const $t@4486 $Ref)
(assert (= $t@4484 ($Snap.combine $t@4485 ($SortWrappers.$RefTo$Snap $t@4486))))
(declare-const $t@4487 $Snap)
(declare-const $t@4488 $Ref)
(assert (= $t@4485 ($Snap.combine $t@4487 ($SortWrappers.$RefTo$Snap $t@4488))))
(declare-const $t@4489 $Snap)
(declare-const $t@4490 $Snap)
(assert (= $t@4487 ($Snap.combine $t@4489 $t@4490)))
(declare-const $t@4491 $Snap)
(declare-const $t@4492 $Ref)
(assert (= $t@4489 ($Snap.combine $t@4491 ($SortWrappers.$RefTo$Snap $t@4492))))
(declare-const $t@4493 $Snap)
(assert (= $t@4491 ($Snap.combine $t@4493 $Snap.unit)))
(declare-const $t@4494 Int)
(declare-const $t@4495 $Ref)
(assert (=
  $t@4493
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@4494)
    ($SortWrappers.$RefTo$Snap $t@4495))))
(declare-const $t@4496 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@4494)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@4496) $Snap.unit)))
(declare-const $k@4497 $Perm)
(assert ($Perm.isValidVar $k@4497))
(assert ($Perm.isReadVar $k@4497 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                      $k@3929)
                    $k@3947)
                  $k@4313)
                $k@4331)
              $k@4335)
            $k@4353)
          $k@4431)
        $k@4449)
      $k@4479))
  (= $t@4496 $t@4448)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                        $k@3929)
                      $k@3947)
                    $k@4313)
                  $k@4331)
                $k@4335)
              $k@4353)
            $k@4431)
          $k@4449)
        $k@4479)
      $k@4497)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                        $k@3929)
                      $k@3947)
                    $k@4313)
                  $k@4331)
                $k@4335)
              $k@4353)
            $k@4431)
          $k@4449)
        $k@4479)
      $k@4497)
    $Perm.No)))
(assert (> $t@4496 0))
(declare-const $k@4498 $Perm)
(assert ($Perm.isValidVar $k@4498))
(assert ($Perm.isReadVar $k@4498 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                      $k@3930)
                    $k@3948)
                  $k@4314)
                $k@4332)
              $k@4336)
            $k@4354)
          $k@4432)
        $k@4450)
      $k@4480))
  (= $t@4495 $t@4447)))
; [eval] diz.BlockingQueue__count != null
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                        $k@3930)
                      $k@3948)
                    $k@4314)
                  $k@4332)
                $k@4336)
              $k@4354)
            $k@4432)
          $k@4450)
        $k@4480)
      $k@4498)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                        $k@3930)
                      $k@3948)
                    $k@4314)
                  $k@4332)
                $k@4336)
              $k@4354)
            $k@4432)
          $k@4450)
        $k@4480)
      $k@4498)
    $Perm.No)))
(assert (not (= $t@4495 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 18
(assert (not (= $t@4492 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not (= $t@4492 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
; [then-branch 558] $t@4492 != Null
(assert (not (= $t@4492 $Ref.null)))
(declare-const $k@4499 $Perm)
(assert ($Perm.isValidVar $k@4499))
(assert ($Perm.isReadVar $k@4499 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                      $k@3931)
                    $k@4311)
                  $k@4315)
                $k@4333)
              $k@4337)
            $k@4429)
          $k@4433)
        $k@4477)
      $k@4481))
  (= $t@4488 $t@4440)))
(declare-const $k@4500 $Perm)
(assert ($Perm.isValidVar $k@4500))
(assert ($Perm.isReadVar $k@4500 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                      $k@3932)
                    $k@4312)
                  $k@4316)
                $k@4334)
              $k@4338)
            $k@4430)
          $k@4434)
        $k@4478)
      $k@4482))
  (= $t@4486 $t@4438)))
; [exec]
; p := __flatten_79
(pop) ; 18
(push) ; 18
; [else-branch 558] $t@4492 == Null
(assert (= $t@4492 $Ref.null))
(declare-const $k@4501 $Perm)
(assert ($Perm.isValidVar $k@4501))
(assert ($Perm.isReadVar $k@4501 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                      $k@3931)
                    $k@4311)
                  $k@4315)
                $k@4333)
              $k@4337)
            $k@4429)
          $k@4433)
        $k@4477)
      $k@4481))
  (= $t@4488 $t@4440)))
(declare-const $k@4502 $Perm)
(assert ($Perm.isValidVar $k@4502))
(assert ($Perm.isReadVar $k@4502 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                      $k@3932)
                    $k@4312)
                  $k@4316)
                $k@4334)
              $k@4338)
            $k@4430)
          $k@4434)
        $k@4478)
      $k@4482))
  (= $t@4486 $t@4438)))
; [exec]
; p := __flatten_79
(pop) ; 18
(pop) ; 17
(pop) ; 16
(pop) ; 15
(pop) ; 14
(pop) ; 13
; [dead else-branch 545] $t@4326 == Null
(pop) ; 12
(push) ; 12
; [else-branch 544] $t@4326 == Null
(assert (= $t@4326 $Ref.null))
(declare-const $k@4503 $Perm)
(assert ($Perm.isValidVar $k@4503))
(assert ($Perm.isReadVar $k@4503 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927) $k@3931)
        $k@4311)
      $k@4315))
  (= $t@4322 $t@3938)))
(declare-const $k@4504 $Perm)
(assert ($Perm.isValidVar $k@4504))
(assert ($Perm.isReadVar $k@4504 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928) $k@3932)
        $k@4312)
      $k@4316))
  (= $t@4320 $t@3936)))
; [exec]
; b := __flatten_76
; [exec]
; __flatten_77 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@4505 $Perm)
(assert ($Perm.isValidVar $k@4505))
(assert ($Perm.isReadVar $k@4505 $Perm.Write))
(push) ; 13
(assert (not (or (= $k@4505 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 13
(assert (<
  $k@4505
  (+
    (-
      (+
        (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179) $k@3929)
        $k@3947)
      $k@4313)
    $k@4331)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@4506 $Perm)
(assert ($Perm.isValidVar $k@4506))
(assert ($Perm.isReadVar $k@4506 $Perm.Write))
(push) ; 13
(assert (not (or (= $k@4506 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 13
(assert (<
  $k@4506
  (+
    (-
      (+
        (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180) $k@3930)
        $k@3948)
      $k@4314)
    $k@4332)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 13
(assert (not (not (= $t@4326 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 13
; [dead then-branch 559] $t@4326 != Null
(push) ; 13
; [else-branch 559] $t@4326 == Null
(declare-const $k@4507 $Perm)
(assert ($Perm.isValidVar $k@4507))
(assert ($Perm.isReadVar $k@4507 $Perm.Write))
(push) ; 14
(assert (not (or (= $k@4507 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(push) ; 14
(assert (not (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927) $k@3931)
          $k@4311)
        $k@4315)
      $k@4503)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(assert (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927) $k@3931)
          $k@4311)
        $k@4315)
      $k@4503)
    $Perm.No)))
(assert (<
  $k@4507
  (+
    (-
      (+
        (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927) $k@3931)
        $k@4311)
      $k@4315)
    $k@4503)))
(declare-const $k@4508 $Perm)
(assert ($Perm.isValidVar $k@4508))
(assert ($Perm.isReadVar $k@4508 $Perm.Write))
(push) ; 14
(assert (not (or (= $k@4508 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(push) ; 14
(assert (not (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928) $k@3932)
          $k@4312)
        $k@4316)
      $k@4504)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(assert (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928) $k@3932)
          $k@4312)
        $k@4316)
      $k@4504)
    $Perm.No)))
(assert (<
  $k@4508
  (+
    (-
      (+
        (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928) $k@3932)
        $k@4312)
      $k@4316)
    $k@4504)))
(declare-const sys__result@4509 $Ref)
(declare-const $t@4510 $Snap)
(declare-const $t@4511 $Snap)
(declare-const $t@4512 $Ref)
(assert (= $t@4510 ($Snap.combine $t@4511 ($SortWrappers.$RefTo$Snap $t@4512))))
(declare-const $t@4513 $Snap)
(declare-const $t@4514 $Ref)
(assert (= $t@4511 ($Snap.combine $t@4513 ($SortWrappers.$RefTo$Snap $t@4514))))
(declare-const $t@4515 $Snap)
(declare-const $t@4516 $Snap)
(assert (= $t@4513 ($Snap.combine $t@4515 $t@4516)))
(declare-const $t@4517 $Snap)
(declare-const $t@4518 $Ref)
(assert (= $t@4515 ($Snap.combine $t@4517 ($SortWrappers.$RefTo$Snap $t@4518))))
(declare-const $t@4519 $Snap)
(assert (= $t@4517 ($Snap.combine $t@4519 $Snap.unit)))
(declare-const $t@4520 Int)
(declare-const $t@4521 $Ref)
(assert (=
  $t@4519
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@4520)
    ($SortWrappers.$RefTo$Snap $t@4521))))
(declare-const $t@4522 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@4520)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@4522) $Snap.unit)))
(declare-const $k@4523 $Perm)
(assert ($Perm.isValidVar $k@4523))
(assert ($Perm.isReadVar $k@4523 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179) $k@3929)
            $k@3947)
          $k@4313)
        $k@4331)
      $k@4505))
  (= $t@4522 $t@4330)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 14
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179) $k@3929)
              $k@3947)
            $k@4313)
          $k@4331)
        $k@4505)
      $k@4523)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179) $k@3929)
              $k@3947)
            $k@4313)
          $k@4331)
        $k@4505)
      $k@4523)
    $Perm.No)))
(assert (> $t@4522 0))
(declare-const $k@4524 $Perm)
(assert ($Perm.isValidVar $k@4524))
(assert ($Perm.isReadVar $k@4524 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180) $k@3930)
            $k@3948)
          $k@4314)
        $k@4332)
      $k@4506))
  (= $t@4521 $t@4329)))
; [eval] diz.BlockingQueue__count != null
(push) ; 14
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180) $k@3930)
              $k@3948)
            $k@4314)
          $k@4332)
        $k@4506)
      $k@4524)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180) $k@3930)
              $k@3948)
            $k@4314)
          $k@4332)
        $k@4506)
      $k@4524)
    $Perm.No)))
(assert (not (= $t@4521 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 14
(assert (not (= $t@4518 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 14
(push) ; 14
(assert (not (not (= $t@4518 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 14
(push) ; 14
; [then-branch 560] $t@4518 != Null
(assert (not (= $t@4518 $Ref.null)))
(declare-const $k@4525 $Perm)
(assert ($Perm.isValidVar $k@4525))
(assert ($Perm.isReadVar $k@4525 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927) $k@3931)
            $k@4311)
          $k@4315)
        $k@4503)
      $k@4507))
  (= $t@4514 $t@4322)))
(declare-const $k@4526 $Perm)
(assert ($Perm.isValidVar $k@4526))
(assert ($Perm.isReadVar $k@4526 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928) $k@3932)
            $k@4312)
          $k@4316)
        $k@4504)
      $k@4508))
  (= $t@4512 $t@4320)))
; [exec]
; n := __flatten_77
; [exec]
; __flatten_78 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@4527 $Perm)
(assert ($Perm.isValidVar $k@4527))
(assert ($Perm.isReadVar $k@4527 $Perm.Write))
(push) ; 15
(assert (not (or (= $k@4527 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 15
(assert (<
  $k@4527
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179) $k@3929)
            $k@3947)
          $k@4313)
        $k@4331)
      $k@4505)
    $k@4523)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@4528 $Perm)
(assert ($Perm.isValidVar $k@4528))
(assert ($Perm.isReadVar $k@4528 $Perm.Write))
(push) ; 15
(assert (not (or (= $k@4528 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 15
(assert (<
  $k@4528
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180) $k@3930)
            $k@3948)
          $k@4314)
        $k@4332)
      $k@4506)
    $k@4524)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 15
(assert (not (= $t@4518 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 15
(push) ; 15
; [then-branch 561] $t@4518 != Null
(declare-const $k@4529 $Perm)
(assert ($Perm.isValidVar $k@4529))
(assert ($Perm.isReadVar $k@4529 $Perm.Write))
(push) ; 16
(assert (not (or (= $k@4529 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927) $k@3931)
              $k@4311)
            $k@4315)
          $k@4503)
        $k@4507)
      $k@4525)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927) $k@3931)
              $k@4311)
            $k@4315)
          $k@4503)
        $k@4507)
      $k@4525)
    $Perm.No)))
(assert (<
  $k@4529
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927) $k@3931)
            $k@4311)
          $k@4315)
        $k@4503)
      $k@4507)
    $k@4525)))
(declare-const $k@4530 $Perm)
(assert ($Perm.isValidVar $k@4530))
(assert ($Perm.isReadVar $k@4530 $Perm.Write))
(push) ; 16
(assert (not (or (= $k@4530 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928) $k@3932)
              $k@4312)
            $k@4316)
          $k@4504)
        $k@4508)
      $k@4526)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928) $k@3932)
              $k@4312)
            $k@4316)
          $k@4504)
        $k@4508)
      $k@4526)
    $Perm.No)))
(assert (<
  $k@4530
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928) $k@3932)
            $k@4312)
          $k@4316)
        $k@4504)
      $k@4508)
    $k@4526)))
(declare-const sys__result@4531 $Ref)
(declare-const $t@4532 $Snap)
(declare-const $t@4533 $Snap)
(declare-const $t@4534 $Ref)
(assert (= $t@4532 ($Snap.combine $t@4533 ($SortWrappers.$RefTo$Snap $t@4534))))
(declare-const $t@4535 $Snap)
(declare-const $t@4536 $Ref)
(assert (= $t@4533 ($Snap.combine $t@4535 ($SortWrappers.$RefTo$Snap $t@4536))))
(declare-const $t@4537 $Snap)
(declare-const $t@4538 $Snap)
(assert (= $t@4535 ($Snap.combine $t@4537 $t@4538)))
(declare-const $t@4539 $Snap)
(declare-const $t@4540 $Ref)
(assert (= $t@4537 ($Snap.combine $t@4539 ($SortWrappers.$RefTo$Snap $t@4540))))
(declare-const $t@4541 $Snap)
(assert (= $t@4539 ($Snap.combine $t@4541 $Snap.unit)))
(declare-const $t@4542 Int)
(declare-const $t@4543 $Ref)
(assert (=
  $t@4541
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@4542)
    ($SortWrappers.$RefTo$Snap $t@4543))))
(declare-const $t@4544 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@4542)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@4544) $Snap.unit)))
(declare-const $k@4545 $Perm)
(assert ($Perm.isValidVar $k@4545))
(assert ($Perm.isReadVar $k@4545 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                  $k@3929)
                $k@3947)
              $k@4313)
            $k@4331)
          $k@4505)
        $k@4523)
      $k@4527))
  (= $t@4544 $t@4522)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                    $k@3929)
                  $k@3947)
                $k@4313)
              $k@4331)
            $k@4505)
          $k@4523)
        $k@4527)
      $k@4545)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                    $k@3929)
                  $k@3947)
                $k@4313)
              $k@4331)
            $k@4505)
          $k@4523)
        $k@4527)
      $k@4545)
    $Perm.No)))
(assert (> $t@4544 0))
(declare-const $k@4546 $Perm)
(assert ($Perm.isValidVar $k@4546))
(assert ($Perm.isReadVar $k@4546 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                  $k@3930)
                $k@3948)
              $k@4314)
            $k@4332)
          $k@4506)
        $k@4524)
      $k@4528))
  (= $t@4543 $t@4521)))
; [eval] diz.BlockingQueue__count != null
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                    $k@3930)
                  $k@3948)
                $k@4314)
              $k@4332)
            $k@4506)
          $k@4524)
        $k@4528)
      $k@4546)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                    $k@3930)
                  $k@3948)
                $k@4314)
              $k@4332)
            $k@4506)
          $k@4524)
        $k@4528)
      $k@4546)
    $Perm.No)))
(assert (not (= $t@4543 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 16
(assert (not (= $t@4540 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not (= $t@4540 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 16
(push) ; 16
; [then-branch 562] $t@4540 != Null
(assert (not (= $t@4540 $Ref.null)))
(declare-const $k@4547 $Perm)
(assert ($Perm.isValidVar $k@4547))
(assert ($Perm.isReadVar $k@4547 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                  $k@3931)
                $k@4311)
              $k@4315)
            $k@4503)
          $k@4507)
        $k@4525)
      $k@4529))
  (= $t@4536 $t@4514)))
(declare-const $k@4548 $Perm)
(assert ($Perm.isValidVar $k@4548))
(assert ($Perm.isReadVar $k@4548 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                  $k@3932)
                $k@4312)
              $k@4316)
            $k@4504)
          $k@4508)
        $k@4526)
      $k@4530))
  (= $t@4534 $t@4512)))
; [exec]
; o := __flatten_78
; [exec]
; __flatten_79 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@4549 $Perm)
(assert ($Perm.isValidVar $k@4549))
(assert ($Perm.isReadVar $k@4549 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@4549 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@4549
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                  $k@3929)
                $k@3947)
              $k@4313)
            $k@4331)
          $k@4505)
        $k@4523)
      $k@4527)
    $k@4545)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@4550 $Perm)
(assert ($Perm.isValidVar $k@4550))
(assert ($Perm.isReadVar $k@4550 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@4550 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@4550
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                  $k@3930)
                $k@3948)
              $k@4314)
            $k@4332)
          $k@4506)
        $k@4524)
      $k@4528)
    $k@4546)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 17
(assert (not (= $t@4540 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 17
(push) ; 17
; [then-branch 563] $t@4540 != Null
(declare-const $k@4551 $Perm)
(assert ($Perm.isValidVar $k@4551))
(assert ($Perm.isReadVar $k@4551 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@4551 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                    $k@3931)
                  $k@4311)
                $k@4315)
              $k@4503)
            $k@4507)
          $k@4525)
        $k@4529)
      $k@4547)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                    $k@3931)
                  $k@4311)
                $k@4315)
              $k@4503)
            $k@4507)
          $k@4525)
        $k@4529)
      $k@4547)
    $Perm.No)))
(assert (<
  $k@4551
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                  $k@3931)
                $k@4311)
              $k@4315)
            $k@4503)
          $k@4507)
        $k@4525)
      $k@4529)
    $k@4547)))
(declare-const $k@4552 $Perm)
(assert ($Perm.isValidVar $k@4552))
(assert ($Perm.isReadVar $k@4552 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@4552 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                    $k@3932)
                  $k@4312)
                $k@4316)
              $k@4504)
            $k@4508)
          $k@4526)
        $k@4530)
      $k@4548)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                    $k@3932)
                  $k@4312)
                $k@4316)
              $k@4504)
            $k@4508)
          $k@4526)
        $k@4530)
      $k@4548)
    $Perm.No)))
(assert (<
  $k@4552
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                  $k@3932)
                $k@4312)
              $k@4316)
            $k@4504)
          $k@4508)
        $k@4526)
      $k@4530)
    $k@4548)))
(declare-const sys__result@4553 $Ref)
(declare-const $t@4554 $Snap)
(declare-const $t@4555 $Snap)
(declare-const $t@4556 $Ref)
(assert (= $t@4554 ($Snap.combine $t@4555 ($SortWrappers.$RefTo$Snap $t@4556))))
(declare-const $t@4557 $Snap)
(declare-const $t@4558 $Ref)
(assert (= $t@4555 ($Snap.combine $t@4557 ($SortWrappers.$RefTo$Snap $t@4558))))
(declare-const $t@4559 $Snap)
(declare-const $t@4560 $Snap)
(assert (= $t@4557 ($Snap.combine $t@4559 $t@4560)))
(declare-const $t@4561 $Snap)
(declare-const $t@4562 $Ref)
(assert (= $t@4559 ($Snap.combine $t@4561 ($SortWrappers.$RefTo$Snap $t@4562))))
(declare-const $t@4563 $Snap)
(assert (= $t@4561 ($Snap.combine $t@4563 $Snap.unit)))
(declare-const $t@4564 Int)
(declare-const $t@4565 $Ref)
(assert (=
  $t@4563
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@4564)
    ($SortWrappers.$RefTo$Snap $t@4565))))
(declare-const $t@4566 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@4564)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@4566) $Snap.unit)))
(declare-const $k@4567 $Perm)
(assert ($Perm.isValidVar $k@4567))
(assert ($Perm.isReadVar $k@4567 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                      $k@3929)
                    $k@3947)
                  $k@4313)
                $k@4331)
              $k@4505)
            $k@4523)
          $k@4527)
        $k@4545)
      $k@4549))
  (= $t@4566 $t@4544)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                        $k@3929)
                      $k@3947)
                    $k@4313)
                  $k@4331)
                $k@4505)
              $k@4523)
            $k@4527)
          $k@4545)
        $k@4549)
      $k@4567)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                        $k@3929)
                      $k@3947)
                    $k@4313)
                  $k@4331)
                $k@4505)
              $k@4523)
            $k@4527)
          $k@4545)
        $k@4549)
      $k@4567)
    $Perm.No)))
(assert (> $t@4566 0))
(declare-const $k@4568 $Perm)
(assert ($Perm.isValidVar $k@4568))
(assert ($Perm.isReadVar $k@4568 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                      $k@3930)
                    $k@3948)
                  $k@4314)
                $k@4332)
              $k@4506)
            $k@4524)
          $k@4528)
        $k@4546)
      $k@4550))
  (= $t@4565 $t@4543)))
; [eval] diz.BlockingQueue__count != null
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                        $k@3930)
                      $k@3948)
                    $k@4314)
                  $k@4332)
                $k@4506)
              $k@4524)
            $k@4528)
          $k@4546)
        $k@4550)
      $k@4568)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                        $k@3930)
                      $k@3948)
                    $k@4314)
                  $k@4332)
                $k@4506)
              $k@4524)
            $k@4528)
          $k@4546)
        $k@4550)
      $k@4568)
    $Perm.No)))
(assert (not (= $t@4565 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 18
(assert (not (= $t@4562 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not (= $t@4562 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
; [then-branch 564] $t@4562 != Null
(assert (not (= $t@4562 $Ref.null)))
(declare-const $k@4569 $Perm)
(assert ($Perm.isValidVar $k@4569))
(assert ($Perm.isReadVar $k@4569 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                      $k@3931)
                    $k@4311)
                  $k@4315)
                $k@4503)
              $k@4507)
            $k@4525)
          $k@4529)
        $k@4547)
      $k@4551))
  (= $t@4558 $t@4536)))
(declare-const $k@4570 $Perm)
(assert ($Perm.isValidVar $k@4570))
(assert ($Perm.isReadVar $k@4570 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                      $k@3932)
                    $k@4312)
                  $k@4316)
                $k@4504)
              $k@4508)
            $k@4526)
          $k@4530)
        $k@4548)
      $k@4552))
  (= $t@4556 $t@4534)))
; [exec]
; p := __flatten_79
(pop) ; 18
(push) ; 18
; [else-branch 564] $t@4562 == Null
(assert (= $t@4562 $Ref.null))
(declare-const $k@4571 $Perm)
(assert ($Perm.isValidVar $k@4571))
(assert ($Perm.isReadVar $k@4571 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                      $k@3931)
                    $k@4311)
                  $k@4315)
                $k@4503)
              $k@4507)
            $k@4525)
          $k@4529)
        $k@4547)
      $k@4551))
  (= $t@4558 $t@4536)))
(declare-const $k@4572 $Perm)
(assert ($Perm.isValidVar $k@4572))
(assert ($Perm.isReadVar $k@4572 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                      $k@3932)
                    $k@4312)
                  $k@4316)
                $k@4504)
              $k@4508)
            $k@4526)
          $k@4530)
        $k@4548)
      $k@4552))
  (= $t@4556 $t@4534)))
; [exec]
; p := __flatten_79
(pop) ; 18
(pop) ; 17
; [dead else-branch 563] $t@4540 == Null
(pop) ; 16
(push) ; 16
; [else-branch 562] $t@4540 == Null
(assert (= $t@4540 $Ref.null))
(declare-const $k@4573 $Perm)
(assert ($Perm.isValidVar $k@4573))
(assert ($Perm.isReadVar $k@4573 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                  $k@3931)
                $k@4311)
              $k@4315)
            $k@4503)
          $k@4507)
        $k@4525)
      $k@4529))
  (= $t@4536 $t@4514)))
(declare-const $k@4574 $Perm)
(assert ($Perm.isValidVar $k@4574))
(assert ($Perm.isReadVar $k@4574 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                  $k@3932)
                $k@4312)
              $k@4316)
            $k@4504)
          $k@4508)
        $k@4526)
      $k@4530))
  (= $t@4534 $t@4512)))
; [exec]
; o := __flatten_78
; [exec]
; __flatten_79 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@4575 $Perm)
(assert ($Perm.isValidVar $k@4575))
(assert ($Perm.isReadVar $k@4575 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@4575 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@4575
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                  $k@3929)
                $k@3947)
              $k@4313)
            $k@4331)
          $k@4505)
        $k@4523)
      $k@4527)
    $k@4545)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@4576 $Perm)
(assert ($Perm.isValidVar $k@4576))
(assert ($Perm.isReadVar $k@4576 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@4576 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@4576
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                  $k@3930)
                $k@3948)
              $k@4314)
            $k@4332)
          $k@4506)
        $k@4524)
      $k@4528)
    $k@4546)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 17
(assert (not (not (= $t@4540 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 17
; [dead then-branch 565] $t@4540 != Null
(push) ; 17
; [else-branch 565] $t@4540 == Null
(declare-const $k@4577 $Perm)
(assert ($Perm.isValidVar $k@4577))
(assert ($Perm.isReadVar $k@4577 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@4577 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                    $k@3931)
                  $k@4311)
                $k@4315)
              $k@4503)
            $k@4507)
          $k@4525)
        $k@4529)
      $k@4573)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                    $k@3931)
                  $k@4311)
                $k@4315)
              $k@4503)
            $k@4507)
          $k@4525)
        $k@4529)
      $k@4573)
    $Perm.No)))
(assert (<
  $k@4577
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                  $k@3931)
                $k@4311)
              $k@4315)
            $k@4503)
          $k@4507)
        $k@4525)
      $k@4529)
    $k@4573)))
(declare-const $k@4578 $Perm)
(assert ($Perm.isValidVar $k@4578))
(assert ($Perm.isReadVar $k@4578 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@4578 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                    $k@3932)
                  $k@4312)
                $k@4316)
              $k@4504)
            $k@4508)
          $k@4526)
        $k@4530)
      $k@4574)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                    $k@3932)
                  $k@4312)
                $k@4316)
              $k@4504)
            $k@4508)
          $k@4526)
        $k@4530)
      $k@4574)
    $Perm.No)))
(assert (<
  $k@4578
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                  $k@3932)
                $k@4312)
              $k@4316)
            $k@4504)
          $k@4508)
        $k@4526)
      $k@4530)
    $k@4574)))
(declare-const sys__result@4579 $Ref)
(declare-const $t@4580 $Snap)
(declare-const $t@4581 $Snap)
(declare-const $t@4582 $Ref)
(assert (= $t@4580 ($Snap.combine $t@4581 ($SortWrappers.$RefTo$Snap $t@4582))))
(declare-const $t@4583 $Snap)
(declare-const $t@4584 $Ref)
(assert (= $t@4581 ($Snap.combine $t@4583 ($SortWrappers.$RefTo$Snap $t@4584))))
(declare-const $t@4585 $Snap)
(declare-const $t@4586 $Snap)
(assert (= $t@4583 ($Snap.combine $t@4585 $t@4586)))
(declare-const $t@4587 $Snap)
(declare-const $t@4588 $Ref)
(assert (= $t@4585 ($Snap.combine $t@4587 ($SortWrappers.$RefTo$Snap $t@4588))))
(declare-const $t@4589 $Snap)
(assert (= $t@4587 ($Snap.combine $t@4589 $Snap.unit)))
(declare-const $t@4590 Int)
(declare-const $t@4591 $Ref)
(assert (=
  $t@4589
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@4590)
    ($SortWrappers.$RefTo$Snap $t@4591))))
(declare-const $t@4592 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@4590)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@4592) $Snap.unit)))
(declare-const $k@4593 $Perm)
(assert ($Perm.isValidVar $k@4593))
(assert ($Perm.isReadVar $k@4593 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                      $k@3929)
                    $k@3947)
                  $k@4313)
                $k@4331)
              $k@4505)
            $k@4523)
          $k@4527)
        $k@4545)
      $k@4575))
  (= $t@4592 $t@4544)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                        $k@3929)
                      $k@3947)
                    $k@4313)
                  $k@4331)
                $k@4505)
              $k@4523)
            $k@4527)
          $k@4545)
        $k@4575)
      $k@4593)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                        $k@3929)
                      $k@3947)
                    $k@4313)
                  $k@4331)
                $k@4505)
              $k@4523)
            $k@4527)
          $k@4545)
        $k@4575)
      $k@4593)
    $Perm.No)))
(assert (> $t@4592 0))
(declare-const $k@4594 $Perm)
(assert ($Perm.isValidVar $k@4594))
(assert ($Perm.isReadVar $k@4594 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                      $k@3930)
                    $k@3948)
                  $k@4314)
                $k@4332)
              $k@4506)
            $k@4524)
          $k@4528)
        $k@4546)
      $k@4576))
  (= $t@4591 $t@4543)))
; [eval] diz.BlockingQueue__count != null
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                        $k@3930)
                      $k@3948)
                    $k@4314)
                  $k@4332)
                $k@4506)
              $k@4524)
            $k@4528)
          $k@4546)
        $k@4576)
      $k@4594)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                        $k@3930)
                      $k@3948)
                    $k@4314)
                  $k@4332)
                $k@4506)
              $k@4524)
            $k@4528)
          $k@4546)
        $k@4576)
      $k@4594)
    $Perm.No)))
(assert (not (= $t@4591 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 18
(assert (not (= $t@4588 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not (= $t@4588 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
; [then-branch 566] $t@4588 != Null
(assert (not (= $t@4588 $Ref.null)))
(declare-const $k@4595 $Perm)
(assert ($Perm.isValidVar $k@4595))
(assert ($Perm.isReadVar $k@4595 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                      $k@3931)
                    $k@4311)
                  $k@4315)
                $k@4503)
              $k@4507)
            $k@4525)
          $k@4529)
        $k@4573)
      $k@4577))
  (= $t@4584 $t@4536)))
(declare-const $k@4596 $Perm)
(assert ($Perm.isValidVar $k@4596))
(assert ($Perm.isReadVar $k@4596 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                      $k@3932)
                    $k@4312)
                  $k@4316)
                $k@4504)
              $k@4508)
            $k@4526)
          $k@4530)
        $k@4574)
      $k@4578))
  (= $t@4582 $t@4534)))
; [exec]
; p := __flatten_79
(pop) ; 18
(push) ; 18
; [else-branch 566] $t@4588 == Null
(assert (= $t@4588 $Ref.null))
(declare-const $k@4597 $Perm)
(assert ($Perm.isValidVar $k@4597))
(assert ($Perm.isReadVar $k@4597 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                      $k@3931)
                    $k@4311)
                  $k@4315)
                $k@4503)
              $k@4507)
            $k@4525)
          $k@4529)
        $k@4573)
      $k@4577))
  (= $t@4584 $t@4536)))
(declare-const $k@4598 $Perm)
(assert ($Perm.isValidVar $k@4598))
(assert ($Perm.isReadVar $k@4598 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                      $k@3932)
                    $k@4312)
                  $k@4316)
                $k@4504)
              $k@4508)
            $k@4526)
          $k@4530)
        $k@4574)
      $k@4578))
  (= $t@4582 $t@4534)))
; [exec]
; p := __flatten_79
(pop) ; 18
(pop) ; 17
(pop) ; 16
(pop) ; 15
; [dead else-branch 561] $t@4518 == Null
(pop) ; 14
(push) ; 14
; [else-branch 560] $t@4518 == Null
(assert (= $t@4518 $Ref.null))
(declare-const $k@4599 $Perm)
(assert ($Perm.isValidVar $k@4599))
(assert ($Perm.isReadVar $k@4599 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927) $k@3931)
            $k@4311)
          $k@4315)
        $k@4503)
      $k@4507))
  (= $t@4514 $t@4322)))
(declare-const $k@4600 $Perm)
(assert ($Perm.isValidVar $k@4600))
(assert ($Perm.isReadVar $k@4600 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928) $k@3932)
            $k@4312)
          $k@4316)
        $k@4504)
      $k@4508))
  (= $t@4512 $t@4320)))
; [exec]
; n := __flatten_77
; [exec]
; __flatten_78 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@4601 $Perm)
(assert ($Perm.isValidVar $k@4601))
(assert ($Perm.isReadVar $k@4601 $Perm.Write))
(push) ; 15
(assert (not (or (= $k@4601 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 15
(assert (<
  $k@4601
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179) $k@3929)
            $k@3947)
          $k@4313)
        $k@4331)
      $k@4505)
    $k@4523)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@4602 $Perm)
(assert ($Perm.isValidVar $k@4602))
(assert ($Perm.isReadVar $k@4602 $Perm.Write))
(push) ; 15
(assert (not (or (= $k@4602 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 15
(assert (<
  $k@4602
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180) $k@3930)
            $k@3948)
          $k@4314)
        $k@4332)
      $k@4506)
    $k@4524)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 15
(assert (not (not (= $t@4518 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 15
; [dead then-branch 567] $t@4518 != Null
(push) ; 15
; [else-branch 567] $t@4518 == Null
(declare-const $k@4603 $Perm)
(assert ($Perm.isValidVar $k@4603))
(assert ($Perm.isReadVar $k@4603 $Perm.Write))
(push) ; 16
(assert (not (or (= $k@4603 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927) $k@3931)
              $k@4311)
            $k@4315)
          $k@4503)
        $k@4507)
      $k@4599)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927) $k@3931)
              $k@4311)
            $k@4315)
          $k@4503)
        $k@4507)
      $k@4599)
    $Perm.No)))
(assert (<
  $k@4603
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927) $k@3931)
            $k@4311)
          $k@4315)
        $k@4503)
      $k@4507)
    $k@4599)))
(declare-const $k@4604 $Perm)
(assert ($Perm.isValidVar $k@4604))
(assert ($Perm.isReadVar $k@4604 $Perm.Write))
(push) ; 16
(assert (not (or (= $k@4604 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928) $k@3932)
              $k@4312)
            $k@4316)
          $k@4504)
        $k@4508)
      $k@4600)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928) $k@3932)
              $k@4312)
            $k@4316)
          $k@4504)
        $k@4508)
      $k@4600)
    $Perm.No)))
(assert (<
  $k@4604
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928) $k@3932)
            $k@4312)
          $k@4316)
        $k@4504)
      $k@4508)
    $k@4600)))
(declare-const sys__result@4605 $Ref)
(declare-const $t@4606 $Snap)
(declare-const $t@4607 $Snap)
(declare-const $t@4608 $Ref)
(assert (= $t@4606 ($Snap.combine $t@4607 ($SortWrappers.$RefTo$Snap $t@4608))))
(declare-const $t@4609 $Snap)
(declare-const $t@4610 $Ref)
(assert (= $t@4607 ($Snap.combine $t@4609 ($SortWrappers.$RefTo$Snap $t@4610))))
(declare-const $t@4611 $Snap)
(declare-const $t@4612 $Snap)
(assert (= $t@4609 ($Snap.combine $t@4611 $t@4612)))
(declare-const $t@4613 $Snap)
(declare-const $t@4614 $Ref)
(assert (= $t@4611 ($Snap.combine $t@4613 ($SortWrappers.$RefTo$Snap $t@4614))))
(declare-const $t@4615 $Snap)
(assert (= $t@4613 ($Snap.combine $t@4615 $Snap.unit)))
(declare-const $t@4616 Int)
(declare-const $t@4617 $Ref)
(assert (=
  $t@4615
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@4616)
    ($SortWrappers.$RefTo$Snap $t@4617))))
(declare-const $t@4618 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@4616)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@4618) $Snap.unit)))
(declare-const $k@4619 $Perm)
(assert ($Perm.isValidVar $k@4619))
(assert ($Perm.isReadVar $k@4619 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                  $k@3929)
                $k@3947)
              $k@4313)
            $k@4331)
          $k@4505)
        $k@4523)
      $k@4601))
  (= $t@4618 $t@4522)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                    $k@3929)
                  $k@3947)
                $k@4313)
              $k@4331)
            $k@4505)
          $k@4523)
        $k@4601)
      $k@4619)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                    $k@3929)
                  $k@3947)
                $k@4313)
              $k@4331)
            $k@4505)
          $k@4523)
        $k@4601)
      $k@4619)
    $Perm.No)))
(assert (> $t@4618 0))
(declare-const $k@4620 $Perm)
(assert ($Perm.isValidVar $k@4620))
(assert ($Perm.isReadVar $k@4620 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                  $k@3930)
                $k@3948)
              $k@4314)
            $k@4332)
          $k@4506)
        $k@4524)
      $k@4602))
  (= $t@4617 $t@4521)))
; [eval] diz.BlockingQueue__count != null
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                    $k@3930)
                  $k@3948)
                $k@4314)
              $k@4332)
            $k@4506)
          $k@4524)
        $k@4602)
      $k@4620)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                    $k@3930)
                  $k@3948)
                $k@4314)
              $k@4332)
            $k@4506)
          $k@4524)
        $k@4602)
      $k@4620)
    $Perm.No)))
(assert (not (= $t@4617 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 16
(assert (not (= $t@4614 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not (= $t@4614 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 16
(push) ; 16
; [then-branch 568] $t@4614 != Null
(assert (not (= $t@4614 $Ref.null)))
(declare-const $k@4621 $Perm)
(assert ($Perm.isValidVar $k@4621))
(assert ($Perm.isReadVar $k@4621 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                  $k@3931)
                $k@4311)
              $k@4315)
            $k@4503)
          $k@4507)
        $k@4599)
      $k@4603))
  (= $t@4610 $t@4514)))
(declare-const $k@4622 $Perm)
(assert ($Perm.isValidVar $k@4622))
(assert ($Perm.isReadVar $k@4622 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                  $k@3932)
                $k@4312)
              $k@4316)
            $k@4504)
          $k@4508)
        $k@4600)
      $k@4604))
  (= $t@4608 $t@4512)))
; [exec]
; o := __flatten_78
; [exec]
; __flatten_79 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@4623 $Perm)
(assert ($Perm.isValidVar $k@4623))
(assert ($Perm.isReadVar $k@4623 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@4623 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@4623
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                  $k@3929)
                $k@3947)
              $k@4313)
            $k@4331)
          $k@4505)
        $k@4523)
      $k@4601)
    $k@4619)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@4624 $Perm)
(assert ($Perm.isValidVar $k@4624))
(assert ($Perm.isReadVar $k@4624 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@4624 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@4624
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                  $k@3930)
                $k@3948)
              $k@4314)
            $k@4332)
          $k@4506)
        $k@4524)
      $k@4602)
    $k@4620)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 17
(assert (not (= $t@4614 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 17
(push) ; 17
; [then-branch 569] $t@4614 != Null
(declare-const $k@4625 $Perm)
(assert ($Perm.isValidVar $k@4625))
(assert ($Perm.isReadVar $k@4625 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@4625 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                    $k@3931)
                  $k@4311)
                $k@4315)
              $k@4503)
            $k@4507)
          $k@4599)
        $k@4603)
      $k@4621)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                    $k@3931)
                  $k@4311)
                $k@4315)
              $k@4503)
            $k@4507)
          $k@4599)
        $k@4603)
      $k@4621)
    $Perm.No)))
(assert (<
  $k@4625
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                  $k@3931)
                $k@4311)
              $k@4315)
            $k@4503)
          $k@4507)
        $k@4599)
      $k@4603)
    $k@4621)))
(declare-const $k@4626 $Perm)
(assert ($Perm.isValidVar $k@4626))
(assert ($Perm.isReadVar $k@4626 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@4626 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                    $k@3932)
                  $k@4312)
                $k@4316)
              $k@4504)
            $k@4508)
          $k@4600)
        $k@4604)
      $k@4622)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                    $k@3932)
                  $k@4312)
                $k@4316)
              $k@4504)
            $k@4508)
          $k@4600)
        $k@4604)
      $k@4622)
    $Perm.No)))
(assert (<
  $k@4626
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                  $k@3932)
                $k@4312)
              $k@4316)
            $k@4504)
          $k@4508)
        $k@4600)
      $k@4604)
    $k@4622)))
(declare-const sys__result@4627 $Ref)
(declare-const $t@4628 $Snap)
(declare-const $t@4629 $Snap)
(declare-const $t@4630 $Ref)
(assert (= $t@4628 ($Snap.combine $t@4629 ($SortWrappers.$RefTo$Snap $t@4630))))
(declare-const $t@4631 $Snap)
(declare-const $t@4632 $Ref)
(assert (= $t@4629 ($Snap.combine $t@4631 ($SortWrappers.$RefTo$Snap $t@4632))))
(declare-const $t@4633 $Snap)
(declare-const $t@4634 $Snap)
(assert (= $t@4631 ($Snap.combine $t@4633 $t@4634)))
(declare-const $t@4635 $Snap)
(declare-const $t@4636 $Ref)
(assert (= $t@4633 ($Snap.combine $t@4635 ($SortWrappers.$RefTo$Snap $t@4636))))
(declare-const $t@4637 $Snap)
(assert (= $t@4635 ($Snap.combine $t@4637 $Snap.unit)))
(declare-const $t@4638 Int)
(declare-const $t@4639 $Ref)
(assert (=
  $t@4637
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@4638)
    ($SortWrappers.$RefTo$Snap $t@4639))))
(declare-const $t@4640 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@4638)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@4640) $Snap.unit)))
(declare-const $k@4641 $Perm)
(assert ($Perm.isValidVar $k@4641))
(assert ($Perm.isReadVar $k@4641 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                      $k@3929)
                    $k@3947)
                  $k@4313)
                $k@4331)
              $k@4505)
            $k@4523)
          $k@4601)
        $k@4619)
      $k@4623))
  (= $t@4640 $t@4618)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                        $k@3929)
                      $k@3947)
                    $k@4313)
                  $k@4331)
                $k@4505)
              $k@4523)
            $k@4601)
          $k@4619)
        $k@4623)
      $k@4641)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                        $k@3929)
                      $k@3947)
                    $k@4313)
                  $k@4331)
                $k@4505)
              $k@4523)
            $k@4601)
          $k@4619)
        $k@4623)
      $k@4641)
    $Perm.No)))
(assert (> $t@4640 0))
(declare-const $k@4642 $Perm)
(assert ($Perm.isValidVar $k@4642))
(assert ($Perm.isReadVar $k@4642 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                      $k@3930)
                    $k@3948)
                  $k@4314)
                $k@4332)
              $k@4506)
            $k@4524)
          $k@4602)
        $k@4620)
      $k@4624))
  (= $t@4639 $t@4617)))
; [eval] diz.BlockingQueue__count != null
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                        $k@3930)
                      $k@3948)
                    $k@4314)
                  $k@4332)
                $k@4506)
              $k@4524)
            $k@4602)
          $k@4620)
        $k@4624)
      $k@4642)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                        $k@3930)
                      $k@3948)
                    $k@4314)
                  $k@4332)
                $k@4506)
              $k@4524)
            $k@4602)
          $k@4620)
        $k@4624)
      $k@4642)
    $Perm.No)))
(assert (not (= $t@4639 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 18
(assert (not (= $t@4636 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not (= $t@4636 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
; [then-branch 570] $t@4636 != Null
(assert (not (= $t@4636 $Ref.null)))
(declare-const $k@4643 $Perm)
(assert ($Perm.isValidVar $k@4643))
(assert ($Perm.isReadVar $k@4643 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                      $k@3931)
                    $k@4311)
                  $k@4315)
                $k@4503)
              $k@4507)
            $k@4599)
          $k@4603)
        $k@4621)
      $k@4625))
  (= $t@4632 $t@4610)))
(declare-const $k@4644 $Perm)
(assert ($Perm.isValidVar $k@4644))
(assert ($Perm.isReadVar $k@4644 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                      $k@3932)
                    $k@4312)
                  $k@4316)
                $k@4504)
              $k@4508)
            $k@4600)
          $k@4604)
        $k@4622)
      $k@4626))
  (= $t@4630 $t@4608)))
; [exec]
; p := __flatten_79
(pop) ; 18
(push) ; 18
; [else-branch 570] $t@4636 == Null
(assert (= $t@4636 $Ref.null))
(declare-const $k@4645 $Perm)
(assert ($Perm.isValidVar $k@4645))
(assert ($Perm.isReadVar $k@4645 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                      $k@3931)
                    $k@4311)
                  $k@4315)
                $k@4503)
              $k@4507)
            $k@4599)
          $k@4603)
        $k@4621)
      $k@4625))
  (= $t@4632 $t@4610)))
(declare-const $k@4646 $Perm)
(assert ($Perm.isValidVar $k@4646))
(assert ($Perm.isReadVar $k@4646 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                      $k@3932)
                    $k@4312)
                  $k@4316)
                $k@4504)
              $k@4508)
            $k@4600)
          $k@4604)
        $k@4622)
      $k@4626))
  (= $t@4630 $t@4608)))
; [exec]
; p := __flatten_79
(pop) ; 18
(pop) ; 17
; [dead else-branch 569] $t@4614 == Null
(pop) ; 16
(push) ; 16
; [else-branch 568] $t@4614 == Null
(assert (= $t@4614 $Ref.null))
(declare-const $k@4647 $Perm)
(assert ($Perm.isValidVar $k@4647))
(assert ($Perm.isReadVar $k@4647 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                  $k@3931)
                $k@4311)
              $k@4315)
            $k@4503)
          $k@4507)
        $k@4599)
      $k@4603))
  (= $t@4610 $t@4514)))
(declare-const $k@4648 $Perm)
(assert ($Perm.isValidVar $k@4648))
(assert ($Perm.isReadVar $k@4648 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                  $k@3932)
                $k@4312)
              $k@4316)
            $k@4504)
          $k@4508)
        $k@4600)
      $k@4604))
  (= $t@4608 $t@4512)))
; [exec]
; o := __flatten_78
; [exec]
; __flatten_79 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@4649 $Perm)
(assert ($Perm.isValidVar $k@4649))
(assert ($Perm.isReadVar $k@4649 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@4649 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@4649
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                  $k@3929)
                $k@3947)
              $k@4313)
            $k@4331)
          $k@4505)
        $k@4523)
      $k@4601)
    $k@4619)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@4650 $Perm)
(assert ($Perm.isValidVar $k@4650))
(assert ($Perm.isReadVar $k@4650 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@4650 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@4650
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                  $k@3930)
                $k@3948)
              $k@4314)
            $k@4332)
          $k@4506)
        $k@4524)
      $k@4602)
    $k@4620)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 17
(assert (not (not (= $t@4614 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 17
; [dead then-branch 571] $t@4614 != Null
(push) ; 17
; [else-branch 571] $t@4614 == Null
(declare-const $k@4651 $Perm)
(assert ($Perm.isValidVar $k@4651))
(assert ($Perm.isReadVar $k@4651 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@4651 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                    $k@3931)
                  $k@4311)
                $k@4315)
              $k@4503)
            $k@4507)
          $k@4599)
        $k@4603)
      $k@4647)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                    $k@3931)
                  $k@4311)
                $k@4315)
              $k@4503)
            $k@4507)
          $k@4599)
        $k@4603)
      $k@4647)
    $Perm.No)))
(assert (<
  $k@4651
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                  $k@3931)
                $k@4311)
              $k@4315)
            $k@4503)
          $k@4507)
        $k@4599)
      $k@4603)
    $k@4647)))
(declare-const $k@4652 $Perm)
(assert ($Perm.isValidVar $k@4652))
(assert ($Perm.isReadVar $k@4652 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@4652 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                    $k@3932)
                  $k@4312)
                $k@4316)
              $k@4504)
            $k@4508)
          $k@4600)
        $k@4604)
      $k@4648)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                    $k@3932)
                  $k@4312)
                $k@4316)
              $k@4504)
            $k@4508)
          $k@4600)
        $k@4604)
      $k@4648)
    $Perm.No)))
(assert (<
  $k@4652
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                  $k@3932)
                $k@4312)
              $k@4316)
            $k@4504)
          $k@4508)
        $k@4600)
      $k@4604)
    $k@4648)))
(declare-const sys__result@4653 $Ref)
(declare-const $t@4654 $Snap)
(declare-const $t@4655 $Snap)
(declare-const $t@4656 $Ref)
(assert (= $t@4654 ($Snap.combine $t@4655 ($SortWrappers.$RefTo$Snap $t@4656))))
(declare-const $t@4657 $Snap)
(declare-const $t@4658 $Ref)
(assert (= $t@4655 ($Snap.combine $t@4657 ($SortWrappers.$RefTo$Snap $t@4658))))
(declare-const $t@4659 $Snap)
(declare-const $t@4660 $Snap)
(assert (= $t@4657 ($Snap.combine $t@4659 $t@4660)))
(declare-const $t@4661 $Snap)
(declare-const $t@4662 $Ref)
(assert (= $t@4659 ($Snap.combine $t@4661 ($SortWrappers.$RefTo$Snap $t@4662))))
(declare-const $t@4663 $Snap)
(assert (= $t@4661 ($Snap.combine $t@4663 $Snap.unit)))
(declare-const $t@4664 Int)
(declare-const $t@4665 $Ref)
(assert (=
  $t@4663
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@4664)
    ($SortWrappers.$RefTo$Snap $t@4665))))
(declare-const $t@4666 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@4664)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@4666) $Snap.unit)))
(declare-const $k@4667 $Perm)
(assert ($Perm.isValidVar $k@4667))
(assert ($Perm.isReadVar $k@4667 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                      $k@3929)
                    $k@3947)
                  $k@4313)
                $k@4331)
              $k@4505)
            $k@4523)
          $k@4601)
        $k@4619)
      $k@4649))
  (= $t@4666 $t@4618)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                        $k@3929)
                      $k@3947)
                    $k@4313)
                  $k@4331)
                $k@4505)
              $k@4523)
            $k@4601)
          $k@4619)
        $k@4649)
      $k@4667)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@3161) $k@3179)
                        $k@3929)
                      $k@3947)
                    $k@4313)
                  $k@4331)
                $k@4505)
              $k@4523)
            $k@4601)
          $k@4619)
        $k@4649)
      $k@4667)
    $Perm.No)))
(assert (> $t@4666 0))
(declare-const $k@4668 $Perm)
(assert ($Perm.isValidVar $k@4668))
(assert ($Perm.isReadVar $k@4668 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                      $k@3930)
                    $k@3948)
                  $k@4314)
                $k@4332)
              $k@4506)
            $k@4524)
          $k@4602)
        $k@4620)
      $k@4650))
  (= $t@4665 $t@4617)))
; [eval] diz.BlockingQueue__count != null
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                        $k@3930)
                      $k@3948)
                    $k@4314)
                  $k@4332)
                $k@4506)
              $k@4524)
            $k@4602)
          $k@4620)
        $k@4650)
      $k@4668)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@3162) $k@3180)
                        $k@3930)
                      $k@3948)
                    $k@4314)
                  $k@4332)
                $k@4506)
              $k@4524)
            $k@4602)
          $k@4620)
        $k@4650)
      $k@4668)
    $Perm.No)))
(assert (not (= $t@4665 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 18
(assert (not (= $t@4662 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not (= $t@4662 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
; [then-branch 572] $t@4662 != Null
(assert (not (= $t@4662 $Ref.null)))
(declare-const $k@4669 $Perm)
(assert ($Perm.isValidVar $k@4669))
(assert ($Perm.isReadVar $k@4669 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                      $k@3931)
                    $k@4311)
                  $k@4315)
                $k@4503)
              $k@4507)
            $k@4599)
          $k@4603)
        $k@4647)
      $k@4651))
  (= $t@4658 $t@4610)))
(declare-const $k@4670 $Perm)
(assert ($Perm.isValidVar $k@4670))
(assert ($Perm.isReadVar $k@4670 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                      $k@3932)
                    $k@4312)
                  $k@4316)
                $k@4504)
              $k@4508)
            $k@4600)
          $k@4604)
        $k@4648)
      $k@4652))
  (= $t@4656 $t@4608)))
; [exec]
; p := __flatten_79
(pop) ; 18
(push) ; 18
; [else-branch 572] $t@4662 == Null
(assert (= $t@4662 $Ref.null))
(declare-const $k@4671 $Perm)
(assert ($Perm.isValidVar $k@4671))
(assert ($Perm.isReadVar $k@4671 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@3159) $k@3163) $k@3927)
                      $k@3931)
                    $k@4311)
                  $k@4315)
                $k@4503)
              $k@4507)
            $k@4599)
          $k@4603)
        $k@4647)
      $k@4651))
  (= $t@4658 $t@4610)))
(declare-const $k@4672 $Perm)
(assert ($Perm.isValidVar $k@4672))
(assert ($Perm.isReadVar $k@4672 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@3160) $k@3164) $k@3928)
                      $k@3932)
                    $k@4312)
                  $k@4316)
                $k@4504)
              $k@4508)
            $k@4600)
          $k@4604)
        $k@4648)
      $k@4652))
  (= $t@4656 $t@4608)))
; [exec]
; p := __flatten_79
(pop) ; 18
(pop) ; 17
(pop) ; 16
(pop) ; 15
(pop) ; 14
(pop) ; 13
(pop) ; 12
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
; [dead else-branch 447] $t@3152 == Null
(pop) ; 6
(push) ; 6
; [else-branch 446] $t@3152 == Null
(assert (= $t@3152 $Ref.null))
(declare-const $k@4673 $Perm)
(assert ($Perm.isValidVar $k@4673))
(assert ($Perm.isReadVar $k@4673 $Perm.Write))
(assert (implies (< $Perm.No (- $k@3137 $k@3141)) (= $t@3148 $t@3121)))
(declare-const $k@4674 $Perm)
(assert ($Perm.isValidVar $k@4674))
(assert ($Perm.isReadVar $k@4674 $Perm.Write))
(assert (implies (< $Perm.No (- $k@3138 $k@3142)) (= $t@3146 $t@3119)))
; [exec]
; b := __flatten_73
; [exec]
; __flatten_74 := BlockingQueue__offer(queue, 5)
; [eval] diz != null
(declare-const $k@4675 $Perm)
(assert ($Perm.isValidVar $k@4675))
(assert ($Perm.isReadVar $k@4675 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@4675 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@4675 (+ (- $k@3131 $k@3139) $k@3157)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@4676 $Perm)
(assert ($Perm.isValidVar $k@4676))
(assert ($Perm.isReadVar $k@4676 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@4676 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@4676 (+ (- $k@3132 $k@3140) $k@3158)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 7
(assert (not (not (= $t@3152 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 7
; [dead then-branch 573] $t@3152 != Null
(push) ; 7
; [else-branch 573] $t@3152 == Null
(declare-const $k@4677 $Perm)
(assert ($Perm.isValidVar $k@4677))
(assert ($Perm.isReadVar $k@4677 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@4677 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= (+ (- $k@3137 $k@3141) $k@4673) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- $k@3137 $k@3141) $k@4673) $Perm.No)))
(assert (< $k@4677 (+ (- $k@3137 $k@3141) $k@4673)))
(declare-const $k@4678 $Perm)
(assert ($Perm.isValidVar $k@4678))
(assert ($Perm.isReadVar $k@4678 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@4678 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= (+ (- $k@3138 $k@3142) $k@4674) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- $k@3138 $k@3142) $k@4674) $Perm.No)))
(assert (< $k@4678 (+ (- $k@3138 $k@3142) $k@4674)))
(declare-const sys__result@4679 Bool)
(declare-const $t@4680 $Snap)
(declare-const $t@4681 $Snap)
(declare-const $t@4682 $Ref)
(assert (= $t@4680 ($Snap.combine $t@4681 ($SortWrappers.$RefTo$Snap $t@4682))))
(declare-const $t@4683 $Snap)
(declare-const $t@4684 $Ref)
(assert (= $t@4681 ($Snap.combine $t@4683 ($SortWrappers.$RefTo$Snap $t@4684))))
(declare-const $t@4685 $Snap)
(declare-const $t@4686 $Snap)
(assert (= $t@4683 ($Snap.combine $t@4685 $t@4686)))
(declare-const $t@4687 $Snap)
(declare-const $t@4688 $Ref)
(assert (= $t@4685 ($Snap.combine $t@4687 ($SortWrappers.$RefTo$Snap $t@4688))))
(declare-const $t@4689 $Snap)
(assert (= $t@4687 ($Snap.combine $t@4689 $Snap.unit)))
(declare-const $t@4690 Int)
(declare-const $t@4691 $Ref)
(assert (=
  $t@4689
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@4690)
    ($SortWrappers.$RefTo$Snap $t@4691))))
(declare-const $t@4692 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@4690)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@4692) $Snap.unit)))
(declare-const $k@4693 $Perm)
(assert ($Perm.isValidVar $k@4693))
(assert ($Perm.isReadVar $k@4693 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675))
  (= $t@4692 $t@3156)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 8
(assert (not (not (= (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693) $Perm.No)))
(assert (> $t@4692 0))
(declare-const $k@4694 $Perm)
(assert ($Perm.isValidVar $k@4694))
(assert ($Perm.isReadVar $k@4694 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676))
  (= $t@4691 $t@3155)))
; [eval] diz.BlockingQueue__count != null
(push) ; 8
(assert (not (not (= (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694) $Perm.No)))
(assert (not (= $t@4691 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 8
(assert (not (= $t@4688 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= $t@4688 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
(push) ; 8
; [then-branch 574] $t@4688 != Null
(assert (not (= $t@4688 $Ref.null)))
(declare-const $k@4695 $Perm)
(assert ($Perm.isValidVar $k@4695))
(assert ($Perm.isReadVar $k@4695 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677))
  (= $t@4684 $t@3148)))
(declare-const $k@4696 $Perm)
(assert ($Perm.isValidVar $k@4696))
(assert ($Perm.isReadVar $k@4696 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678))
  (= $t@4682 $t@3146)))
; [exec]
; b := __flatten_74
; [exec]
; __flatten_75 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@4697 $Perm)
(assert ($Perm.isValidVar $k@4697))
(assert ($Perm.isReadVar $k@4697 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@4697 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@4697 (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@4698 $Perm)
(assert ($Perm.isValidVar $k@4698))
(assert ($Perm.isReadVar $k@4698 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@4698 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@4698 (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 9
(assert (not (= $t@4688 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
(push) ; 9
; [then-branch 575] $t@4688 != Null
(declare-const $k@4699 $Perm)
(assert ($Perm.isValidVar $k@4699))
(assert ($Perm.isReadVar $k@4699 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@4699 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not (= (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695) $Perm.No)))
(assert (< $k@4699 (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)))
(declare-const $k@4700 $Perm)
(assert ($Perm.isValidVar $k@4700))
(assert ($Perm.isReadVar $k@4700 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@4700 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not (= (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696) $Perm.No)))
(assert (< $k@4700 (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)))
(declare-const sys__result@4701 $Ref)
(declare-const $t@4702 $Snap)
(declare-const $t@4703 $Snap)
(declare-const $t@4704 $Ref)
(assert (= $t@4702 ($Snap.combine $t@4703 ($SortWrappers.$RefTo$Snap $t@4704))))
(declare-const $t@4705 $Snap)
(declare-const $t@4706 $Ref)
(assert (= $t@4703 ($Snap.combine $t@4705 ($SortWrappers.$RefTo$Snap $t@4706))))
(declare-const $t@4707 $Snap)
(declare-const $t@4708 $Snap)
(assert (= $t@4705 ($Snap.combine $t@4707 $t@4708)))
(declare-const $t@4709 $Snap)
(declare-const $t@4710 $Ref)
(assert (= $t@4707 ($Snap.combine $t@4709 ($SortWrappers.$RefTo$Snap $t@4710))))
(declare-const $t@4711 $Snap)
(assert (= $t@4709 ($Snap.combine $t@4711 $Snap.unit)))
(declare-const $t@4712 Int)
(declare-const $t@4713 $Ref)
(assert (=
  $t@4711
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@4712)
    ($SortWrappers.$RefTo$Snap $t@4713))))
(declare-const $t@4714 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@4712)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@4714) $Snap.unit)))
(declare-const $k@4715 $Perm)
(assert ($Perm.isValidVar $k@4715))
(assert ($Perm.isReadVar $k@4715 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693) $k@4697))
  (= $t@4714 $t@4692)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 10
(assert (not (not
  (=
    (+
      (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693) $k@4697)
      $k@4715)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not
  (=
    (+
      (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693) $k@4697)
      $k@4715)
    $Perm.No)))
(assert (> $t@4714 0))
(declare-const $k@4716 $Perm)
(assert ($Perm.isValidVar $k@4716))
(assert ($Perm.isReadVar $k@4716 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694) $k@4698))
  (= $t@4713 $t@4691)))
; [eval] diz.BlockingQueue__count != null
(push) ; 10
(assert (not (not
  (=
    (+
      (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694) $k@4698)
      $k@4716)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not
  (=
    (+
      (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694) $k@4698)
      $k@4716)
    $Perm.No)))
(assert (not (= $t@4713 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 10
(assert (not (= $t@4710 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= $t@4710 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 10
(push) ; 10
; [then-branch 576] $t@4710 != Null
(assert (not (= $t@4710 $Ref.null)))
(declare-const $k@4717 $Perm)
(assert ($Perm.isValidVar $k@4717))
(assert ($Perm.isReadVar $k@4717 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695) $k@4699))
  (= $t@4706 $t@4684)))
(declare-const $k@4718 $Perm)
(assert ($Perm.isValidVar $k@4718))
(assert ($Perm.isReadVar $k@4718 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696) $k@4700))
  (= $t@4704 $t@4682)))
; [exec]
; m := __flatten_75
; [exec]
; __flatten_76 := BlockingQueue__offer(queue, 7)
; [eval] diz != null
(declare-const $k@4719 $Perm)
(assert ($Perm.isValidVar $k@4719))
(assert ($Perm.isReadVar $k@4719 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@4719 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (<
  $k@4719
  (+ (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693) $k@4697) $k@4715)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@4720 $Perm)
(assert ($Perm.isValidVar $k@4720))
(assert ($Perm.isReadVar $k@4720 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@4720 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (<
  $k@4720
  (+ (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694) $k@4698) $k@4716)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 11
(assert (not (= $t@4710 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 11
(push) ; 11
; [then-branch 577] $t@4710 != Null
(declare-const $k@4721 $Perm)
(assert ($Perm.isValidVar $k@4721))
(assert ($Perm.isReadVar $k@4721 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@4721 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(push) ; 12
(assert (not (not
  (=
    (+
      (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695) $k@4699)
      $k@4717)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695) $k@4699)
      $k@4717)
    $Perm.No)))
(assert (<
  $k@4721
  (+ (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695) $k@4699) $k@4717)))
(declare-const $k@4722 $Perm)
(assert ($Perm.isValidVar $k@4722))
(assert ($Perm.isReadVar $k@4722 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@4722 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(push) ; 12
(assert (not (not
  (=
    (+
      (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696) $k@4700)
      $k@4718)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696) $k@4700)
      $k@4718)
    $Perm.No)))
(assert (<
  $k@4722
  (+ (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696) $k@4700) $k@4718)))
(declare-const sys__result@4723 Bool)
(declare-const $t@4724 $Snap)
(declare-const $t@4725 $Snap)
(declare-const $t@4726 $Ref)
(assert (= $t@4724 ($Snap.combine $t@4725 ($SortWrappers.$RefTo$Snap $t@4726))))
(declare-const $t@4727 $Snap)
(declare-const $t@4728 $Ref)
(assert (= $t@4725 ($Snap.combine $t@4727 ($SortWrappers.$RefTo$Snap $t@4728))))
(declare-const $t@4729 $Snap)
(declare-const $t@4730 $Snap)
(assert (= $t@4727 ($Snap.combine $t@4729 $t@4730)))
(declare-const $t@4731 $Snap)
(declare-const $t@4732 $Ref)
(assert (= $t@4729 ($Snap.combine $t@4731 ($SortWrappers.$RefTo$Snap $t@4732))))
(declare-const $t@4733 $Snap)
(assert (= $t@4731 ($Snap.combine $t@4733 $Snap.unit)))
(declare-const $t@4734 Int)
(declare-const $t@4735 $Ref)
(assert (=
  $t@4733
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@4734)
    ($SortWrappers.$RefTo$Snap $t@4735))))
(declare-const $t@4736 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@4734)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@4736) $Snap.unit)))
(declare-const $k@4737 $Perm)
(assert ($Perm.isValidVar $k@4737))
(assert ($Perm.isReadVar $k@4737 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693) $k@4697)
        $k@4715)
      $k@4719))
  (= $t@4736 $t@4714)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 12
(assert (not (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693) $k@4697)
          $k@4715)
        $k@4719)
      $k@4737)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693) $k@4697)
          $k@4715)
        $k@4719)
      $k@4737)
    $Perm.No)))
(assert (> $t@4736 0))
(declare-const $k@4738 $Perm)
(assert ($Perm.isValidVar $k@4738))
(assert ($Perm.isReadVar $k@4738 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694) $k@4698)
        $k@4716)
      $k@4720))
  (= $t@4735 $t@4713)))
; [eval] diz.BlockingQueue__count != null
(push) ; 12
(assert (not (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694) $k@4698)
          $k@4716)
        $k@4720)
      $k@4738)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694) $k@4698)
          $k@4716)
        $k@4720)
      $k@4738)
    $Perm.No)))
(assert (not (= $t@4735 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 12
(assert (not (= $t@4732 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 12
(push) ; 12
(assert (not (not (= $t@4732 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 12
(push) ; 12
; [then-branch 578] $t@4732 != Null
(assert (not (= $t@4732 $Ref.null)))
(declare-const $k@4739 $Perm)
(assert ($Perm.isValidVar $k@4739))
(assert ($Perm.isReadVar $k@4739 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695) $k@4699)
        $k@4717)
      $k@4721))
  (= $t@4728 $t@4706)))
(declare-const $k@4740 $Perm)
(assert ($Perm.isValidVar $k@4740))
(assert ($Perm.isReadVar $k@4740 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696) $k@4700)
        $k@4718)
      $k@4722))
  (= $t@4726 $t@4704)))
; [exec]
; b := __flatten_76
; [exec]
; __flatten_77 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@4741 $Perm)
(assert ($Perm.isValidVar $k@4741))
(assert ($Perm.isReadVar $k@4741 $Perm.Write))
(push) ; 13
(assert (not (or (= $k@4741 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 13
(assert (<
  $k@4741
  (+
    (-
      (+
        (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693) $k@4697)
        $k@4715)
      $k@4719)
    $k@4737)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@4742 $Perm)
(assert ($Perm.isValidVar $k@4742))
(assert ($Perm.isReadVar $k@4742 $Perm.Write))
(push) ; 13
(assert (not (or (= $k@4742 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 13
(assert (<
  $k@4742
  (+
    (-
      (+
        (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694) $k@4698)
        $k@4716)
      $k@4720)
    $k@4738)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 13
(assert (not (= $t@4732 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 13
(push) ; 13
; [then-branch 579] $t@4732 != Null
(declare-const $k@4743 $Perm)
(assert ($Perm.isValidVar $k@4743))
(assert ($Perm.isReadVar $k@4743 $Perm.Write))
(push) ; 14
(assert (not (or (= $k@4743 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(push) ; 14
(assert (not (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695) $k@4699)
          $k@4717)
        $k@4721)
      $k@4739)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(assert (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695) $k@4699)
          $k@4717)
        $k@4721)
      $k@4739)
    $Perm.No)))
(assert (<
  $k@4743
  (+
    (-
      (+
        (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695) $k@4699)
        $k@4717)
      $k@4721)
    $k@4739)))
(declare-const $k@4744 $Perm)
(assert ($Perm.isValidVar $k@4744))
(assert ($Perm.isReadVar $k@4744 $Perm.Write))
(push) ; 14
(assert (not (or (= $k@4744 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(push) ; 14
(assert (not (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696) $k@4700)
          $k@4718)
        $k@4722)
      $k@4740)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(assert (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696) $k@4700)
          $k@4718)
        $k@4722)
      $k@4740)
    $Perm.No)))
(assert (<
  $k@4744
  (+
    (-
      (+
        (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696) $k@4700)
        $k@4718)
      $k@4722)
    $k@4740)))
(declare-const sys__result@4745 $Ref)
(declare-const $t@4746 $Snap)
(declare-const $t@4747 $Snap)
(declare-const $t@4748 $Ref)
(assert (= $t@4746 ($Snap.combine $t@4747 ($SortWrappers.$RefTo$Snap $t@4748))))
(declare-const $t@4749 $Snap)
(declare-const $t@4750 $Ref)
(assert (= $t@4747 ($Snap.combine $t@4749 ($SortWrappers.$RefTo$Snap $t@4750))))
(declare-const $t@4751 $Snap)
(declare-const $t@4752 $Snap)
(assert (= $t@4749 ($Snap.combine $t@4751 $t@4752)))
(declare-const $t@4753 $Snap)
(declare-const $t@4754 $Ref)
(assert (= $t@4751 ($Snap.combine $t@4753 ($SortWrappers.$RefTo$Snap $t@4754))))
(declare-const $t@4755 $Snap)
(assert (= $t@4753 ($Snap.combine $t@4755 $Snap.unit)))
(declare-const $t@4756 Int)
(declare-const $t@4757 $Ref)
(assert (=
  $t@4755
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@4756)
    ($SortWrappers.$RefTo$Snap $t@4757))))
(declare-const $t@4758 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@4756)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@4758) $Snap.unit)))
(declare-const $k@4759 $Perm)
(assert ($Perm.isValidVar $k@4759))
(assert ($Perm.isReadVar $k@4759 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693) $k@4697)
            $k@4715)
          $k@4719)
        $k@4737)
      $k@4741))
  (= $t@4758 $t@4736)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 14
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693) $k@4697)
              $k@4715)
            $k@4719)
          $k@4737)
        $k@4741)
      $k@4759)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693) $k@4697)
              $k@4715)
            $k@4719)
          $k@4737)
        $k@4741)
      $k@4759)
    $Perm.No)))
(assert (> $t@4758 0))
(declare-const $k@4760 $Perm)
(assert ($Perm.isValidVar $k@4760))
(assert ($Perm.isReadVar $k@4760 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694) $k@4698)
            $k@4716)
          $k@4720)
        $k@4738)
      $k@4742))
  (= $t@4757 $t@4735)))
; [eval] diz.BlockingQueue__count != null
(push) ; 14
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694) $k@4698)
              $k@4716)
            $k@4720)
          $k@4738)
        $k@4742)
      $k@4760)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694) $k@4698)
              $k@4716)
            $k@4720)
          $k@4738)
        $k@4742)
      $k@4760)
    $Perm.No)))
(assert (not (= $t@4757 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 14
(assert (not (= $t@4754 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 14
(push) ; 14
(assert (not (not (= $t@4754 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 14
(push) ; 14
; [then-branch 580] $t@4754 != Null
(assert (not (= $t@4754 $Ref.null)))
(declare-const $k@4761 $Perm)
(assert ($Perm.isValidVar $k@4761))
(assert ($Perm.isReadVar $k@4761 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695) $k@4699)
            $k@4717)
          $k@4721)
        $k@4739)
      $k@4743))
  (= $t@4750 $t@4728)))
(declare-const $k@4762 $Perm)
(assert ($Perm.isValidVar $k@4762))
(assert ($Perm.isReadVar $k@4762 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696) $k@4700)
            $k@4718)
          $k@4722)
        $k@4740)
      $k@4744))
  (= $t@4748 $t@4726)))
; [exec]
; n := __flatten_77
; [exec]
; __flatten_78 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@4763 $Perm)
(assert ($Perm.isValidVar $k@4763))
(assert ($Perm.isReadVar $k@4763 $Perm.Write))
(push) ; 15
(assert (not (or (= $k@4763 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 15
(assert (<
  $k@4763
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693) $k@4697)
            $k@4715)
          $k@4719)
        $k@4737)
      $k@4741)
    $k@4759)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@4764 $Perm)
(assert ($Perm.isValidVar $k@4764))
(assert ($Perm.isReadVar $k@4764 $Perm.Write))
(push) ; 15
(assert (not (or (= $k@4764 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 15
(assert (<
  $k@4764
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694) $k@4698)
            $k@4716)
          $k@4720)
        $k@4738)
      $k@4742)
    $k@4760)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 15
(assert (not (= $t@4754 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 15
(push) ; 15
; [then-branch 581] $t@4754 != Null
(declare-const $k@4765 $Perm)
(assert ($Perm.isValidVar $k@4765))
(assert ($Perm.isReadVar $k@4765 $Perm.Write))
(push) ; 16
(assert (not (or (= $k@4765 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695) $k@4699)
              $k@4717)
            $k@4721)
          $k@4739)
        $k@4743)
      $k@4761)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695) $k@4699)
              $k@4717)
            $k@4721)
          $k@4739)
        $k@4743)
      $k@4761)
    $Perm.No)))
(assert (<
  $k@4765
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695) $k@4699)
            $k@4717)
          $k@4721)
        $k@4739)
      $k@4743)
    $k@4761)))
(declare-const $k@4766 $Perm)
(assert ($Perm.isValidVar $k@4766))
(assert ($Perm.isReadVar $k@4766 $Perm.Write))
(push) ; 16
(assert (not (or (= $k@4766 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696) $k@4700)
              $k@4718)
            $k@4722)
          $k@4740)
        $k@4744)
      $k@4762)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696) $k@4700)
              $k@4718)
            $k@4722)
          $k@4740)
        $k@4744)
      $k@4762)
    $Perm.No)))
(assert (<
  $k@4766
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696) $k@4700)
            $k@4718)
          $k@4722)
        $k@4740)
      $k@4744)
    $k@4762)))
(declare-const sys__result@4767 $Ref)
(declare-const $t@4768 $Snap)
(declare-const $t@4769 $Snap)
(declare-const $t@4770 $Ref)
(assert (= $t@4768 ($Snap.combine $t@4769 ($SortWrappers.$RefTo$Snap $t@4770))))
(declare-const $t@4771 $Snap)
(declare-const $t@4772 $Ref)
(assert (= $t@4769 ($Snap.combine $t@4771 ($SortWrappers.$RefTo$Snap $t@4772))))
(declare-const $t@4773 $Snap)
(declare-const $t@4774 $Snap)
(assert (= $t@4771 ($Snap.combine $t@4773 $t@4774)))
(declare-const $t@4775 $Snap)
(declare-const $t@4776 $Ref)
(assert (= $t@4773 ($Snap.combine $t@4775 ($SortWrappers.$RefTo$Snap $t@4776))))
(declare-const $t@4777 $Snap)
(assert (= $t@4775 ($Snap.combine $t@4777 $Snap.unit)))
(declare-const $t@4778 Int)
(declare-const $t@4779 $Ref)
(assert (=
  $t@4777
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@4778)
    ($SortWrappers.$RefTo$Snap $t@4779))))
(declare-const $t@4780 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@4778)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@4780) $Snap.unit)))
(declare-const $k@4781 $Perm)
(assert ($Perm.isValidVar $k@4781))
(assert ($Perm.isReadVar $k@4781 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                  $k@4697)
                $k@4715)
              $k@4719)
            $k@4737)
          $k@4741)
        $k@4759)
      $k@4763))
  (= $t@4780 $t@4758)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                    $k@4697)
                  $k@4715)
                $k@4719)
              $k@4737)
            $k@4741)
          $k@4759)
        $k@4763)
      $k@4781)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                    $k@4697)
                  $k@4715)
                $k@4719)
              $k@4737)
            $k@4741)
          $k@4759)
        $k@4763)
      $k@4781)
    $Perm.No)))
(assert (> $t@4780 0))
(declare-const $k@4782 $Perm)
(assert ($Perm.isValidVar $k@4782))
(assert ($Perm.isReadVar $k@4782 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                  $k@4698)
                $k@4716)
              $k@4720)
            $k@4738)
          $k@4742)
        $k@4760)
      $k@4764))
  (= $t@4779 $t@4757)))
; [eval] diz.BlockingQueue__count != null
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                    $k@4698)
                  $k@4716)
                $k@4720)
              $k@4738)
            $k@4742)
          $k@4760)
        $k@4764)
      $k@4782)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                    $k@4698)
                  $k@4716)
                $k@4720)
              $k@4738)
            $k@4742)
          $k@4760)
        $k@4764)
      $k@4782)
    $Perm.No)))
(assert (not (= $t@4779 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 16
(assert (not (= $t@4776 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not (= $t@4776 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 16
(push) ; 16
; [then-branch 582] $t@4776 != Null
(assert (not (= $t@4776 $Ref.null)))
(declare-const $k@4783 $Perm)
(assert ($Perm.isValidVar $k@4783))
(assert ($Perm.isReadVar $k@4783 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                  $k@4699)
                $k@4717)
              $k@4721)
            $k@4739)
          $k@4743)
        $k@4761)
      $k@4765))
  (= $t@4772 $t@4750)))
(declare-const $k@4784 $Perm)
(assert ($Perm.isValidVar $k@4784))
(assert ($Perm.isReadVar $k@4784 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                  $k@4700)
                $k@4718)
              $k@4722)
            $k@4740)
          $k@4744)
        $k@4762)
      $k@4766))
  (= $t@4770 $t@4748)))
; [exec]
; o := __flatten_78
; [exec]
; __flatten_79 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@4785 $Perm)
(assert ($Perm.isValidVar $k@4785))
(assert ($Perm.isReadVar $k@4785 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@4785 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@4785
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                  $k@4697)
                $k@4715)
              $k@4719)
            $k@4737)
          $k@4741)
        $k@4759)
      $k@4763)
    $k@4781)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@4786 $Perm)
(assert ($Perm.isValidVar $k@4786))
(assert ($Perm.isReadVar $k@4786 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@4786 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@4786
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                  $k@4698)
                $k@4716)
              $k@4720)
            $k@4738)
          $k@4742)
        $k@4760)
      $k@4764)
    $k@4782)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 17
(assert (not (= $t@4776 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 17
(push) ; 17
; [then-branch 583] $t@4776 != Null
(declare-const $k@4787 $Perm)
(assert ($Perm.isValidVar $k@4787))
(assert ($Perm.isReadVar $k@4787 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@4787 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                    $k@4699)
                  $k@4717)
                $k@4721)
              $k@4739)
            $k@4743)
          $k@4761)
        $k@4765)
      $k@4783)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                    $k@4699)
                  $k@4717)
                $k@4721)
              $k@4739)
            $k@4743)
          $k@4761)
        $k@4765)
      $k@4783)
    $Perm.No)))
(assert (<
  $k@4787
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                  $k@4699)
                $k@4717)
              $k@4721)
            $k@4739)
          $k@4743)
        $k@4761)
      $k@4765)
    $k@4783)))
(declare-const $k@4788 $Perm)
(assert ($Perm.isValidVar $k@4788))
(assert ($Perm.isReadVar $k@4788 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@4788 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                    $k@4700)
                  $k@4718)
                $k@4722)
              $k@4740)
            $k@4744)
          $k@4762)
        $k@4766)
      $k@4784)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                    $k@4700)
                  $k@4718)
                $k@4722)
              $k@4740)
            $k@4744)
          $k@4762)
        $k@4766)
      $k@4784)
    $Perm.No)))
(assert (<
  $k@4788
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                  $k@4700)
                $k@4718)
              $k@4722)
            $k@4740)
          $k@4744)
        $k@4762)
      $k@4766)
    $k@4784)))
(declare-const sys__result@4789 $Ref)
(declare-const $t@4790 $Snap)
(declare-const $t@4791 $Snap)
(declare-const $t@4792 $Ref)
(assert (= $t@4790 ($Snap.combine $t@4791 ($SortWrappers.$RefTo$Snap $t@4792))))
(declare-const $t@4793 $Snap)
(declare-const $t@4794 $Ref)
(assert (= $t@4791 ($Snap.combine $t@4793 ($SortWrappers.$RefTo$Snap $t@4794))))
(declare-const $t@4795 $Snap)
(declare-const $t@4796 $Snap)
(assert (= $t@4793 ($Snap.combine $t@4795 $t@4796)))
(declare-const $t@4797 $Snap)
(declare-const $t@4798 $Ref)
(assert (= $t@4795 ($Snap.combine $t@4797 ($SortWrappers.$RefTo$Snap $t@4798))))
(declare-const $t@4799 $Snap)
(assert (= $t@4797 ($Snap.combine $t@4799 $Snap.unit)))
(declare-const $t@4800 Int)
(declare-const $t@4801 $Ref)
(assert (=
  $t@4799
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@4800)
    ($SortWrappers.$RefTo$Snap $t@4801))))
(declare-const $t@4802 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@4800)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@4802) $Snap.unit)))
(declare-const $k@4803 $Perm)
(assert ($Perm.isValidVar $k@4803))
(assert ($Perm.isReadVar $k@4803 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                      $k@4697)
                    $k@4715)
                  $k@4719)
                $k@4737)
              $k@4741)
            $k@4759)
          $k@4763)
        $k@4781)
      $k@4785))
  (= $t@4802 $t@4780)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                        $k@4697)
                      $k@4715)
                    $k@4719)
                  $k@4737)
                $k@4741)
              $k@4759)
            $k@4763)
          $k@4781)
        $k@4785)
      $k@4803)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                        $k@4697)
                      $k@4715)
                    $k@4719)
                  $k@4737)
                $k@4741)
              $k@4759)
            $k@4763)
          $k@4781)
        $k@4785)
      $k@4803)
    $Perm.No)))
(assert (> $t@4802 0))
(declare-const $k@4804 $Perm)
(assert ($Perm.isValidVar $k@4804))
(assert ($Perm.isReadVar $k@4804 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                      $k@4698)
                    $k@4716)
                  $k@4720)
                $k@4738)
              $k@4742)
            $k@4760)
          $k@4764)
        $k@4782)
      $k@4786))
  (= $t@4801 $t@4779)))
; [eval] diz.BlockingQueue__count != null
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                        $k@4698)
                      $k@4716)
                    $k@4720)
                  $k@4738)
                $k@4742)
              $k@4760)
            $k@4764)
          $k@4782)
        $k@4786)
      $k@4804)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                        $k@4698)
                      $k@4716)
                    $k@4720)
                  $k@4738)
                $k@4742)
              $k@4760)
            $k@4764)
          $k@4782)
        $k@4786)
      $k@4804)
    $Perm.No)))
(assert (not (= $t@4801 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 18
(assert (not (= $t@4798 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not (= $t@4798 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
; [then-branch 584] $t@4798 != Null
(assert (not (= $t@4798 $Ref.null)))
(declare-const $k@4805 $Perm)
(assert ($Perm.isValidVar $k@4805))
(assert ($Perm.isReadVar $k@4805 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                      $k@4699)
                    $k@4717)
                  $k@4721)
                $k@4739)
              $k@4743)
            $k@4761)
          $k@4765)
        $k@4783)
      $k@4787))
  (= $t@4794 $t@4772)))
(declare-const $k@4806 $Perm)
(assert ($Perm.isValidVar $k@4806))
(assert ($Perm.isReadVar $k@4806 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                      $k@4700)
                    $k@4718)
                  $k@4722)
                $k@4740)
              $k@4744)
            $k@4762)
          $k@4766)
        $k@4784)
      $k@4788))
  (= $t@4792 $t@4770)))
; [exec]
; p := __flatten_79
(pop) ; 18
(push) ; 18
; [else-branch 584] $t@4798 == Null
(assert (= $t@4798 $Ref.null))
(declare-const $k@4807 $Perm)
(assert ($Perm.isValidVar $k@4807))
(assert ($Perm.isReadVar $k@4807 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                      $k@4699)
                    $k@4717)
                  $k@4721)
                $k@4739)
              $k@4743)
            $k@4761)
          $k@4765)
        $k@4783)
      $k@4787))
  (= $t@4794 $t@4772)))
(declare-const $k@4808 $Perm)
(assert ($Perm.isValidVar $k@4808))
(assert ($Perm.isReadVar $k@4808 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                      $k@4700)
                    $k@4718)
                  $k@4722)
                $k@4740)
              $k@4744)
            $k@4762)
          $k@4766)
        $k@4784)
      $k@4788))
  (= $t@4792 $t@4770)))
; [exec]
; p := __flatten_79
(pop) ; 18
(pop) ; 17
; [dead else-branch 583] $t@4776 == Null
(pop) ; 16
(push) ; 16
; [else-branch 582] $t@4776 == Null
(assert (= $t@4776 $Ref.null))
(declare-const $k@4809 $Perm)
(assert ($Perm.isValidVar $k@4809))
(assert ($Perm.isReadVar $k@4809 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                  $k@4699)
                $k@4717)
              $k@4721)
            $k@4739)
          $k@4743)
        $k@4761)
      $k@4765))
  (= $t@4772 $t@4750)))
(declare-const $k@4810 $Perm)
(assert ($Perm.isValidVar $k@4810))
(assert ($Perm.isReadVar $k@4810 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                  $k@4700)
                $k@4718)
              $k@4722)
            $k@4740)
          $k@4744)
        $k@4762)
      $k@4766))
  (= $t@4770 $t@4748)))
; [exec]
; o := __flatten_78
; [exec]
; __flatten_79 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@4811 $Perm)
(assert ($Perm.isValidVar $k@4811))
(assert ($Perm.isReadVar $k@4811 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@4811 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@4811
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                  $k@4697)
                $k@4715)
              $k@4719)
            $k@4737)
          $k@4741)
        $k@4759)
      $k@4763)
    $k@4781)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@4812 $Perm)
(assert ($Perm.isValidVar $k@4812))
(assert ($Perm.isReadVar $k@4812 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@4812 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@4812
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                  $k@4698)
                $k@4716)
              $k@4720)
            $k@4738)
          $k@4742)
        $k@4760)
      $k@4764)
    $k@4782)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 17
(assert (not (not (= $t@4776 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 17
; [dead then-branch 585] $t@4776 != Null
(push) ; 17
; [else-branch 585] $t@4776 == Null
(declare-const $k@4813 $Perm)
(assert ($Perm.isValidVar $k@4813))
(assert ($Perm.isReadVar $k@4813 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@4813 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                    $k@4699)
                  $k@4717)
                $k@4721)
              $k@4739)
            $k@4743)
          $k@4761)
        $k@4765)
      $k@4809)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                    $k@4699)
                  $k@4717)
                $k@4721)
              $k@4739)
            $k@4743)
          $k@4761)
        $k@4765)
      $k@4809)
    $Perm.No)))
(assert (<
  $k@4813
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                  $k@4699)
                $k@4717)
              $k@4721)
            $k@4739)
          $k@4743)
        $k@4761)
      $k@4765)
    $k@4809)))
(declare-const $k@4814 $Perm)
(assert ($Perm.isValidVar $k@4814))
(assert ($Perm.isReadVar $k@4814 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@4814 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                    $k@4700)
                  $k@4718)
                $k@4722)
              $k@4740)
            $k@4744)
          $k@4762)
        $k@4766)
      $k@4810)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                    $k@4700)
                  $k@4718)
                $k@4722)
              $k@4740)
            $k@4744)
          $k@4762)
        $k@4766)
      $k@4810)
    $Perm.No)))
(assert (<
  $k@4814
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                  $k@4700)
                $k@4718)
              $k@4722)
            $k@4740)
          $k@4744)
        $k@4762)
      $k@4766)
    $k@4810)))
(declare-const sys__result@4815 $Ref)
(declare-const $t@4816 $Snap)
(declare-const $t@4817 $Snap)
(declare-const $t@4818 $Ref)
(assert (= $t@4816 ($Snap.combine $t@4817 ($SortWrappers.$RefTo$Snap $t@4818))))
(declare-const $t@4819 $Snap)
(declare-const $t@4820 $Ref)
(assert (= $t@4817 ($Snap.combine $t@4819 ($SortWrappers.$RefTo$Snap $t@4820))))
(declare-const $t@4821 $Snap)
(declare-const $t@4822 $Snap)
(assert (= $t@4819 ($Snap.combine $t@4821 $t@4822)))
(declare-const $t@4823 $Snap)
(declare-const $t@4824 $Ref)
(assert (= $t@4821 ($Snap.combine $t@4823 ($SortWrappers.$RefTo$Snap $t@4824))))
(declare-const $t@4825 $Snap)
(assert (= $t@4823 ($Snap.combine $t@4825 $Snap.unit)))
(declare-const $t@4826 Int)
(declare-const $t@4827 $Ref)
(assert (=
  $t@4825
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@4826)
    ($SortWrappers.$RefTo$Snap $t@4827))))
(declare-const $t@4828 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@4826)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@4828) $Snap.unit)))
(declare-const $k@4829 $Perm)
(assert ($Perm.isValidVar $k@4829))
(assert ($Perm.isReadVar $k@4829 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                      $k@4697)
                    $k@4715)
                  $k@4719)
                $k@4737)
              $k@4741)
            $k@4759)
          $k@4763)
        $k@4781)
      $k@4811))
  (= $t@4828 $t@4780)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                        $k@4697)
                      $k@4715)
                    $k@4719)
                  $k@4737)
                $k@4741)
              $k@4759)
            $k@4763)
          $k@4781)
        $k@4811)
      $k@4829)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                        $k@4697)
                      $k@4715)
                    $k@4719)
                  $k@4737)
                $k@4741)
              $k@4759)
            $k@4763)
          $k@4781)
        $k@4811)
      $k@4829)
    $Perm.No)))
(assert (> $t@4828 0))
(declare-const $k@4830 $Perm)
(assert ($Perm.isValidVar $k@4830))
(assert ($Perm.isReadVar $k@4830 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                      $k@4698)
                    $k@4716)
                  $k@4720)
                $k@4738)
              $k@4742)
            $k@4760)
          $k@4764)
        $k@4782)
      $k@4812))
  (= $t@4827 $t@4779)))
; [eval] diz.BlockingQueue__count != null
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                        $k@4698)
                      $k@4716)
                    $k@4720)
                  $k@4738)
                $k@4742)
              $k@4760)
            $k@4764)
          $k@4782)
        $k@4812)
      $k@4830)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                        $k@4698)
                      $k@4716)
                    $k@4720)
                  $k@4738)
                $k@4742)
              $k@4760)
            $k@4764)
          $k@4782)
        $k@4812)
      $k@4830)
    $Perm.No)))
(assert (not (= $t@4827 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 18
(assert (not (= $t@4824 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not (= $t@4824 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
; [then-branch 586] $t@4824 != Null
(assert (not (= $t@4824 $Ref.null)))
(declare-const $k@4831 $Perm)
(assert ($Perm.isValidVar $k@4831))
(assert ($Perm.isReadVar $k@4831 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                      $k@4699)
                    $k@4717)
                  $k@4721)
                $k@4739)
              $k@4743)
            $k@4761)
          $k@4765)
        $k@4809)
      $k@4813))
  (= $t@4820 $t@4772)))
(declare-const $k@4832 $Perm)
(assert ($Perm.isValidVar $k@4832))
(assert ($Perm.isReadVar $k@4832 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                      $k@4700)
                    $k@4718)
                  $k@4722)
                $k@4740)
              $k@4744)
            $k@4762)
          $k@4766)
        $k@4810)
      $k@4814))
  (= $t@4818 $t@4770)))
; [exec]
; p := __flatten_79
(pop) ; 18
(push) ; 18
; [else-branch 586] $t@4824 == Null
(assert (= $t@4824 $Ref.null))
(declare-const $k@4833 $Perm)
(assert ($Perm.isValidVar $k@4833))
(assert ($Perm.isReadVar $k@4833 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                      $k@4699)
                    $k@4717)
                  $k@4721)
                $k@4739)
              $k@4743)
            $k@4761)
          $k@4765)
        $k@4809)
      $k@4813))
  (= $t@4820 $t@4772)))
(declare-const $k@4834 $Perm)
(assert ($Perm.isValidVar $k@4834))
(assert ($Perm.isReadVar $k@4834 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                      $k@4700)
                    $k@4718)
                  $k@4722)
                $k@4740)
              $k@4744)
            $k@4762)
          $k@4766)
        $k@4810)
      $k@4814))
  (= $t@4818 $t@4770)))
; [exec]
; p := __flatten_79
(pop) ; 18
(pop) ; 17
(pop) ; 16
(pop) ; 15
; [dead else-branch 581] $t@4754 == Null
(pop) ; 14
(push) ; 14
; [else-branch 580] $t@4754 == Null
(assert (= $t@4754 $Ref.null))
(declare-const $k@4835 $Perm)
(assert ($Perm.isValidVar $k@4835))
(assert ($Perm.isReadVar $k@4835 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695) $k@4699)
            $k@4717)
          $k@4721)
        $k@4739)
      $k@4743))
  (= $t@4750 $t@4728)))
(declare-const $k@4836 $Perm)
(assert ($Perm.isValidVar $k@4836))
(assert ($Perm.isReadVar $k@4836 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696) $k@4700)
            $k@4718)
          $k@4722)
        $k@4740)
      $k@4744))
  (= $t@4748 $t@4726)))
; [exec]
; n := __flatten_77
; [exec]
; __flatten_78 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@4837 $Perm)
(assert ($Perm.isValidVar $k@4837))
(assert ($Perm.isReadVar $k@4837 $Perm.Write))
(push) ; 15
(assert (not (or (= $k@4837 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 15
(assert (<
  $k@4837
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693) $k@4697)
            $k@4715)
          $k@4719)
        $k@4737)
      $k@4741)
    $k@4759)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@4838 $Perm)
(assert ($Perm.isValidVar $k@4838))
(assert ($Perm.isReadVar $k@4838 $Perm.Write))
(push) ; 15
(assert (not (or (= $k@4838 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 15
(assert (<
  $k@4838
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694) $k@4698)
            $k@4716)
          $k@4720)
        $k@4738)
      $k@4742)
    $k@4760)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 15
(assert (not (not (= $t@4754 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 15
; [dead then-branch 587] $t@4754 != Null
(push) ; 15
; [else-branch 587] $t@4754 == Null
(declare-const $k@4839 $Perm)
(assert ($Perm.isValidVar $k@4839))
(assert ($Perm.isReadVar $k@4839 $Perm.Write))
(push) ; 16
(assert (not (or (= $k@4839 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695) $k@4699)
              $k@4717)
            $k@4721)
          $k@4739)
        $k@4743)
      $k@4835)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695) $k@4699)
              $k@4717)
            $k@4721)
          $k@4739)
        $k@4743)
      $k@4835)
    $Perm.No)))
(assert (<
  $k@4839
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695) $k@4699)
            $k@4717)
          $k@4721)
        $k@4739)
      $k@4743)
    $k@4835)))
(declare-const $k@4840 $Perm)
(assert ($Perm.isValidVar $k@4840))
(assert ($Perm.isReadVar $k@4840 $Perm.Write))
(push) ; 16
(assert (not (or (= $k@4840 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696) $k@4700)
              $k@4718)
            $k@4722)
          $k@4740)
        $k@4744)
      $k@4836)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696) $k@4700)
              $k@4718)
            $k@4722)
          $k@4740)
        $k@4744)
      $k@4836)
    $Perm.No)))
(assert (<
  $k@4840
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696) $k@4700)
            $k@4718)
          $k@4722)
        $k@4740)
      $k@4744)
    $k@4836)))
(declare-const sys__result@4841 $Ref)
(declare-const $t@4842 $Snap)
(declare-const $t@4843 $Snap)
(declare-const $t@4844 $Ref)
(assert (= $t@4842 ($Snap.combine $t@4843 ($SortWrappers.$RefTo$Snap $t@4844))))
(declare-const $t@4845 $Snap)
(declare-const $t@4846 $Ref)
(assert (= $t@4843 ($Snap.combine $t@4845 ($SortWrappers.$RefTo$Snap $t@4846))))
(declare-const $t@4847 $Snap)
(declare-const $t@4848 $Snap)
(assert (= $t@4845 ($Snap.combine $t@4847 $t@4848)))
(declare-const $t@4849 $Snap)
(declare-const $t@4850 $Ref)
(assert (= $t@4847 ($Snap.combine $t@4849 ($SortWrappers.$RefTo$Snap $t@4850))))
(declare-const $t@4851 $Snap)
(assert (= $t@4849 ($Snap.combine $t@4851 $Snap.unit)))
(declare-const $t@4852 Int)
(declare-const $t@4853 $Ref)
(assert (=
  $t@4851
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@4852)
    ($SortWrappers.$RefTo$Snap $t@4853))))
(declare-const $t@4854 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@4852)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@4854) $Snap.unit)))
(declare-const $k@4855 $Perm)
(assert ($Perm.isValidVar $k@4855))
(assert ($Perm.isReadVar $k@4855 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                  $k@4697)
                $k@4715)
              $k@4719)
            $k@4737)
          $k@4741)
        $k@4759)
      $k@4837))
  (= $t@4854 $t@4758)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                    $k@4697)
                  $k@4715)
                $k@4719)
              $k@4737)
            $k@4741)
          $k@4759)
        $k@4837)
      $k@4855)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                    $k@4697)
                  $k@4715)
                $k@4719)
              $k@4737)
            $k@4741)
          $k@4759)
        $k@4837)
      $k@4855)
    $Perm.No)))
(assert (> $t@4854 0))
(declare-const $k@4856 $Perm)
(assert ($Perm.isValidVar $k@4856))
(assert ($Perm.isReadVar $k@4856 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                  $k@4698)
                $k@4716)
              $k@4720)
            $k@4738)
          $k@4742)
        $k@4760)
      $k@4838))
  (= $t@4853 $t@4757)))
; [eval] diz.BlockingQueue__count != null
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                    $k@4698)
                  $k@4716)
                $k@4720)
              $k@4738)
            $k@4742)
          $k@4760)
        $k@4838)
      $k@4856)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                    $k@4698)
                  $k@4716)
                $k@4720)
              $k@4738)
            $k@4742)
          $k@4760)
        $k@4838)
      $k@4856)
    $Perm.No)))
(assert (not (= $t@4853 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 16
(assert (not (= $t@4850 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not (= $t@4850 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 16
(push) ; 16
; [then-branch 588] $t@4850 != Null
(assert (not (= $t@4850 $Ref.null)))
(declare-const $k@4857 $Perm)
(assert ($Perm.isValidVar $k@4857))
(assert ($Perm.isReadVar $k@4857 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                  $k@4699)
                $k@4717)
              $k@4721)
            $k@4739)
          $k@4743)
        $k@4835)
      $k@4839))
  (= $t@4846 $t@4750)))
(declare-const $k@4858 $Perm)
(assert ($Perm.isValidVar $k@4858))
(assert ($Perm.isReadVar $k@4858 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                  $k@4700)
                $k@4718)
              $k@4722)
            $k@4740)
          $k@4744)
        $k@4836)
      $k@4840))
  (= $t@4844 $t@4748)))
; [exec]
; o := __flatten_78
; [exec]
; __flatten_79 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@4859 $Perm)
(assert ($Perm.isValidVar $k@4859))
(assert ($Perm.isReadVar $k@4859 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@4859 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@4859
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                  $k@4697)
                $k@4715)
              $k@4719)
            $k@4737)
          $k@4741)
        $k@4759)
      $k@4837)
    $k@4855)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@4860 $Perm)
(assert ($Perm.isValidVar $k@4860))
(assert ($Perm.isReadVar $k@4860 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@4860 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@4860
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                  $k@4698)
                $k@4716)
              $k@4720)
            $k@4738)
          $k@4742)
        $k@4760)
      $k@4838)
    $k@4856)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 17
(assert (not (= $t@4850 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 17
(push) ; 17
; [then-branch 589] $t@4850 != Null
(declare-const $k@4861 $Perm)
(assert ($Perm.isValidVar $k@4861))
(assert ($Perm.isReadVar $k@4861 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@4861 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                    $k@4699)
                  $k@4717)
                $k@4721)
              $k@4739)
            $k@4743)
          $k@4835)
        $k@4839)
      $k@4857)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                    $k@4699)
                  $k@4717)
                $k@4721)
              $k@4739)
            $k@4743)
          $k@4835)
        $k@4839)
      $k@4857)
    $Perm.No)))
(assert (<
  $k@4861
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                  $k@4699)
                $k@4717)
              $k@4721)
            $k@4739)
          $k@4743)
        $k@4835)
      $k@4839)
    $k@4857)))
(declare-const $k@4862 $Perm)
(assert ($Perm.isValidVar $k@4862))
(assert ($Perm.isReadVar $k@4862 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@4862 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                    $k@4700)
                  $k@4718)
                $k@4722)
              $k@4740)
            $k@4744)
          $k@4836)
        $k@4840)
      $k@4858)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                    $k@4700)
                  $k@4718)
                $k@4722)
              $k@4740)
            $k@4744)
          $k@4836)
        $k@4840)
      $k@4858)
    $Perm.No)))
(assert (<
  $k@4862
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                  $k@4700)
                $k@4718)
              $k@4722)
            $k@4740)
          $k@4744)
        $k@4836)
      $k@4840)
    $k@4858)))
(declare-const sys__result@4863 $Ref)
(declare-const $t@4864 $Snap)
(declare-const $t@4865 $Snap)
(declare-const $t@4866 $Ref)
(assert (= $t@4864 ($Snap.combine $t@4865 ($SortWrappers.$RefTo$Snap $t@4866))))
(declare-const $t@4867 $Snap)
(declare-const $t@4868 $Ref)
(assert (= $t@4865 ($Snap.combine $t@4867 ($SortWrappers.$RefTo$Snap $t@4868))))
(declare-const $t@4869 $Snap)
(declare-const $t@4870 $Snap)
(assert (= $t@4867 ($Snap.combine $t@4869 $t@4870)))
(declare-const $t@4871 $Snap)
(declare-const $t@4872 $Ref)
(assert (= $t@4869 ($Snap.combine $t@4871 ($SortWrappers.$RefTo$Snap $t@4872))))
(declare-const $t@4873 $Snap)
(assert (= $t@4871 ($Snap.combine $t@4873 $Snap.unit)))
(declare-const $t@4874 Int)
(declare-const $t@4875 $Ref)
(assert (=
  $t@4873
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@4874)
    ($SortWrappers.$RefTo$Snap $t@4875))))
(declare-const $t@4876 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@4874)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@4876) $Snap.unit)))
(declare-const $k@4877 $Perm)
(assert ($Perm.isValidVar $k@4877))
(assert ($Perm.isReadVar $k@4877 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                      $k@4697)
                    $k@4715)
                  $k@4719)
                $k@4737)
              $k@4741)
            $k@4759)
          $k@4837)
        $k@4855)
      $k@4859))
  (= $t@4876 $t@4854)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                        $k@4697)
                      $k@4715)
                    $k@4719)
                  $k@4737)
                $k@4741)
              $k@4759)
            $k@4837)
          $k@4855)
        $k@4859)
      $k@4877)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                        $k@4697)
                      $k@4715)
                    $k@4719)
                  $k@4737)
                $k@4741)
              $k@4759)
            $k@4837)
          $k@4855)
        $k@4859)
      $k@4877)
    $Perm.No)))
(assert (> $t@4876 0))
(declare-const $k@4878 $Perm)
(assert ($Perm.isValidVar $k@4878))
(assert ($Perm.isReadVar $k@4878 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                      $k@4698)
                    $k@4716)
                  $k@4720)
                $k@4738)
              $k@4742)
            $k@4760)
          $k@4838)
        $k@4856)
      $k@4860))
  (= $t@4875 $t@4853)))
; [eval] diz.BlockingQueue__count != null
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                        $k@4698)
                      $k@4716)
                    $k@4720)
                  $k@4738)
                $k@4742)
              $k@4760)
            $k@4838)
          $k@4856)
        $k@4860)
      $k@4878)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                        $k@4698)
                      $k@4716)
                    $k@4720)
                  $k@4738)
                $k@4742)
              $k@4760)
            $k@4838)
          $k@4856)
        $k@4860)
      $k@4878)
    $Perm.No)))
(assert (not (= $t@4875 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 18
(assert (not (= $t@4872 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not (= $t@4872 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
; [then-branch 590] $t@4872 != Null
(assert (not (= $t@4872 $Ref.null)))
(declare-const $k@4879 $Perm)
(assert ($Perm.isValidVar $k@4879))
(assert ($Perm.isReadVar $k@4879 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                      $k@4699)
                    $k@4717)
                  $k@4721)
                $k@4739)
              $k@4743)
            $k@4835)
          $k@4839)
        $k@4857)
      $k@4861))
  (= $t@4868 $t@4846)))
(declare-const $k@4880 $Perm)
(assert ($Perm.isValidVar $k@4880))
(assert ($Perm.isReadVar $k@4880 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                      $k@4700)
                    $k@4718)
                  $k@4722)
                $k@4740)
              $k@4744)
            $k@4836)
          $k@4840)
        $k@4858)
      $k@4862))
  (= $t@4866 $t@4844)))
; [exec]
; p := __flatten_79
(pop) ; 18
(push) ; 18
; [else-branch 590] $t@4872 == Null
(assert (= $t@4872 $Ref.null))
(declare-const $k@4881 $Perm)
(assert ($Perm.isValidVar $k@4881))
(assert ($Perm.isReadVar $k@4881 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                      $k@4699)
                    $k@4717)
                  $k@4721)
                $k@4739)
              $k@4743)
            $k@4835)
          $k@4839)
        $k@4857)
      $k@4861))
  (= $t@4868 $t@4846)))
(declare-const $k@4882 $Perm)
(assert ($Perm.isValidVar $k@4882))
(assert ($Perm.isReadVar $k@4882 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                      $k@4700)
                    $k@4718)
                  $k@4722)
                $k@4740)
              $k@4744)
            $k@4836)
          $k@4840)
        $k@4858)
      $k@4862))
  (= $t@4866 $t@4844)))
; [exec]
; p := __flatten_79
(pop) ; 18
(pop) ; 17
; [dead else-branch 589] $t@4850 == Null
(pop) ; 16
(push) ; 16
; [else-branch 588] $t@4850 == Null
(assert (= $t@4850 $Ref.null))
(declare-const $k@4883 $Perm)
(assert ($Perm.isValidVar $k@4883))
(assert ($Perm.isReadVar $k@4883 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                  $k@4699)
                $k@4717)
              $k@4721)
            $k@4739)
          $k@4743)
        $k@4835)
      $k@4839))
  (= $t@4846 $t@4750)))
(declare-const $k@4884 $Perm)
(assert ($Perm.isValidVar $k@4884))
(assert ($Perm.isReadVar $k@4884 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                  $k@4700)
                $k@4718)
              $k@4722)
            $k@4740)
          $k@4744)
        $k@4836)
      $k@4840))
  (= $t@4844 $t@4748)))
; [exec]
; o := __flatten_78
; [exec]
; __flatten_79 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@4885 $Perm)
(assert ($Perm.isValidVar $k@4885))
(assert ($Perm.isReadVar $k@4885 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@4885 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@4885
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                  $k@4697)
                $k@4715)
              $k@4719)
            $k@4737)
          $k@4741)
        $k@4759)
      $k@4837)
    $k@4855)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@4886 $Perm)
(assert ($Perm.isValidVar $k@4886))
(assert ($Perm.isReadVar $k@4886 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@4886 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@4886
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                  $k@4698)
                $k@4716)
              $k@4720)
            $k@4738)
          $k@4742)
        $k@4760)
      $k@4838)
    $k@4856)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 17
(assert (not (not (= $t@4850 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 17
; [dead then-branch 591] $t@4850 != Null
(push) ; 17
; [else-branch 591] $t@4850 == Null
(declare-const $k@4887 $Perm)
(assert ($Perm.isValidVar $k@4887))
(assert ($Perm.isReadVar $k@4887 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@4887 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                    $k@4699)
                  $k@4717)
                $k@4721)
              $k@4739)
            $k@4743)
          $k@4835)
        $k@4839)
      $k@4883)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                    $k@4699)
                  $k@4717)
                $k@4721)
              $k@4739)
            $k@4743)
          $k@4835)
        $k@4839)
      $k@4883)
    $Perm.No)))
(assert (<
  $k@4887
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                  $k@4699)
                $k@4717)
              $k@4721)
            $k@4739)
          $k@4743)
        $k@4835)
      $k@4839)
    $k@4883)))
(declare-const $k@4888 $Perm)
(assert ($Perm.isValidVar $k@4888))
(assert ($Perm.isReadVar $k@4888 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@4888 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                    $k@4700)
                  $k@4718)
                $k@4722)
              $k@4740)
            $k@4744)
          $k@4836)
        $k@4840)
      $k@4884)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                    $k@4700)
                  $k@4718)
                $k@4722)
              $k@4740)
            $k@4744)
          $k@4836)
        $k@4840)
      $k@4884)
    $Perm.No)))
(assert (<
  $k@4888
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                  $k@4700)
                $k@4718)
              $k@4722)
            $k@4740)
          $k@4744)
        $k@4836)
      $k@4840)
    $k@4884)))
(declare-const sys__result@4889 $Ref)
(declare-const $t@4890 $Snap)
(declare-const $t@4891 $Snap)
(declare-const $t@4892 $Ref)
(assert (= $t@4890 ($Snap.combine $t@4891 ($SortWrappers.$RefTo$Snap $t@4892))))
(declare-const $t@4893 $Snap)
(declare-const $t@4894 $Ref)
(assert (= $t@4891 ($Snap.combine $t@4893 ($SortWrappers.$RefTo$Snap $t@4894))))
(declare-const $t@4895 $Snap)
(declare-const $t@4896 $Snap)
(assert (= $t@4893 ($Snap.combine $t@4895 $t@4896)))
(declare-const $t@4897 $Snap)
(declare-const $t@4898 $Ref)
(assert (= $t@4895 ($Snap.combine $t@4897 ($SortWrappers.$RefTo$Snap $t@4898))))
(declare-const $t@4899 $Snap)
(assert (= $t@4897 ($Snap.combine $t@4899 $Snap.unit)))
(declare-const $t@4900 Int)
(declare-const $t@4901 $Ref)
(assert (=
  $t@4899
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@4900)
    ($SortWrappers.$RefTo$Snap $t@4901))))
(declare-const $t@4902 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@4900)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@4902) $Snap.unit)))
(declare-const $k@4903 $Perm)
(assert ($Perm.isValidVar $k@4903))
(assert ($Perm.isReadVar $k@4903 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                      $k@4697)
                    $k@4715)
                  $k@4719)
                $k@4737)
              $k@4741)
            $k@4759)
          $k@4837)
        $k@4855)
      $k@4885))
  (= $t@4902 $t@4854)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                        $k@4697)
                      $k@4715)
                    $k@4719)
                  $k@4737)
                $k@4741)
              $k@4759)
            $k@4837)
          $k@4855)
        $k@4885)
      $k@4903)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                        $k@4697)
                      $k@4715)
                    $k@4719)
                  $k@4737)
                $k@4741)
              $k@4759)
            $k@4837)
          $k@4855)
        $k@4885)
      $k@4903)
    $Perm.No)))
(assert (> $t@4902 0))
(declare-const $k@4904 $Perm)
(assert ($Perm.isValidVar $k@4904))
(assert ($Perm.isReadVar $k@4904 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                      $k@4698)
                    $k@4716)
                  $k@4720)
                $k@4738)
              $k@4742)
            $k@4760)
          $k@4838)
        $k@4856)
      $k@4886))
  (= $t@4901 $t@4853)))
; [eval] diz.BlockingQueue__count != null
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                        $k@4698)
                      $k@4716)
                    $k@4720)
                  $k@4738)
                $k@4742)
              $k@4760)
            $k@4838)
          $k@4856)
        $k@4886)
      $k@4904)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                        $k@4698)
                      $k@4716)
                    $k@4720)
                  $k@4738)
                $k@4742)
              $k@4760)
            $k@4838)
          $k@4856)
        $k@4886)
      $k@4904)
    $Perm.No)))
(assert (not (= $t@4901 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 18
(assert (not (= $t@4898 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not (= $t@4898 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
; [then-branch 592] $t@4898 != Null
(assert (not (= $t@4898 $Ref.null)))
(declare-const $k@4905 $Perm)
(assert ($Perm.isValidVar $k@4905))
(assert ($Perm.isReadVar $k@4905 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                      $k@4699)
                    $k@4717)
                  $k@4721)
                $k@4739)
              $k@4743)
            $k@4835)
          $k@4839)
        $k@4883)
      $k@4887))
  (= $t@4894 $t@4846)))
(declare-const $k@4906 $Perm)
(assert ($Perm.isValidVar $k@4906))
(assert ($Perm.isReadVar $k@4906 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                      $k@4700)
                    $k@4718)
                  $k@4722)
                $k@4740)
              $k@4744)
            $k@4836)
          $k@4840)
        $k@4884)
      $k@4888))
  (= $t@4892 $t@4844)))
; [exec]
; p := __flatten_79
(pop) ; 18
(push) ; 18
; [else-branch 592] $t@4898 == Null
(assert (= $t@4898 $Ref.null))
(declare-const $k@4907 $Perm)
(assert ($Perm.isValidVar $k@4907))
(assert ($Perm.isReadVar $k@4907 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                      $k@4699)
                    $k@4717)
                  $k@4721)
                $k@4739)
              $k@4743)
            $k@4835)
          $k@4839)
        $k@4883)
      $k@4887))
  (= $t@4894 $t@4846)))
(declare-const $k@4908 $Perm)
(assert ($Perm.isValidVar $k@4908))
(assert ($Perm.isReadVar $k@4908 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                      $k@4700)
                    $k@4718)
                  $k@4722)
                $k@4740)
              $k@4744)
            $k@4836)
          $k@4840)
        $k@4884)
      $k@4888))
  (= $t@4892 $t@4844)))
; [exec]
; p := __flatten_79
(pop) ; 18
(pop) ; 17
(pop) ; 16
(pop) ; 15
(pop) ; 14
(pop) ; 13
; [dead else-branch 579] $t@4732 == Null
(pop) ; 12
(push) ; 12
; [else-branch 578] $t@4732 == Null
(assert (= $t@4732 $Ref.null))
(declare-const $k@4909 $Perm)
(assert ($Perm.isValidVar $k@4909))
(assert ($Perm.isReadVar $k@4909 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695) $k@4699)
        $k@4717)
      $k@4721))
  (= $t@4728 $t@4706)))
(declare-const $k@4910 $Perm)
(assert ($Perm.isValidVar $k@4910))
(assert ($Perm.isReadVar $k@4910 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696) $k@4700)
        $k@4718)
      $k@4722))
  (= $t@4726 $t@4704)))
; [exec]
; b := __flatten_76
; [exec]
; __flatten_77 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@4911 $Perm)
(assert ($Perm.isValidVar $k@4911))
(assert ($Perm.isReadVar $k@4911 $Perm.Write))
(push) ; 13
(assert (not (or (= $k@4911 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 13
(assert (<
  $k@4911
  (+
    (-
      (+
        (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693) $k@4697)
        $k@4715)
      $k@4719)
    $k@4737)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@4912 $Perm)
(assert ($Perm.isValidVar $k@4912))
(assert ($Perm.isReadVar $k@4912 $Perm.Write))
(push) ; 13
(assert (not (or (= $k@4912 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 13
(assert (<
  $k@4912
  (+
    (-
      (+
        (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694) $k@4698)
        $k@4716)
      $k@4720)
    $k@4738)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 13
(assert (not (not (= $t@4732 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 13
; [dead then-branch 593] $t@4732 != Null
(push) ; 13
; [else-branch 593] $t@4732 == Null
(declare-const $k@4913 $Perm)
(assert ($Perm.isValidVar $k@4913))
(assert ($Perm.isReadVar $k@4913 $Perm.Write))
(push) ; 14
(assert (not (or (= $k@4913 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(push) ; 14
(assert (not (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695) $k@4699)
          $k@4717)
        $k@4721)
      $k@4909)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(assert (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695) $k@4699)
          $k@4717)
        $k@4721)
      $k@4909)
    $Perm.No)))
(assert (<
  $k@4913
  (+
    (-
      (+
        (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695) $k@4699)
        $k@4717)
      $k@4721)
    $k@4909)))
(declare-const $k@4914 $Perm)
(assert ($Perm.isValidVar $k@4914))
(assert ($Perm.isReadVar $k@4914 $Perm.Write))
(push) ; 14
(assert (not (or (= $k@4914 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(push) ; 14
(assert (not (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696) $k@4700)
          $k@4718)
        $k@4722)
      $k@4910)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(assert (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696) $k@4700)
          $k@4718)
        $k@4722)
      $k@4910)
    $Perm.No)))
(assert (<
  $k@4914
  (+
    (-
      (+
        (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696) $k@4700)
        $k@4718)
      $k@4722)
    $k@4910)))
(declare-const sys__result@4915 $Ref)
(declare-const $t@4916 $Snap)
(declare-const $t@4917 $Snap)
(declare-const $t@4918 $Ref)
(assert (= $t@4916 ($Snap.combine $t@4917 ($SortWrappers.$RefTo$Snap $t@4918))))
(declare-const $t@4919 $Snap)
(declare-const $t@4920 $Ref)
(assert (= $t@4917 ($Snap.combine $t@4919 ($SortWrappers.$RefTo$Snap $t@4920))))
(declare-const $t@4921 $Snap)
(declare-const $t@4922 $Snap)
(assert (= $t@4919 ($Snap.combine $t@4921 $t@4922)))
(declare-const $t@4923 $Snap)
(declare-const $t@4924 $Ref)
(assert (= $t@4921 ($Snap.combine $t@4923 ($SortWrappers.$RefTo$Snap $t@4924))))
(declare-const $t@4925 $Snap)
(assert (= $t@4923 ($Snap.combine $t@4925 $Snap.unit)))
(declare-const $t@4926 Int)
(declare-const $t@4927 $Ref)
(assert (=
  $t@4925
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@4926)
    ($SortWrappers.$RefTo$Snap $t@4927))))
(declare-const $t@4928 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@4926)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@4928) $Snap.unit)))
(declare-const $k@4929 $Perm)
(assert ($Perm.isValidVar $k@4929))
(assert ($Perm.isReadVar $k@4929 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693) $k@4697)
            $k@4715)
          $k@4719)
        $k@4737)
      $k@4911))
  (= $t@4928 $t@4736)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 14
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693) $k@4697)
              $k@4715)
            $k@4719)
          $k@4737)
        $k@4911)
      $k@4929)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693) $k@4697)
              $k@4715)
            $k@4719)
          $k@4737)
        $k@4911)
      $k@4929)
    $Perm.No)))
(assert (> $t@4928 0))
(declare-const $k@4930 $Perm)
(assert ($Perm.isValidVar $k@4930))
(assert ($Perm.isReadVar $k@4930 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694) $k@4698)
            $k@4716)
          $k@4720)
        $k@4738)
      $k@4912))
  (= $t@4927 $t@4735)))
; [eval] diz.BlockingQueue__count != null
(push) ; 14
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694) $k@4698)
              $k@4716)
            $k@4720)
          $k@4738)
        $k@4912)
      $k@4930)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694) $k@4698)
              $k@4716)
            $k@4720)
          $k@4738)
        $k@4912)
      $k@4930)
    $Perm.No)))
(assert (not (= $t@4927 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 14
(assert (not (= $t@4924 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 14
(push) ; 14
(assert (not (not (= $t@4924 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 14
(push) ; 14
; [then-branch 594] $t@4924 != Null
(assert (not (= $t@4924 $Ref.null)))
(declare-const $k@4931 $Perm)
(assert ($Perm.isValidVar $k@4931))
(assert ($Perm.isReadVar $k@4931 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695) $k@4699)
            $k@4717)
          $k@4721)
        $k@4909)
      $k@4913))
  (= $t@4920 $t@4728)))
(declare-const $k@4932 $Perm)
(assert ($Perm.isValidVar $k@4932))
(assert ($Perm.isReadVar $k@4932 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696) $k@4700)
            $k@4718)
          $k@4722)
        $k@4910)
      $k@4914))
  (= $t@4918 $t@4726)))
; [exec]
; n := __flatten_77
; [exec]
; __flatten_78 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@4933 $Perm)
(assert ($Perm.isValidVar $k@4933))
(assert ($Perm.isReadVar $k@4933 $Perm.Write))
(push) ; 15
(assert (not (or (= $k@4933 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 15
(assert (<
  $k@4933
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693) $k@4697)
            $k@4715)
          $k@4719)
        $k@4737)
      $k@4911)
    $k@4929)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@4934 $Perm)
(assert ($Perm.isValidVar $k@4934))
(assert ($Perm.isReadVar $k@4934 $Perm.Write))
(push) ; 15
(assert (not (or (= $k@4934 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 15
(assert (<
  $k@4934
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694) $k@4698)
            $k@4716)
          $k@4720)
        $k@4738)
      $k@4912)
    $k@4930)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 15
(assert (not (= $t@4924 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 15
(push) ; 15
; [then-branch 595] $t@4924 != Null
(declare-const $k@4935 $Perm)
(assert ($Perm.isValidVar $k@4935))
(assert ($Perm.isReadVar $k@4935 $Perm.Write))
(push) ; 16
(assert (not (or (= $k@4935 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695) $k@4699)
              $k@4717)
            $k@4721)
          $k@4909)
        $k@4913)
      $k@4931)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695) $k@4699)
              $k@4717)
            $k@4721)
          $k@4909)
        $k@4913)
      $k@4931)
    $Perm.No)))
(assert (<
  $k@4935
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695) $k@4699)
            $k@4717)
          $k@4721)
        $k@4909)
      $k@4913)
    $k@4931)))
(declare-const $k@4936 $Perm)
(assert ($Perm.isValidVar $k@4936))
(assert ($Perm.isReadVar $k@4936 $Perm.Write))
(push) ; 16
(assert (not (or (= $k@4936 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696) $k@4700)
              $k@4718)
            $k@4722)
          $k@4910)
        $k@4914)
      $k@4932)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696) $k@4700)
              $k@4718)
            $k@4722)
          $k@4910)
        $k@4914)
      $k@4932)
    $Perm.No)))
(assert (<
  $k@4936
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696) $k@4700)
            $k@4718)
          $k@4722)
        $k@4910)
      $k@4914)
    $k@4932)))
(declare-const sys__result@4937 $Ref)
(declare-const $t@4938 $Snap)
(declare-const $t@4939 $Snap)
(declare-const $t@4940 $Ref)
(assert (= $t@4938 ($Snap.combine $t@4939 ($SortWrappers.$RefTo$Snap $t@4940))))
(declare-const $t@4941 $Snap)
(declare-const $t@4942 $Ref)
(assert (= $t@4939 ($Snap.combine $t@4941 ($SortWrappers.$RefTo$Snap $t@4942))))
(declare-const $t@4943 $Snap)
(declare-const $t@4944 $Snap)
(assert (= $t@4941 ($Snap.combine $t@4943 $t@4944)))
(declare-const $t@4945 $Snap)
(declare-const $t@4946 $Ref)
(assert (= $t@4943 ($Snap.combine $t@4945 ($SortWrappers.$RefTo$Snap $t@4946))))
(declare-const $t@4947 $Snap)
(assert (= $t@4945 ($Snap.combine $t@4947 $Snap.unit)))
(declare-const $t@4948 Int)
(declare-const $t@4949 $Ref)
(assert (=
  $t@4947
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@4948)
    ($SortWrappers.$RefTo$Snap $t@4949))))
(declare-const $t@4950 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@4948)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@4950) $Snap.unit)))
(declare-const $k@4951 $Perm)
(assert ($Perm.isValidVar $k@4951))
(assert ($Perm.isReadVar $k@4951 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                  $k@4697)
                $k@4715)
              $k@4719)
            $k@4737)
          $k@4911)
        $k@4929)
      $k@4933))
  (= $t@4950 $t@4928)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                    $k@4697)
                  $k@4715)
                $k@4719)
              $k@4737)
            $k@4911)
          $k@4929)
        $k@4933)
      $k@4951)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                    $k@4697)
                  $k@4715)
                $k@4719)
              $k@4737)
            $k@4911)
          $k@4929)
        $k@4933)
      $k@4951)
    $Perm.No)))
(assert (> $t@4950 0))
(declare-const $k@4952 $Perm)
(assert ($Perm.isValidVar $k@4952))
(assert ($Perm.isReadVar $k@4952 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                  $k@4698)
                $k@4716)
              $k@4720)
            $k@4738)
          $k@4912)
        $k@4930)
      $k@4934))
  (= $t@4949 $t@4927)))
; [eval] diz.BlockingQueue__count != null
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                    $k@4698)
                  $k@4716)
                $k@4720)
              $k@4738)
            $k@4912)
          $k@4930)
        $k@4934)
      $k@4952)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                    $k@4698)
                  $k@4716)
                $k@4720)
              $k@4738)
            $k@4912)
          $k@4930)
        $k@4934)
      $k@4952)
    $Perm.No)))
(assert (not (= $t@4949 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 16
(assert (not (= $t@4946 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not (= $t@4946 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 16
(push) ; 16
; [then-branch 596] $t@4946 != Null
(assert (not (= $t@4946 $Ref.null)))
(declare-const $k@4953 $Perm)
(assert ($Perm.isValidVar $k@4953))
(assert ($Perm.isReadVar $k@4953 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                  $k@4699)
                $k@4717)
              $k@4721)
            $k@4909)
          $k@4913)
        $k@4931)
      $k@4935))
  (= $t@4942 $t@4920)))
(declare-const $k@4954 $Perm)
(assert ($Perm.isValidVar $k@4954))
(assert ($Perm.isReadVar $k@4954 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                  $k@4700)
                $k@4718)
              $k@4722)
            $k@4910)
          $k@4914)
        $k@4932)
      $k@4936))
  (= $t@4940 $t@4918)))
; [exec]
; o := __flatten_78
; [exec]
; __flatten_79 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@4955 $Perm)
(assert ($Perm.isValidVar $k@4955))
(assert ($Perm.isReadVar $k@4955 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@4955 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@4955
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                  $k@4697)
                $k@4715)
              $k@4719)
            $k@4737)
          $k@4911)
        $k@4929)
      $k@4933)
    $k@4951)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@4956 $Perm)
(assert ($Perm.isValidVar $k@4956))
(assert ($Perm.isReadVar $k@4956 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@4956 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@4956
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                  $k@4698)
                $k@4716)
              $k@4720)
            $k@4738)
          $k@4912)
        $k@4930)
      $k@4934)
    $k@4952)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 17
(assert (not (= $t@4946 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 17
(push) ; 17
; [then-branch 597] $t@4946 != Null
(declare-const $k@4957 $Perm)
(assert ($Perm.isValidVar $k@4957))
(assert ($Perm.isReadVar $k@4957 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@4957 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                    $k@4699)
                  $k@4717)
                $k@4721)
              $k@4909)
            $k@4913)
          $k@4931)
        $k@4935)
      $k@4953)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                    $k@4699)
                  $k@4717)
                $k@4721)
              $k@4909)
            $k@4913)
          $k@4931)
        $k@4935)
      $k@4953)
    $Perm.No)))
(assert (<
  $k@4957
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                  $k@4699)
                $k@4717)
              $k@4721)
            $k@4909)
          $k@4913)
        $k@4931)
      $k@4935)
    $k@4953)))
(declare-const $k@4958 $Perm)
(assert ($Perm.isValidVar $k@4958))
(assert ($Perm.isReadVar $k@4958 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@4958 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                    $k@4700)
                  $k@4718)
                $k@4722)
              $k@4910)
            $k@4914)
          $k@4932)
        $k@4936)
      $k@4954)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                    $k@4700)
                  $k@4718)
                $k@4722)
              $k@4910)
            $k@4914)
          $k@4932)
        $k@4936)
      $k@4954)
    $Perm.No)))
(assert (<
  $k@4958
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                  $k@4700)
                $k@4718)
              $k@4722)
            $k@4910)
          $k@4914)
        $k@4932)
      $k@4936)
    $k@4954)))
(declare-const sys__result@4959 $Ref)
(declare-const $t@4960 $Snap)
(declare-const $t@4961 $Snap)
(declare-const $t@4962 $Ref)
(assert (= $t@4960 ($Snap.combine $t@4961 ($SortWrappers.$RefTo$Snap $t@4962))))
(declare-const $t@4963 $Snap)
(declare-const $t@4964 $Ref)
(assert (= $t@4961 ($Snap.combine $t@4963 ($SortWrappers.$RefTo$Snap $t@4964))))
(declare-const $t@4965 $Snap)
(declare-const $t@4966 $Snap)
(assert (= $t@4963 ($Snap.combine $t@4965 $t@4966)))
(declare-const $t@4967 $Snap)
(declare-const $t@4968 $Ref)
(assert (= $t@4965 ($Snap.combine $t@4967 ($SortWrappers.$RefTo$Snap $t@4968))))
(declare-const $t@4969 $Snap)
(assert (= $t@4967 ($Snap.combine $t@4969 $Snap.unit)))
(declare-const $t@4970 Int)
(declare-const $t@4971 $Ref)
(assert (=
  $t@4969
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@4970)
    ($SortWrappers.$RefTo$Snap $t@4971))))
(declare-const $t@4972 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@4970)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@4972) $Snap.unit)))
(declare-const $k@4973 $Perm)
(assert ($Perm.isValidVar $k@4973))
(assert ($Perm.isReadVar $k@4973 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                      $k@4697)
                    $k@4715)
                  $k@4719)
                $k@4737)
              $k@4911)
            $k@4929)
          $k@4933)
        $k@4951)
      $k@4955))
  (= $t@4972 $t@4950)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                        $k@4697)
                      $k@4715)
                    $k@4719)
                  $k@4737)
                $k@4911)
              $k@4929)
            $k@4933)
          $k@4951)
        $k@4955)
      $k@4973)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                        $k@4697)
                      $k@4715)
                    $k@4719)
                  $k@4737)
                $k@4911)
              $k@4929)
            $k@4933)
          $k@4951)
        $k@4955)
      $k@4973)
    $Perm.No)))
(assert (> $t@4972 0))
(declare-const $k@4974 $Perm)
(assert ($Perm.isValidVar $k@4974))
(assert ($Perm.isReadVar $k@4974 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                      $k@4698)
                    $k@4716)
                  $k@4720)
                $k@4738)
              $k@4912)
            $k@4930)
          $k@4934)
        $k@4952)
      $k@4956))
  (= $t@4971 $t@4949)))
; [eval] diz.BlockingQueue__count != null
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                        $k@4698)
                      $k@4716)
                    $k@4720)
                  $k@4738)
                $k@4912)
              $k@4930)
            $k@4934)
          $k@4952)
        $k@4956)
      $k@4974)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                        $k@4698)
                      $k@4716)
                    $k@4720)
                  $k@4738)
                $k@4912)
              $k@4930)
            $k@4934)
          $k@4952)
        $k@4956)
      $k@4974)
    $Perm.No)))
(assert (not (= $t@4971 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 18
(assert (not (= $t@4968 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not (= $t@4968 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
; [then-branch 598] $t@4968 != Null
(assert (not (= $t@4968 $Ref.null)))
(declare-const $k@4975 $Perm)
(assert ($Perm.isValidVar $k@4975))
(assert ($Perm.isReadVar $k@4975 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                      $k@4699)
                    $k@4717)
                  $k@4721)
                $k@4909)
              $k@4913)
            $k@4931)
          $k@4935)
        $k@4953)
      $k@4957))
  (= $t@4964 $t@4942)))
(declare-const $k@4976 $Perm)
(assert ($Perm.isValidVar $k@4976))
(assert ($Perm.isReadVar $k@4976 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                      $k@4700)
                    $k@4718)
                  $k@4722)
                $k@4910)
              $k@4914)
            $k@4932)
          $k@4936)
        $k@4954)
      $k@4958))
  (= $t@4962 $t@4940)))
; [exec]
; p := __flatten_79
(pop) ; 18
(push) ; 18
; [else-branch 598] $t@4968 == Null
(assert (= $t@4968 $Ref.null))
(declare-const $k@4977 $Perm)
(assert ($Perm.isValidVar $k@4977))
(assert ($Perm.isReadVar $k@4977 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                      $k@4699)
                    $k@4717)
                  $k@4721)
                $k@4909)
              $k@4913)
            $k@4931)
          $k@4935)
        $k@4953)
      $k@4957))
  (= $t@4964 $t@4942)))
(declare-const $k@4978 $Perm)
(assert ($Perm.isValidVar $k@4978))
(assert ($Perm.isReadVar $k@4978 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                      $k@4700)
                    $k@4718)
                  $k@4722)
                $k@4910)
              $k@4914)
            $k@4932)
          $k@4936)
        $k@4954)
      $k@4958))
  (= $t@4962 $t@4940)))
; [exec]
; p := __flatten_79
(pop) ; 18
(pop) ; 17
; [dead else-branch 597] $t@4946 == Null
(pop) ; 16
(push) ; 16
; [else-branch 596] $t@4946 == Null
(assert (= $t@4946 $Ref.null))
(declare-const $k@4979 $Perm)
(assert ($Perm.isValidVar $k@4979))
(assert ($Perm.isReadVar $k@4979 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                  $k@4699)
                $k@4717)
              $k@4721)
            $k@4909)
          $k@4913)
        $k@4931)
      $k@4935))
  (= $t@4942 $t@4920)))
(declare-const $k@4980 $Perm)
(assert ($Perm.isValidVar $k@4980))
(assert ($Perm.isReadVar $k@4980 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                  $k@4700)
                $k@4718)
              $k@4722)
            $k@4910)
          $k@4914)
        $k@4932)
      $k@4936))
  (= $t@4940 $t@4918)))
; [exec]
; o := __flatten_78
; [exec]
; __flatten_79 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@4981 $Perm)
(assert ($Perm.isValidVar $k@4981))
(assert ($Perm.isReadVar $k@4981 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@4981 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@4981
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                  $k@4697)
                $k@4715)
              $k@4719)
            $k@4737)
          $k@4911)
        $k@4929)
      $k@4933)
    $k@4951)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@4982 $Perm)
(assert ($Perm.isValidVar $k@4982))
(assert ($Perm.isReadVar $k@4982 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@4982 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@4982
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                  $k@4698)
                $k@4716)
              $k@4720)
            $k@4738)
          $k@4912)
        $k@4930)
      $k@4934)
    $k@4952)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 17
(assert (not (not (= $t@4946 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 17
; [dead then-branch 599] $t@4946 != Null
(push) ; 17
; [else-branch 599] $t@4946 == Null
(declare-const $k@4983 $Perm)
(assert ($Perm.isValidVar $k@4983))
(assert ($Perm.isReadVar $k@4983 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@4983 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                    $k@4699)
                  $k@4717)
                $k@4721)
              $k@4909)
            $k@4913)
          $k@4931)
        $k@4935)
      $k@4979)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                    $k@4699)
                  $k@4717)
                $k@4721)
              $k@4909)
            $k@4913)
          $k@4931)
        $k@4935)
      $k@4979)
    $Perm.No)))
(assert (<
  $k@4983
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                  $k@4699)
                $k@4717)
              $k@4721)
            $k@4909)
          $k@4913)
        $k@4931)
      $k@4935)
    $k@4979)))
(declare-const $k@4984 $Perm)
(assert ($Perm.isValidVar $k@4984))
(assert ($Perm.isReadVar $k@4984 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@4984 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                    $k@4700)
                  $k@4718)
                $k@4722)
              $k@4910)
            $k@4914)
          $k@4932)
        $k@4936)
      $k@4980)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                    $k@4700)
                  $k@4718)
                $k@4722)
              $k@4910)
            $k@4914)
          $k@4932)
        $k@4936)
      $k@4980)
    $Perm.No)))
(assert (<
  $k@4984
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                  $k@4700)
                $k@4718)
              $k@4722)
            $k@4910)
          $k@4914)
        $k@4932)
      $k@4936)
    $k@4980)))
(declare-const sys__result@4985 $Ref)
(declare-const $t@4986 $Snap)
(declare-const $t@4987 $Snap)
(declare-const $t@4988 $Ref)
(assert (= $t@4986 ($Snap.combine $t@4987 ($SortWrappers.$RefTo$Snap $t@4988))))
(declare-const $t@4989 $Snap)
(declare-const $t@4990 $Ref)
(assert (= $t@4987 ($Snap.combine $t@4989 ($SortWrappers.$RefTo$Snap $t@4990))))
(declare-const $t@4991 $Snap)
(declare-const $t@4992 $Snap)
(assert (= $t@4989 ($Snap.combine $t@4991 $t@4992)))
(declare-const $t@4993 $Snap)
(declare-const $t@4994 $Ref)
(assert (= $t@4991 ($Snap.combine $t@4993 ($SortWrappers.$RefTo$Snap $t@4994))))
(declare-const $t@4995 $Snap)
(assert (= $t@4993 ($Snap.combine $t@4995 $Snap.unit)))
(declare-const $t@4996 Int)
(declare-const $t@4997 $Ref)
(assert (=
  $t@4995
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@4996)
    ($SortWrappers.$RefTo$Snap $t@4997))))
(declare-const $t@4998 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@4996)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@4998) $Snap.unit)))
(declare-const $k@4999 $Perm)
(assert ($Perm.isValidVar $k@4999))
(assert ($Perm.isReadVar $k@4999 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                      $k@4697)
                    $k@4715)
                  $k@4719)
                $k@4737)
              $k@4911)
            $k@4929)
          $k@4933)
        $k@4951)
      $k@4981))
  (= $t@4998 $t@4950)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                        $k@4697)
                      $k@4715)
                    $k@4719)
                  $k@4737)
                $k@4911)
              $k@4929)
            $k@4933)
          $k@4951)
        $k@4981)
      $k@4999)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                        $k@4697)
                      $k@4715)
                    $k@4719)
                  $k@4737)
                $k@4911)
              $k@4929)
            $k@4933)
          $k@4951)
        $k@4981)
      $k@4999)
    $Perm.No)))
(assert (> $t@4998 0))
(declare-const $k@5000 $Perm)
(assert ($Perm.isValidVar $k@5000))
(assert ($Perm.isReadVar $k@5000 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                      $k@4698)
                    $k@4716)
                  $k@4720)
                $k@4738)
              $k@4912)
            $k@4930)
          $k@4934)
        $k@4952)
      $k@4982))
  (= $t@4997 $t@4949)))
; [eval] diz.BlockingQueue__count != null
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                        $k@4698)
                      $k@4716)
                    $k@4720)
                  $k@4738)
                $k@4912)
              $k@4930)
            $k@4934)
          $k@4952)
        $k@4982)
      $k@5000)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                        $k@4698)
                      $k@4716)
                    $k@4720)
                  $k@4738)
                $k@4912)
              $k@4930)
            $k@4934)
          $k@4952)
        $k@4982)
      $k@5000)
    $Perm.No)))
(assert (not (= $t@4997 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 18
(assert (not (= $t@4994 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not (= $t@4994 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
; [then-branch 600] $t@4994 != Null
(assert (not (= $t@4994 $Ref.null)))
(declare-const $k@5001 $Perm)
(assert ($Perm.isValidVar $k@5001))
(assert ($Perm.isReadVar $k@5001 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                      $k@4699)
                    $k@4717)
                  $k@4721)
                $k@4909)
              $k@4913)
            $k@4931)
          $k@4935)
        $k@4979)
      $k@4983))
  (= $t@4990 $t@4942)))
(declare-const $k@5002 $Perm)
(assert ($Perm.isValidVar $k@5002))
(assert ($Perm.isReadVar $k@5002 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                      $k@4700)
                    $k@4718)
                  $k@4722)
                $k@4910)
              $k@4914)
            $k@4932)
          $k@4936)
        $k@4980)
      $k@4984))
  (= $t@4988 $t@4940)))
; [exec]
; p := __flatten_79
(pop) ; 18
(push) ; 18
; [else-branch 600] $t@4994 == Null
(assert (= $t@4994 $Ref.null))
(declare-const $k@5003 $Perm)
(assert ($Perm.isValidVar $k@5003))
(assert ($Perm.isReadVar $k@5003 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                      $k@4699)
                    $k@4717)
                  $k@4721)
                $k@4909)
              $k@4913)
            $k@4931)
          $k@4935)
        $k@4979)
      $k@4983))
  (= $t@4990 $t@4942)))
(declare-const $k@5004 $Perm)
(assert ($Perm.isValidVar $k@5004))
(assert ($Perm.isReadVar $k@5004 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                      $k@4700)
                    $k@4718)
                  $k@4722)
                $k@4910)
              $k@4914)
            $k@4932)
          $k@4936)
        $k@4980)
      $k@4984))
  (= $t@4988 $t@4940)))
; [exec]
; p := __flatten_79
(pop) ; 18
(pop) ; 17
(pop) ; 16
(pop) ; 15
; [dead else-branch 595] $t@4924 == Null
(pop) ; 14
(push) ; 14
; [else-branch 594] $t@4924 == Null
(assert (= $t@4924 $Ref.null))
(declare-const $k@5005 $Perm)
(assert ($Perm.isValidVar $k@5005))
(assert ($Perm.isReadVar $k@5005 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695) $k@4699)
            $k@4717)
          $k@4721)
        $k@4909)
      $k@4913))
  (= $t@4920 $t@4728)))
(declare-const $k@5006 $Perm)
(assert ($Perm.isValidVar $k@5006))
(assert ($Perm.isReadVar $k@5006 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696) $k@4700)
            $k@4718)
          $k@4722)
        $k@4910)
      $k@4914))
  (= $t@4918 $t@4726)))
; [exec]
; n := __flatten_77
; [exec]
; __flatten_78 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@5007 $Perm)
(assert ($Perm.isValidVar $k@5007))
(assert ($Perm.isReadVar $k@5007 $Perm.Write))
(push) ; 15
(assert (not (or (= $k@5007 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 15
(assert (<
  $k@5007
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693) $k@4697)
            $k@4715)
          $k@4719)
        $k@4737)
      $k@4911)
    $k@4929)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@5008 $Perm)
(assert ($Perm.isValidVar $k@5008))
(assert ($Perm.isReadVar $k@5008 $Perm.Write))
(push) ; 15
(assert (not (or (= $k@5008 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 15
(assert (<
  $k@5008
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694) $k@4698)
            $k@4716)
          $k@4720)
        $k@4738)
      $k@4912)
    $k@4930)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 15
(assert (not (not (= $t@4924 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 15
; [dead then-branch 601] $t@4924 != Null
(push) ; 15
; [else-branch 601] $t@4924 == Null
(declare-const $k@5009 $Perm)
(assert ($Perm.isValidVar $k@5009))
(assert ($Perm.isReadVar $k@5009 $Perm.Write))
(push) ; 16
(assert (not (or (= $k@5009 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695) $k@4699)
              $k@4717)
            $k@4721)
          $k@4909)
        $k@4913)
      $k@5005)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695) $k@4699)
              $k@4717)
            $k@4721)
          $k@4909)
        $k@4913)
      $k@5005)
    $Perm.No)))
(assert (<
  $k@5009
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695) $k@4699)
            $k@4717)
          $k@4721)
        $k@4909)
      $k@4913)
    $k@5005)))
(declare-const $k@5010 $Perm)
(assert ($Perm.isValidVar $k@5010))
(assert ($Perm.isReadVar $k@5010 $Perm.Write))
(push) ; 16
(assert (not (or (= $k@5010 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696) $k@4700)
              $k@4718)
            $k@4722)
          $k@4910)
        $k@4914)
      $k@5006)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696) $k@4700)
              $k@4718)
            $k@4722)
          $k@4910)
        $k@4914)
      $k@5006)
    $Perm.No)))
(assert (<
  $k@5010
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696) $k@4700)
            $k@4718)
          $k@4722)
        $k@4910)
      $k@4914)
    $k@5006)))
(declare-const sys__result@5011 $Ref)
(declare-const $t@5012 $Snap)
(declare-const $t@5013 $Snap)
(declare-const $t@5014 $Ref)
(assert (= $t@5012 ($Snap.combine $t@5013 ($SortWrappers.$RefTo$Snap $t@5014))))
(declare-const $t@5015 $Snap)
(declare-const $t@5016 $Ref)
(assert (= $t@5013 ($Snap.combine $t@5015 ($SortWrappers.$RefTo$Snap $t@5016))))
(declare-const $t@5017 $Snap)
(declare-const $t@5018 $Snap)
(assert (= $t@5015 ($Snap.combine $t@5017 $t@5018)))
(declare-const $t@5019 $Snap)
(declare-const $t@5020 $Ref)
(assert (= $t@5017 ($Snap.combine $t@5019 ($SortWrappers.$RefTo$Snap $t@5020))))
(declare-const $t@5021 $Snap)
(assert (= $t@5019 ($Snap.combine $t@5021 $Snap.unit)))
(declare-const $t@5022 Int)
(declare-const $t@5023 $Ref)
(assert (=
  $t@5021
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@5022)
    ($SortWrappers.$RefTo$Snap $t@5023))))
(declare-const $t@5024 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@5022)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@5024) $Snap.unit)))
(declare-const $k@5025 $Perm)
(assert ($Perm.isValidVar $k@5025))
(assert ($Perm.isReadVar $k@5025 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                  $k@4697)
                $k@4715)
              $k@4719)
            $k@4737)
          $k@4911)
        $k@4929)
      $k@5007))
  (= $t@5024 $t@4928)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                    $k@4697)
                  $k@4715)
                $k@4719)
              $k@4737)
            $k@4911)
          $k@4929)
        $k@5007)
      $k@5025)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                    $k@4697)
                  $k@4715)
                $k@4719)
              $k@4737)
            $k@4911)
          $k@4929)
        $k@5007)
      $k@5025)
    $Perm.No)))
(assert (> $t@5024 0))
(declare-const $k@5026 $Perm)
(assert ($Perm.isValidVar $k@5026))
(assert ($Perm.isReadVar $k@5026 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                  $k@4698)
                $k@4716)
              $k@4720)
            $k@4738)
          $k@4912)
        $k@4930)
      $k@5008))
  (= $t@5023 $t@4927)))
; [eval] diz.BlockingQueue__count != null
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                    $k@4698)
                  $k@4716)
                $k@4720)
              $k@4738)
            $k@4912)
          $k@4930)
        $k@5008)
      $k@5026)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                    $k@4698)
                  $k@4716)
                $k@4720)
              $k@4738)
            $k@4912)
          $k@4930)
        $k@5008)
      $k@5026)
    $Perm.No)))
(assert (not (= $t@5023 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 16
(assert (not (= $t@5020 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not (= $t@5020 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 16
(push) ; 16
; [then-branch 602] $t@5020 != Null
(assert (not (= $t@5020 $Ref.null)))
(declare-const $k@5027 $Perm)
(assert ($Perm.isValidVar $k@5027))
(assert ($Perm.isReadVar $k@5027 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                  $k@4699)
                $k@4717)
              $k@4721)
            $k@4909)
          $k@4913)
        $k@5005)
      $k@5009))
  (= $t@5016 $t@4920)))
(declare-const $k@5028 $Perm)
(assert ($Perm.isValidVar $k@5028))
(assert ($Perm.isReadVar $k@5028 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                  $k@4700)
                $k@4718)
              $k@4722)
            $k@4910)
          $k@4914)
        $k@5006)
      $k@5010))
  (= $t@5014 $t@4918)))
; [exec]
; o := __flatten_78
; [exec]
; __flatten_79 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@5029 $Perm)
(assert ($Perm.isValidVar $k@5029))
(assert ($Perm.isReadVar $k@5029 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@5029 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@5029
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                  $k@4697)
                $k@4715)
              $k@4719)
            $k@4737)
          $k@4911)
        $k@4929)
      $k@5007)
    $k@5025)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@5030 $Perm)
(assert ($Perm.isValidVar $k@5030))
(assert ($Perm.isReadVar $k@5030 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@5030 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@5030
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                  $k@4698)
                $k@4716)
              $k@4720)
            $k@4738)
          $k@4912)
        $k@4930)
      $k@5008)
    $k@5026)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 17
(assert (not (= $t@5020 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 17
(push) ; 17
; [then-branch 603] $t@5020 != Null
(declare-const $k@5031 $Perm)
(assert ($Perm.isValidVar $k@5031))
(assert ($Perm.isReadVar $k@5031 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@5031 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                    $k@4699)
                  $k@4717)
                $k@4721)
              $k@4909)
            $k@4913)
          $k@5005)
        $k@5009)
      $k@5027)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                    $k@4699)
                  $k@4717)
                $k@4721)
              $k@4909)
            $k@4913)
          $k@5005)
        $k@5009)
      $k@5027)
    $Perm.No)))
(assert (<
  $k@5031
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                  $k@4699)
                $k@4717)
              $k@4721)
            $k@4909)
          $k@4913)
        $k@5005)
      $k@5009)
    $k@5027)))
(declare-const $k@5032 $Perm)
(assert ($Perm.isValidVar $k@5032))
(assert ($Perm.isReadVar $k@5032 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@5032 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                    $k@4700)
                  $k@4718)
                $k@4722)
              $k@4910)
            $k@4914)
          $k@5006)
        $k@5010)
      $k@5028)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                    $k@4700)
                  $k@4718)
                $k@4722)
              $k@4910)
            $k@4914)
          $k@5006)
        $k@5010)
      $k@5028)
    $Perm.No)))
(assert (<
  $k@5032
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                  $k@4700)
                $k@4718)
              $k@4722)
            $k@4910)
          $k@4914)
        $k@5006)
      $k@5010)
    $k@5028)))
(declare-const sys__result@5033 $Ref)
(declare-const $t@5034 $Snap)
(declare-const $t@5035 $Snap)
(declare-const $t@5036 $Ref)
(assert (= $t@5034 ($Snap.combine $t@5035 ($SortWrappers.$RefTo$Snap $t@5036))))
(declare-const $t@5037 $Snap)
(declare-const $t@5038 $Ref)
(assert (= $t@5035 ($Snap.combine $t@5037 ($SortWrappers.$RefTo$Snap $t@5038))))
(declare-const $t@5039 $Snap)
(declare-const $t@5040 $Snap)
(assert (= $t@5037 ($Snap.combine $t@5039 $t@5040)))
(declare-const $t@5041 $Snap)
(declare-const $t@5042 $Ref)
(assert (= $t@5039 ($Snap.combine $t@5041 ($SortWrappers.$RefTo$Snap $t@5042))))
(declare-const $t@5043 $Snap)
(assert (= $t@5041 ($Snap.combine $t@5043 $Snap.unit)))
(declare-const $t@5044 Int)
(declare-const $t@5045 $Ref)
(assert (=
  $t@5043
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@5044)
    ($SortWrappers.$RefTo$Snap $t@5045))))
(declare-const $t@5046 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@5044)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@5046) $Snap.unit)))
(declare-const $k@5047 $Perm)
(assert ($Perm.isValidVar $k@5047))
(assert ($Perm.isReadVar $k@5047 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                      $k@4697)
                    $k@4715)
                  $k@4719)
                $k@4737)
              $k@4911)
            $k@4929)
          $k@5007)
        $k@5025)
      $k@5029))
  (= $t@5046 $t@5024)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                        $k@4697)
                      $k@4715)
                    $k@4719)
                  $k@4737)
                $k@4911)
              $k@4929)
            $k@5007)
          $k@5025)
        $k@5029)
      $k@5047)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                        $k@4697)
                      $k@4715)
                    $k@4719)
                  $k@4737)
                $k@4911)
              $k@4929)
            $k@5007)
          $k@5025)
        $k@5029)
      $k@5047)
    $Perm.No)))
(assert (> $t@5046 0))
(declare-const $k@5048 $Perm)
(assert ($Perm.isValidVar $k@5048))
(assert ($Perm.isReadVar $k@5048 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                      $k@4698)
                    $k@4716)
                  $k@4720)
                $k@4738)
              $k@4912)
            $k@4930)
          $k@5008)
        $k@5026)
      $k@5030))
  (= $t@5045 $t@5023)))
; [eval] diz.BlockingQueue__count != null
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                        $k@4698)
                      $k@4716)
                    $k@4720)
                  $k@4738)
                $k@4912)
              $k@4930)
            $k@5008)
          $k@5026)
        $k@5030)
      $k@5048)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                        $k@4698)
                      $k@4716)
                    $k@4720)
                  $k@4738)
                $k@4912)
              $k@4930)
            $k@5008)
          $k@5026)
        $k@5030)
      $k@5048)
    $Perm.No)))
(assert (not (= $t@5045 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 18
(assert (not (= $t@5042 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not (= $t@5042 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
; [then-branch 604] $t@5042 != Null
(assert (not (= $t@5042 $Ref.null)))
(declare-const $k@5049 $Perm)
(assert ($Perm.isValidVar $k@5049))
(assert ($Perm.isReadVar $k@5049 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                      $k@4699)
                    $k@4717)
                  $k@4721)
                $k@4909)
              $k@4913)
            $k@5005)
          $k@5009)
        $k@5027)
      $k@5031))
  (= $t@5038 $t@5016)))
(declare-const $k@5050 $Perm)
(assert ($Perm.isValidVar $k@5050))
(assert ($Perm.isReadVar $k@5050 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                      $k@4700)
                    $k@4718)
                  $k@4722)
                $k@4910)
              $k@4914)
            $k@5006)
          $k@5010)
        $k@5028)
      $k@5032))
  (= $t@5036 $t@5014)))
; [exec]
; p := __flatten_79
(pop) ; 18
(push) ; 18
; [else-branch 604] $t@5042 == Null
(assert (= $t@5042 $Ref.null))
(declare-const $k@5051 $Perm)
(assert ($Perm.isValidVar $k@5051))
(assert ($Perm.isReadVar $k@5051 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                      $k@4699)
                    $k@4717)
                  $k@4721)
                $k@4909)
              $k@4913)
            $k@5005)
          $k@5009)
        $k@5027)
      $k@5031))
  (= $t@5038 $t@5016)))
(declare-const $k@5052 $Perm)
(assert ($Perm.isValidVar $k@5052))
(assert ($Perm.isReadVar $k@5052 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                      $k@4700)
                    $k@4718)
                  $k@4722)
                $k@4910)
              $k@4914)
            $k@5006)
          $k@5010)
        $k@5028)
      $k@5032))
  (= $t@5036 $t@5014)))
; [exec]
; p := __flatten_79
(pop) ; 18
(pop) ; 17
; [dead else-branch 603] $t@5020 == Null
(pop) ; 16
(push) ; 16
; [else-branch 602] $t@5020 == Null
(assert (= $t@5020 $Ref.null))
(declare-const $k@5053 $Perm)
(assert ($Perm.isValidVar $k@5053))
(assert ($Perm.isReadVar $k@5053 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                  $k@4699)
                $k@4717)
              $k@4721)
            $k@4909)
          $k@4913)
        $k@5005)
      $k@5009))
  (= $t@5016 $t@4920)))
(declare-const $k@5054 $Perm)
(assert ($Perm.isValidVar $k@5054))
(assert ($Perm.isReadVar $k@5054 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                  $k@4700)
                $k@4718)
              $k@4722)
            $k@4910)
          $k@4914)
        $k@5006)
      $k@5010))
  (= $t@5014 $t@4918)))
; [exec]
; o := __flatten_78
; [exec]
; __flatten_79 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@5055 $Perm)
(assert ($Perm.isValidVar $k@5055))
(assert ($Perm.isReadVar $k@5055 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@5055 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@5055
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                  $k@4697)
                $k@4715)
              $k@4719)
            $k@4737)
          $k@4911)
        $k@4929)
      $k@5007)
    $k@5025)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@5056 $Perm)
(assert ($Perm.isValidVar $k@5056))
(assert ($Perm.isReadVar $k@5056 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@5056 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@5056
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                  $k@4698)
                $k@4716)
              $k@4720)
            $k@4738)
          $k@4912)
        $k@4930)
      $k@5008)
    $k@5026)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 17
(assert (not (not (= $t@5020 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 17
; [dead then-branch 605] $t@5020 != Null
(push) ; 17
; [else-branch 605] $t@5020 == Null
(declare-const $k@5057 $Perm)
(assert ($Perm.isValidVar $k@5057))
(assert ($Perm.isReadVar $k@5057 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@5057 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                    $k@4699)
                  $k@4717)
                $k@4721)
              $k@4909)
            $k@4913)
          $k@5005)
        $k@5009)
      $k@5053)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                    $k@4699)
                  $k@4717)
                $k@4721)
              $k@4909)
            $k@4913)
          $k@5005)
        $k@5009)
      $k@5053)
    $Perm.No)))
(assert (<
  $k@5057
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                  $k@4699)
                $k@4717)
              $k@4721)
            $k@4909)
          $k@4913)
        $k@5005)
      $k@5009)
    $k@5053)))
(declare-const $k@5058 $Perm)
(assert ($Perm.isValidVar $k@5058))
(assert ($Perm.isReadVar $k@5058 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@5058 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                    $k@4700)
                  $k@4718)
                $k@4722)
              $k@4910)
            $k@4914)
          $k@5006)
        $k@5010)
      $k@5054)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                    $k@4700)
                  $k@4718)
                $k@4722)
              $k@4910)
            $k@4914)
          $k@5006)
        $k@5010)
      $k@5054)
    $Perm.No)))
(assert (<
  $k@5058
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                  $k@4700)
                $k@4718)
              $k@4722)
            $k@4910)
          $k@4914)
        $k@5006)
      $k@5010)
    $k@5054)))
(declare-const sys__result@5059 $Ref)
(declare-const $t@5060 $Snap)
(declare-const $t@5061 $Snap)
(declare-const $t@5062 $Ref)
(assert (= $t@5060 ($Snap.combine $t@5061 ($SortWrappers.$RefTo$Snap $t@5062))))
(declare-const $t@5063 $Snap)
(declare-const $t@5064 $Ref)
(assert (= $t@5061 ($Snap.combine $t@5063 ($SortWrappers.$RefTo$Snap $t@5064))))
(declare-const $t@5065 $Snap)
(declare-const $t@5066 $Snap)
(assert (= $t@5063 ($Snap.combine $t@5065 $t@5066)))
(declare-const $t@5067 $Snap)
(declare-const $t@5068 $Ref)
(assert (= $t@5065 ($Snap.combine $t@5067 ($SortWrappers.$RefTo$Snap $t@5068))))
(declare-const $t@5069 $Snap)
(assert (= $t@5067 ($Snap.combine $t@5069 $Snap.unit)))
(declare-const $t@5070 Int)
(declare-const $t@5071 $Ref)
(assert (=
  $t@5069
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@5070)
    ($SortWrappers.$RefTo$Snap $t@5071))))
(declare-const $t@5072 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@5070)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@5072) $Snap.unit)))
(declare-const $k@5073 $Perm)
(assert ($Perm.isValidVar $k@5073))
(assert ($Perm.isReadVar $k@5073 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                      $k@4697)
                    $k@4715)
                  $k@4719)
                $k@4737)
              $k@4911)
            $k@4929)
          $k@5007)
        $k@5025)
      $k@5055))
  (= $t@5072 $t@5024)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                        $k@4697)
                      $k@4715)
                    $k@4719)
                  $k@4737)
                $k@4911)
              $k@4929)
            $k@5007)
          $k@5025)
        $k@5055)
      $k@5073)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                        $k@4697)
                      $k@4715)
                    $k@4719)
                  $k@4737)
                $k@4911)
              $k@4929)
            $k@5007)
          $k@5025)
        $k@5055)
      $k@5073)
    $Perm.No)))
(assert (> $t@5072 0))
(declare-const $k@5074 $Perm)
(assert ($Perm.isValidVar $k@5074))
(assert ($Perm.isReadVar $k@5074 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                      $k@4698)
                    $k@4716)
                  $k@4720)
                $k@4738)
              $k@4912)
            $k@4930)
          $k@5008)
        $k@5026)
      $k@5056))
  (= $t@5071 $t@5023)))
; [eval] diz.BlockingQueue__count != null
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                        $k@4698)
                      $k@4716)
                    $k@4720)
                  $k@4738)
                $k@4912)
              $k@4930)
            $k@5008)
          $k@5026)
        $k@5056)
      $k@5074)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                        $k@4698)
                      $k@4716)
                    $k@4720)
                  $k@4738)
                $k@4912)
              $k@4930)
            $k@5008)
          $k@5026)
        $k@5056)
      $k@5074)
    $Perm.No)))
(assert (not (= $t@5071 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 18
(assert (not (= $t@5068 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not (= $t@5068 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
; [then-branch 606] $t@5068 != Null
(assert (not (= $t@5068 $Ref.null)))
(declare-const $k@5075 $Perm)
(assert ($Perm.isValidVar $k@5075))
(assert ($Perm.isReadVar $k@5075 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                      $k@4699)
                    $k@4717)
                  $k@4721)
                $k@4909)
              $k@4913)
            $k@5005)
          $k@5009)
        $k@5053)
      $k@5057))
  (= $t@5064 $t@5016)))
(declare-const $k@5076 $Perm)
(assert ($Perm.isValidVar $k@5076))
(assert ($Perm.isReadVar $k@5076 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                      $k@4700)
                    $k@4718)
                  $k@4722)
                $k@4910)
              $k@4914)
            $k@5006)
          $k@5010)
        $k@5054)
      $k@5058))
  (= $t@5062 $t@5014)))
; [exec]
; p := __flatten_79
(pop) ; 18
(push) ; 18
; [else-branch 606] $t@5068 == Null
(assert (= $t@5068 $Ref.null))
(declare-const $k@5077 $Perm)
(assert ($Perm.isValidVar $k@5077))
(assert ($Perm.isReadVar $k@5077 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                      $k@4699)
                    $k@4717)
                  $k@4721)
                $k@4909)
              $k@4913)
            $k@5005)
          $k@5009)
        $k@5053)
      $k@5057))
  (= $t@5064 $t@5016)))
(declare-const $k@5078 $Perm)
(assert ($Perm.isValidVar $k@5078))
(assert ($Perm.isReadVar $k@5078 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                      $k@4700)
                    $k@4718)
                  $k@4722)
                $k@4910)
              $k@4914)
            $k@5006)
          $k@5010)
        $k@5054)
      $k@5058))
  (= $t@5062 $t@5014)))
; [exec]
; p := __flatten_79
(pop) ; 18
(pop) ; 17
(pop) ; 16
(pop) ; 15
(pop) ; 14
(pop) ; 13
(pop) ; 12
(pop) ; 11
; [dead else-branch 577] $t@4710 == Null
(pop) ; 10
(push) ; 10
; [else-branch 576] $t@4710 == Null
(assert (= $t@4710 $Ref.null))
(declare-const $k@5079 $Perm)
(assert ($Perm.isValidVar $k@5079))
(assert ($Perm.isReadVar $k@5079 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695) $k@4699))
  (= $t@4706 $t@4684)))
(declare-const $k@5080 $Perm)
(assert ($Perm.isValidVar $k@5080))
(assert ($Perm.isReadVar $k@5080 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696) $k@4700))
  (= $t@4704 $t@4682)))
; [exec]
; m := __flatten_75
; [exec]
; __flatten_76 := BlockingQueue__offer(queue, 7)
; [eval] diz != null
(declare-const $k@5081 $Perm)
(assert ($Perm.isValidVar $k@5081))
(assert ($Perm.isReadVar $k@5081 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@5081 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (<
  $k@5081
  (+ (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693) $k@4697) $k@4715)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@5082 $Perm)
(assert ($Perm.isValidVar $k@5082))
(assert ($Perm.isReadVar $k@5082 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@5082 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (<
  $k@5082
  (+ (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694) $k@4698) $k@4716)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 11
(assert (not (not (= $t@4710 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 11
; [dead then-branch 607] $t@4710 != Null
(push) ; 11
; [else-branch 607] $t@4710 == Null
(declare-const $k@5083 $Perm)
(assert ($Perm.isValidVar $k@5083))
(assert ($Perm.isReadVar $k@5083 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@5083 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(push) ; 12
(assert (not (not
  (=
    (+
      (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695) $k@4699)
      $k@5079)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695) $k@4699)
      $k@5079)
    $Perm.No)))
(assert (<
  $k@5083
  (+ (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695) $k@4699) $k@5079)))
(declare-const $k@5084 $Perm)
(assert ($Perm.isValidVar $k@5084))
(assert ($Perm.isReadVar $k@5084 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@5084 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(push) ; 12
(assert (not (not
  (=
    (+
      (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696) $k@4700)
      $k@5080)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696) $k@4700)
      $k@5080)
    $Perm.No)))
(assert (<
  $k@5084
  (+ (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696) $k@4700) $k@5080)))
(declare-const sys__result@5085 Bool)
(declare-const $t@5086 $Snap)
(declare-const $t@5087 $Snap)
(declare-const $t@5088 $Ref)
(assert (= $t@5086 ($Snap.combine $t@5087 ($SortWrappers.$RefTo$Snap $t@5088))))
(declare-const $t@5089 $Snap)
(declare-const $t@5090 $Ref)
(assert (= $t@5087 ($Snap.combine $t@5089 ($SortWrappers.$RefTo$Snap $t@5090))))
(declare-const $t@5091 $Snap)
(declare-const $t@5092 $Snap)
(assert (= $t@5089 ($Snap.combine $t@5091 $t@5092)))
(declare-const $t@5093 $Snap)
(declare-const $t@5094 $Ref)
(assert (= $t@5091 ($Snap.combine $t@5093 ($SortWrappers.$RefTo$Snap $t@5094))))
(declare-const $t@5095 $Snap)
(assert (= $t@5093 ($Snap.combine $t@5095 $Snap.unit)))
(declare-const $t@5096 Int)
(declare-const $t@5097 $Ref)
(assert (=
  $t@5095
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@5096)
    ($SortWrappers.$RefTo$Snap $t@5097))))
(declare-const $t@5098 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@5096)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@5098) $Snap.unit)))
(declare-const $k@5099 $Perm)
(assert ($Perm.isValidVar $k@5099))
(assert ($Perm.isReadVar $k@5099 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693) $k@4697)
        $k@4715)
      $k@5081))
  (= $t@5098 $t@4714)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 12
(assert (not (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693) $k@4697)
          $k@4715)
        $k@5081)
      $k@5099)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693) $k@4697)
          $k@4715)
        $k@5081)
      $k@5099)
    $Perm.No)))
(assert (> $t@5098 0))
(declare-const $k@5100 $Perm)
(assert ($Perm.isValidVar $k@5100))
(assert ($Perm.isReadVar $k@5100 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694) $k@4698)
        $k@4716)
      $k@5082))
  (= $t@5097 $t@4713)))
; [eval] diz.BlockingQueue__count != null
(push) ; 12
(assert (not (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694) $k@4698)
          $k@4716)
        $k@5082)
      $k@5100)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694) $k@4698)
          $k@4716)
        $k@5082)
      $k@5100)
    $Perm.No)))
(assert (not (= $t@5097 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 12
(assert (not (= $t@5094 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 12
(push) ; 12
(assert (not (not (= $t@5094 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 12
(push) ; 12
; [then-branch 608] $t@5094 != Null
(assert (not (= $t@5094 $Ref.null)))
(declare-const $k@5101 $Perm)
(assert ($Perm.isValidVar $k@5101))
(assert ($Perm.isReadVar $k@5101 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695) $k@4699)
        $k@5079)
      $k@5083))
  (= $t@5090 $t@4706)))
(declare-const $k@5102 $Perm)
(assert ($Perm.isValidVar $k@5102))
(assert ($Perm.isReadVar $k@5102 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696) $k@4700)
        $k@5080)
      $k@5084))
  (= $t@5088 $t@4704)))
; [exec]
; b := __flatten_76
; [exec]
; __flatten_77 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@5103 $Perm)
(assert ($Perm.isValidVar $k@5103))
(assert ($Perm.isReadVar $k@5103 $Perm.Write))
(push) ; 13
(assert (not (or (= $k@5103 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 13
(assert (<
  $k@5103
  (+
    (-
      (+
        (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693) $k@4697)
        $k@4715)
      $k@5081)
    $k@5099)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@5104 $Perm)
(assert ($Perm.isValidVar $k@5104))
(assert ($Perm.isReadVar $k@5104 $Perm.Write))
(push) ; 13
(assert (not (or (= $k@5104 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 13
(assert (<
  $k@5104
  (+
    (-
      (+
        (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694) $k@4698)
        $k@4716)
      $k@5082)
    $k@5100)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 13
(assert (not (= $t@5094 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 13
(push) ; 13
; [then-branch 609] $t@5094 != Null
(declare-const $k@5105 $Perm)
(assert ($Perm.isValidVar $k@5105))
(assert ($Perm.isReadVar $k@5105 $Perm.Write))
(push) ; 14
(assert (not (or (= $k@5105 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(push) ; 14
(assert (not (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695) $k@4699)
          $k@5079)
        $k@5083)
      $k@5101)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(assert (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695) $k@4699)
          $k@5079)
        $k@5083)
      $k@5101)
    $Perm.No)))
(assert (<
  $k@5105
  (+
    (-
      (+
        (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695) $k@4699)
        $k@5079)
      $k@5083)
    $k@5101)))
(declare-const $k@5106 $Perm)
(assert ($Perm.isValidVar $k@5106))
(assert ($Perm.isReadVar $k@5106 $Perm.Write))
(push) ; 14
(assert (not (or (= $k@5106 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(push) ; 14
(assert (not (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696) $k@4700)
          $k@5080)
        $k@5084)
      $k@5102)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(assert (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696) $k@4700)
          $k@5080)
        $k@5084)
      $k@5102)
    $Perm.No)))
(assert (<
  $k@5106
  (+
    (-
      (+
        (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696) $k@4700)
        $k@5080)
      $k@5084)
    $k@5102)))
(declare-const sys__result@5107 $Ref)
(declare-const $t@5108 $Snap)
(declare-const $t@5109 $Snap)
(declare-const $t@5110 $Ref)
(assert (= $t@5108 ($Snap.combine $t@5109 ($SortWrappers.$RefTo$Snap $t@5110))))
(declare-const $t@5111 $Snap)
(declare-const $t@5112 $Ref)
(assert (= $t@5109 ($Snap.combine $t@5111 ($SortWrappers.$RefTo$Snap $t@5112))))
(declare-const $t@5113 $Snap)
(declare-const $t@5114 $Snap)
(assert (= $t@5111 ($Snap.combine $t@5113 $t@5114)))
(declare-const $t@5115 $Snap)
(declare-const $t@5116 $Ref)
(assert (= $t@5113 ($Snap.combine $t@5115 ($SortWrappers.$RefTo$Snap $t@5116))))
(declare-const $t@5117 $Snap)
(assert (= $t@5115 ($Snap.combine $t@5117 $Snap.unit)))
(declare-const $t@5118 Int)
(declare-const $t@5119 $Ref)
(assert (=
  $t@5117
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@5118)
    ($SortWrappers.$RefTo$Snap $t@5119))))
(declare-const $t@5120 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@5118)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@5120) $Snap.unit)))
(declare-const $k@5121 $Perm)
(assert ($Perm.isValidVar $k@5121))
(assert ($Perm.isReadVar $k@5121 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693) $k@4697)
            $k@4715)
          $k@5081)
        $k@5099)
      $k@5103))
  (= $t@5120 $t@5098)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 14
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693) $k@4697)
              $k@4715)
            $k@5081)
          $k@5099)
        $k@5103)
      $k@5121)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693) $k@4697)
              $k@4715)
            $k@5081)
          $k@5099)
        $k@5103)
      $k@5121)
    $Perm.No)))
(assert (> $t@5120 0))
(declare-const $k@5122 $Perm)
(assert ($Perm.isValidVar $k@5122))
(assert ($Perm.isReadVar $k@5122 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694) $k@4698)
            $k@4716)
          $k@5082)
        $k@5100)
      $k@5104))
  (= $t@5119 $t@5097)))
; [eval] diz.BlockingQueue__count != null
(push) ; 14
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694) $k@4698)
              $k@4716)
            $k@5082)
          $k@5100)
        $k@5104)
      $k@5122)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694) $k@4698)
              $k@4716)
            $k@5082)
          $k@5100)
        $k@5104)
      $k@5122)
    $Perm.No)))
(assert (not (= $t@5119 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 14
(assert (not (= $t@5116 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 14
(push) ; 14
(assert (not (not (= $t@5116 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 14
(push) ; 14
; [then-branch 610] $t@5116 != Null
(assert (not (= $t@5116 $Ref.null)))
(declare-const $k@5123 $Perm)
(assert ($Perm.isValidVar $k@5123))
(assert ($Perm.isReadVar $k@5123 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695) $k@4699)
            $k@5079)
          $k@5083)
        $k@5101)
      $k@5105))
  (= $t@5112 $t@5090)))
(declare-const $k@5124 $Perm)
(assert ($Perm.isValidVar $k@5124))
(assert ($Perm.isReadVar $k@5124 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696) $k@4700)
            $k@5080)
          $k@5084)
        $k@5102)
      $k@5106))
  (= $t@5110 $t@5088)))
; [exec]
; n := __flatten_77
; [exec]
; __flatten_78 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@5125 $Perm)
(assert ($Perm.isValidVar $k@5125))
(assert ($Perm.isReadVar $k@5125 $Perm.Write))
(push) ; 15
(assert (not (or (= $k@5125 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 15
(assert (<
  $k@5125
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693) $k@4697)
            $k@4715)
          $k@5081)
        $k@5099)
      $k@5103)
    $k@5121)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@5126 $Perm)
(assert ($Perm.isValidVar $k@5126))
(assert ($Perm.isReadVar $k@5126 $Perm.Write))
(push) ; 15
(assert (not (or (= $k@5126 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 15
(assert (<
  $k@5126
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694) $k@4698)
            $k@4716)
          $k@5082)
        $k@5100)
      $k@5104)
    $k@5122)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 15
(assert (not (= $t@5116 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 15
(push) ; 15
; [then-branch 611] $t@5116 != Null
(declare-const $k@5127 $Perm)
(assert ($Perm.isValidVar $k@5127))
(assert ($Perm.isReadVar $k@5127 $Perm.Write))
(push) ; 16
(assert (not (or (= $k@5127 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695) $k@4699)
              $k@5079)
            $k@5083)
          $k@5101)
        $k@5105)
      $k@5123)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695) $k@4699)
              $k@5079)
            $k@5083)
          $k@5101)
        $k@5105)
      $k@5123)
    $Perm.No)))
(assert (<
  $k@5127
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695) $k@4699)
            $k@5079)
          $k@5083)
        $k@5101)
      $k@5105)
    $k@5123)))
(declare-const $k@5128 $Perm)
(assert ($Perm.isValidVar $k@5128))
(assert ($Perm.isReadVar $k@5128 $Perm.Write))
(push) ; 16
(assert (not (or (= $k@5128 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696) $k@4700)
              $k@5080)
            $k@5084)
          $k@5102)
        $k@5106)
      $k@5124)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696) $k@4700)
              $k@5080)
            $k@5084)
          $k@5102)
        $k@5106)
      $k@5124)
    $Perm.No)))
(assert (<
  $k@5128
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696) $k@4700)
            $k@5080)
          $k@5084)
        $k@5102)
      $k@5106)
    $k@5124)))
(declare-const sys__result@5129 $Ref)
(declare-const $t@5130 $Snap)
(declare-const $t@5131 $Snap)
(declare-const $t@5132 $Ref)
(assert (= $t@5130 ($Snap.combine $t@5131 ($SortWrappers.$RefTo$Snap $t@5132))))
(declare-const $t@5133 $Snap)
(declare-const $t@5134 $Ref)
(assert (= $t@5131 ($Snap.combine $t@5133 ($SortWrappers.$RefTo$Snap $t@5134))))
(declare-const $t@5135 $Snap)
(declare-const $t@5136 $Snap)
(assert (= $t@5133 ($Snap.combine $t@5135 $t@5136)))
(declare-const $t@5137 $Snap)
(declare-const $t@5138 $Ref)
(assert (= $t@5135 ($Snap.combine $t@5137 ($SortWrappers.$RefTo$Snap $t@5138))))
(declare-const $t@5139 $Snap)
(assert (= $t@5137 ($Snap.combine $t@5139 $Snap.unit)))
(declare-const $t@5140 Int)
(declare-const $t@5141 $Ref)
(assert (=
  $t@5139
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@5140)
    ($SortWrappers.$RefTo$Snap $t@5141))))
(declare-const $t@5142 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@5140)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@5142) $Snap.unit)))
(declare-const $k@5143 $Perm)
(assert ($Perm.isValidVar $k@5143))
(assert ($Perm.isReadVar $k@5143 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                  $k@4697)
                $k@4715)
              $k@5081)
            $k@5099)
          $k@5103)
        $k@5121)
      $k@5125))
  (= $t@5142 $t@5120)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                    $k@4697)
                  $k@4715)
                $k@5081)
              $k@5099)
            $k@5103)
          $k@5121)
        $k@5125)
      $k@5143)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                    $k@4697)
                  $k@4715)
                $k@5081)
              $k@5099)
            $k@5103)
          $k@5121)
        $k@5125)
      $k@5143)
    $Perm.No)))
(assert (> $t@5142 0))
(declare-const $k@5144 $Perm)
(assert ($Perm.isValidVar $k@5144))
(assert ($Perm.isReadVar $k@5144 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                  $k@4698)
                $k@4716)
              $k@5082)
            $k@5100)
          $k@5104)
        $k@5122)
      $k@5126))
  (= $t@5141 $t@5119)))
; [eval] diz.BlockingQueue__count != null
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                    $k@4698)
                  $k@4716)
                $k@5082)
              $k@5100)
            $k@5104)
          $k@5122)
        $k@5126)
      $k@5144)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                    $k@4698)
                  $k@4716)
                $k@5082)
              $k@5100)
            $k@5104)
          $k@5122)
        $k@5126)
      $k@5144)
    $Perm.No)))
(assert (not (= $t@5141 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 16
(assert (not (= $t@5138 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not (= $t@5138 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 16
(push) ; 16
; [then-branch 612] $t@5138 != Null
(assert (not (= $t@5138 $Ref.null)))
(declare-const $k@5145 $Perm)
(assert ($Perm.isValidVar $k@5145))
(assert ($Perm.isReadVar $k@5145 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                  $k@4699)
                $k@5079)
              $k@5083)
            $k@5101)
          $k@5105)
        $k@5123)
      $k@5127))
  (= $t@5134 $t@5112)))
(declare-const $k@5146 $Perm)
(assert ($Perm.isValidVar $k@5146))
(assert ($Perm.isReadVar $k@5146 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                  $k@4700)
                $k@5080)
              $k@5084)
            $k@5102)
          $k@5106)
        $k@5124)
      $k@5128))
  (= $t@5132 $t@5110)))
; [exec]
; o := __flatten_78
; [exec]
; __flatten_79 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@5147 $Perm)
(assert ($Perm.isValidVar $k@5147))
(assert ($Perm.isReadVar $k@5147 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@5147 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@5147
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                  $k@4697)
                $k@4715)
              $k@5081)
            $k@5099)
          $k@5103)
        $k@5121)
      $k@5125)
    $k@5143)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@5148 $Perm)
(assert ($Perm.isValidVar $k@5148))
(assert ($Perm.isReadVar $k@5148 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@5148 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@5148
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                  $k@4698)
                $k@4716)
              $k@5082)
            $k@5100)
          $k@5104)
        $k@5122)
      $k@5126)
    $k@5144)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 17
(assert (not (= $t@5138 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 17
(push) ; 17
; [then-branch 613] $t@5138 != Null
(declare-const $k@5149 $Perm)
(assert ($Perm.isValidVar $k@5149))
(assert ($Perm.isReadVar $k@5149 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@5149 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                    $k@4699)
                  $k@5079)
                $k@5083)
              $k@5101)
            $k@5105)
          $k@5123)
        $k@5127)
      $k@5145)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                    $k@4699)
                  $k@5079)
                $k@5083)
              $k@5101)
            $k@5105)
          $k@5123)
        $k@5127)
      $k@5145)
    $Perm.No)))
(assert (<
  $k@5149
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                  $k@4699)
                $k@5079)
              $k@5083)
            $k@5101)
          $k@5105)
        $k@5123)
      $k@5127)
    $k@5145)))
(declare-const $k@5150 $Perm)
(assert ($Perm.isValidVar $k@5150))
(assert ($Perm.isReadVar $k@5150 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@5150 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                    $k@4700)
                  $k@5080)
                $k@5084)
              $k@5102)
            $k@5106)
          $k@5124)
        $k@5128)
      $k@5146)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                    $k@4700)
                  $k@5080)
                $k@5084)
              $k@5102)
            $k@5106)
          $k@5124)
        $k@5128)
      $k@5146)
    $Perm.No)))
(assert (<
  $k@5150
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                  $k@4700)
                $k@5080)
              $k@5084)
            $k@5102)
          $k@5106)
        $k@5124)
      $k@5128)
    $k@5146)))
(declare-const sys__result@5151 $Ref)
(declare-const $t@5152 $Snap)
(declare-const $t@5153 $Snap)
(declare-const $t@5154 $Ref)
(assert (= $t@5152 ($Snap.combine $t@5153 ($SortWrappers.$RefTo$Snap $t@5154))))
(declare-const $t@5155 $Snap)
(declare-const $t@5156 $Ref)
(assert (= $t@5153 ($Snap.combine $t@5155 ($SortWrappers.$RefTo$Snap $t@5156))))
(declare-const $t@5157 $Snap)
(declare-const $t@5158 $Snap)
(assert (= $t@5155 ($Snap.combine $t@5157 $t@5158)))
(declare-const $t@5159 $Snap)
(declare-const $t@5160 $Ref)
(assert (= $t@5157 ($Snap.combine $t@5159 ($SortWrappers.$RefTo$Snap $t@5160))))
(declare-const $t@5161 $Snap)
(assert (= $t@5159 ($Snap.combine $t@5161 $Snap.unit)))
(declare-const $t@5162 Int)
(declare-const $t@5163 $Ref)
(assert (=
  $t@5161
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@5162)
    ($SortWrappers.$RefTo$Snap $t@5163))))
(declare-const $t@5164 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@5162)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@5164) $Snap.unit)))
(declare-const $k@5165 $Perm)
(assert ($Perm.isValidVar $k@5165))
(assert ($Perm.isReadVar $k@5165 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                      $k@4697)
                    $k@4715)
                  $k@5081)
                $k@5099)
              $k@5103)
            $k@5121)
          $k@5125)
        $k@5143)
      $k@5147))
  (= $t@5164 $t@5142)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                        $k@4697)
                      $k@4715)
                    $k@5081)
                  $k@5099)
                $k@5103)
              $k@5121)
            $k@5125)
          $k@5143)
        $k@5147)
      $k@5165)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                        $k@4697)
                      $k@4715)
                    $k@5081)
                  $k@5099)
                $k@5103)
              $k@5121)
            $k@5125)
          $k@5143)
        $k@5147)
      $k@5165)
    $Perm.No)))
(assert (> $t@5164 0))
(declare-const $k@5166 $Perm)
(assert ($Perm.isValidVar $k@5166))
(assert ($Perm.isReadVar $k@5166 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                      $k@4698)
                    $k@4716)
                  $k@5082)
                $k@5100)
              $k@5104)
            $k@5122)
          $k@5126)
        $k@5144)
      $k@5148))
  (= $t@5163 $t@5141)))
; [eval] diz.BlockingQueue__count != null
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                        $k@4698)
                      $k@4716)
                    $k@5082)
                  $k@5100)
                $k@5104)
              $k@5122)
            $k@5126)
          $k@5144)
        $k@5148)
      $k@5166)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                        $k@4698)
                      $k@4716)
                    $k@5082)
                  $k@5100)
                $k@5104)
              $k@5122)
            $k@5126)
          $k@5144)
        $k@5148)
      $k@5166)
    $Perm.No)))
(assert (not (= $t@5163 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 18
(assert (not (= $t@5160 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not (= $t@5160 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
; [then-branch 614] $t@5160 != Null
(assert (not (= $t@5160 $Ref.null)))
(declare-const $k@5167 $Perm)
(assert ($Perm.isValidVar $k@5167))
(assert ($Perm.isReadVar $k@5167 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                      $k@4699)
                    $k@5079)
                  $k@5083)
                $k@5101)
              $k@5105)
            $k@5123)
          $k@5127)
        $k@5145)
      $k@5149))
  (= $t@5156 $t@5134)))
(declare-const $k@5168 $Perm)
(assert ($Perm.isValidVar $k@5168))
(assert ($Perm.isReadVar $k@5168 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                      $k@4700)
                    $k@5080)
                  $k@5084)
                $k@5102)
              $k@5106)
            $k@5124)
          $k@5128)
        $k@5146)
      $k@5150))
  (= $t@5154 $t@5132)))
; [exec]
; p := __flatten_79
(pop) ; 18
(push) ; 18
; [else-branch 614] $t@5160 == Null
(assert (= $t@5160 $Ref.null))
(declare-const $k@5169 $Perm)
(assert ($Perm.isValidVar $k@5169))
(assert ($Perm.isReadVar $k@5169 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                      $k@4699)
                    $k@5079)
                  $k@5083)
                $k@5101)
              $k@5105)
            $k@5123)
          $k@5127)
        $k@5145)
      $k@5149))
  (= $t@5156 $t@5134)))
(declare-const $k@5170 $Perm)
(assert ($Perm.isValidVar $k@5170))
(assert ($Perm.isReadVar $k@5170 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                      $k@4700)
                    $k@5080)
                  $k@5084)
                $k@5102)
              $k@5106)
            $k@5124)
          $k@5128)
        $k@5146)
      $k@5150))
  (= $t@5154 $t@5132)))
; [exec]
; p := __flatten_79
(pop) ; 18
(pop) ; 17
; [dead else-branch 613] $t@5138 == Null
(pop) ; 16
(push) ; 16
; [else-branch 612] $t@5138 == Null
(assert (= $t@5138 $Ref.null))
(declare-const $k@5171 $Perm)
(assert ($Perm.isValidVar $k@5171))
(assert ($Perm.isReadVar $k@5171 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                  $k@4699)
                $k@5079)
              $k@5083)
            $k@5101)
          $k@5105)
        $k@5123)
      $k@5127))
  (= $t@5134 $t@5112)))
(declare-const $k@5172 $Perm)
(assert ($Perm.isValidVar $k@5172))
(assert ($Perm.isReadVar $k@5172 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                  $k@4700)
                $k@5080)
              $k@5084)
            $k@5102)
          $k@5106)
        $k@5124)
      $k@5128))
  (= $t@5132 $t@5110)))
; [exec]
; o := __flatten_78
; [exec]
; __flatten_79 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@5173 $Perm)
(assert ($Perm.isValidVar $k@5173))
(assert ($Perm.isReadVar $k@5173 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@5173 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@5173
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                  $k@4697)
                $k@4715)
              $k@5081)
            $k@5099)
          $k@5103)
        $k@5121)
      $k@5125)
    $k@5143)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@5174 $Perm)
(assert ($Perm.isValidVar $k@5174))
(assert ($Perm.isReadVar $k@5174 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@5174 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@5174
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                  $k@4698)
                $k@4716)
              $k@5082)
            $k@5100)
          $k@5104)
        $k@5122)
      $k@5126)
    $k@5144)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 17
(assert (not (not (= $t@5138 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 17
; [dead then-branch 615] $t@5138 != Null
(push) ; 17
; [else-branch 615] $t@5138 == Null
(declare-const $k@5175 $Perm)
(assert ($Perm.isValidVar $k@5175))
(assert ($Perm.isReadVar $k@5175 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@5175 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                    $k@4699)
                  $k@5079)
                $k@5083)
              $k@5101)
            $k@5105)
          $k@5123)
        $k@5127)
      $k@5171)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                    $k@4699)
                  $k@5079)
                $k@5083)
              $k@5101)
            $k@5105)
          $k@5123)
        $k@5127)
      $k@5171)
    $Perm.No)))
(assert (<
  $k@5175
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                  $k@4699)
                $k@5079)
              $k@5083)
            $k@5101)
          $k@5105)
        $k@5123)
      $k@5127)
    $k@5171)))
(declare-const $k@5176 $Perm)
(assert ($Perm.isValidVar $k@5176))
(assert ($Perm.isReadVar $k@5176 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@5176 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                    $k@4700)
                  $k@5080)
                $k@5084)
              $k@5102)
            $k@5106)
          $k@5124)
        $k@5128)
      $k@5172)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                    $k@4700)
                  $k@5080)
                $k@5084)
              $k@5102)
            $k@5106)
          $k@5124)
        $k@5128)
      $k@5172)
    $Perm.No)))
(assert (<
  $k@5176
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                  $k@4700)
                $k@5080)
              $k@5084)
            $k@5102)
          $k@5106)
        $k@5124)
      $k@5128)
    $k@5172)))
(declare-const sys__result@5177 $Ref)
(declare-const $t@5178 $Snap)
(declare-const $t@5179 $Snap)
(declare-const $t@5180 $Ref)
(assert (= $t@5178 ($Snap.combine $t@5179 ($SortWrappers.$RefTo$Snap $t@5180))))
(declare-const $t@5181 $Snap)
(declare-const $t@5182 $Ref)
(assert (= $t@5179 ($Snap.combine $t@5181 ($SortWrappers.$RefTo$Snap $t@5182))))
(declare-const $t@5183 $Snap)
(declare-const $t@5184 $Snap)
(assert (= $t@5181 ($Snap.combine $t@5183 $t@5184)))
(declare-const $t@5185 $Snap)
(declare-const $t@5186 $Ref)
(assert (= $t@5183 ($Snap.combine $t@5185 ($SortWrappers.$RefTo$Snap $t@5186))))
(declare-const $t@5187 $Snap)
(assert (= $t@5185 ($Snap.combine $t@5187 $Snap.unit)))
(declare-const $t@5188 Int)
(declare-const $t@5189 $Ref)
(assert (=
  $t@5187
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@5188)
    ($SortWrappers.$RefTo$Snap $t@5189))))
(declare-const $t@5190 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@5188)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@5190) $Snap.unit)))
(declare-const $k@5191 $Perm)
(assert ($Perm.isValidVar $k@5191))
(assert ($Perm.isReadVar $k@5191 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                      $k@4697)
                    $k@4715)
                  $k@5081)
                $k@5099)
              $k@5103)
            $k@5121)
          $k@5125)
        $k@5143)
      $k@5173))
  (= $t@5190 $t@5142)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                        $k@4697)
                      $k@4715)
                    $k@5081)
                  $k@5099)
                $k@5103)
              $k@5121)
            $k@5125)
          $k@5143)
        $k@5173)
      $k@5191)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                        $k@4697)
                      $k@4715)
                    $k@5081)
                  $k@5099)
                $k@5103)
              $k@5121)
            $k@5125)
          $k@5143)
        $k@5173)
      $k@5191)
    $Perm.No)))
(assert (> $t@5190 0))
(declare-const $k@5192 $Perm)
(assert ($Perm.isValidVar $k@5192))
(assert ($Perm.isReadVar $k@5192 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                      $k@4698)
                    $k@4716)
                  $k@5082)
                $k@5100)
              $k@5104)
            $k@5122)
          $k@5126)
        $k@5144)
      $k@5174))
  (= $t@5189 $t@5141)))
; [eval] diz.BlockingQueue__count != null
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                        $k@4698)
                      $k@4716)
                    $k@5082)
                  $k@5100)
                $k@5104)
              $k@5122)
            $k@5126)
          $k@5144)
        $k@5174)
      $k@5192)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                        $k@4698)
                      $k@4716)
                    $k@5082)
                  $k@5100)
                $k@5104)
              $k@5122)
            $k@5126)
          $k@5144)
        $k@5174)
      $k@5192)
    $Perm.No)))
(assert (not (= $t@5189 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 18
(assert (not (= $t@5186 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not (= $t@5186 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
; [then-branch 616] $t@5186 != Null
(assert (not (= $t@5186 $Ref.null)))
(declare-const $k@5193 $Perm)
(assert ($Perm.isValidVar $k@5193))
(assert ($Perm.isReadVar $k@5193 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                      $k@4699)
                    $k@5079)
                  $k@5083)
                $k@5101)
              $k@5105)
            $k@5123)
          $k@5127)
        $k@5171)
      $k@5175))
  (= $t@5182 $t@5134)))
(declare-const $k@5194 $Perm)
(assert ($Perm.isValidVar $k@5194))
(assert ($Perm.isReadVar $k@5194 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                      $k@4700)
                    $k@5080)
                  $k@5084)
                $k@5102)
              $k@5106)
            $k@5124)
          $k@5128)
        $k@5172)
      $k@5176))
  (= $t@5180 $t@5132)))
; [exec]
; p := __flatten_79
(pop) ; 18
(push) ; 18
; [else-branch 616] $t@5186 == Null
(assert (= $t@5186 $Ref.null))
(declare-const $k@5195 $Perm)
(assert ($Perm.isValidVar $k@5195))
(assert ($Perm.isReadVar $k@5195 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                      $k@4699)
                    $k@5079)
                  $k@5083)
                $k@5101)
              $k@5105)
            $k@5123)
          $k@5127)
        $k@5171)
      $k@5175))
  (= $t@5182 $t@5134)))
(declare-const $k@5196 $Perm)
(assert ($Perm.isValidVar $k@5196))
(assert ($Perm.isReadVar $k@5196 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                      $k@4700)
                    $k@5080)
                  $k@5084)
                $k@5102)
              $k@5106)
            $k@5124)
          $k@5128)
        $k@5172)
      $k@5176))
  (= $t@5180 $t@5132)))
; [exec]
; p := __flatten_79
(pop) ; 18
(pop) ; 17
(pop) ; 16
(pop) ; 15
; [dead else-branch 611] $t@5116 == Null
(pop) ; 14
(push) ; 14
; [else-branch 610] $t@5116 == Null
(assert (= $t@5116 $Ref.null))
(declare-const $k@5197 $Perm)
(assert ($Perm.isValidVar $k@5197))
(assert ($Perm.isReadVar $k@5197 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695) $k@4699)
            $k@5079)
          $k@5083)
        $k@5101)
      $k@5105))
  (= $t@5112 $t@5090)))
(declare-const $k@5198 $Perm)
(assert ($Perm.isValidVar $k@5198))
(assert ($Perm.isReadVar $k@5198 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696) $k@4700)
            $k@5080)
          $k@5084)
        $k@5102)
      $k@5106))
  (= $t@5110 $t@5088)))
; [exec]
; n := __flatten_77
; [exec]
; __flatten_78 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@5199 $Perm)
(assert ($Perm.isValidVar $k@5199))
(assert ($Perm.isReadVar $k@5199 $Perm.Write))
(push) ; 15
(assert (not (or (= $k@5199 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 15
(assert (<
  $k@5199
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693) $k@4697)
            $k@4715)
          $k@5081)
        $k@5099)
      $k@5103)
    $k@5121)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@5200 $Perm)
(assert ($Perm.isValidVar $k@5200))
(assert ($Perm.isReadVar $k@5200 $Perm.Write))
(push) ; 15
(assert (not (or (= $k@5200 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 15
(assert (<
  $k@5200
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694) $k@4698)
            $k@4716)
          $k@5082)
        $k@5100)
      $k@5104)
    $k@5122)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 15
(assert (not (not (= $t@5116 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 15
; [dead then-branch 617] $t@5116 != Null
(push) ; 15
; [else-branch 617] $t@5116 == Null
(declare-const $k@5201 $Perm)
(assert ($Perm.isValidVar $k@5201))
(assert ($Perm.isReadVar $k@5201 $Perm.Write))
(push) ; 16
(assert (not (or (= $k@5201 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695) $k@4699)
              $k@5079)
            $k@5083)
          $k@5101)
        $k@5105)
      $k@5197)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695) $k@4699)
              $k@5079)
            $k@5083)
          $k@5101)
        $k@5105)
      $k@5197)
    $Perm.No)))
(assert (<
  $k@5201
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695) $k@4699)
            $k@5079)
          $k@5083)
        $k@5101)
      $k@5105)
    $k@5197)))
(declare-const $k@5202 $Perm)
(assert ($Perm.isValidVar $k@5202))
(assert ($Perm.isReadVar $k@5202 $Perm.Write))
(push) ; 16
(assert (not (or (= $k@5202 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696) $k@4700)
              $k@5080)
            $k@5084)
          $k@5102)
        $k@5106)
      $k@5198)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696) $k@4700)
              $k@5080)
            $k@5084)
          $k@5102)
        $k@5106)
      $k@5198)
    $Perm.No)))
(assert (<
  $k@5202
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696) $k@4700)
            $k@5080)
          $k@5084)
        $k@5102)
      $k@5106)
    $k@5198)))
(declare-const sys__result@5203 $Ref)
(declare-const $t@5204 $Snap)
(declare-const $t@5205 $Snap)
(declare-const $t@5206 $Ref)
(assert (= $t@5204 ($Snap.combine $t@5205 ($SortWrappers.$RefTo$Snap $t@5206))))
(declare-const $t@5207 $Snap)
(declare-const $t@5208 $Ref)
(assert (= $t@5205 ($Snap.combine $t@5207 ($SortWrappers.$RefTo$Snap $t@5208))))
(declare-const $t@5209 $Snap)
(declare-const $t@5210 $Snap)
(assert (= $t@5207 ($Snap.combine $t@5209 $t@5210)))
(declare-const $t@5211 $Snap)
(declare-const $t@5212 $Ref)
(assert (= $t@5209 ($Snap.combine $t@5211 ($SortWrappers.$RefTo$Snap $t@5212))))
(declare-const $t@5213 $Snap)
(assert (= $t@5211 ($Snap.combine $t@5213 $Snap.unit)))
(declare-const $t@5214 Int)
(declare-const $t@5215 $Ref)
(assert (=
  $t@5213
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@5214)
    ($SortWrappers.$RefTo$Snap $t@5215))))
(declare-const $t@5216 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@5214)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@5216) $Snap.unit)))
(declare-const $k@5217 $Perm)
(assert ($Perm.isValidVar $k@5217))
(assert ($Perm.isReadVar $k@5217 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                  $k@4697)
                $k@4715)
              $k@5081)
            $k@5099)
          $k@5103)
        $k@5121)
      $k@5199))
  (= $t@5216 $t@5120)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                    $k@4697)
                  $k@4715)
                $k@5081)
              $k@5099)
            $k@5103)
          $k@5121)
        $k@5199)
      $k@5217)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                    $k@4697)
                  $k@4715)
                $k@5081)
              $k@5099)
            $k@5103)
          $k@5121)
        $k@5199)
      $k@5217)
    $Perm.No)))
(assert (> $t@5216 0))
(declare-const $k@5218 $Perm)
(assert ($Perm.isValidVar $k@5218))
(assert ($Perm.isReadVar $k@5218 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                  $k@4698)
                $k@4716)
              $k@5082)
            $k@5100)
          $k@5104)
        $k@5122)
      $k@5200))
  (= $t@5215 $t@5119)))
; [eval] diz.BlockingQueue__count != null
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                    $k@4698)
                  $k@4716)
                $k@5082)
              $k@5100)
            $k@5104)
          $k@5122)
        $k@5200)
      $k@5218)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                    $k@4698)
                  $k@4716)
                $k@5082)
              $k@5100)
            $k@5104)
          $k@5122)
        $k@5200)
      $k@5218)
    $Perm.No)))
(assert (not (= $t@5215 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 16
(assert (not (= $t@5212 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not (= $t@5212 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 16
(push) ; 16
; [then-branch 618] $t@5212 != Null
(assert (not (= $t@5212 $Ref.null)))
(declare-const $k@5219 $Perm)
(assert ($Perm.isValidVar $k@5219))
(assert ($Perm.isReadVar $k@5219 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                  $k@4699)
                $k@5079)
              $k@5083)
            $k@5101)
          $k@5105)
        $k@5197)
      $k@5201))
  (= $t@5208 $t@5112)))
(declare-const $k@5220 $Perm)
(assert ($Perm.isValidVar $k@5220))
(assert ($Perm.isReadVar $k@5220 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                  $k@4700)
                $k@5080)
              $k@5084)
            $k@5102)
          $k@5106)
        $k@5198)
      $k@5202))
  (= $t@5206 $t@5110)))
; [exec]
; o := __flatten_78
; [exec]
; __flatten_79 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@5221 $Perm)
(assert ($Perm.isValidVar $k@5221))
(assert ($Perm.isReadVar $k@5221 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@5221 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@5221
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                  $k@4697)
                $k@4715)
              $k@5081)
            $k@5099)
          $k@5103)
        $k@5121)
      $k@5199)
    $k@5217)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@5222 $Perm)
(assert ($Perm.isValidVar $k@5222))
(assert ($Perm.isReadVar $k@5222 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@5222 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@5222
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                  $k@4698)
                $k@4716)
              $k@5082)
            $k@5100)
          $k@5104)
        $k@5122)
      $k@5200)
    $k@5218)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 17
(assert (not (= $t@5212 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 17
(push) ; 17
; [then-branch 619] $t@5212 != Null
(declare-const $k@5223 $Perm)
(assert ($Perm.isValidVar $k@5223))
(assert ($Perm.isReadVar $k@5223 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@5223 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                    $k@4699)
                  $k@5079)
                $k@5083)
              $k@5101)
            $k@5105)
          $k@5197)
        $k@5201)
      $k@5219)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                    $k@4699)
                  $k@5079)
                $k@5083)
              $k@5101)
            $k@5105)
          $k@5197)
        $k@5201)
      $k@5219)
    $Perm.No)))
(assert (<
  $k@5223
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                  $k@4699)
                $k@5079)
              $k@5083)
            $k@5101)
          $k@5105)
        $k@5197)
      $k@5201)
    $k@5219)))
(declare-const $k@5224 $Perm)
(assert ($Perm.isValidVar $k@5224))
(assert ($Perm.isReadVar $k@5224 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@5224 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                    $k@4700)
                  $k@5080)
                $k@5084)
              $k@5102)
            $k@5106)
          $k@5198)
        $k@5202)
      $k@5220)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                    $k@4700)
                  $k@5080)
                $k@5084)
              $k@5102)
            $k@5106)
          $k@5198)
        $k@5202)
      $k@5220)
    $Perm.No)))
(assert (<
  $k@5224
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                  $k@4700)
                $k@5080)
              $k@5084)
            $k@5102)
          $k@5106)
        $k@5198)
      $k@5202)
    $k@5220)))
(declare-const sys__result@5225 $Ref)
(declare-const $t@5226 $Snap)
(declare-const $t@5227 $Snap)
(declare-const $t@5228 $Ref)
(assert (= $t@5226 ($Snap.combine $t@5227 ($SortWrappers.$RefTo$Snap $t@5228))))
(declare-const $t@5229 $Snap)
(declare-const $t@5230 $Ref)
(assert (= $t@5227 ($Snap.combine $t@5229 ($SortWrappers.$RefTo$Snap $t@5230))))
(declare-const $t@5231 $Snap)
(declare-const $t@5232 $Snap)
(assert (= $t@5229 ($Snap.combine $t@5231 $t@5232)))
(declare-const $t@5233 $Snap)
(declare-const $t@5234 $Ref)
(assert (= $t@5231 ($Snap.combine $t@5233 ($SortWrappers.$RefTo$Snap $t@5234))))
(declare-const $t@5235 $Snap)
(assert (= $t@5233 ($Snap.combine $t@5235 $Snap.unit)))
(declare-const $t@5236 Int)
(declare-const $t@5237 $Ref)
(assert (=
  $t@5235
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@5236)
    ($SortWrappers.$RefTo$Snap $t@5237))))
(declare-const $t@5238 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@5236)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@5238) $Snap.unit)))
(declare-const $k@5239 $Perm)
(assert ($Perm.isValidVar $k@5239))
(assert ($Perm.isReadVar $k@5239 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                      $k@4697)
                    $k@4715)
                  $k@5081)
                $k@5099)
              $k@5103)
            $k@5121)
          $k@5199)
        $k@5217)
      $k@5221))
  (= $t@5238 $t@5216)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                        $k@4697)
                      $k@4715)
                    $k@5081)
                  $k@5099)
                $k@5103)
              $k@5121)
            $k@5199)
          $k@5217)
        $k@5221)
      $k@5239)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                        $k@4697)
                      $k@4715)
                    $k@5081)
                  $k@5099)
                $k@5103)
              $k@5121)
            $k@5199)
          $k@5217)
        $k@5221)
      $k@5239)
    $Perm.No)))
(assert (> $t@5238 0))
(declare-const $k@5240 $Perm)
(assert ($Perm.isValidVar $k@5240))
(assert ($Perm.isReadVar $k@5240 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                      $k@4698)
                    $k@4716)
                  $k@5082)
                $k@5100)
              $k@5104)
            $k@5122)
          $k@5200)
        $k@5218)
      $k@5222))
  (= $t@5237 $t@5215)))
; [eval] diz.BlockingQueue__count != null
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                        $k@4698)
                      $k@4716)
                    $k@5082)
                  $k@5100)
                $k@5104)
              $k@5122)
            $k@5200)
          $k@5218)
        $k@5222)
      $k@5240)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                        $k@4698)
                      $k@4716)
                    $k@5082)
                  $k@5100)
                $k@5104)
              $k@5122)
            $k@5200)
          $k@5218)
        $k@5222)
      $k@5240)
    $Perm.No)))
(assert (not (= $t@5237 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 18
(assert (not (= $t@5234 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not (= $t@5234 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
; [then-branch 620] $t@5234 != Null
(assert (not (= $t@5234 $Ref.null)))
(declare-const $k@5241 $Perm)
(assert ($Perm.isValidVar $k@5241))
(assert ($Perm.isReadVar $k@5241 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                      $k@4699)
                    $k@5079)
                  $k@5083)
                $k@5101)
              $k@5105)
            $k@5197)
          $k@5201)
        $k@5219)
      $k@5223))
  (= $t@5230 $t@5208)))
(declare-const $k@5242 $Perm)
(assert ($Perm.isValidVar $k@5242))
(assert ($Perm.isReadVar $k@5242 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                      $k@4700)
                    $k@5080)
                  $k@5084)
                $k@5102)
              $k@5106)
            $k@5198)
          $k@5202)
        $k@5220)
      $k@5224))
  (= $t@5228 $t@5206)))
; [exec]
; p := __flatten_79
(pop) ; 18
(push) ; 18
; [else-branch 620] $t@5234 == Null
(assert (= $t@5234 $Ref.null))
(declare-const $k@5243 $Perm)
(assert ($Perm.isValidVar $k@5243))
(assert ($Perm.isReadVar $k@5243 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                      $k@4699)
                    $k@5079)
                  $k@5083)
                $k@5101)
              $k@5105)
            $k@5197)
          $k@5201)
        $k@5219)
      $k@5223))
  (= $t@5230 $t@5208)))
(declare-const $k@5244 $Perm)
(assert ($Perm.isValidVar $k@5244))
(assert ($Perm.isReadVar $k@5244 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                      $k@4700)
                    $k@5080)
                  $k@5084)
                $k@5102)
              $k@5106)
            $k@5198)
          $k@5202)
        $k@5220)
      $k@5224))
  (= $t@5228 $t@5206)))
; [exec]
; p := __flatten_79
(pop) ; 18
(pop) ; 17
; [dead else-branch 619] $t@5212 == Null
(pop) ; 16
(push) ; 16
; [else-branch 618] $t@5212 == Null
(assert (= $t@5212 $Ref.null))
(declare-const $k@5245 $Perm)
(assert ($Perm.isValidVar $k@5245))
(assert ($Perm.isReadVar $k@5245 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                  $k@4699)
                $k@5079)
              $k@5083)
            $k@5101)
          $k@5105)
        $k@5197)
      $k@5201))
  (= $t@5208 $t@5112)))
(declare-const $k@5246 $Perm)
(assert ($Perm.isValidVar $k@5246))
(assert ($Perm.isReadVar $k@5246 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                  $k@4700)
                $k@5080)
              $k@5084)
            $k@5102)
          $k@5106)
        $k@5198)
      $k@5202))
  (= $t@5206 $t@5110)))
; [exec]
; o := __flatten_78
; [exec]
; __flatten_79 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@5247 $Perm)
(assert ($Perm.isValidVar $k@5247))
(assert ($Perm.isReadVar $k@5247 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@5247 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@5247
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                  $k@4697)
                $k@4715)
              $k@5081)
            $k@5099)
          $k@5103)
        $k@5121)
      $k@5199)
    $k@5217)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@5248 $Perm)
(assert ($Perm.isValidVar $k@5248))
(assert ($Perm.isReadVar $k@5248 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@5248 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@5248
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                  $k@4698)
                $k@4716)
              $k@5082)
            $k@5100)
          $k@5104)
        $k@5122)
      $k@5200)
    $k@5218)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 17
(assert (not (not (= $t@5212 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 17
; [dead then-branch 621] $t@5212 != Null
(push) ; 17
; [else-branch 621] $t@5212 == Null
(declare-const $k@5249 $Perm)
(assert ($Perm.isValidVar $k@5249))
(assert ($Perm.isReadVar $k@5249 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@5249 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                    $k@4699)
                  $k@5079)
                $k@5083)
              $k@5101)
            $k@5105)
          $k@5197)
        $k@5201)
      $k@5245)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                    $k@4699)
                  $k@5079)
                $k@5083)
              $k@5101)
            $k@5105)
          $k@5197)
        $k@5201)
      $k@5245)
    $Perm.No)))
(assert (<
  $k@5249
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                  $k@4699)
                $k@5079)
              $k@5083)
            $k@5101)
          $k@5105)
        $k@5197)
      $k@5201)
    $k@5245)))
(declare-const $k@5250 $Perm)
(assert ($Perm.isValidVar $k@5250))
(assert ($Perm.isReadVar $k@5250 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@5250 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                    $k@4700)
                  $k@5080)
                $k@5084)
              $k@5102)
            $k@5106)
          $k@5198)
        $k@5202)
      $k@5246)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                    $k@4700)
                  $k@5080)
                $k@5084)
              $k@5102)
            $k@5106)
          $k@5198)
        $k@5202)
      $k@5246)
    $Perm.No)))
(assert (<
  $k@5250
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                  $k@4700)
                $k@5080)
              $k@5084)
            $k@5102)
          $k@5106)
        $k@5198)
      $k@5202)
    $k@5246)))
(declare-const sys__result@5251 $Ref)
(declare-const $t@5252 $Snap)
(declare-const $t@5253 $Snap)
(declare-const $t@5254 $Ref)
(assert (= $t@5252 ($Snap.combine $t@5253 ($SortWrappers.$RefTo$Snap $t@5254))))
(declare-const $t@5255 $Snap)
(declare-const $t@5256 $Ref)
(assert (= $t@5253 ($Snap.combine $t@5255 ($SortWrappers.$RefTo$Snap $t@5256))))
(declare-const $t@5257 $Snap)
(declare-const $t@5258 $Snap)
(assert (= $t@5255 ($Snap.combine $t@5257 $t@5258)))
(declare-const $t@5259 $Snap)
(declare-const $t@5260 $Ref)
(assert (= $t@5257 ($Snap.combine $t@5259 ($SortWrappers.$RefTo$Snap $t@5260))))
(declare-const $t@5261 $Snap)
(assert (= $t@5259 ($Snap.combine $t@5261 $Snap.unit)))
(declare-const $t@5262 Int)
(declare-const $t@5263 $Ref)
(assert (=
  $t@5261
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@5262)
    ($SortWrappers.$RefTo$Snap $t@5263))))
(declare-const $t@5264 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@5262)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@5264) $Snap.unit)))
(declare-const $k@5265 $Perm)
(assert ($Perm.isValidVar $k@5265))
(assert ($Perm.isReadVar $k@5265 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                      $k@4697)
                    $k@4715)
                  $k@5081)
                $k@5099)
              $k@5103)
            $k@5121)
          $k@5199)
        $k@5217)
      $k@5247))
  (= $t@5264 $t@5216)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                        $k@4697)
                      $k@4715)
                    $k@5081)
                  $k@5099)
                $k@5103)
              $k@5121)
            $k@5199)
          $k@5217)
        $k@5247)
      $k@5265)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                        $k@4697)
                      $k@4715)
                    $k@5081)
                  $k@5099)
                $k@5103)
              $k@5121)
            $k@5199)
          $k@5217)
        $k@5247)
      $k@5265)
    $Perm.No)))
(assert (> $t@5264 0))
(declare-const $k@5266 $Perm)
(assert ($Perm.isValidVar $k@5266))
(assert ($Perm.isReadVar $k@5266 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                      $k@4698)
                    $k@4716)
                  $k@5082)
                $k@5100)
              $k@5104)
            $k@5122)
          $k@5200)
        $k@5218)
      $k@5248))
  (= $t@5263 $t@5215)))
; [eval] diz.BlockingQueue__count != null
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                        $k@4698)
                      $k@4716)
                    $k@5082)
                  $k@5100)
                $k@5104)
              $k@5122)
            $k@5200)
          $k@5218)
        $k@5248)
      $k@5266)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                        $k@4698)
                      $k@4716)
                    $k@5082)
                  $k@5100)
                $k@5104)
              $k@5122)
            $k@5200)
          $k@5218)
        $k@5248)
      $k@5266)
    $Perm.No)))
(assert (not (= $t@5263 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 18
(assert (not (= $t@5260 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not (= $t@5260 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
; [then-branch 622] $t@5260 != Null
(assert (not (= $t@5260 $Ref.null)))
(declare-const $k@5267 $Perm)
(assert ($Perm.isValidVar $k@5267))
(assert ($Perm.isReadVar $k@5267 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                      $k@4699)
                    $k@5079)
                  $k@5083)
                $k@5101)
              $k@5105)
            $k@5197)
          $k@5201)
        $k@5245)
      $k@5249))
  (= $t@5256 $t@5208)))
(declare-const $k@5268 $Perm)
(assert ($Perm.isValidVar $k@5268))
(assert ($Perm.isReadVar $k@5268 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                      $k@4700)
                    $k@5080)
                  $k@5084)
                $k@5102)
              $k@5106)
            $k@5198)
          $k@5202)
        $k@5246)
      $k@5250))
  (= $t@5254 $t@5206)))
; [exec]
; p := __flatten_79
(pop) ; 18
(push) ; 18
; [else-branch 622] $t@5260 == Null
(assert (= $t@5260 $Ref.null))
(declare-const $k@5269 $Perm)
(assert ($Perm.isValidVar $k@5269))
(assert ($Perm.isReadVar $k@5269 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                      $k@4699)
                    $k@5079)
                  $k@5083)
                $k@5101)
              $k@5105)
            $k@5197)
          $k@5201)
        $k@5245)
      $k@5249))
  (= $t@5256 $t@5208)))
(declare-const $k@5270 $Perm)
(assert ($Perm.isValidVar $k@5270))
(assert ($Perm.isReadVar $k@5270 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                      $k@4700)
                    $k@5080)
                  $k@5084)
                $k@5102)
              $k@5106)
            $k@5198)
          $k@5202)
        $k@5246)
      $k@5250))
  (= $t@5254 $t@5206)))
; [exec]
; p := __flatten_79
(pop) ; 18
(pop) ; 17
(pop) ; 16
(pop) ; 15
(pop) ; 14
(pop) ; 13
; [dead else-branch 609] $t@5094 == Null
(pop) ; 12
(push) ; 12
; [else-branch 608] $t@5094 == Null
(assert (= $t@5094 $Ref.null))
(declare-const $k@5271 $Perm)
(assert ($Perm.isValidVar $k@5271))
(assert ($Perm.isReadVar $k@5271 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695) $k@4699)
        $k@5079)
      $k@5083))
  (= $t@5090 $t@4706)))
(declare-const $k@5272 $Perm)
(assert ($Perm.isValidVar $k@5272))
(assert ($Perm.isReadVar $k@5272 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696) $k@4700)
        $k@5080)
      $k@5084))
  (= $t@5088 $t@4704)))
; [exec]
; b := __flatten_76
; [exec]
; __flatten_77 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@5273 $Perm)
(assert ($Perm.isValidVar $k@5273))
(assert ($Perm.isReadVar $k@5273 $Perm.Write))
(push) ; 13
(assert (not (or (= $k@5273 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 13
(assert (<
  $k@5273
  (+
    (-
      (+
        (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693) $k@4697)
        $k@4715)
      $k@5081)
    $k@5099)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@5274 $Perm)
(assert ($Perm.isValidVar $k@5274))
(assert ($Perm.isReadVar $k@5274 $Perm.Write))
(push) ; 13
(assert (not (or (= $k@5274 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 13
(assert (<
  $k@5274
  (+
    (-
      (+
        (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694) $k@4698)
        $k@4716)
      $k@5082)
    $k@5100)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 13
(assert (not (not (= $t@5094 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 13
; [dead then-branch 623] $t@5094 != Null
(push) ; 13
; [else-branch 623] $t@5094 == Null
(declare-const $k@5275 $Perm)
(assert ($Perm.isValidVar $k@5275))
(assert ($Perm.isReadVar $k@5275 $Perm.Write))
(push) ; 14
(assert (not (or (= $k@5275 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(push) ; 14
(assert (not (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695) $k@4699)
          $k@5079)
        $k@5083)
      $k@5271)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(assert (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695) $k@4699)
          $k@5079)
        $k@5083)
      $k@5271)
    $Perm.No)))
(assert (<
  $k@5275
  (+
    (-
      (+
        (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695) $k@4699)
        $k@5079)
      $k@5083)
    $k@5271)))
(declare-const $k@5276 $Perm)
(assert ($Perm.isValidVar $k@5276))
(assert ($Perm.isReadVar $k@5276 $Perm.Write))
(push) ; 14
(assert (not (or (= $k@5276 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(push) ; 14
(assert (not (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696) $k@4700)
          $k@5080)
        $k@5084)
      $k@5272)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(assert (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696) $k@4700)
          $k@5080)
        $k@5084)
      $k@5272)
    $Perm.No)))
(assert (<
  $k@5276
  (+
    (-
      (+
        (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696) $k@4700)
        $k@5080)
      $k@5084)
    $k@5272)))
(declare-const sys__result@5277 $Ref)
(declare-const $t@5278 $Snap)
(declare-const $t@5279 $Snap)
(declare-const $t@5280 $Ref)
(assert (= $t@5278 ($Snap.combine $t@5279 ($SortWrappers.$RefTo$Snap $t@5280))))
(declare-const $t@5281 $Snap)
(declare-const $t@5282 $Ref)
(assert (= $t@5279 ($Snap.combine $t@5281 ($SortWrappers.$RefTo$Snap $t@5282))))
(declare-const $t@5283 $Snap)
(declare-const $t@5284 $Snap)
(assert (= $t@5281 ($Snap.combine $t@5283 $t@5284)))
(declare-const $t@5285 $Snap)
(declare-const $t@5286 $Ref)
(assert (= $t@5283 ($Snap.combine $t@5285 ($SortWrappers.$RefTo$Snap $t@5286))))
(declare-const $t@5287 $Snap)
(assert (= $t@5285 ($Snap.combine $t@5287 $Snap.unit)))
(declare-const $t@5288 Int)
(declare-const $t@5289 $Ref)
(assert (=
  $t@5287
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@5288)
    ($SortWrappers.$RefTo$Snap $t@5289))))
(declare-const $t@5290 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@5288)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@5290) $Snap.unit)))
(declare-const $k@5291 $Perm)
(assert ($Perm.isValidVar $k@5291))
(assert ($Perm.isReadVar $k@5291 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693) $k@4697)
            $k@4715)
          $k@5081)
        $k@5099)
      $k@5273))
  (= $t@5290 $t@5098)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 14
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693) $k@4697)
              $k@4715)
            $k@5081)
          $k@5099)
        $k@5273)
      $k@5291)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693) $k@4697)
              $k@4715)
            $k@5081)
          $k@5099)
        $k@5273)
      $k@5291)
    $Perm.No)))
(assert (> $t@5290 0))
(declare-const $k@5292 $Perm)
(assert ($Perm.isValidVar $k@5292))
(assert ($Perm.isReadVar $k@5292 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694) $k@4698)
            $k@4716)
          $k@5082)
        $k@5100)
      $k@5274))
  (= $t@5289 $t@5097)))
; [eval] diz.BlockingQueue__count != null
(push) ; 14
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694) $k@4698)
              $k@4716)
            $k@5082)
          $k@5100)
        $k@5274)
      $k@5292)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694) $k@4698)
              $k@4716)
            $k@5082)
          $k@5100)
        $k@5274)
      $k@5292)
    $Perm.No)))
(assert (not (= $t@5289 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 14
(assert (not (= $t@5286 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 14
(push) ; 14
(assert (not (not (= $t@5286 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 14
(push) ; 14
; [then-branch 624] $t@5286 != Null
(assert (not (= $t@5286 $Ref.null)))
(declare-const $k@5293 $Perm)
(assert ($Perm.isValidVar $k@5293))
(assert ($Perm.isReadVar $k@5293 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695) $k@4699)
            $k@5079)
          $k@5083)
        $k@5271)
      $k@5275))
  (= $t@5282 $t@5090)))
(declare-const $k@5294 $Perm)
(assert ($Perm.isValidVar $k@5294))
(assert ($Perm.isReadVar $k@5294 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696) $k@4700)
            $k@5080)
          $k@5084)
        $k@5272)
      $k@5276))
  (= $t@5280 $t@5088)))
; [exec]
; n := __flatten_77
; [exec]
; __flatten_78 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@5295 $Perm)
(assert ($Perm.isValidVar $k@5295))
(assert ($Perm.isReadVar $k@5295 $Perm.Write))
(push) ; 15
(assert (not (or (= $k@5295 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 15
(assert (<
  $k@5295
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693) $k@4697)
            $k@4715)
          $k@5081)
        $k@5099)
      $k@5273)
    $k@5291)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@5296 $Perm)
(assert ($Perm.isValidVar $k@5296))
(assert ($Perm.isReadVar $k@5296 $Perm.Write))
(push) ; 15
(assert (not (or (= $k@5296 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 15
(assert (<
  $k@5296
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694) $k@4698)
            $k@4716)
          $k@5082)
        $k@5100)
      $k@5274)
    $k@5292)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 15
(assert (not (= $t@5286 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 15
(push) ; 15
; [then-branch 625] $t@5286 != Null
(declare-const $k@5297 $Perm)
(assert ($Perm.isValidVar $k@5297))
(assert ($Perm.isReadVar $k@5297 $Perm.Write))
(push) ; 16
(assert (not (or (= $k@5297 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695) $k@4699)
              $k@5079)
            $k@5083)
          $k@5271)
        $k@5275)
      $k@5293)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695) $k@4699)
              $k@5079)
            $k@5083)
          $k@5271)
        $k@5275)
      $k@5293)
    $Perm.No)))
(assert (<
  $k@5297
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695) $k@4699)
            $k@5079)
          $k@5083)
        $k@5271)
      $k@5275)
    $k@5293)))
(declare-const $k@5298 $Perm)
(assert ($Perm.isValidVar $k@5298))
(assert ($Perm.isReadVar $k@5298 $Perm.Write))
(push) ; 16
(assert (not (or (= $k@5298 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696) $k@4700)
              $k@5080)
            $k@5084)
          $k@5272)
        $k@5276)
      $k@5294)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696) $k@4700)
              $k@5080)
            $k@5084)
          $k@5272)
        $k@5276)
      $k@5294)
    $Perm.No)))
(assert (<
  $k@5298
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696) $k@4700)
            $k@5080)
          $k@5084)
        $k@5272)
      $k@5276)
    $k@5294)))
(declare-const sys__result@5299 $Ref)
(declare-const $t@5300 $Snap)
(declare-const $t@5301 $Snap)
(declare-const $t@5302 $Ref)
(assert (= $t@5300 ($Snap.combine $t@5301 ($SortWrappers.$RefTo$Snap $t@5302))))
(declare-const $t@5303 $Snap)
(declare-const $t@5304 $Ref)
(assert (= $t@5301 ($Snap.combine $t@5303 ($SortWrappers.$RefTo$Snap $t@5304))))
(declare-const $t@5305 $Snap)
(declare-const $t@5306 $Snap)
(assert (= $t@5303 ($Snap.combine $t@5305 $t@5306)))
(declare-const $t@5307 $Snap)
(declare-const $t@5308 $Ref)
(assert (= $t@5305 ($Snap.combine $t@5307 ($SortWrappers.$RefTo$Snap $t@5308))))
(declare-const $t@5309 $Snap)
(assert (= $t@5307 ($Snap.combine $t@5309 $Snap.unit)))
(declare-const $t@5310 Int)
(declare-const $t@5311 $Ref)
(assert (=
  $t@5309
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@5310)
    ($SortWrappers.$RefTo$Snap $t@5311))))
(declare-const $t@5312 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@5310)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@5312) $Snap.unit)))
(declare-const $k@5313 $Perm)
(assert ($Perm.isValidVar $k@5313))
(assert ($Perm.isReadVar $k@5313 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                  $k@4697)
                $k@4715)
              $k@5081)
            $k@5099)
          $k@5273)
        $k@5291)
      $k@5295))
  (= $t@5312 $t@5290)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                    $k@4697)
                  $k@4715)
                $k@5081)
              $k@5099)
            $k@5273)
          $k@5291)
        $k@5295)
      $k@5313)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                    $k@4697)
                  $k@4715)
                $k@5081)
              $k@5099)
            $k@5273)
          $k@5291)
        $k@5295)
      $k@5313)
    $Perm.No)))
(assert (> $t@5312 0))
(declare-const $k@5314 $Perm)
(assert ($Perm.isValidVar $k@5314))
(assert ($Perm.isReadVar $k@5314 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                  $k@4698)
                $k@4716)
              $k@5082)
            $k@5100)
          $k@5274)
        $k@5292)
      $k@5296))
  (= $t@5311 $t@5289)))
; [eval] diz.BlockingQueue__count != null
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                    $k@4698)
                  $k@4716)
                $k@5082)
              $k@5100)
            $k@5274)
          $k@5292)
        $k@5296)
      $k@5314)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                    $k@4698)
                  $k@4716)
                $k@5082)
              $k@5100)
            $k@5274)
          $k@5292)
        $k@5296)
      $k@5314)
    $Perm.No)))
(assert (not (= $t@5311 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 16
(assert (not (= $t@5308 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not (= $t@5308 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 16
(push) ; 16
; [then-branch 626] $t@5308 != Null
(assert (not (= $t@5308 $Ref.null)))
(declare-const $k@5315 $Perm)
(assert ($Perm.isValidVar $k@5315))
(assert ($Perm.isReadVar $k@5315 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                  $k@4699)
                $k@5079)
              $k@5083)
            $k@5271)
          $k@5275)
        $k@5293)
      $k@5297))
  (= $t@5304 $t@5282)))
(declare-const $k@5316 $Perm)
(assert ($Perm.isValidVar $k@5316))
(assert ($Perm.isReadVar $k@5316 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                  $k@4700)
                $k@5080)
              $k@5084)
            $k@5272)
          $k@5276)
        $k@5294)
      $k@5298))
  (= $t@5302 $t@5280)))
; [exec]
; o := __flatten_78
; [exec]
; __flatten_79 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@5317 $Perm)
(assert ($Perm.isValidVar $k@5317))
(assert ($Perm.isReadVar $k@5317 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@5317 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@5317
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                  $k@4697)
                $k@4715)
              $k@5081)
            $k@5099)
          $k@5273)
        $k@5291)
      $k@5295)
    $k@5313)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@5318 $Perm)
(assert ($Perm.isValidVar $k@5318))
(assert ($Perm.isReadVar $k@5318 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@5318 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@5318
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                  $k@4698)
                $k@4716)
              $k@5082)
            $k@5100)
          $k@5274)
        $k@5292)
      $k@5296)
    $k@5314)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 17
(assert (not (= $t@5308 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 17
(push) ; 17
; [then-branch 627] $t@5308 != Null
(declare-const $k@5319 $Perm)
(assert ($Perm.isValidVar $k@5319))
(assert ($Perm.isReadVar $k@5319 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@5319 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                    $k@4699)
                  $k@5079)
                $k@5083)
              $k@5271)
            $k@5275)
          $k@5293)
        $k@5297)
      $k@5315)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                    $k@4699)
                  $k@5079)
                $k@5083)
              $k@5271)
            $k@5275)
          $k@5293)
        $k@5297)
      $k@5315)
    $Perm.No)))
(assert (<
  $k@5319
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                  $k@4699)
                $k@5079)
              $k@5083)
            $k@5271)
          $k@5275)
        $k@5293)
      $k@5297)
    $k@5315)))
(declare-const $k@5320 $Perm)
(assert ($Perm.isValidVar $k@5320))
(assert ($Perm.isReadVar $k@5320 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@5320 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                    $k@4700)
                  $k@5080)
                $k@5084)
              $k@5272)
            $k@5276)
          $k@5294)
        $k@5298)
      $k@5316)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                    $k@4700)
                  $k@5080)
                $k@5084)
              $k@5272)
            $k@5276)
          $k@5294)
        $k@5298)
      $k@5316)
    $Perm.No)))
(assert (<
  $k@5320
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                  $k@4700)
                $k@5080)
              $k@5084)
            $k@5272)
          $k@5276)
        $k@5294)
      $k@5298)
    $k@5316)))
(declare-const sys__result@5321 $Ref)
(declare-const $t@5322 $Snap)
(declare-const $t@5323 $Snap)
(declare-const $t@5324 $Ref)
(assert (= $t@5322 ($Snap.combine $t@5323 ($SortWrappers.$RefTo$Snap $t@5324))))
(declare-const $t@5325 $Snap)
(declare-const $t@5326 $Ref)
(assert (= $t@5323 ($Snap.combine $t@5325 ($SortWrappers.$RefTo$Snap $t@5326))))
(declare-const $t@5327 $Snap)
(declare-const $t@5328 $Snap)
(assert (= $t@5325 ($Snap.combine $t@5327 $t@5328)))
(declare-const $t@5329 $Snap)
(declare-const $t@5330 $Ref)
(assert (= $t@5327 ($Snap.combine $t@5329 ($SortWrappers.$RefTo$Snap $t@5330))))
(declare-const $t@5331 $Snap)
(assert (= $t@5329 ($Snap.combine $t@5331 $Snap.unit)))
(declare-const $t@5332 Int)
(declare-const $t@5333 $Ref)
(assert (=
  $t@5331
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@5332)
    ($SortWrappers.$RefTo$Snap $t@5333))))
(declare-const $t@5334 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@5332)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@5334) $Snap.unit)))
(declare-const $k@5335 $Perm)
(assert ($Perm.isValidVar $k@5335))
(assert ($Perm.isReadVar $k@5335 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                      $k@4697)
                    $k@4715)
                  $k@5081)
                $k@5099)
              $k@5273)
            $k@5291)
          $k@5295)
        $k@5313)
      $k@5317))
  (= $t@5334 $t@5312)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                        $k@4697)
                      $k@4715)
                    $k@5081)
                  $k@5099)
                $k@5273)
              $k@5291)
            $k@5295)
          $k@5313)
        $k@5317)
      $k@5335)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                        $k@4697)
                      $k@4715)
                    $k@5081)
                  $k@5099)
                $k@5273)
              $k@5291)
            $k@5295)
          $k@5313)
        $k@5317)
      $k@5335)
    $Perm.No)))
(assert (> $t@5334 0))
(declare-const $k@5336 $Perm)
(assert ($Perm.isValidVar $k@5336))
(assert ($Perm.isReadVar $k@5336 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                      $k@4698)
                    $k@4716)
                  $k@5082)
                $k@5100)
              $k@5274)
            $k@5292)
          $k@5296)
        $k@5314)
      $k@5318))
  (= $t@5333 $t@5311)))
; [eval] diz.BlockingQueue__count != null
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                        $k@4698)
                      $k@4716)
                    $k@5082)
                  $k@5100)
                $k@5274)
              $k@5292)
            $k@5296)
          $k@5314)
        $k@5318)
      $k@5336)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                        $k@4698)
                      $k@4716)
                    $k@5082)
                  $k@5100)
                $k@5274)
              $k@5292)
            $k@5296)
          $k@5314)
        $k@5318)
      $k@5336)
    $Perm.No)))
(assert (not (= $t@5333 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 18
(assert (not (= $t@5330 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not (= $t@5330 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
; [then-branch 628] $t@5330 != Null
(assert (not (= $t@5330 $Ref.null)))
(declare-const $k@5337 $Perm)
(assert ($Perm.isValidVar $k@5337))
(assert ($Perm.isReadVar $k@5337 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                      $k@4699)
                    $k@5079)
                  $k@5083)
                $k@5271)
              $k@5275)
            $k@5293)
          $k@5297)
        $k@5315)
      $k@5319))
  (= $t@5326 $t@5304)))
(declare-const $k@5338 $Perm)
(assert ($Perm.isValidVar $k@5338))
(assert ($Perm.isReadVar $k@5338 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                      $k@4700)
                    $k@5080)
                  $k@5084)
                $k@5272)
              $k@5276)
            $k@5294)
          $k@5298)
        $k@5316)
      $k@5320))
  (= $t@5324 $t@5302)))
; [exec]
; p := __flatten_79
(pop) ; 18
(push) ; 18
; [else-branch 628] $t@5330 == Null
(assert (= $t@5330 $Ref.null))
(declare-const $k@5339 $Perm)
(assert ($Perm.isValidVar $k@5339))
(assert ($Perm.isReadVar $k@5339 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                      $k@4699)
                    $k@5079)
                  $k@5083)
                $k@5271)
              $k@5275)
            $k@5293)
          $k@5297)
        $k@5315)
      $k@5319))
  (= $t@5326 $t@5304)))
(declare-const $k@5340 $Perm)
(assert ($Perm.isValidVar $k@5340))
(assert ($Perm.isReadVar $k@5340 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                      $k@4700)
                    $k@5080)
                  $k@5084)
                $k@5272)
              $k@5276)
            $k@5294)
          $k@5298)
        $k@5316)
      $k@5320))
  (= $t@5324 $t@5302)))
; [exec]
; p := __flatten_79
(pop) ; 18
(pop) ; 17
; [dead else-branch 627] $t@5308 == Null
(pop) ; 16
(push) ; 16
; [else-branch 626] $t@5308 == Null
(assert (= $t@5308 $Ref.null))
(declare-const $k@5341 $Perm)
(assert ($Perm.isValidVar $k@5341))
(assert ($Perm.isReadVar $k@5341 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                  $k@4699)
                $k@5079)
              $k@5083)
            $k@5271)
          $k@5275)
        $k@5293)
      $k@5297))
  (= $t@5304 $t@5282)))
(declare-const $k@5342 $Perm)
(assert ($Perm.isValidVar $k@5342))
(assert ($Perm.isReadVar $k@5342 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                  $k@4700)
                $k@5080)
              $k@5084)
            $k@5272)
          $k@5276)
        $k@5294)
      $k@5298))
  (= $t@5302 $t@5280)))
; [exec]
; o := __flatten_78
; [exec]
; __flatten_79 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@5343 $Perm)
(assert ($Perm.isValidVar $k@5343))
(assert ($Perm.isReadVar $k@5343 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@5343 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@5343
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                  $k@4697)
                $k@4715)
              $k@5081)
            $k@5099)
          $k@5273)
        $k@5291)
      $k@5295)
    $k@5313)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@5344 $Perm)
(assert ($Perm.isValidVar $k@5344))
(assert ($Perm.isReadVar $k@5344 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@5344 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@5344
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                  $k@4698)
                $k@4716)
              $k@5082)
            $k@5100)
          $k@5274)
        $k@5292)
      $k@5296)
    $k@5314)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 17
(assert (not (not (= $t@5308 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 17
; [dead then-branch 629] $t@5308 != Null
(push) ; 17
; [else-branch 629] $t@5308 == Null
(declare-const $k@5345 $Perm)
(assert ($Perm.isValidVar $k@5345))
(assert ($Perm.isReadVar $k@5345 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@5345 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                    $k@4699)
                  $k@5079)
                $k@5083)
              $k@5271)
            $k@5275)
          $k@5293)
        $k@5297)
      $k@5341)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                    $k@4699)
                  $k@5079)
                $k@5083)
              $k@5271)
            $k@5275)
          $k@5293)
        $k@5297)
      $k@5341)
    $Perm.No)))
(assert (<
  $k@5345
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                  $k@4699)
                $k@5079)
              $k@5083)
            $k@5271)
          $k@5275)
        $k@5293)
      $k@5297)
    $k@5341)))
(declare-const $k@5346 $Perm)
(assert ($Perm.isValidVar $k@5346))
(assert ($Perm.isReadVar $k@5346 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@5346 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                    $k@4700)
                  $k@5080)
                $k@5084)
              $k@5272)
            $k@5276)
          $k@5294)
        $k@5298)
      $k@5342)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                    $k@4700)
                  $k@5080)
                $k@5084)
              $k@5272)
            $k@5276)
          $k@5294)
        $k@5298)
      $k@5342)
    $Perm.No)))
(assert (<
  $k@5346
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                  $k@4700)
                $k@5080)
              $k@5084)
            $k@5272)
          $k@5276)
        $k@5294)
      $k@5298)
    $k@5342)))
(declare-const sys__result@5347 $Ref)
(declare-const $t@5348 $Snap)
(declare-const $t@5349 $Snap)
(declare-const $t@5350 $Ref)
(assert (= $t@5348 ($Snap.combine $t@5349 ($SortWrappers.$RefTo$Snap $t@5350))))
(declare-const $t@5351 $Snap)
(declare-const $t@5352 $Ref)
(assert (= $t@5349 ($Snap.combine $t@5351 ($SortWrappers.$RefTo$Snap $t@5352))))
(declare-const $t@5353 $Snap)
(declare-const $t@5354 $Snap)
(assert (= $t@5351 ($Snap.combine $t@5353 $t@5354)))
(declare-const $t@5355 $Snap)
(declare-const $t@5356 $Ref)
(assert (= $t@5353 ($Snap.combine $t@5355 ($SortWrappers.$RefTo$Snap $t@5356))))
(declare-const $t@5357 $Snap)
(assert (= $t@5355 ($Snap.combine $t@5357 $Snap.unit)))
(declare-const $t@5358 Int)
(declare-const $t@5359 $Ref)
(assert (=
  $t@5357
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@5358)
    ($SortWrappers.$RefTo$Snap $t@5359))))
(declare-const $t@5360 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@5358)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@5360) $Snap.unit)))
(declare-const $k@5361 $Perm)
(assert ($Perm.isValidVar $k@5361))
(assert ($Perm.isReadVar $k@5361 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                      $k@4697)
                    $k@4715)
                  $k@5081)
                $k@5099)
              $k@5273)
            $k@5291)
          $k@5295)
        $k@5313)
      $k@5343))
  (= $t@5360 $t@5312)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                        $k@4697)
                      $k@4715)
                    $k@5081)
                  $k@5099)
                $k@5273)
              $k@5291)
            $k@5295)
          $k@5313)
        $k@5343)
      $k@5361)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                        $k@4697)
                      $k@4715)
                    $k@5081)
                  $k@5099)
                $k@5273)
              $k@5291)
            $k@5295)
          $k@5313)
        $k@5343)
      $k@5361)
    $Perm.No)))
(assert (> $t@5360 0))
(declare-const $k@5362 $Perm)
(assert ($Perm.isValidVar $k@5362))
(assert ($Perm.isReadVar $k@5362 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                      $k@4698)
                    $k@4716)
                  $k@5082)
                $k@5100)
              $k@5274)
            $k@5292)
          $k@5296)
        $k@5314)
      $k@5344))
  (= $t@5359 $t@5311)))
; [eval] diz.BlockingQueue__count != null
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                        $k@4698)
                      $k@4716)
                    $k@5082)
                  $k@5100)
                $k@5274)
              $k@5292)
            $k@5296)
          $k@5314)
        $k@5344)
      $k@5362)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                        $k@4698)
                      $k@4716)
                    $k@5082)
                  $k@5100)
                $k@5274)
              $k@5292)
            $k@5296)
          $k@5314)
        $k@5344)
      $k@5362)
    $Perm.No)))
(assert (not (= $t@5359 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 18
(assert (not (= $t@5356 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not (= $t@5356 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
; [then-branch 630] $t@5356 != Null
(assert (not (= $t@5356 $Ref.null)))
(declare-const $k@5363 $Perm)
(assert ($Perm.isValidVar $k@5363))
(assert ($Perm.isReadVar $k@5363 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                      $k@4699)
                    $k@5079)
                  $k@5083)
                $k@5271)
              $k@5275)
            $k@5293)
          $k@5297)
        $k@5341)
      $k@5345))
  (= $t@5352 $t@5304)))
(declare-const $k@5364 $Perm)
(assert ($Perm.isValidVar $k@5364))
(assert ($Perm.isReadVar $k@5364 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                      $k@4700)
                    $k@5080)
                  $k@5084)
                $k@5272)
              $k@5276)
            $k@5294)
          $k@5298)
        $k@5342)
      $k@5346))
  (= $t@5350 $t@5302)))
; [exec]
; p := __flatten_79
(pop) ; 18
(push) ; 18
; [else-branch 630] $t@5356 == Null
(assert (= $t@5356 $Ref.null))
(declare-const $k@5365 $Perm)
(assert ($Perm.isValidVar $k@5365))
(assert ($Perm.isReadVar $k@5365 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                      $k@4699)
                    $k@5079)
                  $k@5083)
                $k@5271)
              $k@5275)
            $k@5293)
          $k@5297)
        $k@5341)
      $k@5345))
  (= $t@5352 $t@5304)))
(declare-const $k@5366 $Perm)
(assert ($Perm.isValidVar $k@5366))
(assert ($Perm.isReadVar $k@5366 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                      $k@4700)
                    $k@5080)
                  $k@5084)
                $k@5272)
              $k@5276)
            $k@5294)
          $k@5298)
        $k@5342)
      $k@5346))
  (= $t@5350 $t@5302)))
; [exec]
; p := __flatten_79
(pop) ; 18
(pop) ; 17
(pop) ; 16
(pop) ; 15
; [dead else-branch 625] $t@5286 == Null
(pop) ; 14
(push) ; 14
; [else-branch 624] $t@5286 == Null
(assert (= $t@5286 $Ref.null))
(declare-const $k@5367 $Perm)
(assert ($Perm.isValidVar $k@5367))
(assert ($Perm.isReadVar $k@5367 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695) $k@4699)
            $k@5079)
          $k@5083)
        $k@5271)
      $k@5275))
  (= $t@5282 $t@5090)))
(declare-const $k@5368 $Perm)
(assert ($Perm.isValidVar $k@5368))
(assert ($Perm.isReadVar $k@5368 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696) $k@4700)
            $k@5080)
          $k@5084)
        $k@5272)
      $k@5276))
  (= $t@5280 $t@5088)))
; [exec]
; n := __flatten_77
; [exec]
; __flatten_78 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@5369 $Perm)
(assert ($Perm.isValidVar $k@5369))
(assert ($Perm.isReadVar $k@5369 $Perm.Write))
(push) ; 15
(assert (not (or (= $k@5369 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 15
(assert (<
  $k@5369
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693) $k@4697)
            $k@4715)
          $k@5081)
        $k@5099)
      $k@5273)
    $k@5291)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@5370 $Perm)
(assert ($Perm.isValidVar $k@5370))
(assert ($Perm.isReadVar $k@5370 $Perm.Write))
(push) ; 15
(assert (not (or (= $k@5370 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 15
(assert (<
  $k@5370
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694) $k@4698)
            $k@4716)
          $k@5082)
        $k@5100)
      $k@5274)
    $k@5292)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 15
(assert (not (not (= $t@5286 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 15
; [dead then-branch 631] $t@5286 != Null
(push) ; 15
; [else-branch 631] $t@5286 == Null
(declare-const $k@5371 $Perm)
(assert ($Perm.isValidVar $k@5371))
(assert ($Perm.isReadVar $k@5371 $Perm.Write))
(push) ; 16
(assert (not (or (= $k@5371 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695) $k@4699)
              $k@5079)
            $k@5083)
          $k@5271)
        $k@5275)
      $k@5367)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695) $k@4699)
              $k@5079)
            $k@5083)
          $k@5271)
        $k@5275)
      $k@5367)
    $Perm.No)))
(assert (<
  $k@5371
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695) $k@4699)
            $k@5079)
          $k@5083)
        $k@5271)
      $k@5275)
    $k@5367)))
(declare-const $k@5372 $Perm)
(assert ($Perm.isValidVar $k@5372))
(assert ($Perm.isReadVar $k@5372 $Perm.Write))
(push) ; 16
(assert (not (or (= $k@5372 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696) $k@4700)
              $k@5080)
            $k@5084)
          $k@5272)
        $k@5276)
      $k@5368)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696) $k@4700)
              $k@5080)
            $k@5084)
          $k@5272)
        $k@5276)
      $k@5368)
    $Perm.No)))
(assert (<
  $k@5372
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696) $k@4700)
            $k@5080)
          $k@5084)
        $k@5272)
      $k@5276)
    $k@5368)))
(declare-const sys__result@5373 $Ref)
(declare-const $t@5374 $Snap)
(declare-const $t@5375 $Snap)
(declare-const $t@5376 $Ref)
(assert (= $t@5374 ($Snap.combine $t@5375 ($SortWrappers.$RefTo$Snap $t@5376))))
(declare-const $t@5377 $Snap)
(declare-const $t@5378 $Ref)
(assert (= $t@5375 ($Snap.combine $t@5377 ($SortWrappers.$RefTo$Snap $t@5378))))
(declare-const $t@5379 $Snap)
(declare-const $t@5380 $Snap)
(assert (= $t@5377 ($Snap.combine $t@5379 $t@5380)))
(declare-const $t@5381 $Snap)
(declare-const $t@5382 $Ref)
(assert (= $t@5379 ($Snap.combine $t@5381 ($SortWrappers.$RefTo$Snap $t@5382))))
(declare-const $t@5383 $Snap)
(assert (= $t@5381 ($Snap.combine $t@5383 $Snap.unit)))
(declare-const $t@5384 Int)
(declare-const $t@5385 $Ref)
(assert (=
  $t@5383
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@5384)
    ($SortWrappers.$RefTo$Snap $t@5385))))
(declare-const $t@5386 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@5384)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@5386) $Snap.unit)))
(declare-const $k@5387 $Perm)
(assert ($Perm.isValidVar $k@5387))
(assert ($Perm.isReadVar $k@5387 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                  $k@4697)
                $k@4715)
              $k@5081)
            $k@5099)
          $k@5273)
        $k@5291)
      $k@5369))
  (= $t@5386 $t@5290)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                    $k@4697)
                  $k@4715)
                $k@5081)
              $k@5099)
            $k@5273)
          $k@5291)
        $k@5369)
      $k@5387)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                    $k@4697)
                  $k@4715)
                $k@5081)
              $k@5099)
            $k@5273)
          $k@5291)
        $k@5369)
      $k@5387)
    $Perm.No)))
(assert (> $t@5386 0))
(declare-const $k@5388 $Perm)
(assert ($Perm.isValidVar $k@5388))
(assert ($Perm.isReadVar $k@5388 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                  $k@4698)
                $k@4716)
              $k@5082)
            $k@5100)
          $k@5274)
        $k@5292)
      $k@5370))
  (= $t@5385 $t@5289)))
; [eval] diz.BlockingQueue__count != null
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                    $k@4698)
                  $k@4716)
                $k@5082)
              $k@5100)
            $k@5274)
          $k@5292)
        $k@5370)
      $k@5388)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                    $k@4698)
                  $k@4716)
                $k@5082)
              $k@5100)
            $k@5274)
          $k@5292)
        $k@5370)
      $k@5388)
    $Perm.No)))
(assert (not (= $t@5385 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 16
(assert (not (= $t@5382 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not (= $t@5382 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 16
(push) ; 16
; [then-branch 632] $t@5382 != Null
(assert (not (= $t@5382 $Ref.null)))
(declare-const $k@5389 $Perm)
(assert ($Perm.isValidVar $k@5389))
(assert ($Perm.isReadVar $k@5389 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                  $k@4699)
                $k@5079)
              $k@5083)
            $k@5271)
          $k@5275)
        $k@5367)
      $k@5371))
  (= $t@5378 $t@5282)))
(declare-const $k@5390 $Perm)
(assert ($Perm.isValidVar $k@5390))
(assert ($Perm.isReadVar $k@5390 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                  $k@4700)
                $k@5080)
              $k@5084)
            $k@5272)
          $k@5276)
        $k@5368)
      $k@5372))
  (= $t@5376 $t@5280)))
; [exec]
; o := __flatten_78
; [exec]
; __flatten_79 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@5391 $Perm)
(assert ($Perm.isValidVar $k@5391))
(assert ($Perm.isReadVar $k@5391 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@5391 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@5391
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                  $k@4697)
                $k@4715)
              $k@5081)
            $k@5099)
          $k@5273)
        $k@5291)
      $k@5369)
    $k@5387)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@5392 $Perm)
(assert ($Perm.isValidVar $k@5392))
(assert ($Perm.isReadVar $k@5392 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@5392 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@5392
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                  $k@4698)
                $k@4716)
              $k@5082)
            $k@5100)
          $k@5274)
        $k@5292)
      $k@5370)
    $k@5388)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 17
(assert (not (= $t@5382 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 17
(push) ; 17
; [then-branch 633] $t@5382 != Null
(declare-const $k@5393 $Perm)
(assert ($Perm.isValidVar $k@5393))
(assert ($Perm.isReadVar $k@5393 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@5393 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                    $k@4699)
                  $k@5079)
                $k@5083)
              $k@5271)
            $k@5275)
          $k@5367)
        $k@5371)
      $k@5389)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                    $k@4699)
                  $k@5079)
                $k@5083)
              $k@5271)
            $k@5275)
          $k@5367)
        $k@5371)
      $k@5389)
    $Perm.No)))
(assert (<
  $k@5393
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                  $k@4699)
                $k@5079)
              $k@5083)
            $k@5271)
          $k@5275)
        $k@5367)
      $k@5371)
    $k@5389)))
(declare-const $k@5394 $Perm)
(assert ($Perm.isValidVar $k@5394))
(assert ($Perm.isReadVar $k@5394 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@5394 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                    $k@4700)
                  $k@5080)
                $k@5084)
              $k@5272)
            $k@5276)
          $k@5368)
        $k@5372)
      $k@5390)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                    $k@4700)
                  $k@5080)
                $k@5084)
              $k@5272)
            $k@5276)
          $k@5368)
        $k@5372)
      $k@5390)
    $Perm.No)))
(assert (<
  $k@5394
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                  $k@4700)
                $k@5080)
              $k@5084)
            $k@5272)
          $k@5276)
        $k@5368)
      $k@5372)
    $k@5390)))
(declare-const sys__result@5395 $Ref)
(declare-const $t@5396 $Snap)
(declare-const $t@5397 $Snap)
(declare-const $t@5398 $Ref)
(assert (= $t@5396 ($Snap.combine $t@5397 ($SortWrappers.$RefTo$Snap $t@5398))))
(declare-const $t@5399 $Snap)
(declare-const $t@5400 $Ref)
(assert (= $t@5397 ($Snap.combine $t@5399 ($SortWrappers.$RefTo$Snap $t@5400))))
(declare-const $t@5401 $Snap)
(declare-const $t@5402 $Snap)
(assert (= $t@5399 ($Snap.combine $t@5401 $t@5402)))
(declare-const $t@5403 $Snap)
(declare-const $t@5404 $Ref)
(assert (= $t@5401 ($Snap.combine $t@5403 ($SortWrappers.$RefTo$Snap $t@5404))))
(declare-const $t@5405 $Snap)
(assert (= $t@5403 ($Snap.combine $t@5405 $Snap.unit)))
(declare-const $t@5406 Int)
(declare-const $t@5407 $Ref)
(assert (=
  $t@5405
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@5406)
    ($SortWrappers.$RefTo$Snap $t@5407))))
(declare-const $t@5408 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@5406)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@5408) $Snap.unit)))
(declare-const $k@5409 $Perm)
(assert ($Perm.isValidVar $k@5409))
(assert ($Perm.isReadVar $k@5409 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                      $k@4697)
                    $k@4715)
                  $k@5081)
                $k@5099)
              $k@5273)
            $k@5291)
          $k@5369)
        $k@5387)
      $k@5391))
  (= $t@5408 $t@5386)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                        $k@4697)
                      $k@4715)
                    $k@5081)
                  $k@5099)
                $k@5273)
              $k@5291)
            $k@5369)
          $k@5387)
        $k@5391)
      $k@5409)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                        $k@4697)
                      $k@4715)
                    $k@5081)
                  $k@5099)
                $k@5273)
              $k@5291)
            $k@5369)
          $k@5387)
        $k@5391)
      $k@5409)
    $Perm.No)))
(assert (> $t@5408 0))
(declare-const $k@5410 $Perm)
(assert ($Perm.isValidVar $k@5410))
(assert ($Perm.isReadVar $k@5410 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                      $k@4698)
                    $k@4716)
                  $k@5082)
                $k@5100)
              $k@5274)
            $k@5292)
          $k@5370)
        $k@5388)
      $k@5392))
  (= $t@5407 $t@5385)))
; [eval] diz.BlockingQueue__count != null
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                        $k@4698)
                      $k@4716)
                    $k@5082)
                  $k@5100)
                $k@5274)
              $k@5292)
            $k@5370)
          $k@5388)
        $k@5392)
      $k@5410)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                        $k@4698)
                      $k@4716)
                    $k@5082)
                  $k@5100)
                $k@5274)
              $k@5292)
            $k@5370)
          $k@5388)
        $k@5392)
      $k@5410)
    $Perm.No)))
(assert (not (= $t@5407 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 18
(assert (not (= $t@5404 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not (= $t@5404 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
; [then-branch 634] $t@5404 != Null
(assert (not (= $t@5404 $Ref.null)))
(declare-const $k@5411 $Perm)
(assert ($Perm.isValidVar $k@5411))
(assert ($Perm.isReadVar $k@5411 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                      $k@4699)
                    $k@5079)
                  $k@5083)
                $k@5271)
              $k@5275)
            $k@5367)
          $k@5371)
        $k@5389)
      $k@5393))
  (= $t@5400 $t@5378)))
(declare-const $k@5412 $Perm)
(assert ($Perm.isValidVar $k@5412))
(assert ($Perm.isReadVar $k@5412 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                      $k@4700)
                    $k@5080)
                  $k@5084)
                $k@5272)
              $k@5276)
            $k@5368)
          $k@5372)
        $k@5390)
      $k@5394))
  (= $t@5398 $t@5376)))
; [exec]
; p := __flatten_79
(pop) ; 18
(push) ; 18
; [else-branch 634] $t@5404 == Null
(assert (= $t@5404 $Ref.null))
(declare-const $k@5413 $Perm)
(assert ($Perm.isValidVar $k@5413))
(assert ($Perm.isReadVar $k@5413 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                      $k@4699)
                    $k@5079)
                  $k@5083)
                $k@5271)
              $k@5275)
            $k@5367)
          $k@5371)
        $k@5389)
      $k@5393))
  (= $t@5400 $t@5378)))
(declare-const $k@5414 $Perm)
(assert ($Perm.isValidVar $k@5414))
(assert ($Perm.isReadVar $k@5414 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                      $k@4700)
                    $k@5080)
                  $k@5084)
                $k@5272)
              $k@5276)
            $k@5368)
          $k@5372)
        $k@5390)
      $k@5394))
  (= $t@5398 $t@5376)))
; [exec]
; p := __flatten_79
(pop) ; 18
(pop) ; 17
; [dead else-branch 633] $t@5382 == Null
(pop) ; 16
(push) ; 16
; [else-branch 632] $t@5382 == Null
(assert (= $t@5382 $Ref.null))
(declare-const $k@5415 $Perm)
(assert ($Perm.isValidVar $k@5415))
(assert ($Perm.isReadVar $k@5415 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                  $k@4699)
                $k@5079)
              $k@5083)
            $k@5271)
          $k@5275)
        $k@5367)
      $k@5371))
  (= $t@5378 $t@5282)))
(declare-const $k@5416 $Perm)
(assert ($Perm.isValidVar $k@5416))
(assert ($Perm.isReadVar $k@5416 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                  $k@4700)
                $k@5080)
              $k@5084)
            $k@5272)
          $k@5276)
        $k@5368)
      $k@5372))
  (= $t@5376 $t@5280)))
; [exec]
; o := __flatten_78
; [exec]
; __flatten_79 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@5417 $Perm)
(assert ($Perm.isValidVar $k@5417))
(assert ($Perm.isReadVar $k@5417 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@5417 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@5417
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                  $k@4697)
                $k@4715)
              $k@5081)
            $k@5099)
          $k@5273)
        $k@5291)
      $k@5369)
    $k@5387)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@5418 $Perm)
(assert ($Perm.isValidVar $k@5418))
(assert ($Perm.isReadVar $k@5418 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@5418 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@5418
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                  $k@4698)
                $k@4716)
              $k@5082)
            $k@5100)
          $k@5274)
        $k@5292)
      $k@5370)
    $k@5388)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 17
(assert (not (not (= $t@5382 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 17
; [dead then-branch 635] $t@5382 != Null
(push) ; 17
; [else-branch 635] $t@5382 == Null
(declare-const $k@5419 $Perm)
(assert ($Perm.isValidVar $k@5419))
(assert ($Perm.isReadVar $k@5419 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@5419 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                    $k@4699)
                  $k@5079)
                $k@5083)
              $k@5271)
            $k@5275)
          $k@5367)
        $k@5371)
      $k@5415)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                    $k@4699)
                  $k@5079)
                $k@5083)
              $k@5271)
            $k@5275)
          $k@5367)
        $k@5371)
      $k@5415)
    $Perm.No)))
(assert (<
  $k@5419
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                  $k@4699)
                $k@5079)
              $k@5083)
            $k@5271)
          $k@5275)
        $k@5367)
      $k@5371)
    $k@5415)))
(declare-const $k@5420 $Perm)
(assert ($Perm.isValidVar $k@5420))
(assert ($Perm.isReadVar $k@5420 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@5420 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                    $k@4700)
                  $k@5080)
                $k@5084)
              $k@5272)
            $k@5276)
          $k@5368)
        $k@5372)
      $k@5416)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                    $k@4700)
                  $k@5080)
                $k@5084)
              $k@5272)
            $k@5276)
          $k@5368)
        $k@5372)
      $k@5416)
    $Perm.No)))
(assert (<
  $k@5420
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                  $k@4700)
                $k@5080)
              $k@5084)
            $k@5272)
          $k@5276)
        $k@5368)
      $k@5372)
    $k@5416)))
(declare-const sys__result@5421 $Ref)
(declare-const $t@5422 $Snap)
(declare-const $t@5423 $Snap)
(declare-const $t@5424 $Ref)
(assert (= $t@5422 ($Snap.combine $t@5423 ($SortWrappers.$RefTo$Snap $t@5424))))
(declare-const $t@5425 $Snap)
(declare-const $t@5426 $Ref)
(assert (= $t@5423 ($Snap.combine $t@5425 ($SortWrappers.$RefTo$Snap $t@5426))))
(declare-const $t@5427 $Snap)
(declare-const $t@5428 $Snap)
(assert (= $t@5425 ($Snap.combine $t@5427 $t@5428)))
(declare-const $t@5429 $Snap)
(declare-const $t@5430 $Ref)
(assert (= $t@5427 ($Snap.combine $t@5429 ($SortWrappers.$RefTo$Snap $t@5430))))
(declare-const $t@5431 $Snap)
(assert (= $t@5429 ($Snap.combine $t@5431 $Snap.unit)))
(declare-const $t@5432 Int)
(declare-const $t@5433 $Ref)
(assert (=
  $t@5431
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@5432)
    ($SortWrappers.$RefTo$Snap $t@5433))))
(declare-const $t@5434 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@5432)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@5434) $Snap.unit)))
(declare-const $k@5435 $Perm)
(assert ($Perm.isValidVar $k@5435))
(assert ($Perm.isReadVar $k@5435 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                      $k@4697)
                    $k@4715)
                  $k@5081)
                $k@5099)
              $k@5273)
            $k@5291)
          $k@5369)
        $k@5387)
      $k@5417))
  (= $t@5434 $t@5386)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                        $k@4697)
                      $k@4715)
                    $k@5081)
                  $k@5099)
                $k@5273)
              $k@5291)
            $k@5369)
          $k@5387)
        $k@5417)
      $k@5435)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                        $k@4697)
                      $k@4715)
                    $k@5081)
                  $k@5099)
                $k@5273)
              $k@5291)
            $k@5369)
          $k@5387)
        $k@5417)
      $k@5435)
    $Perm.No)))
(assert (> $t@5434 0))
(declare-const $k@5436 $Perm)
(assert ($Perm.isValidVar $k@5436))
(assert ($Perm.isReadVar $k@5436 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                      $k@4698)
                    $k@4716)
                  $k@5082)
                $k@5100)
              $k@5274)
            $k@5292)
          $k@5370)
        $k@5388)
      $k@5418))
  (= $t@5433 $t@5385)))
; [eval] diz.BlockingQueue__count != null
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                        $k@4698)
                      $k@4716)
                    $k@5082)
                  $k@5100)
                $k@5274)
              $k@5292)
            $k@5370)
          $k@5388)
        $k@5418)
      $k@5436)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                        $k@4698)
                      $k@4716)
                    $k@5082)
                  $k@5100)
                $k@5274)
              $k@5292)
            $k@5370)
          $k@5388)
        $k@5418)
      $k@5436)
    $Perm.No)))
(assert (not (= $t@5433 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 18
(assert (not (= $t@5430 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not (= $t@5430 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
; [then-branch 636] $t@5430 != Null
(assert (not (= $t@5430 $Ref.null)))
(declare-const $k@5437 $Perm)
(assert ($Perm.isValidVar $k@5437))
(assert ($Perm.isReadVar $k@5437 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                      $k@4699)
                    $k@5079)
                  $k@5083)
                $k@5271)
              $k@5275)
            $k@5367)
          $k@5371)
        $k@5415)
      $k@5419))
  (= $t@5426 $t@5378)))
(declare-const $k@5438 $Perm)
(assert ($Perm.isValidVar $k@5438))
(assert ($Perm.isReadVar $k@5438 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                      $k@4700)
                    $k@5080)
                  $k@5084)
                $k@5272)
              $k@5276)
            $k@5368)
          $k@5372)
        $k@5416)
      $k@5420))
  (= $t@5424 $t@5376)))
; [exec]
; p := __flatten_79
(pop) ; 18
(push) ; 18
; [else-branch 636] $t@5430 == Null
(assert (= $t@5430 $Ref.null))
(declare-const $k@5439 $Perm)
(assert ($Perm.isValidVar $k@5439))
(assert ($Perm.isReadVar $k@5439 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@4695)
                      $k@4699)
                    $k@5079)
                  $k@5083)
                $k@5271)
              $k@5275)
            $k@5367)
          $k@5371)
        $k@5415)
      $k@5419))
  (= $t@5426 $t@5378)))
(declare-const $k@5440 $Perm)
(assert ($Perm.isValidVar $k@5440))
(assert ($Perm.isReadVar $k@5440 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@4696)
                      $k@4700)
                    $k@5080)
                  $k@5084)
                $k@5272)
              $k@5276)
            $k@5368)
          $k@5372)
        $k@5416)
      $k@5420))
  (= $t@5424 $t@5376)))
; [exec]
; p := __flatten_79
(pop) ; 18
(pop) ; 17
(pop) ; 16
(pop) ; 15
(pop) ; 14
(pop) ; 13
(pop) ; 12
(pop) ; 11
(pop) ; 10
(pop) ; 9
; [dead else-branch 575] $t@4688 == Null
(pop) ; 8
(push) ; 8
; [else-branch 574] $t@4688 == Null
(assert (= $t@4688 $Ref.null))
(declare-const $k@5441 $Perm)
(assert ($Perm.isValidVar $k@5441))
(assert ($Perm.isReadVar $k@5441 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677))
  (= $t@4684 $t@3148)))
(declare-const $k@5442 $Perm)
(assert ($Perm.isValidVar $k@5442))
(assert ($Perm.isReadVar $k@5442 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678))
  (= $t@4682 $t@3146)))
; [exec]
; b := __flatten_74
; [exec]
; __flatten_75 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@5443 $Perm)
(assert ($Perm.isValidVar $k@5443))
(assert ($Perm.isReadVar $k@5443 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@5443 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@5443 (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@5444 $Perm)
(assert ($Perm.isValidVar $k@5444))
(assert ($Perm.isReadVar $k@5444 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@5444 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@5444 (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 9
(assert (not (not (= $t@4688 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
; [dead then-branch 637] $t@4688 != Null
(push) ; 9
; [else-branch 637] $t@4688 == Null
(declare-const $k@5445 $Perm)
(assert ($Perm.isValidVar $k@5445))
(assert ($Perm.isReadVar $k@5445 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@5445 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not (= (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441) $Perm.No)))
(assert (< $k@5445 (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)))
(declare-const $k@5446 $Perm)
(assert ($Perm.isValidVar $k@5446))
(assert ($Perm.isReadVar $k@5446 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@5446 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not (= (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442) $Perm.No)))
(assert (< $k@5446 (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)))
(declare-const sys__result@5447 $Ref)
(declare-const $t@5448 $Snap)
(declare-const $t@5449 $Snap)
(declare-const $t@5450 $Ref)
(assert (= $t@5448 ($Snap.combine $t@5449 ($SortWrappers.$RefTo$Snap $t@5450))))
(declare-const $t@5451 $Snap)
(declare-const $t@5452 $Ref)
(assert (= $t@5449 ($Snap.combine $t@5451 ($SortWrappers.$RefTo$Snap $t@5452))))
(declare-const $t@5453 $Snap)
(declare-const $t@5454 $Snap)
(assert (= $t@5451 ($Snap.combine $t@5453 $t@5454)))
(declare-const $t@5455 $Snap)
(declare-const $t@5456 $Ref)
(assert (= $t@5453 ($Snap.combine $t@5455 ($SortWrappers.$RefTo$Snap $t@5456))))
(declare-const $t@5457 $Snap)
(assert (= $t@5455 ($Snap.combine $t@5457 $Snap.unit)))
(declare-const $t@5458 Int)
(declare-const $t@5459 $Ref)
(assert (=
  $t@5457
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@5458)
    ($SortWrappers.$RefTo$Snap $t@5459))))
(declare-const $t@5460 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@5458)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@5460) $Snap.unit)))
(declare-const $k@5461 $Perm)
(assert ($Perm.isValidVar $k@5461))
(assert ($Perm.isReadVar $k@5461 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693) $k@5443))
  (= $t@5460 $t@4692)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 10
(assert (not (not
  (=
    (+
      (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693) $k@5443)
      $k@5461)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not
  (=
    (+
      (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693) $k@5443)
      $k@5461)
    $Perm.No)))
(assert (> $t@5460 0))
(declare-const $k@5462 $Perm)
(assert ($Perm.isValidVar $k@5462))
(assert ($Perm.isReadVar $k@5462 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694) $k@5444))
  (= $t@5459 $t@4691)))
; [eval] diz.BlockingQueue__count != null
(push) ; 10
(assert (not (not
  (=
    (+
      (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694) $k@5444)
      $k@5462)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not
  (=
    (+
      (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694) $k@5444)
      $k@5462)
    $Perm.No)))
(assert (not (= $t@5459 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 10
(assert (not (= $t@5456 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= $t@5456 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 10
(push) ; 10
; [then-branch 638] $t@5456 != Null
(assert (not (= $t@5456 $Ref.null)))
(declare-const $k@5463 $Perm)
(assert ($Perm.isValidVar $k@5463))
(assert ($Perm.isReadVar $k@5463 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441) $k@5445))
  (= $t@5452 $t@4684)))
(declare-const $k@5464 $Perm)
(assert ($Perm.isValidVar $k@5464))
(assert ($Perm.isReadVar $k@5464 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442) $k@5446))
  (= $t@5450 $t@4682)))
; [exec]
; m := __flatten_75
; [exec]
; __flatten_76 := BlockingQueue__offer(queue, 7)
; [eval] diz != null
(declare-const $k@5465 $Perm)
(assert ($Perm.isValidVar $k@5465))
(assert ($Perm.isReadVar $k@5465 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@5465 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (<
  $k@5465
  (+ (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693) $k@5443) $k@5461)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@5466 $Perm)
(assert ($Perm.isValidVar $k@5466))
(assert ($Perm.isReadVar $k@5466 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@5466 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (<
  $k@5466
  (+ (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694) $k@5444) $k@5462)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 11
(assert (not (= $t@5456 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 11
(push) ; 11
; [then-branch 639] $t@5456 != Null
(declare-const $k@5467 $Perm)
(assert ($Perm.isValidVar $k@5467))
(assert ($Perm.isReadVar $k@5467 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@5467 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(push) ; 12
(assert (not (not
  (=
    (+
      (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441) $k@5445)
      $k@5463)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441) $k@5445)
      $k@5463)
    $Perm.No)))
(assert (<
  $k@5467
  (+ (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441) $k@5445) $k@5463)))
(declare-const $k@5468 $Perm)
(assert ($Perm.isValidVar $k@5468))
(assert ($Perm.isReadVar $k@5468 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@5468 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(push) ; 12
(assert (not (not
  (=
    (+
      (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442) $k@5446)
      $k@5464)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442) $k@5446)
      $k@5464)
    $Perm.No)))
(assert (<
  $k@5468
  (+ (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442) $k@5446) $k@5464)))
(declare-const sys__result@5469 Bool)
(declare-const $t@5470 $Snap)
(declare-const $t@5471 $Snap)
(declare-const $t@5472 $Ref)
(assert (= $t@5470 ($Snap.combine $t@5471 ($SortWrappers.$RefTo$Snap $t@5472))))
(declare-const $t@5473 $Snap)
(declare-const $t@5474 $Ref)
(assert (= $t@5471 ($Snap.combine $t@5473 ($SortWrappers.$RefTo$Snap $t@5474))))
(declare-const $t@5475 $Snap)
(declare-const $t@5476 $Snap)
(assert (= $t@5473 ($Snap.combine $t@5475 $t@5476)))
(declare-const $t@5477 $Snap)
(declare-const $t@5478 $Ref)
(assert (= $t@5475 ($Snap.combine $t@5477 ($SortWrappers.$RefTo$Snap $t@5478))))
(declare-const $t@5479 $Snap)
(assert (= $t@5477 ($Snap.combine $t@5479 $Snap.unit)))
(declare-const $t@5480 Int)
(declare-const $t@5481 $Ref)
(assert (=
  $t@5479
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@5480)
    ($SortWrappers.$RefTo$Snap $t@5481))))
(declare-const $t@5482 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@5480)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@5482) $Snap.unit)))
(declare-const $k@5483 $Perm)
(assert ($Perm.isValidVar $k@5483))
(assert ($Perm.isReadVar $k@5483 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693) $k@5443)
        $k@5461)
      $k@5465))
  (= $t@5482 $t@5460)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 12
(assert (not (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693) $k@5443)
          $k@5461)
        $k@5465)
      $k@5483)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693) $k@5443)
          $k@5461)
        $k@5465)
      $k@5483)
    $Perm.No)))
(assert (> $t@5482 0))
(declare-const $k@5484 $Perm)
(assert ($Perm.isValidVar $k@5484))
(assert ($Perm.isReadVar $k@5484 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694) $k@5444)
        $k@5462)
      $k@5466))
  (= $t@5481 $t@5459)))
; [eval] diz.BlockingQueue__count != null
(push) ; 12
(assert (not (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694) $k@5444)
          $k@5462)
        $k@5466)
      $k@5484)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694) $k@5444)
          $k@5462)
        $k@5466)
      $k@5484)
    $Perm.No)))
(assert (not (= $t@5481 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 12
(assert (not (= $t@5478 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 12
(push) ; 12
(assert (not (not (= $t@5478 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 12
(push) ; 12
; [then-branch 640] $t@5478 != Null
(assert (not (= $t@5478 $Ref.null)))
(declare-const $k@5485 $Perm)
(assert ($Perm.isValidVar $k@5485))
(assert ($Perm.isReadVar $k@5485 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441) $k@5445)
        $k@5463)
      $k@5467))
  (= $t@5474 $t@5452)))
(declare-const $k@5486 $Perm)
(assert ($Perm.isValidVar $k@5486))
(assert ($Perm.isReadVar $k@5486 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442) $k@5446)
        $k@5464)
      $k@5468))
  (= $t@5472 $t@5450)))
; [exec]
; b := __flatten_76
; [exec]
; __flatten_77 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@5487 $Perm)
(assert ($Perm.isValidVar $k@5487))
(assert ($Perm.isReadVar $k@5487 $Perm.Write))
(push) ; 13
(assert (not (or (= $k@5487 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 13
(assert (<
  $k@5487
  (+
    (-
      (+
        (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693) $k@5443)
        $k@5461)
      $k@5465)
    $k@5483)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@5488 $Perm)
(assert ($Perm.isValidVar $k@5488))
(assert ($Perm.isReadVar $k@5488 $Perm.Write))
(push) ; 13
(assert (not (or (= $k@5488 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 13
(assert (<
  $k@5488
  (+
    (-
      (+
        (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694) $k@5444)
        $k@5462)
      $k@5466)
    $k@5484)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 13
(assert (not (= $t@5478 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 13
(push) ; 13
; [then-branch 641] $t@5478 != Null
(declare-const $k@5489 $Perm)
(assert ($Perm.isValidVar $k@5489))
(assert ($Perm.isReadVar $k@5489 $Perm.Write))
(push) ; 14
(assert (not (or (= $k@5489 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(push) ; 14
(assert (not (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441) $k@5445)
          $k@5463)
        $k@5467)
      $k@5485)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(assert (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441) $k@5445)
          $k@5463)
        $k@5467)
      $k@5485)
    $Perm.No)))
(assert (<
  $k@5489
  (+
    (-
      (+
        (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441) $k@5445)
        $k@5463)
      $k@5467)
    $k@5485)))
(declare-const $k@5490 $Perm)
(assert ($Perm.isValidVar $k@5490))
(assert ($Perm.isReadVar $k@5490 $Perm.Write))
(push) ; 14
(assert (not (or (= $k@5490 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(push) ; 14
(assert (not (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442) $k@5446)
          $k@5464)
        $k@5468)
      $k@5486)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(assert (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442) $k@5446)
          $k@5464)
        $k@5468)
      $k@5486)
    $Perm.No)))
(assert (<
  $k@5490
  (+
    (-
      (+
        (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442) $k@5446)
        $k@5464)
      $k@5468)
    $k@5486)))
(declare-const sys__result@5491 $Ref)
(declare-const $t@5492 $Snap)
(declare-const $t@5493 $Snap)
(declare-const $t@5494 $Ref)
(assert (= $t@5492 ($Snap.combine $t@5493 ($SortWrappers.$RefTo$Snap $t@5494))))
(declare-const $t@5495 $Snap)
(declare-const $t@5496 $Ref)
(assert (= $t@5493 ($Snap.combine $t@5495 ($SortWrappers.$RefTo$Snap $t@5496))))
(declare-const $t@5497 $Snap)
(declare-const $t@5498 $Snap)
(assert (= $t@5495 ($Snap.combine $t@5497 $t@5498)))
(declare-const $t@5499 $Snap)
(declare-const $t@5500 $Ref)
(assert (= $t@5497 ($Snap.combine $t@5499 ($SortWrappers.$RefTo$Snap $t@5500))))
(declare-const $t@5501 $Snap)
(assert (= $t@5499 ($Snap.combine $t@5501 $Snap.unit)))
(declare-const $t@5502 Int)
(declare-const $t@5503 $Ref)
(assert (=
  $t@5501
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@5502)
    ($SortWrappers.$RefTo$Snap $t@5503))))
(declare-const $t@5504 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@5502)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@5504) $Snap.unit)))
(declare-const $k@5505 $Perm)
(assert ($Perm.isValidVar $k@5505))
(assert ($Perm.isReadVar $k@5505 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693) $k@5443)
            $k@5461)
          $k@5465)
        $k@5483)
      $k@5487))
  (= $t@5504 $t@5482)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 14
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693) $k@5443)
              $k@5461)
            $k@5465)
          $k@5483)
        $k@5487)
      $k@5505)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693) $k@5443)
              $k@5461)
            $k@5465)
          $k@5483)
        $k@5487)
      $k@5505)
    $Perm.No)))
(assert (> $t@5504 0))
(declare-const $k@5506 $Perm)
(assert ($Perm.isValidVar $k@5506))
(assert ($Perm.isReadVar $k@5506 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694) $k@5444)
            $k@5462)
          $k@5466)
        $k@5484)
      $k@5488))
  (= $t@5503 $t@5481)))
; [eval] diz.BlockingQueue__count != null
(push) ; 14
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694) $k@5444)
              $k@5462)
            $k@5466)
          $k@5484)
        $k@5488)
      $k@5506)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694) $k@5444)
              $k@5462)
            $k@5466)
          $k@5484)
        $k@5488)
      $k@5506)
    $Perm.No)))
(assert (not (= $t@5503 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 14
(assert (not (= $t@5500 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 14
(push) ; 14
(assert (not (not (= $t@5500 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 14
(push) ; 14
; [then-branch 642] $t@5500 != Null
(assert (not (= $t@5500 $Ref.null)))
(declare-const $k@5507 $Perm)
(assert ($Perm.isValidVar $k@5507))
(assert ($Perm.isReadVar $k@5507 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441) $k@5445)
            $k@5463)
          $k@5467)
        $k@5485)
      $k@5489))
  (= $t@5496 $t@5474)))
(declare-const $k@5508 $Perm)
(assert ($Perm.isValidVar $k@5508))
(assert ($Perm.isReadVar $k@5508 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442) $k@5446)
            $k@5464)
          $k@5468)
        $k@5486)
      $k@5490))
  (= $t@5494 $t@5472)))
; [exec]
; n := __flatten_77
; [exec]
; __flatten_78 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@5509 $Perm)
(assert ($Perm.isValidVar $k@5509))
(assert ($Perm.isReadVar $k@5509 $Perm.Write))
(push) ; 15
(assert (not (or (= $k@5509 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 15
(assert (<
  $k@5509
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693) $k@5443)
            $k@5461)
          $k@5465)
        $k@5483)
      $k@5487)
    $k@5505)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@5510 $Perm)
(assert ($Perm.isValidVar $k@5510))
(assert ($Perm.isReadVar $k@5510 $Perm.Write))
(push) ; 15
(assert (not (or (= $k@5510 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 15
(assert (<
  $k@5510
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694) $k@5444)
            $k@5462)
          $k@5466)
        $k@5484)
      $k@5488)
    $k@5506)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 15
(assert (not (= $t@5500 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 15
(push) ; 15
; [then-branch 643] $t@5500 != Null
(declare-const $k@5511 $Perm)
(assert ($Perm.isValidVar $k@5511))
(assert ($Perm.isReadVar $k@5511 $Perm.Write))
(push) ; 16
(assert (not (or (= $k@5511 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441) $k@5445)
              $k@5463)
            $k@5467)
          $k@5485)
        $k@5489)
      $k@5507)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441) $k@5445)
              $k@5463)
            $k@5467)
          $k@5485)
        $k@5489)
      $k@5507)
    $Perm.No)))
(assert (<
  $k@5511
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441) $k@5445)
            $k@5463)
          $k@5467)
        $k@5485)
      $k@5489)
    $k@5507)))
(declare-const $k@5512 $Perm)
(assert ($Perm.isValidVar $k@5512))
(assert ($Perm.isReadVar $k@5512 $Perm.Write))
(push) ; 16
(assert (not (or (= $k@5512 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442) $k@5446)
              $k@5464)
            $k@5468)
          $k@5486)
        $k@5490)
      $k@5508)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442) $k@5446)
              $k@5464)
            $k@5468)
          $k@5486)
        $k@5490)
      $k@5508)
    $Perm.No)))
(assert (<
  $k@5512
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442) $k@5446)
            $k@5464)
          $k@5468)
        $k@5486)
      $k@5490)
    $k@5508)))
(declare-const sys__result@5513 $Ref)
(declare-const $t@5514 $Snap)
(declare-const $t@5515 $Snap)
(declare-const $t@5516 $Ref)
(assert (= $t@5514 ($Snap.combine $t@5515 ($SortWrappers.$RefTo$Snap $t@5516))))
(declare-const $t@5517 $Snap)
(declare-const $t@5518 $Ref)
(assert (= $t@5515 ($Snap.combine $t@5517 ($SortWrappers.$RefTo$Snap $t@5518))))
(declare-const $t@5519 $Snap)
(declare-const $t@5520 $Snap)
(assert (= $t@5517 ($Snap.combine $t@5519 $t@5520)))
(declare-const $t@5521 $Snap)
(declare-const $t@5522 $Ref)
(assert (= $t@5519 ($Snap.combine $t@5521 ($SortWrappers.$RefTo$Snap $t@5522))))
(declare-const $t@5523 $Snap)
(assert (= $t@5521 ($Snap.combine $t@5523 $Snap.unit)))
(declare-const $t@5524 Int)
(declare-const $t@5525 $Ref)
(assert (=
  $t@5523
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@5524)
    ($SortWrappers.$RefTo$Snap $t@5525))))
(declare-const $t@5526 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@5524)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@5526) $Snap.unit)))
(declare-const $k@5527 $Perm)
(assert ($Perm.isValidVar $k@5527))
(assert ($Perm.isReadVar $k@5527 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                  $k@5443)
                $k@5461)
              $k@5465)
            $k@5483)
          $k@5487)
        $k@5505)
      $k@5509))
  (= $t@5526 $t@5504)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                    $k@5443)
                  $k@5461)
                $k@5465)
              $k@5483)
            $k@5487)
          $k@5505)
        $k@5509)
      $k@5527)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                    $k@5443)
                  $k@5461)
                $k@5465)
              $k@5483)
            $k@5487)
          $k@5505)
        $k@5509)
      $k@5527)
    $Perm.No)))
(assert (> $t@5526 0))
(declare-const $k@5528 $Perm)
(assert ($Perm.isValidVar $k@5528))
(assert ($Perm.isReadVar $k@5528 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                  $k@5444)
                $k@5462)
              $k@5466)
            $k@5484)
          $k@5488)
        $k@5506)
      $k@5510))
  (= $t@5525 $t@5503)))
; [eval] diz.BlockingQueue__count != null
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                    $k@5444)
                  $k@5462)
                $k@5466)
              $k@5484)
            $k@5488)
          $k@5506)
        $k@5510)
      $k@5528)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                    $k@5444)
                  $k@5462)
                $k@5466)
              $k@5484)
            $k@5488)
          $k@5506)
        $k@5510)
      $k@5528)
    $Perm.No)))
(assert (not (= $t@5525 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 16
(assert (not (= $t@5522 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not (= $t@5522 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 16
(push) ; 16
; [then-branch 644] $t@5522 != Null
(assert (not (= $t@5522 $Ref.null)))
(declare-const $k@5529 $Perm)
(assert ($Perm.isValidVar $k@5529))
(assert ($Perm.isReadVar $k@5529 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                  $k@5445)
                $k@5463)
              $k@5467)
            $k@5485)
          $k@5489)
        $k@5507)
      $k@5511))
  (= $t@5518 $t@5496)))
(declare-const $k@5530 $Perm)
(assert ($Perm.isValidVar $k@5530))
(assert ($Perm.isReadVar $k@5530 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                  $k@5446)
                $k@5464)
              $k@5468)
            $k@5486)
          $k@5490)
        $k@5508)
      $k@5512))
  (= $t@5516 $t@5494)))
; [exec]
; o := __flatten_78
; [exec]
; __flatten_79 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@5531 $Perm)
(assert ($Perm.isValidVar $k@5531))
(assert ($Perm.isReadVar $k@5531 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@5531 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@5531
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                  $k@5443)
                $k@5461)
              $k@5465)
            $k@5483)
          $k@5487)
        $k@5505)
      $k@5509)
    $k@5527)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@5532 $Perm)
(assert ($Perm.isValidVar $k@5532))
(assert ($Perm.isReadVar $k@5532 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@5532 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@5532
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                  $k@5444)
                $k@5462)
              $k@5466)
            $k@5484)
          $k@5488)
        $k@5506)
      $k@5510)
    $k@5528)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 17
(assert (not (= $t@5522 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 17
(push) ; 17
; [then-branch 645] $t@5522 != Null
(declare-const $k@5533 $Perm)
(assert ($Perm.isValidVar $k@5533))
(assert ($Perm.isReadVar $k@5533 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@5533 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                    $k@5445)
                  $k@5463)
                $k@5467)
              $k@5485)
            $k@5489)
          $k@5507)
        $k@5511)
      $k@5529)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                    $k@5445)
                  $k@5463)
                $k@5467)
              $k@5485)
            $k@5489)
          $k@5507)
        $k@5511)
      $k@5529)
    $Perm.No)))
(assert (<
  $k@5533
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                  $k@5445)
                $k@5463)
              $k@5467)
            $k@5485)
          $k@5489)
        $k@5507)
      $k@5511)
    $k@5529)))
(declare-const $k@5534 $Perm)
(assert ($Perm.isValidVar $k@5534))
(assert ($Perm.isReadVar $k@5534 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@5534 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                    $k@5446)
                  $k@5464)
                $k@5468)
              $k@5486)
            $k@5490)
          $k@5508)
        $k@5512)
      $k@5530)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                    $k@5446)
                  $k@5464)
                $k@5468)
              $k@5486)
            $k@5490)
          $k@5508)
        $k@5512)
      $k@5530)
    $Perm.No)))
(assert (<
  $k@5534
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                  $k@5446)
                $k@5464)
              $k@5468)
            $k@5486)
          $k@5490)
        $k@5508)
      $k@5512)
    $k@5530)))
(declare-const sys__result@5535 $Ref)
(declare-const $t@5536 $Snap)
(declare-const $t@5537 $Snap)
(declare-const $t@5538 $Ref)
(assert (= $t@5536 ($Snap.combine $t@5537 ($SortWrappers.$RefTo$Snap $t@5538))))
(declare-const $t@5539 $Snap)
(declare-const $t@5540 $Ref)
(assert (= $t@5537 ($Snap.combine $t@5539 ($SortWrappers.$RefTo$Snap $t@5540))))
(declare-const $t@5541 $Snap)
(declare-const $t@5542 $Snap)
(assert (= $t@5539 ($Snap.combine $t@5541 $t@5542)))
(declare-const $t@5543 $Snap)
(declare-const $t@5544 $Ref)
(assert (= $t@5541 ($Snap.combine $t@5543 ($SortWrappers.$RefTo$Snap $t@5544))))
(declare-const $t@5545 $Snap)
(assert (= $t@5543 ($Snap.combine $t@5545 $Snap.unit)))
(declare-const $t@5546 Int)
(declare-const $t@5547 $Ref)
(assert (=
  $t@5545
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@5546)
    ($SortWrappers.$RefTo$Snap $t@5547))))
(declare-const $t@5548 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@5546)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@5548) $Snap.unit)))
(declare-const $k@5549 $Perm)
(assert ($Perm.isValidVar $k@5549))
(assert ($Perm.isReadVar $k@5549 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                      $k@5443)
                    $k@5461)
                  $k@5465)
                $k@5483)
              $k@5487)
            $k@5505)
          $k@5509)
        $k@5527)
      $k@5531))
  (= $t@5548 $t@5526)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                        $k@5443)
                      $k@5461)
                    $k@5465)
                  $k@5483)
                $k@5487)
              $k@5505)
            $k@5509)
          $k@5527)
        $k@5531)
      $k@5549)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                        $k@5443)
                      $k@5461)
                    $k@5465)
                  $k@5483)
                $k@5487)
              $k@5505)
            $k@5509)
          $k@5527)
        $k@5531)
      $k@5549)
    $Perm.No)))
(assert (> $t@5548 0))
(declare-const $k@5550 $Perm)
(assert ($Perm.isValidVar $k@5550))
(assert ($Perm.isReadVar $k@5550 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                      $k@5444)
                    $k@5462)
                  $k@5466)
                $k@5484)
              $k@5488)
            $k@5506)
          $k@5510)
        $k@5528)
      $k@5532))
  (= $t@5547 $t@5525)))
; [eval] diz.BlockingQueue__count != null
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                        $k@5444)
                      $k@5462)
                    $k@5466)
                  $k@5484)
                $k@5488)
              $k@5506)
            $k@5510)
          $k@5528)
        $k@5532)
      $k@5550)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                        $k@5444)
                      $k@5462)
                    $k@5466)
                  $k@5484)
                $k@5488)
              $k@5506)
            $k@5510)
          $k@5528)
        $k@5532)
      $k@5550)
    $Perm.No)))
(assert (not (= $t@5547 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 18
(assert (not (= $t@5544 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not (= $t@5544 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
; [then-branch 646] $t@5544 != Null
(assert (not (= $t@5544 $Ref.null)))
(declare-const $k@5551 $Perm)
(assert ($Perm.isValidVar $k@5551))
(assert ($Perm.isReadVar $k@5551 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                      $k@5445)
                    $k@5463)
                  $k@5467)
                $k@5485)
              $k@5489)
            $k@5507)
          $k@5511)
        $k@5529)
      $k@5533))
  (= $t@5540 $t@5518)))
(declare-const $k@5552 $Perm)
(assert ($Perm.isValidVar $k@5552))
(assert ($Perm.isReadVar $k@5552 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                      $k@5446)
                    $k@5464)
                  $k@5468)
                $k@5486)
              $k@5490)
            $k@5508)
          $k@5512)
        $k@5530)
      $k@5534))
  (= $t@5538 $t@5516)))
; [exec]
; p := __flatten_79
(pop) ; 18
(push) ; 18
; [else-branch 646] $t@5544 == Null
(assert (= $t@5544 $Ref.null))
(declare-const $k@5553 $Perm)
(assert ($Perm.isValidVar $k@5553))
(assert ($Perm.isReadVar $k@5553 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                      $k@5445)
                    $k@5463)
                  $k@5467)
                $k@5485)
              $k@5489)
            $k@5507)
          $k@5511)
        $k@5529)
      $k@5533))
  (= $t@5540 $t@5518)))
(declare-const $k@5554 $Perm)
(assert ($Perm.isValidVar $k@5554))
(assert ($Perm.isReadVar $k@5554 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                      $k@5446)
                    $k@5464)
                  $k@5468)
                $k@5486)
              $k@5490)
            $k@5508)
          $k@5512)
        $k@5530)
      $k@5534))
  (= $t@5538 $t@5516)))
; [exec]
; p := __flatten_79
(pop) ; 18
(pop) ; 17
; [dead else-branch 645] $t@5522 == Null
(pop) ; 16
(push) ; 16
; [else-branch 644] $t@5522 == Null
(assert (= $t@5522 $Ref.null))
(declare-const $k@5555 $Perm)
(assert ($Perm.isValidVar $k@5555))
(assert ($Perm.isReadVar $k@5555 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                  $k@5445)
                $k@5463)
              $k@5467)
            $k@5485)
          $k@5489)
        $k@5507)
      $k@5511))
  (= $t@5518 $t@5496)))
(declare-const $k@5556 $Perm)
(assert ($Perm.isValidVar $k@5556))
(assert ($Perm.isReadVar $k@5556 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                  $k@5446)
                $k@5464)
              $k@5468)
            $k@5486)
          $k@5490)
        $k@5508)
      $k@5512))
  (= $t@5516 $t@5494)))
; [exec]
; o := __flatten_78
; [exec]
; __flatten_79 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@5557 $Perm)
(assert ($Perm.isValidVar $k@5557))
(assert ($Perm.isReadVar $k@5557 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@5557 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@5557
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                  $k@5443)
                $k@5461)
              $k@5465)
            $k@5483)
          $k@5487)
        $k@5505)
      $k@5509)
    $k@5527)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@5558 $Perm)
(assert ($Perm.isValidVar $k@5558))
(assert ($Perm.isReadVar $k@5558 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@5558 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@5558
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                  $k@5444)
                $k@5462)
              $k@5466)
            $k@5484)
          $k@5488)
        $k@5506)
      $k@5510)
    $k@5528)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 17
(assert (not (not (= $t@5522 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 17
; [dead then-branch 647] $t@5522 != Null
(push) ; 17
; [else-branch 647] $t@5522 == Null
(declare-const $k@5559 $Perm)
(assert ($Perm.isValidVar $k@5559))
(assert ($Perm.isReadVar $k@5559 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@5559 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                    $k@5445)
                  $k@5463)
                $k@5467)
              $k@5485)
            $k@5489)
          $k@5507)
        $k@5511)
      $k@5555)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                    $k@5445)
                  $k@5463)
                $k@5467)
              $k@5485)
            $k@5489)
          $k@5507)
        $k@5511)
      $k@5555)
    $Perm.No)))
(assert (<
  $k@5559
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                  $k@5445)
                $k@5463)
              $k@5467)
            $k@5485)
          $k@5489)
        $k@5507)
      $k@5511)
    $k@5555)))
(declare-const $k@5560 $Perm)
(assert ($Perm.isValidVar $k@5560))
(assert ($Perm.isReadVar $k@5560 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@5560 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                    $k@5446)
                  $k@5464)
                $k@5468)
              $k@5486)
            $k@5490)
          $k@5508)
        $k@5512)
      $k@5556)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                    $k@5446)
                  $k@5464)
                $k@5468)
              $k@5486)
            $k@5490)
          $k@5508)
        $k@5512)
      $k@5556)
    $Perm.No)))
(assert (<
  $k@5560
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                  $k@5446)
                $k@5464)
              $k@5468)
            $k@5486)
          $k@5490)
        $k@5508)
      $k@5512)
    $k@5556)))
(declare-const sys__result@5561 $Ref)
(declare-const $t@5562 $Snap)
(declare-const $t@5563 $Snap)
(declare-const $t@5564 $Ref)
(assert (= $t@5562 ($Snap.combine $t@5563 ($SortWrappers.$RefTo$Snap $t@5564))))
(declare-const $t@5565 $Snap)
(declare-const $t@5566 $Ref)
(assert (= $t@5563 ($Snap.combine $t@5565 ($SortWrappers.$RefTo$Snap $t@5566))))
(declare-const $t@5567 $Snap)
(declare-const $t@5568 $Snap)
(assert (= $t@5565 ($Snap.combine $t@5567 $t@5568)))
(declare-const $t@5569 $Snap)
(declare-const $t@5570 $Ref)
(assert (= $t@5567 ($Snap.combine $t@5569 ($SortWrappers.$RefTo$Snap $t@5570))))
(declare-const $t@5571 $Snap)
(assert (= $t@5569 ($Snap.combine $t@5571 $Snap.unit)))
(declare-const $t@5572 Int)
(declare-const $t@5573 $Ref)
(assert (=
  $t@5571
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@5572)
    ($SortWrappers.$RefTo$Snap $t@5573))))
(declare-const $t@5574 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@5572)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@5574) $Snap.unit)))
(declare-const $k@5575 $Perm)
(assert ($Perm.isValidVar $k@5575))
(assert ($Perm.isReadVar $k@5575 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                      $k@5443)
                    $k@5461)
                  $k@5465)
                $k@5483)
              $k@5487)
            $k@5505)
          $k@5509)
        $k@5527)
      $k@5557))
  (= $t@5574 $t@5526)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                        $k@5443)
                      $k@5461)
                    $k@5465)
                  $k@5483)
                $k@5487)
              $k@5505)
            $k@5509)
          $k@5527)
        $k@5557)
      $k@5575)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                        $k@5443)
                      $k@5461)
                    $k@5465)
                  $k@5483)
                $k@5487)
              $k@5505)
            $k@5509)
          $k@5527)
        $k@5557)
      $k@5575)
    $Perm.No)))
(assert (> $t@5574 0))
(declare-const $k@5576 $Perm)
(assert ($Perm.isValidVar $k@5576))
(assert ($Perm.isReadVar $k@5576 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                      $k@5444)
                    $k@5462)
                  $k@5466)
                $k@5484)
              $k@5488)
            $k@5506)
          $k@5510)
        $k@5528)
      $k@5558))
  (= $t@5573 $t@5525)))
; [eval] diz.BlockingQueue__count != null
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                        $k@5444)
                      $k@5462)
                    $k@5466)
                  $k@5484)
                $k@5488)
              $k@5506)
            $k@5510)
          $k@5528)
        $k@5558)
      $k@5576)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                        $k@5444)
                      $k@5462)
                    $k@5466)
                  $k@5484)
                $k@5488)
              $k@5506)
            $k@5510)
          $k@5528)
        $k@5558)
      $k@5576)
    $Perm.No)))
(assert (not (= $t@5573 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 18
(assert (not (= $t@5570 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not (= $t@5570 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
; [then-branch 648] $t@5570 != Null
(assert (not (= $t@5570 $Ref.null)))
(declare-const $k@5577 $Perm)
(assert ($Perm.isValidVar $k@5577))
(assert ($Perm.isReadVar $k@5577 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                      $k@5445)
                    $k@5463)
                  $k@5467)
                $k@5485)
              $k@5489)
            $k@5507)
          $k@5511)
        $k@5555)
      $k@5559))
  (= $t@5566 $t@5518)))
(declare-const $k@5578 $Perm)
(assert ($Perm.isValidVar $k@5578))
(assert ($Perm.isReadVar $k@5578 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                      $k@5446)
                    $k@5464)
                  $k@5468)
                $k@5486)
              $k@5490)
            $k@5508)
          $k@5512)
        $k@5556)
      $k@5560))
  (= $t@5564 $t@5516)))
; [exec]
; p := __flatten_79
(pop) ; 18
(push) ; 18
; [else-branch 648] $t@5570 == Null
(assert (= $t@5570 $Ref.null))
(declare-const $k@5579 $Perm)
(assert ($Perm.isValidVar $k@5579))
(assert ($Perm.isReadVar $k@5579 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                      $k@5445)
                    $k@5463)
                  $k@5467)
                $k@5485)
              $k@5489)
            $k@5507)
          $k@5511)
        $k@5555)
      $k@5559))
  (= $t@5566 $t@5518)))
(declare-const $k@5580 $Perm)
(assert ($Perm.isValidVar $k@5580))
(assert ($Perm.isReadVar $k@5580 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                      $k@5446)
                    $k@5464)
                  $k@5468)
                $k@5486)
              $k@5490)
            $k@5508)
          $k@5512)
        $k@5556)
      $k@5560))
  (= $t@5564 $t@5516)))
; [exec]
; p := __flatten_79
(pop) ; 18
(pop) ; 17
(pop) ; 16
(pop) ; 15
; [dead else-branch 643] $t@5500 == Null
(pop) ; 14
(push) ; 14
; [else-branch 642] $t@5500 == Null
(assert (= $t@5500 $Ref.null))
(declare-const $k@5581 $Perm)
(assert ($Perm.isValidVar $k@5581))
(assert ($Perm.isReadVar $k@5581 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441) $k@5445)
            $k@5463)
          $k@5467)
        $k@5485)
      $k@5489))
  (= $t@5496 $t@5474)))
(declare-const $k@5582 $Perm)
(assert ($Perm.isValidVar $k@5582))
(assert ($Perm.isReadVar $k@5582 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442) $k@5446)
            $k@5464)
          $k@5468)
        $k@5486)
      $k@5490))
  (= $t@5494 $t@5472)))
; [exec]
; n := __flatten_77
; [exec]
; __flatten_78 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@5583 $Perm)
(assert ($Perm.isValidVar $k@5583))
(assert ($Perm.isReadVar $k@5583 $Perm.Write))
(push) ; 15
(assert (not (or (= $k@5583 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 15
(assert (<
  $k@5583
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693) $k@5443)
            $k@5461)
          $k@5465)
        $k@5483)
      $k@5487)
    $k@5505)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@5584 $Perm)
(assert ($Perm.isValidVar $k@5584))
(assert ($Perm.isReadVar $k@5584 $Perm.Write))
(push) ; 15
(assert (not (or (= $k@5584 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 15
(assert (<
  $k@5584
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694) $k@5444)
            $k@5462)
          $k@5466)
        $k@5484)
      $k@5488)
    $k@5506)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 15
(assert (not (not (= $t@5500 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 15
; [dead then-branch 649] $t@5500 != Null
(push) ; 15
; [else-branch 649] $t@5500 == Null
(declare-const $k@5585 $Perm)
(assert ($Perm.isValidVar $k@5585))
(assert ($Perm.isReadVar $k@5585 $Perm.Write))
(push) ; 16
(assert (not (or (= $k@5585 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441) $k@5445)
              $k@5463)
            $k@5467)
          $k@5485)
        $k@5489)
      $k@5581)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441) $k@5445)
              $k@5463)
            $k@5467)
          $k@5485)
        $k@5489)
      $k@5581)
    $Perm.No)))
(assert (<
  $k@5585
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441) $k@5445)
            $k@5463)
          $k@5467)
        $k@5485)
      $k@5489)
    $k@5581)))
(declare-const $k@5586 $Perm)
(assert ($Perm.isValidVar $k@5586))
(assert ($Perm.isReadVar $k@5586 $Perm.Write))
(push) ; 16
(assert (not (or (= $k@5586 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442) $k@5446)
              $k@5464)
            $k@5468)
          $k@5486)
        $k@5490)
      $k@5582)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442) $k@5446)
              $k@5464)
            $k@5468)
          $k@5486)
        $k@5490)
      $k@5582)
    $Perm.No)))
(assert (<
  $k@5586
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442) $k@5446)
            $k@5464)
          $k@5468)
        $k@5486)
      $k@5490)
    $k@5582)))
(declare-const sys__result@5587 $Ref)
(declare-const $t@5588 $Snap)
(declare-const $t@5589 $Snap)
(declare-const $t@5590 $Ref)
(assert (= $t@5588 ($Snap.combine $t@5589 ($SortWrappers.$RefTo$Snap $t@5590))))
(declare-const $t@5591 $Snap)
(declare-const $t@5592 $Ref)
(assert (= $t@5589 ($Snap.combine $t@5591 ($SortWrappers.$RefTo$Snap $t@5592))))
(declare-const $t@5593 $Snap)
(declare-const $t@5594 $Snap)
(assert (= $t@5591 ($Snap.combine $t@5593 $t@5594)))
(declare-const $t@5595 $Snap)
(declare-const $t@5596 $Ref)
(assert (= $t@5593 ($Snap.combine $t@5595 ($SortWrappers.$RefTo$Snap $t@5596))))
(declare-const $t@5597 $Snap)
(assert (= $t@5595 ($Snap.combine $t@5597 $Snap.unit)))
(declare-const $t@5598 Int)
(declare-const $t@5599 $Ref)
(assert (=
  $t@5597
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@5598)
    ($SortWrappers.$RefTo$Snap $t@5599))))
(declare-const $t@5600 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@5598)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@5600) $Snap.unit)))
(declare-const $k@5601 $Perm)
(assert ($Perm.isValidVar $k@5601))
(assert ($Perm.isReadVar $k@5601 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                  $k@5443)
                $k@5461)
              $k@5465)
            $k@5483)
          $k@5487)
        $k@5505)
      $k@5583))
  (= $t@5600 $t@5504)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                    $k@5443)
                  $k@5461)
                $k@5465)
              $k@5483)
            $k@5487)
          $k@5505)
        $k@5583)
      $k@5601)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                    $k@5443)
                  $k@5461)
                $k@5465)
              $k@5483)
            $k@5487)
          $k@5505)
        $k@5583)
      $k@5601)
    $Perm.No)))
(assert (> $t@5600 0))
(declare-const $k@5602 $Perm)
(assert ($Perm.isValidVar $k@5602))
(assert ($Perm.isReadVar $k@5602 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                  $k@5444)
                $k@5462)
              $k@5466)
            $k@5484)
          $k@5488)
        $k@5506)
      $k@5584))
  (= $t@5599 $t@5503)))
; [eval] diz.BlockingQueue__count != null
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                    $k@5444)
                  $k@5462)
                $k@5466)
              $k@5484)
            $k@5488)
          $k@5506)
        $k@5584)
      $k@5602)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                    $k@5444)
                  $k@5462)
                $k@5466)
              $k@5484)
            $k@5488)
          $k@5506)
        $k@5584)
      $k@5602)
    $Perm.No)))
(assert (not (= $t@5599 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 16
(assert (not (= $t@5596 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not (= $t@5596 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 16
(push) ; 16
; [then-branch 650] $t@5596 != Null
(assert (not (= $t@5596 $Ref.null)))
(declare-const $k@5603 $Perm)
(assert ($Perm.isValidVar $k@5603))
(assert ($Perm.isReadVar $k@5603 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                  $k@5445)
                $k@5463)
              $k@5467)
            $k@5485)
          $k@5489)
        $k@5581)
      $k@5585))
  (= $t@5592 $t@5496)))
(declare-const $k@5604 $Perm)
(assert ($Perm.isValidVar $k@5604))
(assert ($Perm.isReadVar $k@5604 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                  $k@5446)
                $k@5464)
              $k@5468)
            $k@5486)
          $k@5490)
        $k@5582)
      $k@5586))
  (= $t@5590 $t@5494)))
; [exec]
; o := __flatten_78
; [exec]
; __flatten_79 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@5605 $Perm)
(assert ($Perm.isValidVar $k@5605))
(assert ($Perm.isReadVar $k@5605 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@5605 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@5605
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                  $k@5443)
                $k@5461)
              $k@5465)
            $k@5483)
          $k@5487)
        $k@5505)
      $k@5583)
    $k@5601)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@5606 $Perm)
(assert ($Perm.isValidVar $k@5606))
(assert ($Perm.isReadVar $k@5606 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@5606 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@5606
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                  $k@5444)
                $k@5462)
              $k@5466)
            $k@5484)
          $k@5488)
        $k@5506)
      $k@5584)
    $k@5602)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 17
(assert (not (= $t@5596 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 17
(push) ; 17
; [then-branch 651] $t@5596 != Null
(declare-const $k@5607 $Perm)
(assert ($Perm.isValidVar $k@5607))
(assert ($Perm.isReadVar $k@5607 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@5607 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                    $k@5445)
                  $k@5463)
                $k@5467)
              $k@5485)
            $k@5489)
          $k@5581)
        $k@5585)
      $k@5603)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                    $k@5445)
                  $k@5463)
                $k@5467)
              $k@5485)
            $k@5489)
          $k@5581)
        $k@5585)
      $k@5603)
    $Perm.No)))
(assert (<
  $k@5607
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                  $k@5445)
                $k@5463)
              $k@5467)
            $k@5485)
          $k@5489)
        $k@5581)
      $k@5585)
    $k@5603)))
(declare-const $k@5608 $Perm)
(assert ($Perm.isValidVar $k@5608))
(assert ($Perm.isReadVar $k@5608 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@5608 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                    $k@5446)
                  $k@5464)
                $k@5468)
              $k@5486)
            $k@5490)
          $k@5582)
        $k@5586)
      $k@5604)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                    $k@5446)
                  $k@5464)
                $k@5468)
              $k@5486)
            $k@5490)
          $k@5582)
        $k@5586)
      $k@5604)
    $Perm.No)))
(assert (<
  $k@5608
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                  $k@5446)
                $k@5464)
              $k@5468)
            $k@5486)
          $k@5490)
        $k@5582)
      $k@5586)
    $k@5604)))
(declare-const sys__result@5609 $Ref)
(declare-const $t@5610 $Snap)
(declare-const $t@5611 $Snap)
(declare-const $t@5612 $Ref)
(assert (= $t@5610 ($Snap.combine $t@5611 ($SortWrappers.$RefTo$Snap $t@5612))))
(declare-const $t@5613 $Snap)
(declare-const $t@5614 $Ref)
(assert (= $t@5611 ($Snap.combine $t@5613 ($SortWrappers.$RefTo$Snap $t@5614))))
(declare-const $t@5615 $Snap)
(declare-const $t@5616 $Snap)
(assert (= $t@5613 ($Snap.combine $t@5615 $t@5616)))
(declare-const $t@5617 $Snap)
(declare-const $t@5618 $Ref)
(assert (= $t@5615 ($Snap.combine $t@5617 ($SortWrappers.$RefTo$Snap $t@5618))))
(declare-const $t@5619 $Snap)
(assert (= $t@5617 ($Snap.combine $t@5619 $Snap.unit)))
(declare-const $t@5620 Int)
(declare-const $t@5621 $Ref)
(assert (=
  $t@5619
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@5620)
    ($SortWrappers.$RefTo$Snap $t@5621))))
(declare-const $t@5622 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@5620)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@5622) $Snap.unit)))
(declare-const $k@5623 $Perm)
(assert ($Perm.isValidVar $k@5623))
(assert ($Perm.isReadVar $k@5623 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                      $k@5443)
                    $k@5461)
                  $k@5465)
                $k@5483)
              $k@5487)
            $k@5505)
          $k@5583)
        $k@5601)
      $k@5605))
  (= $t@5622 $t@5600)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                        $k@5443)
                      $k@5461)
                    $k@5465)
                  $k@5483)
                $k@5487)
              $k@5505)
            $k@5583)
          $k@5601)
        $k@5605)
      $k@5623)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                        $k@5443)
                      $k@5461)
                    $k@5465)
                  $k@5483)
                $k@5487)
              $k@5505)
            $k@5583)
          $k@5601)
        $k@5605)
      $k@5623)
    $Perm.No)))
(assert (> $t@5622 0))
(declare-const $k@5624 $Perm)
(assert ($Perm.isValidVar $k@5624))
(assert ($Perm.isReadVar $k@5624 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                      $k@5444)
                    $k@5462)
                  $k@5466)
                $k@5484)
              $k@5488)
            $k@5506)
          $k@5584)
        $k@5602)
      $k@5606))
  (= $t@5621 $t@5599)))
; [eval] diz.BlockingQueue__count != null
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                        $k@5444)
                      $k@5462)
                    $k@5466)
                  $k@5484)
                $k@5488)
              $k@5506)
            $k@5584)
          $k@5602)
        $k@5606)
      $k@5624)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                        $k@5444)
                      $k@5462)
                    $k@5466)
                  $k@5484)
                $k@5488)
              $k@5506)
            $k@5584)
          $k@5602)
        $k@5606)
      $k@5624)
    $Perm.No)))
(assert (not (= $t@5621 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 18
(assert (not (= $t@5618 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not (= $t@5618 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
; [then-branch 652] $t@5618 != Null
(assert (not (= $t@5618 $Ref.null)))
(declare-const $k@5625 $Perm)
(assert ($Perm.isValidVar $k@5625))
(assert ($Perm.isReadVar $k@5625 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                      $k@5445)
                    $k@5463)
                  $k@5467)
                $k@5485)
              $k@5489)
            $k@5581)
          $k@5585)
        $k@5603)
      $k@5607))
  (= $t@5614 $t@5592)))
(declare-const $k@5626 $Perm)
(assert ($Perm.isValidVar $k@5626))
(assert ($Perm.isReadVar $k@5626 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                      $k@5446)
                    $k@5464)
                  $k@5468)
                $k@5486)
              $k@5490)
            $k@5582)
          $k@5586)
        $k@5604)
      $k@5608))
  (= $t@5612 $t@5590)))
; [exec]
; p := __flatten_79
(pop) ; 18
(push) ; 18
; [else-branch 652] $t@5618 == Null
(assert (= $t@5618 $Ref.null))
(declare-const $k@5627 $Perm)
(assert ($Perm.isValidVar $k@5627))
(assert ($Perm.isReadVar $k@5627 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                      $k@5445)
                    $k@5463)
                  $k@5467)
                $k@5485)
              $k@5489)
            $k@5581)
          $k@5585)
        $k@5603)
      $k@5607))
  (= $t@5614 $t@5592)))
(declare-const $k@5628 $Perm)
(assert ($Perm.isValidVar $k@5628))
(assert ($Perm.isReadVar $k@5628 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                      $k@5446)
                    $k@5464)
                  $k@5468)
                $k@5486)
              $k@5490)
            $k@5582)
          $k@5586)
        $k@5604)
      $k@5608))
  (= $t@5612 $t@5590)))
; [exec]
; p := __flatten_79
(pop) ; 18
(pop) ; 17
; [dead else-branch 651] $t@5596 == Null
(pop) ; 16
(push) ; 16
; [else-branch 650] $t@5596 == Null
(assert (= $t@5596 $Ref.null))
(declare-const $k@5629 $Perm)
(assert ($Perm.isValidVar $k@5629))
(assert ($Perm.isReadVar $k@5629 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                  $k@5445)
                $k@5463)
              $k@5467)
            $k@5485)
          $k@5489)
        $k@5581)
      $k@5585))
  (= $t@5592 $t@5496)))
(declare-const $k@5630 $Perm)
(assert ($Perm.isValidVar $k@5630))
(assert ($Perm.isReadVar $k@5630 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                  $k@5446)
                $k@5464)
              $k@5468)
            $k@5486)
          $k@5490)
        $k@5582)
      $k@5586))
  (= $t@5590 $t@5494)))
; [exec]
; o := __flatten_78
; [exec]
; __flatten_79 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@5631 $Perm)
(assert ($Perm.isValidVar $k@5631))
(assert ($Perm.isReadVar $k@5631 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@5631 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@5631
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                  $k@5443)
                $k@5461)
              $k@5465)
            $k@5483)
          $k@5487)
        $k@5505)
      $k@5583)
    $k@5601)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@5632 $Perm)
(assert ($Perm.isValidVar $k@5632))
(assert ($Perm.isReadVar $k@5632 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@5632 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@5632
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                  $k@5444)
                $k@5462)
              $k@5466)
            $k@5484)
          $k@5488)
        $k@5506)
      $k@5584)
    $k@5602)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 17
(assert (not (not (= $t@5596 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 17
; [dead then-branch 653] $t@5596 != Null
(push) ; 17
; [else-branch 653] $t@5596 == Null
(declare-const $k@5633 $Perm)
(assert ($Perm.isValidVar $k@5633))
(assert ($Perm.isReadVar $k@5633 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@5633 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                    $k@5445)
                  $k@5463)
                $k@5467)
              $k@5485)
            $k@5489)
          $k@5581)
        $k@5585)
      $k@5629)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                    $k@5445)
                  $k@5463)
                $k@5467)
              $k@5485)
            $k@5489)
          $k@5581)
        $k@5585)
      $k@5629)
    $Perm.No)))
(assert (<
  $k@5633
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                  $k@5445)
                $k@5463)
              $k@5467)
            $k@5485)
          $k@5489)
        $k@5581)
      $k@5585)
    $k@5629)))
(declare-const $k@5634 $Perm)
(assert ($Perm.isValidVar $k@5634))
(assert ($Perm.isReadVar $k@5634 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@5634 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                    $k@5446)
                  $k@5464)
                $k@5468)
              $k@5486)
            $k@5490)
          $k@5582)
        $k@5586)
      $k@5630)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                    $k@5446)
                  $k@5464)
                $k@5468)
              $k@5486)
            $k@5490)
          $k@5582)
        $k@5586)
      $k@5630)
    $Perm.No)))
(assert (<
  $k@5634
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                  $k@5446)
                $k@5464)
              $k@5468)
            $k@5486)
          $k@5490)
        $k@5582)
      $k@5586)
    $k@5630)))
(declare-const sys__result@5635 $Ref)
(declare-const $t@5636 $Snap)
(declare-const $t@5637 $Snap)
(declare-const $t@5638 $Ref)
(assert (= $t@5636 ($Snap.combine $t@5637 ($SortWrappers.$RefTo$Snap $t@5638))))
(declare-const $t@5639 $Snap)
(declare-const $t@5640 $Ref)
(assert (= $t@5637 ($Snap.combine $t@5639 ($SortWrappers.$RefTo$Snap $t@5640))))
(declare-const $t@5641 $Snap)
(declare-const $t@5642 $Snap)
(assert (= $t@5639 ($Snap.combine $t@5641 $t@5642)))
(declare-const $t@5643 $Snap)
(declare-const $t@5644 $Ref)
(assert (= $t@5641 ($Snap.combine $t@5643 ($SortWrappers.$RefTo$Snap $t@5644))))
(declare-const $t@5645 $Snap)
(assert (= $t@5643 ($Snap.combine $t@5645 $Snap.unit)))
(declare-const $t@5646 Int)
(declare-const $t@5647 $Ref)
(assert (=
  $t@5645
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@5646)
    ($SortWrappers.$RefTo$Snap $t@5647))))
(declare-const $t@5648 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@5646)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@5648) $Snap.unit)))
(declare-const $k@5649 $Perm)
(assert ($Perm.isValidVar $k@5649))
(assert ($Perm.isReadVar $k@5649 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                      $k@5443)
                    $k@5461)
                  $k@5465)
                $k@5483)
              $k@5487)
            $k@5505)
          $k@5583)
        $k@5601)
      $k@5631))
  (= $t@5648 $t@5600)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                        $k@5443)
                      $k@5461)
                    $k@5465)
                  $k@5483)
                $k@5487)
              $k@5505)
            $k@5583)
          $k@5601)
        $k@5631)
      $k@5649)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                        $k@5443)
                      $k@5461)
                    $k@5465)
                  $k@5483)
                $k@5487)
              $k@5505)
            $k@5583)
          $k@5601)
        $k@5631)
      $k@5649)
    $Perm.No)))
(assert (> $t@5648 0))
(declare-const $k@5650 $Perm)
(assert ($Perm.isValidVar $k@5650))
(assert ($Perm.isReadVar $k@5650 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                      $k@5444)
                    $k@5462)
                  $k@5466)
                $k@5484)
              $k@5488)
            $k@5506)
          $k@5584)
        $k@5602)
      $k@5632))
  (= $t@5647 $t@5599)))
; [eval] diz.BlockingQueue__count != null
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                        $k@5444)
                      $k@5462)
                    $k@5466)
                  $k@5484)
                $k@5488)
              $k@5506)
            $k@5584)
          $k@5602)
        $k@5632)
      $k@5650)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                        $k@5444)
                      $k@5462)
                    $k@5466)
                  $k@5484)
                $k@5488)
              $k@5506)
            $k@5584)
          $k@5602)
        $k@5632)
      $k@5650)
    $Perm.No)))
(assert (not (= $t@5647 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 18
(assert (not (= $t@5644 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not (= $t@5644 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
; [then-branch 654] $t@5644 != Null
(assert (not (= $t@5644 $Ref.null)))
(declare-const $k@5651 $Perm)
(assert ($Perm.isValidVar $k@5651))
(assert ($Perm.isReadVar $k@5651 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                      $k@5445)
                    $k@5463)
                  $k@5467)
                $k@5485)
              $k@5489)
            $k@5581)
          $k@5585)
        $k@5629)
      $k@5633))
  (= $t@5640 $t@5592)))
(declare-const $k@5652 $Perm)
(assert ($Perm.isValidVar $k@5652))
(assert ($Perm.isReadVar $k@5652 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                      $k@5446)
                    $k@5464)
                  $k@5468)
                $k@5486)
              $k@5490)
            $k@5582)
          $k@5586)
        $k@5630)
      $k@5634))
  (= $t@5638 $t@5590)))
; [exec]
; p := __flatten_79
(pop) ; 18
(push) ; 18
; [else-branch 654] $t@5644 == Null
(assert (= $t@5644 $Ref.null))
(declare-const $k@5653 $Perm)
(assert ($Perm.isValidVar $k@5653))
(assert ($Perm.isReadVar $k@5653 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                      $k@5445)
                    $k@5463)
                  $k@5467)
                $k@5485)
              $k@5489)
            $k@5581)
          $k@5585)
        $k@5629)
      $k@5633))
  (= $t@5640 $t@5592)))
(declare-const $k@5654 $Perm)
(assert ($Perm.isValidVar $k@5654))
(assert ($Perm.isReadVar $k@5654 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                      $k@5446)
                    $k@5464)
                  $k@5468)
                $k@5486)
              $k@5490)
            $k@5582)
          $k@5586)
        $k@5630)
      $k@5634))
  (= $t@5638 $t@5590)))
; [exec]
; p := __flatten_79
(pop) ; 18
(pop) ; 17
(pop) ; 16
(pop) ; 15
(pop) ; 14
(pop) ; 13
; [dead else-branch 641] $t@5478 == Null
(pop) ; 12
(push) ; 12
; [else-branch 640] $t@5478 == Null
(assert (= $t@5478 $Ref.null))
(declare-const $k@5655 $Perm)
(assert ($Perm.isValidVar $k@5655))
(assert ($Perm.isReadVar $k@5655 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441) $k@5445)
        $k@5463)
      $k@5467))
  (= $t@5474 $t@5452)))
(declare-const $k@5656 $Perm)
(assert ($Perm.isValidVar $k@5656))
(assert ($Perm.isReadVar $k@5656 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442) $k@5446)
        $k@5464)
      $k@5468))
  (= $t@5472 $t@5450)))
; [exec]
; b := __flatten_76
; [exec]
; __flatten_77 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@5657 $Perm)
(assert ($Perm.isValidVar $k@5657))
(assert ($Perm.isReadVar $k@5657 $Perm.Write))
(push) ; 13
(assert (not (or (= $k@5657 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 13
(assert (<
  $k@5657
  (+
    (-
      (+
        (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693) $k@5443)
        $k@5461)
      $k@5465)
    $k@5483)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@5658 $Perm)
(assert ($Perm.isValidVar $k@5658))
(assert ($Perm.isReadVar $k@5658 $Perm.Write))
(push) ; 13
(assert (not (or (= $k@5658 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 13
(assert (<
  $k@5658
  (+
    (-
      (+
        (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694) $k@5444)
        $k@5462)
      $k@5466)
    $k@5484)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 13
(assert (not (not (= $t@5478 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 13
; [dead then-branch 655] $t@5478 != Null
(push) ; 13
; [else-branch 655] $t@5478 == Null
(declare-const $k@5659 $Perm)
(assert ($Perm.isValidVar $k@5659))
(assert ($Perm.isReadVar $k@5659 $Perm.Write))
(push) ; 14
(assert (not (or (= $k@5659 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(push) ; 14
(assert (not (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441) $k@5445)
          $k@5463)
        $k@5467)
      $k@5655)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(assert (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441) $k@5445)
          $k@5463)
        $k@5467)
      $k@5655)
    $Perm.No)))
(assert (<
  $k@5659
  (+
    (-
      (+
        (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441) $k@5445)
        $k@5463)
      $k@5467)
    $k@5655)))
(declare-const $k@5660 $Perm)
(assert ($Perm.isValidVar $k@5660))
(assert ($Perm.isReadVar $k@5660 $Perm.Write))
(push) ; 14
(assert (not (or (= $k@5660 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(push) ; 14
(assert (not (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442) $k@5446)
          $k@5464)
        $k@5468)
      $k@5656)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(assert (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442) $k@5446)
          $k@5464)
        $k@5468)
      $k@5656)
    $Perm.No)))
(assert (<
  $k@5660
  (+
    (-
      (+
        (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442) $k@5446)
        $k@5464)
      $k@5468)
    $k@5656)))
(declare-const sys__result@5661 $Ref)
(declare-const $t@5662 $Snap)
(declare-const $t@5663 $Snap)
(declare-const $t@5664 $Ref)
(assert (= $t@5662 ($Snap.combine $t@5663 ($SortWrappers.$RefTo$Snap $t@5664))))
(declare-const $t@5665 $Snap)
(declare-const $t@5666 $Ref)
(assert (= $t@5663 ($Snap.combine $t@5665 ($SortWrappers.$RefTo$Snap $t@5666))))
(declare-const $t@5667 $Snap)
(declare-const $t@5668 $Snap)
(assert (= $t@5665 ($Snap.combine $t@5667 $t@5668)))
(declare-const $t@5669 $Snap)
(declare-const $t@5670 $Ref)
(assert (= $t@5667 ($Snap.combine $t@5669 ($SortWrappers.$RefTo$Snap $t@5670))))
(declare-const $t@5671 $Snap)
(assert (= $t@5669 ($Snap.combine $t@5671 $Snap.unit)))
(declare-const $t@5672 Int)
(declare-const $t@5673 $Ref)
(assert (=
  $t@5671
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@5672)
    ($SortWrappers.$RefTo$Snap $t@5673))))
(declare-const $t@5674 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@5672)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@5674) $Snap.unit)))
(declare-const $k@5675 $Perm)
(assert ($Perm.isValidVar $k@5675))
(assert ($Perm.isReadVar $k@5675 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693) $k@5443)
            $k@5461)
          $k@5465)
        $k@5483)
      $k@5657))
  (= $t@5674 $t@5482)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 14
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693) $k@5443)
              $k@5461)
            $k@5465)
          $k@5483)
        $k@5657)
      $k@5675)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693) $k@5443)
              $k@5461)
            $k@5465)
          $k@5483)
        $k@5657)
      $k@5675)
    $Perm.No)))
(assert (> $t@5674 0))
(declare-const $k@5676 $Perm)
(assert ($Perm.isValidVar $k@5676))
(assert ($Perm.isReadVar $k@5676 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694) $k@5444)
            $k@5462)
          $k@5466)
        $k@5484)
      $k@5658))
  (= $t@5673 $t@5481)))
; [eval] diz.BlockingQueue__count != null
(push) ; 14
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694) $k@5444)
              $k@5462)
            $k@5466)
          $k@5484)
        $k@5658)
      $k@5676)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694) $k@5444)
              $k@5462)
            $k@5466)
          $k@5484)
        $k@5658)
      $k@5676)
    $Perm.No)))
(assert (not (= $t@5673 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 14
(assert (not (= $t@5670 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 14
(push) ; 14
(assert (not (not (= $t@5670 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 14
(push) ; 14
; [then-branch 656] $t@5670 != Null
(assert (not (= $t@5670 $Ref.null)))
(declare-const $k@5677 $Perm)
(assert ($Perm.isValidVar $k@5677))
(assert ($Perm.isReadVar $k@5677 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441) $k@5445)
            $k@5463)
          $k@5467)
        $k@5655)
      $k@5659))
  (= $t@5666 $t@5474)))
(declare-const $k@5678 $Perm)
(assert ($Perm.isValidVar $k@5678))
(assert ($Perm.isReadVar $k@5678 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442) $k@5446)
            $k@5464)
          $k@5468)
        $k@5656)
      $k@5660))
  (= $t@5664 $t@5472)))
; [exec]
; n := __flatten_77
; [exec]
; __flatten_78 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@5679 $Perm)
(assert ($Perm.isValidVar $k@5679))
(assert ($Perm.isReadVar $k@5679 $Perm.Write))
(push) ; 15
(assert (not (or (= $k@5679 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 15
(assert (<
  $k@5679
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693) $k@5443)
            $k@5461)
          $k@5465)
        $k@5483)
      $k@5657)
    $k@5675)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@5680 $Perm)
(assert ($Perm.isValidVar $k@5680))
(assert ($Perm.isReadVar $k@5680 $Perm.Write))
(push) ; 15
(assert (not (or (= $k@5680 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 15
(assert (<
  $k@5680
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694) $k@5444)
            $k@5462)
          $k@5466)
        $k@5484)
      $k@5658)
    $k@5676)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 15
(assert (not (= $t@5670 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 15
(push) ; 15
; [then-branch 657] $t@5670 != Null
(declare-const $k@5681 $Perm)
(assert ($Perm.isValidVar $k@5681))
(assert ($Perm.isReadVar $k@5681 $Perm.Write))
(push) ; 16
(assert (not (or (= $k@5681 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441) $k@5445)
              $k@5463)
            $k@5467)
          $k@5655)
        $k@5659)
      $k@5677)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441) $k@5445)
              $k@5463)
            $k@5467)
          $k@5655)
        $k@5659)
      $k@5677)
    $Perm.No)))
(assert (<
  $k@5681
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441) $k@5445)
            $k@5463)
          $k@5467)
        $k@5655)
      $k@5659)
    $k@5677)))
(declare-const $k@5682 $Perm)
(assert ($Perm.isValidVar $k@5682))
(assert ($Perm.isReadVar $k@5682 $Perm.Write))
(push) ; 16
(assert (not (or (= $k@5682 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442) $k@5446)
              $k@5464)
            $k@5468)
          $k@5656)
        $k@5660)
      $k@5678)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442) $k@5446)
              $k@5464)
            $k@5468)
          $k@5656)
        $k@5660)
      $k@5678)
    $Perm.No)))
(assert (<
  $k@5682
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442) $k@5446)
            $k@5464)
          $k@5468)
        $k@5656)
      $k@5660)
    $k@5678)))
(declare-const sys__result@5683 $Ref)
(declare-const $t@5684 $Snap)
(declare-const $t@5685 $Snap)
(declare-const $t@5686 $Ref)
(assert (= $t@5684 ($Snap.combine $t@5685 ($SortWrappers.$RefTo$Snap $t@5686))))
(declare-const $t@5687 $Snap)
(declare-const $t@5688 $Ref)
(assert (= $t@5685 ($Snap.combine $t@5687 ($SortWrappers.$RefTo$Snap $t@5688))))
(declare-const $t@5689 $Snap)
(declare-const $t@5690 $Snap)
(assert (= $t@5687 ($Snap.combine $t@5689 $t@5690)))
(declare-const $t@5691 $Snap)
(declare-const $t@5692 $Ref)
(assert (= $t@5689 ($Snap.combine $t@5691 ($SortWrappers.$RefTo$Snap $t@5692))))
(declare-const $t@5693 $Snap)
(assert (= $t@5691 ($Snap.combine $t@5693 $Snap.unit)))
(declare-const $t@5694 Int)
(declare-const $t@5695 $Ref)
(assert (=
  $t@5693
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@5694)
    ($SortWrappers.$RefTo$Snap $t@5695))))
(declare-const $t@5696 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@5694)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@5696) $Snap.unit)))
(declare-const $k@5697 $Perm)
(assert ($Perm.isValidVar $k@5697))
(assert ($Perm.isReadVar $k@5697 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                  $k@5443)
                $k@5461)
              $k@5465)
            $k@5483)
          $k@5657)
        $k@5675)
      $k@5679))
  (= $t@5696 $t@5674)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                    $k@5443)
                  $k@5461)
                $k@5465)
              $k@5483)
            $k@5657)
          $k@5675)
        $k@5679)
      $k@5697)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                    $k@5443)
                  $k@5461)
                $k@5465)
              $k@5483)
            $k@5657)
          $k@5675)
        $k@5679)
      $k@5697)
    $Perm.No)))
(assert (> $t@5696 0))
(declare-const $k@5698 $Perm)
(assert ($Perm.isValidVar $k@5698))
(assert ($Perm.isReadVar $k@5698 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                  $k@5444)
                $k@5462)
              $k@5466)
            $k@5484)
          $k@5658)
        $k@5676)
      $k@5680))
  (= $t@5695 $t@5673)))
; [eval] diz.BlockingQueue__count != null
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                    $k@5444)
                  $k@5462)
                $k@5466)
              $k@5484)
            $k@5658)
          $k@5676)
        $k@5680)
      $k@5698)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                    $k@5444)
                  $k@5462)
                $k@5466)
              $k@5484)
            $k@5658)
          $k@5676)
        $k@5680)
      $k@5698)
    $Perm.No)))
(assert (not (= $t@5695 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 16
(assert (not (= $t@5692 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not (= $t@5692 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 16
(push) ; 16
; [then-branch 658] $t@5692 != Null
(assert (not (= $t@5692 $Ref.null)))
(declare-const $k@5699 $Perm)
(assert ($Perm.isValidVar $k@5699))
(assert ($Perm.isReadVar $k@5699 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                  $k@5445)
                $k@5463)
              $k@5467)
            $k@5655)
          $k@5659)
        $k@5677)
      $k@5681))
  (= $t@5688 $t@5666)))
(declare-const $k@5700 $Perm)
(assert ($Perm.isValidVar $k@5700))
(assert ($Perm.isReadVar $k@5700 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                  $k@5446)
                $k@5464)
              $k@5468)
            $k@5656)
          $k@5660)
        $k@5678)
      $k@5682))
  (= $t@5686 $t@5664)))
; [exec]
; o := __flatten_78
; [exec]
; __flatten_79 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@5701 $Perm)
(assert ($Perm.isValidVar $k@5701))
(assert ($Perm.isReadVar $k@5701 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@5701 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@5701
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                  $k@5443)
                $k@5461)
              $k@5465)
            $k@5483)
          $k@5657)
        $k@5675)
      $k@5679)
    $k@5697)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@5702 $Perm)
(assert ($Perm.isValidVar $k@5702))
(assert ($Perm.isReadVar $k@5702 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@5702 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@5702
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                  $k@5444)
                $k@5462)
              $k@5466)
            $k@5484)
          $k@5658)
        $k@5676)
      $k@5680)
    $k@5698)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 17
(assert (not (= $t@5692 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 17
(push) ; 17
; [then-branch 659] $t@5692 != Null
(declare-const $k@5703 $Perm)
(assert ($Perm.isValidVar $k@5703))
(assert ($Perm.isReadVar $k@5703 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@5703 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                    $k@5445)
                  $k@5463)
                $k@5467)
              $k@5655)
            $k@5659)
          $k@5677)
        $k@5681)
      $k@5699)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                    $k@5445)
                  $k@5463)
                $k@5467)
              $k@5655)
            $k@5659)
          $k@5677)
        $k@5681)
      $k@5699)
    $Perm.No)))
(assert (<
  $k@5703
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                  $k@5445)
                $k@5463)
              $k@5467)
            $k@5655)
          $k@5659)
        $k@5677)
      $k@5681)
    $k@5699)))
(declare-const $k@5704 $Perm)
(assert ($Perm.isValidVar $k@5704))
(assert ($Perm.isReadVar $k@5704 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@5704 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                    $k@5446)
                  $k@5464)
                $k@5468)
              $k@5656)
            $k@5660)
          $k@5678)
        $k@5682)
      $k@5700)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                    $k@5446)
                  $k@5464)
                $k@5468)
              $k@5656)
            $k@5660)
          $k@5678)
        $k@5682)
      $k@5700)
    $Perm.No)))
(assert (<
  $k@5704
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                  $k@5446)
                $k@5464)
              $k@5468)
            $k@5656)
          $k@5660)
        $k@5678)
      $k@5682)
    $k@5700)))
(declare-const sys__result@5705 $Ref)
(declare-const $t@5706 $Snap)
(declare-const $t@5707 $Snap)
(declare-const $t@5708 $Ref)
(assert (= $t@5706 ($Snap.combine $t@5707 ($SortWrappers.$RefTo$Snap $t@5708))))
(declare-const $t@5709 $Snap)
(declare-const $t@5710 $Ref)
(assert (= $t@5707 ($Snap.combine $t@5709 ($SortWrappers.$RefTo$Snap $t@5710))))
(declare-const $t@5711 $Snap)
(declare-const $t@5712 $Snap)
(assert (= $t@5709 ($Snap.combine $t@5711 $t@5712)))
(declare-const $t@5713 $Snap)
(declare-const $t@5714 $Ref)
(assert (= $t@5711 ($Snap.combine $t@5713 ($SortWrappers.$RefTo$Snap $t@5714))))
(declare-const $t@5715 $Snap)
(assert (= $t@5713 ($Snap.combine $t@5715 $Snap.unit)))
(declare-const $t@5716 Int)
(declare-const $t@5717 $Ref)
(assert (=
  $t@5715
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@5716)
    ($SortWrappers.$RefTo$Snap $t@5717))))
(declare-const $t@5718 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@5716)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@5718) $Snap.unit)))
(declare-const $k@5719 $Perm)
(assert ($Perm.isValidVar $k@5719))
(assert ($Perm.isReadVar $k@5719 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                      $k@5443)
                    $k@5461)
                  $k@5465)
                $k@5483)
              $k@5657)
            $k@5675)
          $k@5679)
        $k@5697)
      $k@5701))
  (= $t@5718 $t@5696)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                        $k@5443)
                      $k@5461)
                    $k@5465)
                  $k@5483)
                $k@5657)
              $k@5675)
            $k@5679)
          $k@5697)
        $k@5701)
      $k@5719)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                        $k@5443)
                      $k@5461)
                    $k@5465)
                  $k@5483)
                $k@5657)
              $k@5675)
            $k@5679)
          $k@5697)
        $k@5701)
      $k@5719)
    $Perm.No)))
(assert (> $t@5718 0))
(declare-const $k@5720 $Perm)
(assert ($Perm.isValidVar $k@5720))
(assert ($Perm.isReadVar $k@5720 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                      $k@5444)
                    $k@5462)
                  $k@5466)
                $k@5484)
              $k@5658)
            $k@5676)
          $k@5680)
        $k@5698)
      $k@5702))
  (= $t@5717 $t@5695)))
; [eval] diz.BlockingQueue__count != null
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                        $k@5444)
                      $k@5462)
                    $k@5466)
                  $k@5484)
                $k@5658)
              $k@5676)
            $k@5680)
          $k@5698)
        $k@5702)
      $k@5720)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                        $k@5444)
                      $k@5462)
                    $k@5466)
                  $k@5484)
                $k@5658)
              $k@5676)
            $k@5680)
          $k@5698)
        $k@5702)
      $k@5720)
    $Perm.No)))
(assert (not (= $t@5717 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 18
(assert (not (= $t@5714 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not (= $t@5714 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
; [then-branch 660] $t@5714 != Null
(assert (not (= $t@5714 $Ref.null)))
(declare-const $k@5721 $Perm)
(assert ($Perm.isValidVar $k@5721))
(assert ($Perm.isReadVar $k@5721 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                      $k@5445)
                    $k@5463)
                  $k@5467)
                $k@5655)
              $k@5659)
            $k@5677)
          $k@5681)
        $k@5699)
      $k@5703))
  (= $t@5710 $t@5688)))
(declare-const $k@5722 $Perm)
(assert ($Perm.isValidVar $k@5722))
(assert ($Perm.isReadVar $k@5722 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                      $k@5446)
                    $k@5464)
                  $k@5468)
                $k@5656)
              $k@5660)
            $k@5678)
          $k@5682)
        $k@5700)
      $k@5704))
  (= $t@5708 $t@5686)))
; [exec]
; p := __flatten_79
(pop) ; 18
(push) ; 18
; [else-branch 660] $t@5714 == Null
(assert (= $t@5714 $Ref.null))
(declare-const $k@5723 $Perm)
(assert ($Perm.isValidVar $k@5723))
(assert ($Perm.isReadVar $k@5723 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                      $k@5445)
                    $k@5463)
                  $k@5467)
                $k@5655)
              $k@5659)
            $k@5677)
          $k@5681)
        $k@5699)
      $k@5703))
  (= $t@5710 $t@5688)))
(declare-const $k@5724 $Perm)
(assert ($Perm.isValidVar $k@5724))
(assert ($Perm.isReadVar $k@5724 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                      $k@5446)
                    $k@5464)
                  $k@5468)
                $k@5656)
              $k@5660)
            $k@5678)
          $k@5682)
        $k@5700)
      $k@5704))
  (= $t@5708 $t@5686)))
; [exec]
; p := __flatten_79
(pop) ; 18
(pop) ; 17
; [dead else-branch 659] $t@5692 == Null
(pop) ; 16
(push) ; 16
; [else-branch 658] $t@5692 == Null
(assert (= $t@5692 $Ref.null))
(declare-const $k@5725 $Perm)
(assert ($Perm.isValidVar $k@5725))
(assert ($Perm.isReadVar $k@5725 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                  $k@5445)
                $k@5463)
              $k@5467)
            $k@5655)
          $k@5659)
        $k@5677)
      $k@5681))
  (= $t@5688 $t@5666)))
(declare-const $k@5726 $Perm)
(assert ($Perm.isValidVar $k@5726))
(assert ($Perm.isReadVar $k@5726 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                  $k@5446)
                $k@5464)
              $k@5468)
            $k@5656)
          $k@5660)
        $k@5678)
      $k@5682))
  (= $t@5686 $t@5664)))
; [exec]
; o := __flatten_78
; [exec]
; __flatten_79 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@5727 $Perm)
(assert ($Perm.isValidVar $k@5727))
(assert ($Perm.isReadVar $k@5727 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@5727 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@5727
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                  $k@5443)
                $k@5461)
              $k@5465)
            $k@5483)
          $k@5657)
        $k@5675)
      $k@5679)
    $k@5697)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@5728 $Perm)
(assert ($Perm.isValidVar $k@5728))
(assert ($Perm.isReadVar $k@5728 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@5728 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@5728
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                  $k@5444)
                $k@5462)
              $k@5466)
            $k@5484)
          $k@5658)
        $k@5676)
      $k@5680)
    $k@5698)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 17
(assert (not (not (= $t@5692 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 17
; [dead then-branch 661] $t@5692 != Null
(push) ; 17
; [else-branch 661] $t@5692 == Null
(declare-const $k@5729 $Perm)
(assert ($Perm.isValidVar $k@5729))
(assert ($Perm.isReadVar $k@5729 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@5729 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                    $k@5445)
                  $k@5463)
                $k@5467)
              $k@5655)
            $k@5659)
          $k@5677)
        $k@5681)
      $k@5725)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                    $k@5445)
                  $k@5463)
                $k@5467)
              $k@5655)
            $k@5659)
          $k@5677)
        $k@5681)
      $k@5725)
    $Perm.No)))
(assert (<
  $k@5729
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                  $k@5445)
                $k@5463)
              $k@5467)
            $k@5655)
          $k@5659)
        $k@5677)
      $k@5681)
    $k@5725)))
(declare-const $k@5730 $Perm)
(assert ($Perm.isValidVar $k@5730))
(assert ($Perm.isReadVar $k@5730 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@5730 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                    $k@5446)
                  $k@5464)
                $k@5468)
              $k@5656)
            $k@5660)
          $k@5678)
        $k@5682)
      $k@5726)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                    $k@5446)
                  $k@5464)
                $k@5468)
              $k@5656)
            $k@5660)
          $k@5678)
        $k@5682)
      $k@5726)
    $Perm.No)))
(assert (<
  $k@5730
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                  $k@5446)
                $k@5464)
              $k@5468)
            $k@5656)
          $k@5660)
        $k@5678)
      $k@5682)
    $k@5726)))
(declare-const sys__result@5731 $Ref)
(declare-const $t@5732 $Snap)
(declare-const $t@5733 $Snap)
(declare-const $t@5734 $Ref)
(assert (= $t@5732 ($Snap.combine $t@5733 ($SortWrappers.$RefTo$Snap $t@5734))))
(declare-const $t@5735 $Snap)
(declare-const $t@5736 $Ref)
(assert (= $t@5733 ($Snap.combine $t@5735 ($SortWrappers.$RefTo$Snap $t@5736))))
(declare-const $t@5737 $Snap)
(declare-const $t@5738 $Snap)
(assert (= $t@5735 ($Snap.combine $t@5737 $t@5738)))
(declare-const $t@5739 $Snap)
(declare-const $t@5740 $Ref)
(assert (= $t@5737 ($Snap.combine $t@5739 ($SortWrappers.$RefTo$Snap $t@5740))))
(declare-const $t@5741 $Snap)
(assert (= $t@5739 ($Snap.combine $t@5741 $Snap.unit)))
(declare-const $t@5742 Int)
(declare-const $t@5743 $Ref)
(assert (=
  $t@5741
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@5742)
    ($SortWrappers.$RefTo$Snap $t@5743))))
(declare-const $t@5744 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@5742)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@5744) $Snap.unit)))
(declare-const $k@5745 $Perm)
(assert ($Perm.isValidVar $k@5745))
(assert ($Perm.isReadVar $k@5745 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                      $k@5443)
                    $k@5461)
                  $k@5465)
                $k@5483)
              $k@5657)
            $k@5675)
          $k@5679)
        $k@5697)
      $k@5727))
  (= $t@5744 $t@5696)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                        $k@5443)
                      $k@5461)
                    $k@5465)
                  $k@5483)
                $k@5657)
              $k@5675)
            $k@5679)
          $k@5697)
        $k@5727)
      $k@5745)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                        $k@5443)
                      $k@5461)
                    $k@5465)
                  $k@5483)
                $k@5657)
              $k@5675)
            $k@5679)
          $k@5697)
        $k@5727)
      $k@5745)
    $Perm.No)))
(assert (> $t@5744 0))
(declare-const $k@5746 $Perm)
(assert ($Perm.isValidVar $k@5746))
(assert ($Perm.isReadVar $k@5746 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                      $k@5444)
                    $k@5462)
                  $k@5466)
                $k@5484)
              $k@5658)
            $k@5676)
          $k@5680)
        $k@5698)
      $k@5728))
  (= $t@5743 $t@5695)))
; [eval] diz.BlockingQueue__count != null
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                        $k@5444)
                      $k@5462)
                    $k@5466)
                  $k@5484)
                $k@5658)
              $k@5676)
            $k@5680)
          $k@5698)
        $k@5728)
      $k@5746)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                        $k@5444)
                      $k@5462)
                    $k@5466)
                  $k@5484)
                $k@5658)
              $k@5676)
            $k@5680)
          $k@5698)
        $k@5728)
      $k@5746)
    $Perm.No)))
(assert (not (= $t@5743 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 18
(assert (not (= $t@5740 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not (= $t@5740 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
; [then-branch 662] $t@5740 != Null
(assert (not (= $t@5740 $Ref.null)))
(declare-const $k@5747 $Perm)
(assert ($Perm.isValidVar $k@5747))
(assert ($Perm.isReadVar $k@5747 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                      $k@5445)
                    $k@5463)
                  $k@5467)
                $k@5655)
              $k@5659)
            $k@5677)
          $k@5681)
        $k@5725)
      $k@5729))
  (= $t@5736 $t@5688)))
(declare-const $k@5748 $Perm)
(assert ($Perm.isValidVar $k@5748))
(assert ($Perm.isReadVar $k@5748 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                      $k@5446)
                    $k@5464)
                  $k@5468)
                $k@5656)
              $k@5660)
            $k@5678)
          $k@5682)
        $k@5726)
      $k@5730))
  (= $t@5734 $t@5686)))
; [exec]
; p := __flatten_79
(pop) ; 18
(push) ; 18
; [else-branch 662] $t@5740 == Null
(assert (= $t@5740 $Ref.null))
(declare-const $k@5749 $Perm)
(assert ($Perm.isValidVar $k@5749))
(assert ($Perm.isReadVar $k@5749 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                      $k@5445)
                    $k@5463)
                  $k@5467)
                $k@5655)
              $k@5659)
            $k@5677)
          $k@5681)
        $k@5725)
      $k@5729))
  (= $t@5736 $t@5688)))
(declare-const $k@5750 $Perm)
(assert ($Perm.isValidVar $k@5750))
(assert ($Perm.isReadVar $k@5750 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                      $k@5446)
                    $k@5464)
                  $k@5468)
                $k@5656)
              $k@5660)
            $k@5678)
          $k@5682)
        $k@5726)
      $k@5730))
  (= $t@5734 $t@5686)))
; [exec]
; p := __flatten_79
(pop) ; 18
(pop) ; 17
(pop) ; 16
(pop) ; 15
; [dead else-branch 657] $t@5670 == Null
(pop) ; 14
(push) ; 14
; [else-branch 656] $t@5670 == Null
(assert (= $t@5670 $Ref.null))
(declare-const $k@5751 $Perm)
(assert ($Perm.isValidVar $k@5751))
(assert ($Perm.isReadVar $k@5751 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441) $k@5445)
            $k@5463)
          $k@5467)
        $k@5655)
      $k@5659))
  (= $t@5666 $t@5474)))
(declare-const $k@5752 $Perm)
(assert ($Perm.isValidVar $k@5752))
(assert ($Perm.isReadVar $k@5752 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442) $k@5446)
            $k@5464)
          $k@5468)
        $k@5656)
      $k@5660))
  (= $t@5664 $t@5472)))
; [exec]
; n := __flatten_77
; [exec]
; __flatten_78 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@5753 $Perm)
(assert ($Perm.isValidVar $k@5753))
(assert ($Perm.isReadVar $k@5753 $Perm.Write))
(push) ; 15
(assert (not (or (= $k@5753 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 15
(assert (<
  $k@5753
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693) $k@5443)
            $k@5461)
          $k@5465)
        $k@5483)
      $k@5657)
    $k@5675)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@5754 $Perm)
(assert ($Perm.isValidVar $k@5754))
(assert ($Perm.isReadVar $k@5754 $Perm.Write))
(push) ; 15
(assert (not (or (= $k@5754 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 15
(assert (<
  $k@5754
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694) $k@5444)
            $k@5462)
          $k@5466)
        $k@5484)
      $k@5658)
    $k@5676)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 15
(assert (not (not (= $t@5670 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 15
; [dead then-branch 663] $t@5670 != Null
(push) ; 15
; [else-branch 663] $t@5670 == Null
(declare-const $k@5755 $Perm)
(assert ($Perm.isValidVar $k@5755))
(assert ($Perm.isReadVar $k@5755 $Perm.Write))
(push) ; 16
(assert (not (or (= $k@5755 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441) $k@5445)
              $k@5463)
            $k@5467)
          $k@5655)
        $k@5659)
      $k@5751)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441) $k@5445)
              $k@5463)
            $k@5467)
          $k@5655)
        $k@5659)
      $k@5751)
    $Perm.No)))
(assert (<
  $k@5755
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441) $k@5445)
            $k@5463)
          $k@5467)
        $k@5655)
      $k@5659)
    $k@5751)))
(declare-const $k@5756 $Perm)
(assert ($Perm.isValidVar $k@5756))
(assert ($Perm.isReadVar $k@5756 $Perm.Write))
(push) ; 16
(assert (not (or (= $k@5756 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442) $k@5446)
              $k@5464)
            $k@5468)
          $k@5656)
        $k@5660)
      $k@5752)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442) $k@5446)
              $k@5464)
            $k@5468)
          $k@5656)
        $k@5660)
      $k@5752)
    $Perm.No)))
(assert (<
  $k@5756
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442) $k@5446)
            $k@5464)
          $k@5468)
        $k@5656)
      $k@5660)
    $k@5752)))
(declare-const sys__result@5757 $Ref)
(declare-const $t@5758 $Snap)
(declare-const $t@5759 $Snap)
(declare-const $t@5760 $Ref)
(assert (= $t@5758 ($Snap.combine $t@5759 ($SortWrappers.$RefTo$Snap $t@5760))))
(declare-const $t@5761 $Snap)
(declare-const $t@5762 $Ref)
(assert (= $t@5759 ($Snap.combine $t@5761 ($SortWrappers.$RefTo$Snap $t@5762))))
(declare-const $t@5763 $Snap)
(declare-const $t@5764 $Snap)
(assert (= $t@5761 ($Snap.combine $t@5763 $t@5764)))
(declare-const $t@5765 $Snap)
(declare-const $t@5766 $Ref)
(assert (= $t@5763 ($Snap.combine $t@5765 ($SortWrappers.$RefTo$Snap $t@5766))))
(declare-const $t@5767 $Snap)
(assert (= $t@5765 ($Snap.combine $t@5767 $Snap.unit)))
(declare-const $t@5768 Int)
(declare-const $t@5769 $Ref)
(assert (=
  $t@5767
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@5768)
    ($SortWrappers.$RefTo$Snap $t@5769))))
(declare-const $t@5770 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@5768)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@5770) $Snap.unit)))
(declare-const $k@5771 $Perm)
(assert ($Perm.isValidVar $k@5771))
(assert ($Perm.isReadVar $k@5771 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                  $k@5443)
                $k@5461)
              $k@5465)
            $k@5483)
          $k@5657)
        $k@5675)
      $k@5753))
  (= $t@5770 $t@5674)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                    $k@5443)
                  $k@5461)
                $k@5465)
              $k@5483)
            $k@5657)
          $k@5675)
        $k@5753)
      $k@5771)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                    $k@5443)
                  $k@5461)
                $k@5465)
              $k@5483)
            $k@5657)
          $k@5675)
        $k@5753)
      $k@5771)
    $Perm.No)))
(assert (> $t@5770 0))
(declare-const $k@5772 $Perm)
(assert ($Perm.isValidVar $k@5772))
(assert ($Perm.isReadVar $k@5772 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                  $k@5444)
                $k@5462)
              $k@5466)
            $k@5484)
          $k@5658)
        $k@5676)
      $k@5754))
  (= $t@5769 $t@5673)))
; [eval] diz.BlockingQueue__count != null
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                    $k@5444)
                  $k@5462)
                $k@5466)
              $k@5484)
            $k@5658)
          $k@5676)
        $k@5754)
      $k@5772)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                    $k@5444)
                  $k@5462)
                $k@5466)
              $k@5484)
            $k@5658)
          $k@5676)
        $k@5754)
      $k@5772)
    $Perm.No)))
(assert (not (= $t@5769 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 16
(assert (not (= $t@5766 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not (= $t@5766 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 16
(push) ; 16
; [then-branch 664] $t@5766 != Null
(assert (not (= $t@5766 $Ref.null)))
(declare-const $k@5773 $Perm)
(assert ($Perm.isValidVar $k@5773))
(assert ($Perm.isReadVar $k@5773 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                  $k@5445)
                $k@5463)
              $k@5467)
            $k@5655)
          $k@5659)
        $k@5751)
      $k@5755))
  (= $t@5762 $t@5666)))
(declare-const $k@5774 $Perm)
(assert ($Perm.isValidVar $k@5774))
(assert ($Perm.isReadVar $k@5774 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                  $k@5446)
                $k@5464)
              $k@5468)
            $k@5656)
          $k@5660)
        $k@5752)
      $k@5756))
  (= $t@5760 $t@5664)))
; [exec]
; o := __flatten_78
; [exec]
; __flatten_79 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@5775 $Perm)
(assert ($Perm.isValidVar $k@5775))
(assert ($Perm.isReadVar $k@5775 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@5775 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@5775
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                  $k@5443)
                $k@5461)
              $k@5465)
            $k@5483)
          $k@5657)
        $k@5675)
      $k@5753)
    $k@5771)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@5776 $Perm)
(assert ($Perm.isValidVar $k@5776))
(assert ($Perm.isReadVar $k@5776 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@5776 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@5776
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                  $k@5444)
                $k@5462)
              $k@5466)
            $k@5484)
          $k@5658)
        $k@5676)
      $k@5754)
    $k@5772)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 17
(assert (not (= $t@5766 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 17
(push) ; 17
; [then-branch 665] $t@5766 != Null
(declare-const $k@5777 $Perm)
(assert ($Perm.isValidVar $k@5777))
(assert ($Perm.isReadVar $k@5777 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@5777 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                    $k@5445)
                  $k@5463)
                $k@5467)
              $k@5655)
            $k@5659)
          $k@5751)
        $k@5755)
      $k@5773)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                    $k@5445)
                  $k@5463)
                $k@5467)
              $k@5655)
            $k@5659)
          $k@5751)
        $k@5755)
      $k@5773)
    $Perm.No)))
(assert (<
  $k@5777
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                  $k@5445)
                $k@5463)
              $k@5467)
            $k@5655)
          $k@5659)
        $k@5751)
      $k@5755)
    $k@5773)))
(declare-const $k@5778 $Perm)
(assert ($Perm.isValidVar $k@5778))
(assert ($Perm.isReadVar $k@5778 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@5778 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                    $k@5446)
                  $k@5464)
                $k@5468)
              $k@5656)
            $k@5660)
          $k@5752)
        $k@5756)
      $k@5774)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                    $k@5446)
                  $k@5464)
                $k@5468)
              $k@5656)
            $k@5660)
          $k@5752)
        $k@5756)
      $k@5774)
    $Perm.No)))
(assert (<
  $k@5778
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                  $k@5446)
                $k@5464)
              $k@5468)
            $k@5656)
          $k@5660)
        $k@5752)
      $k@5756)
    $k@5774)))
(declare-const sys__result@5779 $Ref)
(declare-const $t@5780 $Snap)
(declare-const $t@5781 $Snap)
(declare-const $t@5782 $Ref)
(assert (= $t@5780 ($Snap.combine $t@5781 ($SortWrappers.$RefTo$Snap $t@5782))))
(declare-const $t@5783 $Snap)
(declare-const $t@5784 $Ref)
(assert (= $t@5781 ($Snap.combine $t@5783 ($SortWrappers.$RefTo$Snap $t@5784))))
(declare-const $t@5785 $Snap)
(declare-const $t@5786 $Snap)
(assert (= $t@5783 ($Snap.combine $t@5785 $t@5786)))
(declare-const $t@5787 $Snap)
(declare-const $t@5788 $Ref)
(assert (= $t@5785 ($Snap.combine $t@5787 ($SortWrappers.$RefTo$Snap $t@5788))))
(declare-const $t@5789 $Snap)
(assert (= $t@5787 ($Snap.combine $t@5789 $Snap.unit)))
(declare-const $t@5790 Int)
(declare-const $t@5791 $Ref)
(assert (=
  $t@5789
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@5790)
    ($SortWrappers.$RefTo$Snap $t@5791))))
(declare-const $t@5792 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@5790)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@5792) $Snap.unit)))
(declare-const $k@5793 $Perm)
(assert ($Perm.isValidVar $k@5793))
(assert ($Perm.isReadVar $k@5793 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                      $k@5443)
                    $k@5461)
                  $k@5465)
                $k@5483)
              $k@5657)
            $k@5675)
          $k@5753)
        $k@5771)
      $k@5775))
  (= $t@5792 $t@5770)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                        $k@5443)
                      $k@5461)
                    $k@5465)
                  $k@5483)
                $k@5657)
              $k@5675)
            $k@5753)
          $k@5771)
        $k@5775)
      $k@5793)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                        $k@5443)
                      $k@5461)
                    $k@5465)
                  $k@5483)
                $k@5657)
              $k@5675)
            $k@5753)
          $k@5771)
        $k@5775)
      $k@5793)
    $Perm.No)))
(assert (> $t@5792 0))
(declare-const $k@5794 $Perm)
(assert ($Perm.isValidVar $k@5794))
(assert ($Perm.isReadVar $k@5794 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                      $k@5444)
                    $k@5462)
                  $k@5466)
                $k@5484)
              $k@5658)
            $k@5676)
          $k@5754)
        $k@5772)
      $k@5776))
  (= $t@5791 $t@5769)))
; [eval] diz.BlockingQueue__count != null
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                        $k@5444)
                      $k@5462)
                    $k@5466)
                  $k@5484)
                $k@5658)
              $k@5676)
            $k@5754)
          $k@5772)
        $k@5776)
      $k@5794)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                        $k@5444)
                      $k@5462)
                    $k@5466)
                  $k@5484)
                $k@5658)
              $k@5676)
            $k@5754)
          $k@5772)
        $k@5776)
      $k@5794)
    $Perm.No)))
(assert (not (= $t@5791 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 18
(assert (not (= $t@5788 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not (= $t@5788 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
; [then-branch 666] $t@5788 != Null
(assert (not (= $t@5788 $Ref.null)))
(declare-const $k@5795 $Perm)
(assert ($Perm.isValidVar $k@5795))
(assert ($Perm.isReadVar $k@5795 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                      $k@5445)
                    $k@5463)
                  $k@5467)
                $k@5655)
              $k@5659)
            $k@5751)
          $k@5755)
        $k@5773)
      $k@5777))
  (= $t@5784 $t@5762)))
(declare-const $k@5796 $Perm)
(assert ($Perm.isValidVar $k@5796))
(assert ($Perm.isReadVar $k@5796 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                      $k@5446)
                    $k@5464)
                  $k@5468)
                $k@5656)
              $k@5660)
            $k@5752)
          $k@5756)
        $k@5774)
      $k@5778))
  (= $t@5782 $t@5760)))
; [exec]
; p := __flatten_79
(pop) ; 18
(push) ; 18
; [else-branch 666] $t@5788 == Null
(assert (= $t@5788 $Ref.null))
(declare-const $k@5797 $Perm)
(assert ($Perm.isValidVar $k@5797))
(assert ($Perm.isReadVar $k@5797 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                      $k@5445)
                    $k@5463)
                  $k@5467)
                $k@5655)
              $k@5659)
            $k@5751)
          $k@5755)
        $k@5773)
      $k@5777))
  (= $t@5784 $t@5762)))
(declare-const $k@5798 $Perm)
(assert ($Perm.isValidVar $k@5798))
(assert ($Perm.isReadVar $k@5798 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                      $k@5446)
                    $k@5464)
                  $k@5468)
                $k@5656)
              $k@5660)
            $k@5752)
          $k@5756)
        $k@5774)
      $k@5778))
  (= $t@5782 $t@5760)))
; [exec]
; p := __flatten_79
(pop) ; 18
(pop) ; 17
; [dead else-branch 665] $t@5766 == Null
(pop) ; 16
(push) ; 16
; [else-branch 664] $t@5766 == Null
(assert (= $t@5766 $Ref.null))
(declare-const $k@5799 $Perm)
(assert ($Perm.isValidVar $k@5799))
(assert ($Perm.isReadVar $k@5799 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                  $k@5445)
                $k@5463)
              $k@5467)
            $k@5655)
          $k@5659)
        $k@5751)
      $k@5755))
  (= $t@5762 $t@5666)))
(declare-const $k@5800 $Perm)
(assert ($Perm.isValidVar $k@5800))
(assert ($Perm.isReadVar $k@5800 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                  $k@5446)
                $k@5464)
              $k@5468)
            $k@5656)
          $k@5660)
        $k@5752)
      $k@5756))
  (= $t@5760 $t@5664)))
; [exec]
; o := __flatten_78
; [exec]
; __flatten_79 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@5801 $Perm)
(assert ($Perm.isValidVar $k@5801))
(assert ($Perm.isReadVar $k@5801 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@5801 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@5801
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                  $k@5443)
                $k@5461)
              $k@5465)
            $k@5483)
          $k@5657)
        $k@5675)
      $k@5753)
    $k@5771)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@5802 $Perm)
(assert ($Perm.isValidVar $k@5802))
(assert ($Perm.isReadVar $k@5802 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@5802 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@5802
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                  $k@5444)
                $k@5462)
              $k@5466)
            $k@5484)
          $k@5658)
        $k@5676)
      $k@5754)
    $k@5772)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 17
(assert (not (not (= $t@5766 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 17
; [dead then-branch 667] $t@5766 != Null
(push) ; 17
; [else-branch 667] $t@5766 == Null
(declare-const $k@5803 $Perm)
(assert ($Perm.isValidVar $k@5803))
(assert ($Perm.isReadVar $k@5803 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@5803 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                    $k@5445)
                  $k@5463)
                $k@5467)
              $k@5655)
            $k@5659)
          $k@5751)
        $k@5755)
      $k@5799)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                    $k@5445)
                  $k@5463)
                $k@5467)
              $k@5655)
            $k@5659)
          $k@5751)
        $k@5755)
      $k@5799)
    $Perm.No)))
(assert (<
  $k@5803
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                  $k@5445)
                $k@5463)
              $k@5467)
            $k@5655)
          $k@5659)
        $k@5751)
      $k@5755)
    $k@5799)))
(declare-const $k@5804 $Perm)
(assert ($Perm.isValidVar $k@5804))
(assert ($Perm.isReadVar $k@5804 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@5804 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                    $k@5446)
                  $k@5464)
                $k@5468)
              $k@5656)
            $k@5660)
          $k@5752)
        $k@5756)
      $k@5800)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                    $k@5446)
                  $k@5464)
                $k@5468)
              $k@5656)
            $k@5660)
          $k@5752)
        $k@5756)
      $k@5800)
    $Perm.No)))
(assert (<
  $k@5804
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                  $k@5446)
                $k@5464)
              $k@5468)
            $k@5656)
          $k@5660)
        $k@5752)
      $k@5756)
    $k@5800)))
(declare-const sys__result@5805 $Ref)
(declare-const $t@5806 $Snap)
(declare-const $t@5807 $Snap)
(declare-const $t@5808 $Ref)
(assert (= $t@5806 ($Snap.combine $t@5807 ($SortWrappers.$RefTo$Snap $t@5808))))
(declare-const $t@5809 $Snap)
(declare-const $t@5810 $Ref)
(assert (= $t@5807 ($Snap.combine $t@5809 ($SortWrappers.$RefTo$Snap $t@5810))))
(declare-const $t@5811 $Snap)
(declare-const $t@5812 $Snap)
(assert (= $t@5809 ($Snap.combine $t@5811 $t@5812)))
(declare-const $t@5813 $Snap)
(declare-const $t@5814 $Ref)
(assert (= $t@5811 ($Snap.combine $t@5813 ($SortWrappers.$RefTo$Snap $t@5814))))
(declare-const $t@5815 $Snap)
(assert (= $t@5813 ($Snap.combine $t@5815 $Snap.unit)))
(declare-const $t@5816 Int)
(declare-const $t@5817 $Ref)
(assert (=
  $t@5815
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@5816)
    ($SortWrappers.$RefTo$Snap $t@5817))))
(declare-const $t@5818 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@5816)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@5818) $Snap.unit)))
(declare-const $k@5819 $Perm)
(assert ($Perm.isValidVar $k@5819))
(assert ($Perm.isReadVar $k@5819 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                      $k@5443)
                    $k@5461)
                  $k@5465)
                $k@5483)
              $k@5657)
            $k@5675)
          $k@5753)
        $k@5771)
      $k@5801))
  (= $t@5818 $t@5770)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                        $k@5443)
                      $k@5461)
                    $k@5465)
                  $k@5483)
                $k@5657)
              $k@5675)
            $k@5753)
          $k@5771)
        $k@5801)
      $k@5819)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                        $k@5443)
                      $k@5461)
                    $k@5465)
                  $k@5483)
                $k@5657)
              $k@5675)
            $k@5753)
          $k@5771)
        $k@5801)
      $k@5819)
    $Perm.No)))
(assert (> $t@5818 0))
(declare-const $k@5820 $Perm)
(assert ($Perm.isValidVar $k@5820))
(assert ($Perm.isReadVar $k@5820 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                      $k@5444)
                    $k@5462)
                  $k@5466)
                $k@5484)
              $k@5658)
            $k@5676)
          $k@5754)
        $k@5772)
      $k@5802))
  (= $t@5817 $t@5769)))
; [eval] diz.BlockingQueue__count != null
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                        $k@5444)
                      $k@5462)
                    $k@5466)
                  $k@5484)
                $k@5658)
              $k@5676)
            $k@5754)
          $k@5772)
        $k@5802)
      $k@5820)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                        $k@5444)
                      $k@5462)
                    $k@5466)
                  $k@5484)
                $k@5658)
              $k@5676)
            $k@5754)
          $k@5772)
        $k@5802)
      $k@5820)
    $Perm.No)))
(assert (not (= $t@5817 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 18
(assert (not (= $t@5814 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not (= $t@5814 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
; [then-branch 668] $t@5814 != Null
(assert (not (= $t@5814 $Ref.null)))
(declare-const $k@5821 $Perm)
(assert ($Perm.isValidVar $k@5821))
(assert ($Perm.isReadVar $k@5821 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                      $k@5445)
                    $k@5463)
                  $k@5467)
                $k@5655)
              $k@5659)
            $k@5751)
          $k@5755)
        $k@5799)
      $k@5803))
  (= $t@5810 $t@5762)))
(declare-const $k@5822 $Perm)
(assert ($Perm.isValidVar $k@5822))
(assert ($Perm.isReadVar $k@5822 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                      $k@5446)
                    $k@5464)
                  $k@5468)
                $k@5656)
              $k@5660)
            $k@5752)
          $k@5756)
        $k@5800)
      $k@5804))
  (= $t@5808 $t@5760)))
; [exec]
; p := __flatten_79
(pop) ; 18
(push) ; 18
; [else-branch 668] $t@5814 == Null
(assert (= $t@5814 $Ref.null))
(declare-const $k@5823 $Perm)
(assert ($Perm.isValidVar $k@5823))
(assert ($Perm.isReadVar $k@5823 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                      $k@5445)
                    $k@5463)
                  $k@5467)
                $k@5655)
              $k@5659)
            $k@5751)
          $k@5755)
        $k@5799)
      $k@5803))
  (= $t@5810 $t@5762)))
(declare-const $k@5824 $Perm)
(assert ($Perm.isValidVar $k@5824))
(assert ($Perm.isReadVar $k@5824 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                      $k@5446)
                    $k@5464)
                  $k@5468)
                $k@5656)
              $k@5660)
            $k@5752)
          $k@5756)
        $k@5800)
      $k@5804))
  (= $t@5808 $t@5760)))
; [exec]
; p := __flatten_79
(pop) ; 18
(pop) ; 17
(pop) ; 16
(pop) ; 15
(pop) ; 14
(pop) ; 13
(pop) ; 12
(pop) ; 11
; [dead else-branch 639] $t@5456 == Null
(pop) ; 10
(push) ; 10
; [else-branch 638] $t@5456 == Null
(assert (= $t@5456 $Ref.null))
(declare-const $k@5825 $Perm)
(assert ($Perm.isValidVar $k@5825))
(assert ($Perm.isReadVar $k@5825 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441) $k@5445))
  (= $t@5452 $t@4684)))
(declare-const $k@5826 $Perm)
(assert ($Perm.isValidVar $k@5826))
(assert ($Perm.isReadVar $k@5826 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442) $k@5446))
  (= $t@5450 $t@4682)))
; [exec]
; m := __flatten_75
; [exec]
; __flatten_76 := BlockingQueue__offer(queue, 7)
; [eval] diz != null
(declare-const $k@5827 $Perm)
(assert ($Perm.isValidVar $k@5827))
(assert ($Perm.isReadVar $k@5827 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@5827 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (<
  $k@5827
  (+ (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693) $k@5443) $k@5461)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@5828 $Perm)
(assert ($Perm.isValidVar $k@5828))
(assert ($Perm.isReadVar $k@5828 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@5828 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (<
  $k@5828
  (+ (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694) $k@5444) $k@5462)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 11
(assert (not (not (= $t@5456 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 11
; [dead then-branch 669] $t@5456 != Null
(push) ; 11
; [else-branch 669] $t@5456 == Null
(declare-const $k@5829 $Perm)
(assert ($Perm.isValidVar $k@5829))
(assert ($Perm.isReadVar $k@5829 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@5829 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(push) ; 12
(assert (not (not
  (=
    (+
      (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441) $k@5445)
      $k@5825)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441) $k@5445)
      $k@5825)
    $Perm.No)))
(assert (<
  $k@5829
  (+ (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441) $k@5445) $k@5825)))
(declare-const $k@5830 $Perm)
(assert ($Perm.isValidVar $k@5830))
(assert ($Perm.isReadVar $k@5830 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@5830 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(push) ; 12
(assert (not (not
  (=
    (+
      (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442) $k@5446)
      $k@5826)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442) $k@5446)
      $k@5826)
    $Perm.No)))
(assert (<
  $k@5830
  (+ (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442) $k@5446) $k@5826)))
(declare-const sys__result@5831 Bool)
(declare-const $t@5832 $Snap)
(declare-const $t@5833 $Snap)
(declare-const $t@5834 $Ref)
(assert (= $t@5832 ($Snap.combine $t@5833 ($SortWrappers.$RefTo$Snap $t@5834))))
(declare-const $t@5835 $Snap)
(declare-const $t@5836 $Ref)
(assert (= $t@5833 ($Snap.combine $t@5835 ($SortWrappers.$RefTo$Snap $t@5836))))
(declare-const $t@5837 $Snap)
(declare-const $t@5838 $Snap)
(assert (= $t@5835 ($Snap.combine $t@5837 $t@5838)))
(declare-const $t@5839 $Snap)
(declare-const $t@5840 $Ref)
(assert (= $t@5837 ($Snap.combine $t@5839 ($SortWrappers.$RefTo$Snap $t@5840))))
(declare-const $t@5841 $Snap)
(assert (= $t@5839 ($Snap.combine $t@5841 $Snap.unit)))
(declare-const $t@5842 Int)
(declare-const $t@5843 $Ref)
(assert (=
  $t@5841
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@5842)
    ($SortWrappers.$RefTo$Snap $t@5843))))
(declare-const $t@5844 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@5842)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@5844) $Snap.unit)))
(declare-const $k@5845 $Perm)
(assert ($Perm.isValidVar $k@5845))
(assert ($Perm.isReadVar $k@5845 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693) $k@5443)
        $k@5461)
      $k@5827))
  (= $t@5844 $t@5460)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 12
(assert (not (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693) $k@5443)
          $k@5461)
        $k@5827)
      $k@5845)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693) $k@5443)
          $k@5461)
        $k@5827)
      $k@5845)
    $Perm.No)))
(assert (> $t@5844 0))
(declare-const $k@5846 $Perm)
(assert ($Perm.isValidVar $k@5846))
(assert ($Perm.isReadVar $k@5846 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694) $k@5444)
        $k@5462)
      $k@5828))
  (= $t@5843 $t@5459)))
; [eval] diz.BlockingQueue__count != null
(push) ; 12
(assert (not (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694) $k@5444)
          $k@5462)
        $k@5828)
      $k@5846)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694) $k@5444)
          $k@5462)
        $k@5828)
      $k@5846)
    $Perm.No)))
(assert (not (= $t@5843 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 12
(assert (not (= $t@5840 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 12
(push) ; 12
(assert (not (not (= $t@5840 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 12
(push) ; 12
; [then-branch 670] $t@5840 != Null
(assert (not (= $t@5840 $Ref.null)))
(declare-const $k@5847 $Perm)
(assert ($Perm.isValidVar $k@5847))
(assert ($Perm.isReadVar $k@5847 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441) $k@5445)
        $k@5825)
      $k@5829))
  (= $t@5836 $t@5452)))
(declare-const $k@5848 $Perm)
(assert ($Perm.isValidVar $k@5848))
(assert ($Perm.isReadVar $k@5848 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442) $k@5446)
        $k@5826)
      $k@5830))
  (= $t@5834 $t@5450)))
; [exec]
; b := __flatten_76
; [exec]
; __flatten_77 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@5849 $Perm)
(assert ($Perm.isValidVar $k@5849))
(assert ($Perm.isReadVar $k@5849 $Perm.Write))
(push) ; 13
(assert (not (or (= $k@5849 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 13
(assert (<
  $k@5849
  (+
    (-
      (+
        (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693) $k@5443)
        $k@5461)
      $k@5827)
    $k@5845)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@5850 $Perm)
(assert ($Perm.isValidVar $k@5850))
(assert ($Perm.isReadVar $k@5850 $Perm.Write))
(push) ; 13
(assert (not (or (= $k@5850 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 13
(assert (<
  $k@5850
  (+
    (-
      (+
        (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694) $k@5444)
        $k@5462)
      $k@5828)
    $k@5846)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 13
(assert (not (= $t@5840 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 13
(push) ; 13
; [then-branch 671] $t@5840 != Null
(declare-const $k@5851 $Perm)
(assert ($Perm.isValidVar $k@5851))
(assert ($Perm.isReadVar $k@5851 $Perm.Write))
(push) ; 14
(assert (not (or (= $k@5851 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(push) ; 14
(assert (not (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441) $k@5445)
          $k@5825)
        $k@5829)
      $k@5847)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(assert (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441) $k@5445)
          $k@5825)
        $k@5829)
      $k@5847)
    $Perm.No)))
(assert (<
  $k@5851
  (+
    (-
      (+
        (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441) $k@5445)
        $k@5825)
      $k@5829)
    $k@5847)))
(declare-const $k@5852 $Perm)
(assert ($Perm.isValidVar $k@5852))
(assert ($Perm.isReadVar $k@5852 $Perm.Write))
(push) ; 14
(assert (not (or (= $k@5852 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(push) ; 14
(assert (not (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442) $k@5446)
          $k@5826)
        $k@5830)
      $k@5848)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(assert (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442) $k@5446)
          $k@5826)
        $k@5830)
      $k@5848)
    $Perm.No)))
(assert (<
  $k@5852
  (+
    (-
      (+
        (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442) $k@5446)
        $k@5826)
      $k@5830)
    $k@5848)))
(declare-const sys__result@5853 $Ref)
(declare-const $t@5854 $Snap)
(declare-const $t@5855 $Snap)
(declare-const $t@5856 $Ref)
(assert (= $t@5854 ($Snap.combine $t@5855 ($SortWrappers.$RefTo$Snap $t@5856))))
(declare-const $t@5857 $Snap)
(declare-const $t@5858 $Ref)
(assert (= $t@5855 ($Snap.combine $t@5857 ($SortWrappers.$RefTo$Snap $t@5858))))
(declare-const $t@5859 $Snap)
(declare-const $t@5860 $Snap)
(assert (= $t@5857 ($Snap.combine $t@5859 $t@5860)))
(declare-const $t@5861 $Snap)
(declare-const $t@5862 $Ref)
(assert (= $t@5859 ($Snap.combine $t@5861 ($SortWrappers.$RefTo$Snap $t@5862))))
(declare-const $t@5863 $Snap)
(assert (= $t@5861 ($Snap.combine $t@5863 $Snap.unit)))
(declare-const $t@5864 Int)
(declare-const $t@5865 $Ref)
(assert (=
  $t@5863
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@5864)
    ($SortWrappers.$RefTo$Snap $t@5865))))
(declare-const $t@5866 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@5864)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@5866) $Snap.unit)))
(declare-const $k@5867 $Perm)
(assert ($Perm.isValidVar $k@5867))
(assert ($Perm.isReadVar $k@5867 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693) $k@5443)
            $k@5461)
          $k@5827)
        $k@5845)
      $k@5849))
  (= $t@5866 $t@5844)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 14
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693) $k@5443)
              $k@5461)
            $k@5827)
          $k@5845)
        $k@5849)
      $k@5867)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693) $k@5443)
              $k@5461)
            $k@5827)
          $k@5845)
        $k@5849)
      $k@5867)
    $Perm.No)))
(assert (> $t@5866 0))
(declare-const $k@5868 $Perm)
(assert ($Perm.isValidVar $k@5868))
(assert ($Perm.isReadVar $k@5868 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694) $k@5444)
            $k@5462)
          $k@5828)
        $k@5846)
      $k@5850))
  (= $t@5865 $t@5843)))
; [eval] diz.BlockingQueue__count != null
(push) ; 14
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694) $k@5444)
              $k@5462)
            $k@5828)
          $k@5846)
        $k@5850)
      $k@5868)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694) $k@5444)
              $k@5462)
            $k@5828)
          $k@5846)
        $k@5850)
      $k@5868)
    $Perm.No)))
(assert (not (= $t@5865 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 14
(assert (not (= $t@5862 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 14
(push) ; 14
(assert (not (not (= $t@5862 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 14
(push) ; 14
; [then-branch 672] $t@5862 != Null
(assert (not (= $t@5862 $Ref.null)))
(declare-const $k@5869 $Perm)
(assert ($Perm.isValidVar $k@5869))
(assert ($Perm.isReadVar $k@5869 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441) $k@5445)
            $k@5825)
          $k@5829)
        $k@5847)
      $k@5851))
  (= $t@5858 $t@5836)))
(declare-const $k@5870 $Perm)
(assert ($Perm.isValidVar $k@5870))
(assert ($Perm.isReadVar $k@5870 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442) $k@5446)
            $k@5826)
          $k@5830)
        $k@5848)
      $k@5852))
  (= $t@5856 $t@5834)))
; [exec]
; n := __flatten_77
; [exec]
; __flatten_78 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@5871 $Perm)
(assert ($Perm.isValidVar $k@5871))
(assert ($Perm.isReadVar $k@5871 $Perm.Write))
(push) ; 15
(assert (not (or (= $k@5871 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 15
(assert (<
  $k@5871
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693) $k@5443)
            $k@5461)
          $k@5827)
        $k@5845)
      $k@5849)
    $k@5867)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@5872 $Perm)
(assert ($Perm.isValidVar $k@5872))
(assert ($Perm.isReadVar $k@5872 $Perm.Write))
(push) ; 15
(assert (not (or (= $k@5872 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 15
(assert (<
  $k@5872
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694) $k@5444)
            $k@5462)
          $k@5828)
        $k@5846)
      $k@5850)
    $k@5868)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 15
(assert (not (= $t@5862 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 15
(push) ; 15
; [then-branch 673] $t@5862 != Null
(declare-const $k@5873 $Perm)
(assert ($Perm.isValidVar $k@5873))
(assert ($Perm.isReadVar $k@5873 $Perm.Write))
(push) ; 16
(assert (not (or (= $k@5873 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441) $k@5445)
              $k@5825)
            $k@5829)
          $k@5847)
        $k@5851)
      $k@5869)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441) $k@5445)
              $k@5825)
            $k@5829)
          $k@5847)
        $k@5851)
      $k@5869)
    $Perm.No)))
(assert (<
  $k@5873
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441) $k@5445)
            $k@5825)
          $k@5829)
        $k@5847)
      $k@5851)
    $k@5869)))
(declare-const $k@5874 $Perm)
(assert ($Perm.isValidVar $k@5874))
(assert ($Perm.isReadVar $k@5874 $Perm.Write))
(push) ; 16
(assert (not (or (= $k@5874 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442) $k@5446)
              $k@5826)
            $k@5830)
          $k@5848)
        $k@5852)
      $k@5870)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442) $k@5446)
              $k@5826)
            $k@5830)
          $k@5848)
        $k@5852)
      $k@5870)
    $Perm.No)))
(assert (<
  $k@5874
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442) $k@5446)
            $k@5826)
          $k@5830)
        $k@5848)
      $k@5852)
    $k@5870)))
(declare-const sys__result@5875 $Ref)
(declare-const $t@5876 $Snap)
(declare-const $t@5877 $Snap)
(declare-const $t@5878 $Ref)
(assert (= $t@5876 ($Snap.combine $t@5877 ($SortWrappers.$RefTo$Snap $t@5878))))
(declare-const $t@5879 $Snap)
(declare-const $t@5880 $Ref)
(assert (= $t@5877 ($Snap.combine $t@5879 ($SortWrappers.$RefTo$Snap $t@5880))))
(declare-const $t@5881 $Snap)
(declare-const $t@5882 $Snap)
(assert (= $t@5879 ($Snap.combine $t@5881 $t@5882)))
(declare-const $t@5883 $Snap)
(declare-const $t@5884 $Ref)
(assert (= $t@5881 ($Snap.combine $t@5883 ($SortWrappers.$RefTo$Snap $t@5884))))
(declare-const $t@5885 $Snap)
(assert (= $t@5883 ($Snap.combine $t@5885 $Snap.unit)))
(declare-const $t@5886 Int)
(declare-const $t@5887 $Ref)
(assert (=
  $t@5885
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@5886)
    ($SortWrappers.$RefTo$Snap $t@5887))))
(declare-const $t@5888 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@5886)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@5888) $Snap.unit)))
(declare-const $k@5889 $Perm)
(assert ($Perm.isValidVar $k@5889))
(assert ($Perm.isReadVar $k@5889 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                  $k@5443)
                $k@5461)
              $k@5827)
            $k@5845)
          $k@5849)
        $k@5867)
      $k@5871))
  (= $t@5888 $t@5866)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                    $k@5443)
                  $k@5461)
                $k@5827)
              $k@5845)
            $k@5849)
          $k@5867)
        $k@5871)
      $k@5889)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                    $k@5443)
                  $k@5461)
                $k@5827)
              $k@5845)
            $k@5849)
          $k@5867)
        $k@5871)
      $k@5889)
    $Perm.No)))
(assert (> $t@5888 0))
(declare-const $k@5890 $Perm)
(assert ($Perm.isValidVar $k@5890))
(assert ($Perm.isReadVar $k@5890 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                  $k@5444)
                $k@5462)
              $k@5828)
            $k@5846)
          $k@5850)
        $k@5868)
      $k@5872))
  (= $t@5887 $t@5865)))
; [eval] diz.BlockingQueue__count != null
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                    $k@5444)
                  $k@5462)
                $k@5828)
              $k@5846)
            $k@5850)
          $k@5868)
        $k@5872)
      $k@5890)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                    $k@5444)
                  $k@5462)
                $k@5828)
              $k@5846)
            $k@5850)
          $k@5868)
        $k@5872)
      $k@5890)
    $Perm.No)))
(assert (not (= $t@5887 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 16
(assert (not (= $t@5884 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not (= $t@5884 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 16
(push) ; 16
; [then-branch 674] $t@5884 != Null
(assert (not (= $t@5884 $Ref.null)))
(declare-const $k@5891 $Perm)
(assert ($Perm.isValidVar $k@5891))
(assert ($Perm.isReadVar $k@5891 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                  $k@5445)
                $k@5825)
              $k@5829)
            $k@5847)
          $k@5851)
        $k@5869)
      $k@5873))
  (= $t@5880 $t@5858)))
(declare-const $k@5892 $Perm)
(assert ($Perm.isValidVar $k@5892))
(assert ($Perm.isReadVar $k@5892 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                  $k@5446)
                $k@5826)
              $k@5830)
            $k@5848)
          $k@5852)
        $k@5870)
      $k@5874))
  (= $t@5878 $t@5856)))
; [exec]
; o := __flatten_78
; [exec]
; __flatten_79 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@5893 $Perm)
(assert ($Perm.isValidVar $k@5893))
(assert ($Perm.isReadVar $k@5893 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@5893 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@5893
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                  $k@5443)
                $k@5461)
              $k@5827)
            $k@5845)
          $k@5849)
        $k@5867)
      $k@5871)
    $k@5889)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@5894 $Perm)
(assert ($Perm.isValidVar $k@5894))
(assert ($Perm.isReadVar $k@5894 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@5894 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@5894
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                  $k@5444)
                $k@5462)
              $k@5828)
            $k@5846)
          $k@5850)
        $k@5868)
      $k@5872)
    $k@5890)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 17
(assert (not (= $t@5884 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 17
(push) ; 17
; [then-branch 675] $t@5884 != Null
(declare-const $k@5895 $Perm)
(assert ($Perm.isValidVar $k@5895))
(assert ($Perm.isReadVar $k@5895 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@5895 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                    $k@5445)
                  $k@5825)
                $k@5829)
              $k@5847)
            $k@5851)
          $k@5869)
        $k@5873)
      $k@5891)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                    $k@5445)
                  $k@5825)
                $k@5829)
              $k@5847)
            $k@5851)
          $k@5869)
        $k@5873)
      $k@5891)
    $Perm.No)))
(assert (<
  $k@5895
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                  $k@5445)
                $k@5825)
              $k@5829)
            $k@5847)
          $k@5851)
        $k@5869)
      $k@5873)
    $k@5891)))
(declare-const $k@5896 $Perm)
(assert ($Perm.isValidVar $k@5896))
(assert ($Perm.isReadVar $k@5896 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@5896 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                    $k@5446)
                  $k@5826)
                $k@5830)
              $k@5848)
            $k@5852)
          $k@5870)
        $k@5874)
      $k@5892)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                    $k@5446)
                  $k@5826)
                $k@5830)
              $k@5848)
            $k@5852)
          $k@5870)
        $k@5874)
      $k@5892)
    $Perm.No)))
(assert (<
  $k@5896
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                  $k@5446)
                $k@5826)
              $k@5830)
            $k@5848)
          $k@5852)
        $k@5870)
      $k@5874)
    $k@5892)))
(declare-const sys__result@5897 $Ref)
(declare-const $t@5898 $Snap)
(declare-const $t@5899 $Snap)
(declare-const $t@5900 $Ref)
(assert (= $t@5898 ($Snap.combine $t@5899 ($SortWrappers.$RefTo$Snap $t@5900))))
(declare-const $t@5901 $Snap)
(declare-const $t@5902 $Ref)
(assert (= $t@5899 ($Snap.combine $t@5901 ($SortWrappers.$RefTo$Snap $t@5902))))
(declare-const $t@5903 $Snap)
(declare-const $t@5904 $Snap)
(assert (= $t@5901 ($Snap.combine $t@5903 $t@5904)))
(declare-const $t@5905 $Snap)
(declare-const $t@5906 $Ref)
(assert (= $t@5903 ($Snap.combine $t@5905 ($SortWrappers.$RefTo$Snap $t@5906))))
(declare-const $t@5907 $Snap)
(assert (= $t@5905 ($Snap.combine $t@5907 $Snap.unit)))
(declare-const $t@5908 Int)
(declare-const $t@5909 $Ref)
(assert (=
  $t@5907
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@5908)
    ($SortWrappers.$RefTo$Snap $t@5909))))
(declare-const $t@5910 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@5908)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@5910) $Snap.unit)))
(declare-const $k@5911 $Perm)
(assert ($Perm.isValidVar $k@5911))
(assert ($Perm.isReadVar $k@5911 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                      $k@5443)
                    $k@5461)
                  $k@5827)
                $k@5845)
              $k@5849)
            $k@5867)
          $k@5871)
        $k@5889)
      $k@5893))
  (= $t@5910 $t@5888)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                        $k@5443)
                      $k@5461)
                    $k@5827)
                  $k@5845)
                $k@5849)
              $k@5867)
            $k@5871)
          $k@5889)
        $k@5893)
      $k@5911)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                        $k@5443)
                      $k@5461)
                    $k@5827)
                  $k@5845)
                $k@5849)
              $k@5867)
            $k@5871)
          $k@5889)
        $k@5893)
      $k@5911)
    $Perm.No)))
(assert (> $t@5910 0))
(declare-const $k@5912 $Perm)
(assert ($Perm.isValidVar $k@5912))
(assert ($Perm.isReadVar $k@5912 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                      $k@5444)
                    $k@5462)
                  $k@5828)
                $k@5846)
              $k@5850)
            $k@5868)
          $k@5872)
        $k@5890)
      $k@5894))
  (= $t@5909 $t@5887)))
; [eval] diz.BlockingQueue__count != null
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                        $k@5444)
                      $k@5462)
                    $k@5828)
                  $k@5846)
                $k@5850)
              $k@5868)
            $k@5872)
          $k@5890)
        $k@5894)
      $k@5912)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                        $k@5444)
                      $k@5462)
                    $k@5828)
                  $k@5846)
                $k@5850)
              $k@5868)
            $k@5872)
          $k@5890)
        $k@5894)
      $k@5912)
    $Perm.No)))
(assert (not (= $t@5909 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 18
(assert (not (= $t@5906 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not (= $t@5906 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
; [then-branch 676] $t@5906 != Null
(assert (not (= $t@5906 $Ref.null)))
(declare-const $k@5913 $Perm)
(assert ($Perm.isValidVar $k@5913))
(assert ($Perm.isReadVar $k@5913 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                      $k@5445)
                    $k@5825)
                  $k@5829)
                $k@5847)
              $k@5851)
            $k@5869)
          $k@5873)
        $k@5891)
      $k@5895))
  (= $t@5902 $t@5880)))
(declare-const $k@5914 $Perm)
(assert ($Perm.isValidVar $k@5914))
(assert ($Perm.isReadVar $k@5914 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                      $k@5446)
                    $k@5826)
                  $k@5830)
                $k@5848)
              $k@5852)
            $k@5870)
          $k@5874)
        $k@5892)
      $k@5896))
  (= $t@5900 $t@5878)))
; [exec]
; p := __flatten_79
(pop) ; 18
(push) ; 18
; [else-branch 676] $t@5906 == Null
(assert (= $t@5906 $Ref.null))
(declare-const $k@5915 $Perm)
(assert ($Perm.isValidVar $k@5915))
(assert ($Perm.isReadVar $k@5915 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                      $k@5445)
                    $k@5825)
                  $k@5829)
                $k@5847)
              $k@5851)
            $k@5869)
          $k@5873)
        $k@5891)
      $k@5895))
  (= $t@5902 $t@5880)))
(declare-const $k@5916 $Perm)
(assert ($Perm.isValidVar $k@5916))
(assert ($Perm.isReadVar $k@5916 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                      $k@5446)
                    $k@5826)
                  $k@5830)
                $k@5848)
              $k@5852)
            $k@5870)
          $k@5874)
        $k@5892)
      $k@5896))
  (= $t@5900 $t@5878)))
; [exec]
; p := __flatten_79
(pop) ; 18
(pop) ; 17
; [dead else-branch 675] $t@5884 == Null
(pop) ; 16
(push) ; 16
; [else-branch 674] $t@5884 == Null
(assert (= $t@5884 $Ref.null))
(declare-const $k@5917 $Perm)
(assert ($Perm.isValidVar $k@5917))
(assert ($Perm.isReadVar $k@5917 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                  $k@5445)
                $k@5825)
              $k@5829)
            $k@5847)
          $k@5851)
        $k@5869)
      $k@5873))
  (= $t@5880 $t@5858)))
(declare-const $k@5918 $Perm)
(assert ($Perm.isValidVar $k@5918))
(assert ($Perm.isReadVar $k@5918 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                  $k@5446)
                $k@5826)
              $k@5830)
            $k@5848)
          $k@5852)
        $k@5870)
      $k@5874))
  (= $t@5878 $t@5856)))
; [exec]
; o := __flatten_78
; [exec]
; __flatten_79 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@5919 $Perm)
(assert ($Perm.isValidVar $k@5919))
(assert ($Perm.isReadVar $k@5919 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@5919 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@5919
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                  $k@5443)
                $k@5461)
              $k@5827)
            $k@5845)
          $k@5849)
        $k@5867)
      $k@5871)
    $k@5889)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@5920 $Perm)
(assert ($Perm.isValidVar $k@5920))
(assert ($Perm.isReadVar $k@5920 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@5920 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@5920
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                  $k@5444)
                $k@5462)
              $k@5828)
            $k@5846)
          $k@5850)
        $k@5868)
      $k@5872)
    $k@5890)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 17
(assert (not (not (= $t@5884 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 17
; [dead then-branch 677] $t@5884 != Null
(push) ; 17
; [else-branch 677] $t@5884 == Null
(declare-const $k@5921 $Perm)
(assert ($Perm.isValidVar $k@5921))
(assert ($Perm.isReadVar $k@5921 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@5921 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                    $k@5445)
                  $k@5825)
                $k@5829)
              $k@5847)
            $k@5851)
          $k@5869)
        $k@5873)
      $k@5917)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                    $k@5445)
                  $k@5825)
                $k@5829)
              $k@5847)
            $k@5851)
          $k@5869)
        $k@5873)
      $k@5917)
    $Perm.No)))
(assert (<
  $k@5921
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                  $k@5445)
                $k@5825)
              $k@5829)
            $k@5847)
          $k@5851)
        $k@5869)
      $k@5873)
    $k@5917)))
(declare-const $k@5922 $Perm)
(assert ($Perm.isValidVar $k@5922))
(assert ($Perm.isReadVar $k@5922 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@5922 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                    $k@5446)
                  $k@5826)
                $k@5830)
              $k@5848)
            $k@5852)
          $k@5870)
        $k@5874)
      $k@5918)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                    $k@5446)
                  $k@5826)
                $k@5830)
              $k@5848)
            $k@5852)
          $k@5870)
        $k@5874)
      $k@5918)
    $Perm.No)))
(assert (<
  $k@5922
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                  $k@5446)
                $k@5826)
              $k@5830)
            $k@5848)
          $k@5852)
        $k@5870)
      $k@5874)
    $k@5918)))
(declare-const sys__result@5923 $Ref)
(declare-const $t@5924 $Snap)
(declare-const $t@5925 $Snap)
(declare-const $t@5926 $Ref)
(assert (= $t@5924 ($Snap.combine $t@5925 ($SortWrappers.$RefTo$Snap $t@5926))))
(declare-const $t@5927 $Snap)
(declare-const $t@5928 $Ref)
(assert (= $t@5925 ($Snap.combine $t@5927 ($SortWrappers.$RefTo$Snap $t@5928))))
(declare-const $t@5929 $Snap)
(declare-const $t@5930 $Snap)
(assert (= $t@5927 ($Snap.combine $t@5929 $t@5930)))
(declare-const $t@5931 $Snap)
(declare-const $t@5932 $Ref)
(assert (= $t@5929 ($Snap.combine $t@5931 ($SortWrappers.$RefTo$Snap $t@5932))))
(declare-const $t@5933 $Snap)
(assert (= $t@5931 ($Snap.combine $t@5933 $Snap.unit)))
(declare-const $t@5934 Int)
(declare-const $t@5935 $Ref)
(assert (=
  $t@5933
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@5934)
    ($SortWrappers.$RefTo$Snap $t@5935))))
(declare-const $t@5936 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@5934)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@5936) $Snap.unit)))
(declare-const $k@5937 $Perm)
(assert ($Perm.isValidVar $k@5937))
(assert ($Perm.isReadVar $k@5937 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                      $k@5443)
                    $k@5461)
                  $k@5827)
                $k@5845)
              $k@5849)
            $k@5867)
          $k@5871)
        $k@5889)
      $k@5919))
  (= $t@5936 $t@5888)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                        $k@5443)
                      $k@5461)
                    $k@5827)
                  $k@5845)
                $k@5849)
              $k@5867)
            $k@5871)
          $k@5889)
        $k@5919)
      $k@5937)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                        $k@5443)
                      $k@5461)
                    $k@5827)
                  $k@5845)
                $k@5849)
              $k@5867)
            $k@5871)
          $k@5889)
        $k@5919)
      $k@5937)
    $Perm.No)))
(assert (> $t@5936 0))
(declare-const $k@5938 $Perm)
(assert ($Perm.isValidVar $k@5938))
(assert ($Perm.isReadVar $k@5938 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                      $k@5444)
                    $k@5462)
                  $k@5828)
                $k@5846)
              $k@5850)
            $k@5868)
          $k@5872)
        $k@5890)
      $k@5920))
  (= $t@5935 $t@5887)))
; [eval] diz.BlockingQueue__count != null
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                        $k@5444)
                      $k@5462)
                    $k@5828)
                  $k@5846)
                $k@5850)
              $k@5868)
            $k@5872)
          $k@5890)
        $k@5920)
      $k@5938)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                        $k@5444)
                      $k@5462)
                    $k@5828)
                  $k@5846)
                $k@5850)
              $k@5868)
            $k@5872)
          $k@5890)
        $k@5920)
      $k@5938)
    $Perm.No)))
(assert (not (= $t@5935 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 18
(assert (not (= $t@5932 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not (= $t@5932 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
; [then-branch 678] $t@5932 != Null
(assert (not (= $t@5932 $Ref.null)))
(declare-const $k@5939 $Perm)
(assert ($Perm.isValidVar $k@5939))
(assert ($Perm.isReadVar $k@5939 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                      $k@5445)
                    $k@5825)
                  $k@5829)
                $k@5847)
              $k@5851)
            $k@5869)
          $k@5873)
        $k@5917)
      $k@5921))
  (= $t@5928 $t@5880)))
(declare-const $k@5940 $Perm)
(assert ($Perm.isValidVar $k@5940))
(assert ($Perm.isReadVar $k@5940 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                      $k@5446)
                    $k@5826)
                  $k@5830)
                $k@5848)
              $k@5852)
            $k@5870)
          $k@5874)
        $k@5918)
      $k@5922))
  (= $t@5926 $t@5878)))
; [exec]
; p := __flatten_79
(pop) ; 18
(push) ; 18
; [else-branch 678] $t@5932 == Null
(assert (= $t@5932 $Ref.null))
(declare-const $k@5941 $Perm)
(assert ($Perm.isValidVar $k@5941))
(assert ($Perm.isReadVar $k@5941 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                      $k@5445)
                    $k@5825)
                  $k@5829)
                $k@5847)
              $k@5851)
            $k@5869)
          $k@5873)
        $k@5917)
      $k@5921))
  (= $t@5928 $t@5880)))
(declare-const $k@5942 $Perm)
(assert ($Perm.isValidVar $k@5942))
(assert ($Perm.isReadVar $k@5942 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                      $k@5446)
                    $k@5826)
                  $k@5830)
                $k@5848)
              $k@5852)
            $k@5870)
          $k@5874)
        $k@5918)
      $k@5922))
  (= $t@5926 $t@5878)))
; [exec]
; p := __flatten_79
(pop) ; 18
(pop) ; 17
(pop) ; 16
(pop) ; 15
; [dead else-branch 673] $t@5862 == Null
(pop) ; 14
(push) ; 14
; [else-branch 672] $t@5862 == Null
(assert (= $t@5862 $Ref.null))
(declare-const $k@5943 $Perm)
(assert ($Perm.isValidVar $k@5943))
(assert ($Perm.isReadVar $k@5943 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441) $k@5445)
            $k@5825)
          $k@5829)
        $k@5847)
      $k@5851))
  (= $t@5858 $t@5836)))
(declare-const $k@5944 $Perm)
(assert ($Perm.isValidVar $k@5944))
(assert ($Perm.isReadVar $k@5944 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442) $k@5446)
            $k@5826)
          $k@5830)
        $k@5848)
      $k@5852))
  (= $t@5856 $t@5834)))
; [exec]
; n := __flatten_77
; [exec]
; __flatten_78 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@5945 $Perm)
(assert ($Perm.isValidVar $k@5945))
(assert ($Perm.isReadVar $k@5945 $Perm.Write))
(push) ; 15
(assert (not (or (= $k@5945 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 15
(assert (<
  $k@5945
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693) $k@5443)
            $k@5461)
          $k@5827)
        $k@5845)
      $k@5849)
    $k@5867)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@5946 $Perm)
(assert ($Perm.isValidVar $k@5946))
(assert ($Perm.isReadVar $k@5946 $Perm.Write))
(push) ; 15
(assert (not (or (= $k@5946 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 15
(assert (<
  $k@5946
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694) $k@5444)
            $k@5462)
          $k@5828)
        $k@5846)
      $k@5850)
    $k@5868)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 15
(assert (not (not (= $t@5862 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 15
; [dead then-branch 679] $t@5862 != Null
(push) ; 15
; [else-branch 679] $t@5862 == Null
(declare-const $k@5947 $Perm)
(assert ($Perm.isValidVar $k@5947))
(assert ($Perm.isReadVar $k@5947 $Perm.Write))
(push) ; 16
(assert (not (or (= $k@5947 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441) $k@5445)
              $k@5825)
            $k@5829)
          $k@5847)
        $k@5851)
      $k@5943)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441) $k@5445)
              $k@5825)
            $k@5829)
          $k@5847)
        $k@5851)
      $k@5943)
    $Perm.No)))
(assert (<
  $k@5947
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441) $k@5445)
            $k@5825)
          $k@5829)
        $k@5847)
      $k@5851)
    $k@5943)))
(declare-const $k@5948 $Perm)
(assert ($Perm.isValidVar $k@5948))
(assert ($Perm.isReadVar $k@5948 $Perm.Write))
(push) ; 16
(assert (not (or (= $k@5948 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442) $k@5446)
              $k@5826)
            $k@5830)
          $k@5848)
        $k@5852)
      $k@5944)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442) $k@5446)
              $k@5826)
            $k@5830)
          $k@5848)
        $k@5852)
      $k@5944)
    $Perm.No)))
(assert (<
  $k@5948
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442) $k@5446)
            $k@5826)
          $k@5830)
        $k@5848)
      $k@5852)
    $k@5944)))
(declare-const sys__result@5949 $Ref)
(declare-const $t@5950 $Snap)
(declare-const $t@5951 $Snap)
(declare-const $t@5952 $Ref)
(assert (= $t@5950 ($Snap.combine $t@5951 ($SortWrappers.$RefTo$Snap $t@5952))))
(declare-const $t@5953 $Snap)
(declare-const $t@5954 $Ref)
(assert (= $t@5951 ($Snap.combine $t@5953 ($SortWrappers.$RefTo$Snap $t@5954))))
(declare-const $t@5955 $Snap)
(declare-const $t@5956 $Snap)
(assert (= $t@5953 ($Snap.combine $t@5955 $t@5956)))
(declare-const $t@5957 $Snap)
(declare-const $t@5958 $Ref)
(assert (= $t@5955 ($Snap.combine $t@5957 ($SortWrappers.$RefTo$Snap $t@5958))))
(declare-const $t@5959 $Snap)
(assert (= $t@5957 ($Snap.combine $t@5959 $Snap.unit)))
(declare-const $t@5960 Int)
(declare-const $t@5961 $Ref)
(assert (=
  $t@5959
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@5960)
    ($SortWrappers.$RefTo$Snap $t@5961))))
(declare-const $t@5962 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@5960)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@5962) $Snap.unit)))
(declare-const $k@5963 $Perm)
(assert ($Perm.isValidVar $k@5963))
(assert ($Perm.isReadVar $k@5963 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                  $k@5443)
                $k@5461)
              $k@5827)
            $k@5845)
          $k@5849)
        $k@5867)
      $k@5945))
  (= $t@5962 $t@5866)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                    $k@5443)
                  $k@5461)
                $k@5827)
              $k@5845)
            $k@5849)
          $k@5867)
        $k@5945)
      $k@5963)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                    $k@5443)
                  $k@5461)
                $k@5827)
              $k@5845)
            $k@5849)
          $k@5867)
        $k@5945)
      $k@5963)
    $Perm.No)))
(assert (> $t@5962 0))
(declare-const $k@5964 $Perm)
(assert ($Perm.isValidVar $k@5964))
(assert ($Perm.isReadVar $k@5964 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                  $k@5444)
                $k@5462)
              $k@5828)
            $k@5846)
          $k@5850)
        $k@5868)
      $k@5946))
  (= $t@5961 $t@5865)))
; [eval] diz.BlockingQueue__count != null
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                    $k@5444)
                  $k@5462)
                $k@5828)
              $k@5846)
            $k@5850)
          $k@5868)
        $k@5946)
      $k@5964)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                    $k@5444)
                  $k@5462)
                $k@5828)
              $k@5846)
            $k@5850)
          $k@5868)
        $k@5946)
      $k@5964)
    $Perm.No)))
(assert (not (= $t@5961 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 16
(assert (not (= $t@5958 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not (= $t@5958 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 16
(push) ; 16
; [then-branch 680] $t@5958 != Null
(assert (not (= $t@5958 $Ref.null)))
(declare-const $k@5965 $Perm)
(assert ($Perm.isValidVar $k@5965))
(assert ($Perm.isReadVar $k@5965 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                  $k@5445)
                $k@5825)
              $k@5829)
            $k@5847)
          $k@5851)
        $k@5943)
      $k@5947))
  (= $t@5954 $t@5858)))
(declare-const $k@5966 $Perm)
(assert ($Perm.isValidVar $k@5966))
(assert ($Perm.isReadVar $k@5966 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                  $k@5446)
                $k@5826)
              $k@5830)
            $k@5848)
          $k@5852)
        $k@5944)
      $k@5948))
  (= $t@5952 $t@5856)))
; [exec]
; o := __flatten_78
; [exec]
; __flatten_79 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@5967 $Perm)
(assert ($Perm.isValidVar $k@5967))
(assert ($Perm.isReadVar $k@5967 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@5967 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@5967
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                  $k@5443)
                $k@5461)
              $k@5827)
            $k@5845)
          $k@5849)
        $k@5867)
      $k@5945)
    $k@5963)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@5968 $Perm)
(assert ($Perm.isValidVar $k@5968))
(assert ($Perm.isReadVar $k@5968 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@5968 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@5968
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                  $k@5444)
                $k@5462)
              $k@5828)
            $k@5846)
          $k@5850)
        $k@5868)
      $k@5946)
    $k@5964)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 17
(assert (not (= $t@5958 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 17
(push) ; 17
; [then-branch 681] $t@5958 != Null
(declare-const $k@5969 $Perm)
(assert ($Perm.isValidVar $k@5969))
(assert ($Perm.isReadVar $k@5969 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@5969 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                    $k@5445)
                  $k@5825)
                $k@5829)
              $k@5847)
            $k@5851)
          $k@5943)
        $k@5947)
      $k@5965)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                    $k@5445)
                  $k@5825)
                $k@5829)
              $k@5847)
            $k@5851)
          $k@5943)
        $k@5947)
      $k@5965)
    $Perm.No)))
(assert (<
  $k@5969
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                  $k@5445)
                $k@5825)
              $k@5829)
            $k@5847)
          $k@5851)
        $k@5943)
      $k@5947)
    $k@5965)))
(declare-const $k@5970 $Perm)
(assert ($Perm.isValidVar $k@5970))
(assert ($Perm.isReadVar $k@5970 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@5970 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                    $k@5446)
                  $k@5826)
                $k@5830)
              $k@5848)
            $k@5852)
          $k@5944)
        $k@5948)
      $k@5966)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                    $k@5446)
                  $k@5826)
                $k@5830)
              $k@5848)
            $k@5852)
          $k@5944)
        $k@5948)
      $k@5966)
    $Perm.No)))
(assert (<
  $k@5970
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                  $k@5446)
                $k@5826)
              $k@5830)
            $k@5848)
          $k@5852)
        $k@5944)
      $k@5948)
    $k@5966)))
(declare-const sys__result@5971 $Ref)
(declare-const $t@5972 $Snap)
(declare-const $t@5973 $Snap)
(declare-const $t@5974 $Ref)
(assert (= $t@5972 ($Snap.combine $t@5973 ($SortWrappers.$RefTo$Snap $t@5974))))
(declare-const $t@5975 $Snap)
(declare-const $t@5976 $Ref)
(assert (= $t@5973 ($Snap.combine $t@5975 ($SortWrappers.$RefTo$Snap $t@5976))))
(declare-const $t@5977 $Snap)
(declare-const $t@5978 $Snap)
(assert (= $t@5975 ($Snap.combine $t@5977 $t@5978)))
(declare-const $t@5979 $Snap)
(declare-const $t@5980 $Ref)
(assert (= $t@5977 ($Snap.combine $t@5979 ($SortWrappers.$RefTo$Snap $t@5980))))
(declare-const $t@5981 $Snap)
(assert (= $t@5979 ($Snap.combine $t@5981 $Snap.unit)))
(declare-const $t@5982 Int)
(declare-const $t@5983 $Ref)
(assert (=
  $t@5981
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@5982)
    ($SortWrappers.$RefTo$Snap $t@5983))))
(declare-const $t@5984 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@5982)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@5984) $Snap.unit)))
(declare-const $k@5985 $Perm)
(assert ($Perm.isValidVar $k@5985))
(assert ($Perm.isReadVar $k@5985 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                      $k@5443)
                    $k@5461)
                  $k@5827)
                $k@5845)
              $k@5849)
            $k@5867)
          $k@5945)
        $k@5963)
      $k@5967))
  (= $t@5984 $t@5962)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                        $k@5443)
                      $k@5461)
                    $k@5827)
                  $k@5845)
                $k@5849)
              $k@5867)
            $k@5945)
          $k@5963)
        $k@5967)
      $k@5985)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                        $k@5443)
                      $k@5461)
                    $k@5827)
                  $k@5845)
                $k@5849)
              $k@5867)
            $k@5945)
          $k@5963)
        $k@5967)
      $k@5985)
    $Perm.No)))
(assert (> $t@5984 0))
(declare-const $k@5986 $Perm)
(assert ($Perm.isValidVar $k@5986))
(assert ($Perm.isReadVar $k@5986 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                      $k@5444)
                    $k@5462)
                  $k@5828)
                $k@5846)
              $k@5850)
            $k@5868)
          $k@5946)
        $k@5964)
      $k@5968))
  (= $t@5983 $t@5961)))
; [eval] diz.BlockingQueue__count != null
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                        $k@5444)
                      $k@5462)
                    $k@5828)
                  $k@5846)
                $k@5850)
              $k@5868)
            $k@5946)
          $k@5964)
        $k@5968)
      $k@5986)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                        $k@5444)
                      $k@5462)
                    $k@5828)
                  $k@5846)
                $k@5850)
              $k@5868)
            $k@5946)
          $k@5964)
        $k@5968)
      $k@5986)
    $Perm.No)))
(assert (not (= $t@5983 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 18
(assert (not (= $t@5980 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not (= $t@5980 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
; [then-branch 682] $t@5980 != Null
(assert (not (= $t@5980 $Ref.null)))
(declare-const $k@5987 $Perm)
(assert ($Perm.isValidVar $k@5987))
(assert ($Perm.isReadVar $k@5987 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                      $k@5445)
                    $k@5825)
                  $k@5829)
                $k@5847)
              $k@5851)
            $k@5943)
          $k@5947)
        $k@5965)
      $k@5969))
  (= $t@5976 $t@5954)))
(declare-const $k@5988 $Perm)
(assert ($Perm.isValidVar $k@5988))
(assert ($Perm.isReadVar $k@5988 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                      $k@5446)
                    $k@5826)
                  $k@5830)
                $k@5848)
              $k@5852)
            $k@5944)
          $k@5948)
        $k@5966)
      $k@5970))
  (= $t@5974 $t@5952)))
; [exec]
; p := __flatten_79
(pop) ; 18
(push) ; 18
; [else-branch 682] $t@5980 == Null
(assert (= $t@5980 $Ref.null))
(declare-const $k@5989 $Perm)
(assert ($Perm.isValidVar $k@5989))
(assert ($Perm.isReadVar $k@5989 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                      $k@5445)
                    $k@5825)
                  $k@5829)
                $k@5847)
              $k@5851)
            $k@5943)
          $k@5947)
        $k@5965)
      $k@5969))
  (= $t@5976 $t@5954)))
(declare-const $k@5990 $Perm)
(assert ($Perm.isValidVar $k@5990))
(assert ($Perm.isReadVar $k@5990 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                      $k@5446)
                    $k@5826)
                  $k@5830)
                $k@5848)
              $k@5852)
            $k@5944)
          $k@5948)
        $k@5966)
      $k@5970))
  (= $t@5974 $t@5952)))
; [exec]
; p := __flatten_79
(pop) ; 18
(pop) ; 17
; [dead else-branch 681] $t@5958 == Null
(pop) ; 16
(push) ; 16
; [else-branch 680] $t@5958 == Null
(assert (= $t@5958 $Ref.null))
(declare-const $k@5991 $Perm)
(assert ($Perm.isValidVar $k@5991))
(assert ($Perm.isReadVar $k@5991 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                  $k@5445)
                $k@5825)
              $k@5829)
            $k@5847)
          $k@5851)
        $k@5943)
      $k@5947))
  (= $t@5954 $t@5858)))
(declare-const $k@5992 $Perm)
(assert ($Perm.isValidVar $k@5992))
(assert ($Perm.isReadVar $k@5992 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                  $k@5446)
                $k@5826)
              $k@5830)
            $k@5848)
          $k@5852)
        $k@5944)
      $k@5948))
  (= $t@5952 $t@5856)))
; [exec]
; o := __flatten_78
; [exec]
; __flatten_79 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@5993 $Perm)
(assert ($Perm.isValidVar $k@5993))
(assert ($Perm.isReadVar $k@5993 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@5993 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@5993
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                  $k@5443)
                $k@5461)
              $k@5827)
            $k@5845)
          $k@5849)
        $k@5867)
      $k@5945)
    $k@5963)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@5994 $Perm)
(assert ($Perm.isValidVar $k@5994))
(assert ($Perm.isReadVar $k@5994 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@5994 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@5994
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                  $k@5444)
                $k@5462)
              $k@5828)
            $k@5846)
          $k@5850)
        $k@5868)
      $k@5946)
    $k@5964)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 17
(assert (not (not (= $t@5958 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 17
; [dead then-branch 683] $t@5958 != Null
(push) ; 17
; [else-branch 683] $t@5958 == Null
(declare-const $k@5995 $Perm)
(assert ($Perm.isValidVar $k@5995))
(assert ($Perm.isReadVar $k@5995 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@5995 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                    $k@5445)
                  $k@5825)
                $k@5829)
              $k@5847)
            $k@5851)
          $k@5943)
        $k@5947)
      $k@5991)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                    $k@5445)
                  $k@5825)
                $k@5829)
              $k@5847)
            $k@5851)
          $k@5943)
        $k@5947)
      $k@5991)
    $Perm.No)))
(assert (<
  $k@5995
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                  $k@5445)
                $k@5825)
              $k@5829)
            $k@5847)
          $k@5851)
        $k@5943)
      $k@5947)
    $k@5991)))
(declare-const $k@5996 $Perm)
(assert ($Perm.isValidVar $k@5996))
(assert ($Perm.isReadVar $k@5996 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@5996 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                    $k@5446)
                  $k@5826)
                $k@5830)
              $k@5848)
            $k@5852)
          $k@5944)
        $k@5948)
      $k@5992)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                    $k@5446)
                  $k@5826)
                $k@5830)
              $k@5848)
            $k@5852)
          $k@5944)
        $k@5948)
      $k@5992)
    $Perm.No)))
(assert (<
  $k@5996
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                  $k@5446)
                $k@5826)
              $k@5830)
            $k@5848)
          $k@5852)
        $k@5944)
      $k@5948)
    $k@5992)))
(declare-const sys__result@5997 $Ref)
(declare-const $t@5998 $Snap)
(declare-const $t@5999 $Snap)
(declare-const $t@6000 $Ref)
(assert (= $t@5998 ($Snap.combine $t@5999 ($SortWrappers.$RefTo$Snap $t@6000))))
(declare-const $t@6001 $Snap)
(declare-const $t@6002 $Ref)
(assert (= $t@5999 ($Snap.combine $t@6001 ($SortWrappers.$RefTo$Snap $t@6002))))
(declare-const $t@6003 $Snap)
(declare-const $t@6004 $Snap)
(assert (= $t@6001 ($Snap.combine $t@6003 $t@6004)))
(declare-const $t@6005 $Snap)
(declare-const $t@6006 $Ref)
(assert (= $t@6003 ($Snap.combine $t@6005 ($SortWrappers.$RefTo$Snap $t@6006))))
(declare-const $t@6007 $Snap)
(assert (= $t@6005 ($Snap.combine $t@6007 $Snap.unit)))
(declare-const $t@6008 Int)
(declare-const $t@6009 $Ref)
(assert (=
  $t@6007
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@6008)
    ($SortWrappers.$RefTo$Snap $t@6009))))
(declare-const $t@6010 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@6008)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@6010) $Snap.unit)))
(declare-const $k@6011 $Perm)
(assert ($Perm.isValidVar $k@6011))
(assert ($Perm.isReadVar $k@6011 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                      $k@5443)
                    $k@5461)
                  $k@5827)
                $k@5845)
              $k@5849)
            $k@5867)
          $k@5945)
        $k@5963)
      $k@5993))
  (= $t@6010 $t@5962)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                        $k@5443)
                      $k@5461)
                    $k@5827)
                  $k@5845)
                $k@5849)
              $k@5867)
            $k@5945)
          $k@5963)
        $k@5993)
      $k@6011)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                        $k@5443)
                      $k@5461)
                    $k@5827)
                  $k@5845)
                $k@5849)
              $k@5867)
            $k@5945)
          $k@5963)
        $k@5993)
      $k@6011)
    $Perm.No)))
(assert (> $t@6010 0))
(declare-const $k@6012 $Perm)
(assert ($Perm.isValidVar $k@6012))
(assert ($Perm.isReadVar $k@6012 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                      $k@5444)
                    $k@5462)
                  $k@5828)
                $k@5846)
              $k@5850)
            $k@5868)
          $k@5946)
        $k@5964)
      $k@5994))
  (= $t@6009 $t@5961)))
; [eval] diz.BlockingQueue__count != null
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                        $k@5444)
                      $k@5462)
                    $k@5828)
                  $k@5846)
                $k@5850)
              $k@5868)
            $k@5946)
          $k@5964)
        $k@5994)
      $k@6012)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                        $k@5444)
                      $k@5462)
                    $k@5828)
                  $k@5846)
                $k@5850)
              $k@5868)
            $k@5946)
          $k@5964)
        $k@5994)
      $k@6012)
    $Perm.No)))
(assert (not (= $t@6009 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 18
(assert (not (= $t@6006 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not (= $t@6006 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
; [then-branch 684] $t@6006 != Null
(assert (not (= $t@6006 $Ref.null)))
(declare-const $k@6013 $Perm)
(assert ($Perm.isValidVar $k@6013))
(assert ($Perm.isReadVar $k@6013 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                      $k@5445)
                    $k@5825)
                  $k@5829)
                $k@5847)
              $k@5851)
            $k@5943)
          $k@5947)
        $k@5991)
      $k@5995))
  (= $t@6002 $t@5954)))
(declare-const $k@6014 $Perm)
(assert ($Perm.isValidVar $k@6014))
(assert ($Perm.isReadVar $k@6014 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                      $k@5446)
                    $k@5826)
                  $k@5830)
                $k@5848)
              $k@5852)
            $k@5944)
          $k@5948)
        $k@5992)
      $k@5996))
  (= $t@6000 $t@5952)))
; [exec]
; p := __flatten_79
(pop) ; 18
(push) ; 18
; [else-branch 684] $t@6006 == Null
(assert (= $t@6006 $Ref.null))
(declare-const $k@6015 $Perm)
(assert ($Perm.isValidVar $k@6015))
(assert ($Perm.isReadVar $k@6015 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                      $k@5445)
                    $k@5825)
                  $k@5829)
                $k@5847)
              $k@5851)
            $k@5943)
          $k@5947)
        $k@5991)
      $k@5995))
  (= $t@6002 $t@5954)))
(declare-const $k@6016 $Perm)
(assert ($Perm.isValidVar $k@6016))
(assert ($Perm.isReadVar $k@6016 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                      $k@5446)
                    $k@5826)
                  $k@5830)
                $k@5848)
              $k@5852)
            $k@5944)
          $k@5948)
        $k@5992)
      $k@5996))
  (= $t@6000 $t@5952)))
; [exec]
; p := __flatten_79
(pop) ; 18
(pop) ; 17
(pop) ; 16
(pop) ; 15
(pop) ; 14
(pop) ; 13
; [dead else-branch 671] $t@5840 == Null
(pop) ; 12
(push) ; 12
; [else-branch 670] $t@5840 == Null
(assert (= $t@5840 $Ref.null))
(declare-const $k@6017 $Perm)
(assert ($Perm.isValidVar $k@6017))
(assert ($Perm.isReadVar $k@6017 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441) $k@5445)
        $k@5825)
      $k@5829))
  (= $t@5836 $t@5452)))
(declare-const $k@6018 $Perm)
(assert ($Perm.isValidVar $k@6018))
(assert ($Perm.isReadVar $k@6018 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442) $k@5446)
        $k@5826)
      $k@5830))
  (= $t@5834 $t@5450)))
; [exec]
; b := __flatten_76
; [exec]
; __flatten_77 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@6019 $Perm)
(assert ($Perm.isValidVar $k@6019))
(assert ($Perm.isReadVar $k@6019 $Perm.Write))
(push) ; 13
(assert (not (or (= $k@6019 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 13
(assert (<
  $k@6019
  (+
    (-
      (+
        (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693) $k@5443)
        $k@5461)
      $k@5827)
    $k@5845)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@6020 $Perm)
(assert ($Perm.isValidVar $k@6020))
(assert ($Perm.isReadVar $k@6020 $Perm.Write))
(push) ; 13
(assert (not (or (= $k@6020 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 13
(assert (<
  $k@6020
  (+
    (-
      (+
        (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694) $k@5444)
        $k@5462)
      $k@5828)
    $k@5846)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 13
(assert (not (not (= $t@5840 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 13
; [dead then-branch 685] $t@5840 != Null
(push) ; 13
; [else-branch 685] $t@5840 == Null
(declare-const $k@6021 $Perm)
(assert ($Perm.isValidVar $k@6021))
(assert ($Perm.isReadVar $k@6021 $Perm.Write))
(push) ; 14
(assert (not (or (= $k@6021 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(push) ; 14
(assert (not (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441) $k@5445)
          $k@5825)
        $k@5829)
      $k@6017)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(assert (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441) $k@5445)
          $k@5825)
        $k@5829)
      $k@6017)
    $Perm.No)))
(assert (<
  $k@6021
  (+
    (-
      (+
        (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441) $k@5445)
        $k@5825)
      $k@5829)
    $k@6017)))
(declare-const $k@6022 $Perm)
(assert ($Perm.isValidVar $k@6022))
(assert ($Perm.isReadVar $k@6022 $Perm.Write))
(push) ; 14
(assert (not (or (= $k@6022 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(push) ; 14
(assert (not (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442) $k@5446)
          $k@5826)
        $k@5830)
      $k@6018)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(assert (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442) $k@5446)
          $k@5826)
        $k@5830)
      $k@6018)
    $Perm.No)))
(assert (<
  $k@6022
  (+
    (-
      (+
        (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442) $k@5446)
        $k@5826)
      $k@5830)
    $k@6018)))
(declare-const sys__result@6023 $Ref)
(declare-const $t@6024 $Snap)
(declare-const $t@6025 $Snap)
(declare-const $t@6026 $Ref)
(assert (= $t@6024 ($Snap.combine $t@6025 ($SortWrappers.$RefTo$Snap $t@6026))))
(declare-const $t@6027 $Snap)
(declare-const $t@6028 $Ref)
(assert (= $t@6025 ($Snap.combine $t@6027 ($SortWrappers.$RefTo$Snap $t@6028))))
(declare-const $t@6029 $Snap)
(declare-const $t@6030 $Snap)
(assert (= $t@6027 ($Snap.combine $t@6029 $t@6030)))
(declare-const $t@6031 $Snap)
(declare-const $t@6032 $Ref)
(assert (= $t@6029 ($Snap.combine $t@6031 ($SortWrappers.$RefTo$Snap $t@6032))))
(declare-const $t@6033 $Snap)
(assert (= $t@6031 ($Snap.combine $t@6033 $Snap.unit)))
(declare-const $t@6034 Int)
(declare-const $t@6035 $Ref)
(assert (=
  $t@6033
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@6034)
    ($SortWrappers.$RefTo$Snap $t@6035))))
(declare-const $t@6036 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@6034)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@6036) $Snap.unit)))
(declare-const $k@6037 $Perm)
(assert ($Perm.isValidVar $k@6037))
(assert ($Perm.isReadVar $k@6037 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693) $k@5443)
            $k@5461)
          $k@5827)
        $k@5845)
      $k@6019))
  (= $t@6036 $t@5844)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 14
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693) $k@5443)
              $k@5461)
            $k@5827)
          $k@5845)
        $k@6019)
      $k@6037)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693) $k@5443)
              $k@5461)
            $k@5827)
          $k@5845)
        $k@6019)
      $k@6037)
    $Perm.No)))
(assert (> $t@6036 0))
(declare-const $k@6038 $Perm)
(assert ($Perm.isValidVar $k@6038))
(assert ($Perm.isReadVar $k@6038 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694) $k@5444)
            $k@5462)
          $k@5828)
        $k@5846)
      $k@6020))
  (= $t@6035 $t@5843)))
; [eval] diz.BlockingQueue__count != null
(push) ; 14
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694) $k@5444)
              $k@5462)
            $k@5828)
          $k@5846)
        $k@6020)
      $k@6038)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 14
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694) $k@5444)
              $k@5462)
            $k@5828)
          $k@5846)
        $k@6020)
      $k@6038)
    $Perm.No)))
(assert (not (= $t@6035 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 14
(assert (not (= $t@6032 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 14
(push) ; 14
(assert (not (not (= $t@6032 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 14
(push) ; 14
; [then-branch 686] $t@6032 != Null
(assert (not (= $t@6032 $Ref.null)))
(declare-const $k@6039 $Perm)
(assert ($Perm.isValidVar $k@6039))
(assert ($Perm.isReadVar $k@6039 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441) $k@5445)
            $k@5825)
          $k@5829)
        $k@6017)
      $k@6021))
  (= $t@6028 $t@5836)))
(declare-const $k@6040 $Perm)
(assert ($Perm.isValidVar $k@6040))
(assert ($Perm.isReadVar $k@6040 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442) $k@5446)
            $k@5826)
          $k@5830)
        $k@6018)
      $k@6022))
  (= $t@6026 $t@5834)))
; [exec]
; n := __flatten_77
; [exec]
; __flatten_78 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@6041 $Perm)
(assert ($Perm.isValidVar $k@6041))
(assert ($Perm.isReadVar $k@6041 $Perm.Write))
(push) ; 15
(assert (not (or (= $k@6041 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 15
(assert (<
  $k@6041
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693) $k@5443)
            $k@5461)
          $k@5827)
        $k@5845)
      $k@6019)
    $k@6037)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@6042 $Perm)
(assert ($Perm.isValidVar $k@6042))
(assert ($Perm.isReadVar $k@6042 $Perm.Write))
(push) ; 15
(assert (not (or (= $k@6042 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 15
(assert (<
  $k@6042
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694) $k@5444)
            $k@5462)
          $k@5828)
        $k@5846)
      $k@6020)
    $k@6038)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 15
(assert (not (= $t@6032 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 15
(push) ; 15
; [then-branch 687] $t@6032 != Null
(declare-const $k@6043 $Perm)
(assert ($Perm.isValidVar $k@6043))
(assert ($Perm.isReadVar $k@6043 $Perm.Write))
(push) ; 16
(assert (not (or (= $k@6043 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441) $k@5445)
              $k@5825)
            $k@5829)
          $k@6017)
        $k@6021)
      $k@6039)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441) $k@5445)
              $k@5825)
            $k@5829)
          $k@6017)
        $k@6021)
      $k@6039)
    $Perm.No)))
(assert (<
  $k@6043
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441) $k@5445)
            $k@5825)
          $k@5829)
        $k@6017)
      $k@6021)
    $k@6039)))
(declare-const $k@6044 $Perm)
(assert ($Perm.isValidVar $k@6044))
(assert ($Perm.isReadVar $k@6044 $Perm.Write))
(push) ; 16
(assert (not (or (= $k@6044 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442) $k@5446)
              $k@5826)
            $k@5830)
          $k@6018)
        $k@6022)
      $k@6040)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442) $k@5446)
              $k@5826)
            $k@5830)
          $k@6018)
        $k@6022)
      $k@6040)
    $Perm.No)))
(assert (<
  $k@6044
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442) $k@5446)
            $k@5826)
          $k@5830)
        $k@6018)
      $k@6022)
    $k@6040)))
(declare-const sys__result@6045 $Ref)
(declare-const $t@6046 $Snap)
(declare-const $t@6047 $Snap)
(declare-const $t@6048 $Ref)
(assert (= $t@6046 ($Snap.combine $t@6047 ($SortWrappers.$RefTo$Snap $t@6048))))
(declare-const $t@6049 $Snap)
(declare-const $t@6050 $Ref)
(assert (= $t@6047 ($Snap.combine $t@6049 ($SortWrappers.$RefTo$Snap $t@6050))))
(declare-const $t@6051 $Snap)
(declare-const $t@6052 $Snap)
(assert (= $t@6049 ($Snap.combine $t@6051 $t@6052)))
(declare-const $t@6053 $Snap)
(declare-const $t@6054 $Ref)
(assert (= $t@6051 ($Snap.combine $t@6053 ($SortWrappers.$RefTo$Snap $t@6054))))
(declare-const $t@6055 $Snap)
(assert (= $t@6053 ($Snap.combine $t@6055 $Snap.unit)))
(declare-const $t@6056 Int)
(declare-const $t@6057 $Ref)
(assert (=
  $t@6055
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@6056)
    ($SortWrappers.$RefTo$Snap $t@6057))))
(declare-const $t@6058 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@6056)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@6058) $Snap.unit)))
(declare-const $k@6059 $Perm)
(assert ($Perm.isValidVar $k@6059))
(assert ($Perm.isReadVar $k@6059 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                  $k@5443)
                $k@5461)
              $k@5827)
            $k@5845)
          $k@6019)
        $k@6037)
      $k@6041))
  (= $t@6058 $t@6036)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                    $k@5443)
                  $k@5461)
                $k@5827)
              $k@5845)
            $k@6019)
          $k@6037)
        $k@6041)
      $k@6059)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                    $k@5443)
                  $k@5461)
                $k@5827)
              $k@5845)
            $k@6019)
          $k@6037)
        $k@6041)
      $k@6059)
    $Perm.No)))
(assert (> $t@6058 0))
(declare-const $k@6060 $Perm)
(assert ($Perm.isValidVar $k@6060))
(assert ($Perm.isReadVar $k@6060 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                  $k@5444)
                $k@5462)
              $k@5828)
            $k@5846)
          $k@6020)
        $k@6038)
      $k@6042))
  (= $t@6057 $t@6035)))
; [eval] diz.BlockingQueue__count != null
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                    $k@5444)
                  $k@5462)
                $k@5828)
              $k@5846)
            $k@6020)
          $k@6038)
        $k@6042)
      $k@6060)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                    $k@5444)
                  $k@5462)
                $k@5828)
              $k@5846)
            $k@6020)
          $k@6038)
        $k@6042)
      $k@6060)
    $Perm.No)))
(assert (not (= $t@6057 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 16
(assert (not (= $t@6054 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not (= $t@6054 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 16
(push) ; 16
; [then-branch 688] $t@6054 != Null
(assert (not (= $t@6054 $Ref.null)))
(declare-const $k@6061 $Perm)
(assert ($Perm.isValidVar $k@6061))
(assert ($Perm.isReadVar $k@6061 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                  $k@5445)
                $k@5825)
              $k@5829)
            $k@6017)
          $k@6021)
        $k@6039)
      $k@6043))
  (= $t@6050 $t@6028)))
(declare-const $k@6062 $Perm)
(assert ($Perm.isValidVar $k@6062))
(assert ($Perm.isReadVar $k@6062 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                  $k@5446)
                $k@5826)
              $k@5830)
            $k@6018)
          $k@6022)
        $k@6040)
      $k@6044))
  (= $t@6048 $t@6026)))
; [exec]
; o := __flatten_78
; [exec]
; __flatten_79 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@6063 $Perm)
(assert ($Perm.isValidVar $k@6063))
(assert ($Perm.isReadVar $k@6063 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@6063 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@6063
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                  $k@5443)
                $k@5461)
              $k@5827)
            $k@5845)
          $k@6019)
        $k@6037)
      $k@6041)
    $k@6059)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@6064 $Perm)
(assert ($Perm.isValidVar $k@6064))
(assert ($Perm.isReadVar $k@6064 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@6064 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@6064
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                  $k@5444)
                $k@5462)
              $k@5828)
            $k@5846)
          $k@6020)
        $k@6038)
      $k@6042)
    $k@6060)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 17
(assert (not (= $t@6054 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 17
(push) ; 17
; [then-branch 689] $t@6054 != Null
(declare-const $k@6065 $Perm)
(assert ($Perm.isValidVar $k@6065))
(assert ($Perm.isReadVar $k@6065 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@6065 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                    $k@5445)
                  $k@5825)
                $k@5829)
              $k@6017)
            $k@6021)
          $k@6039)
        $k@6043)
      $k@6061)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                    $k@5445)
                  $k@5825)
                $k@5829)
              $k@6017)
            $k@6021)
          $k@6039)
        $k@6043)
      $k@6061)
    $Perm.No)))
(assert (<
  $k@6065
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                  $k@5445)
                $k@5825)
              $k@5829)
            $k@6017)
          $k@6021)
        $k@6039)
      $k@6043)
    $k@6061)))
(declare-const $k@6066 $Perm)
(assert ($Perm.isValidVar $k@6066))
(assert ($Perm.isReadVar $k@6066 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@6066 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                    $k@5446)
                  $k@5826)
                $k@5830)
              $k@6018)
            $k@6022)
          $k@6040)
        $k@6044)
      $k@6062)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                    $k@5446)
                  $k@5826)
                $k@5830)
              $k@6018)
            $k@6022)
          $k@6040)
        $k@6044)
      $k@6062)
    $Perm.No)))
(assert (<
  $k@6066
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                  $k@5446)
                $k@5826)
              $k@5830)
            $k@6018)
          $k@6022)
        $k@6040)
      $k@6044)
    $k@6062)))
(declare-const sys__result@6067 $Ref)
(declare-const $t@6068 $Snap)
(declare-const $t@6069 $Snap)
(declare-const $t@6070 $Ref)
(assert (= $t@6068 ($Snap.combine $t@6069 ($SortWrappers.$RefTo$Snap $t@6070))))
(declare-const $t@6071 $Snap)
(declare-const $t@6072 $Ref)
(assert (= $t@6069 ($Snap.combine $t@6071 ($SortWrappers.$RefTo$Snap $t@6072))))
(declare-const $t@6073 $Snap)
(declare-const $t@6074 $Snap)
(assert (= $t@6071 ($Snap.combine $t@6073 $t@6074)))
(declare-const $t@6075 $Snap)
(declare-const $t@6076 $Ref)
(assert (= $t@6073 ($Snap.combine $t@6075 ($SortWrappers.$RefTo$Snap $t@6076))))
(declare-const $t@6077 $Snap)
(assert (= $t@6075 ($Snap.combine $t@6077 $Snap.unit)))
(declare-const $t@6078 Int)
(declare-const $t@6079 $Ref)
(assert (=
  $t@6077
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@6078)
    ($SortWrappers.$RefTo$Snap $t@6079))))
(declare-const $t@6080 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@6078)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@6080) $Snap.unit)))
(declare-const $k@6081 $Perm)
(assert ($Perm.isValidVar $k@6081))
(assert ($Perm.isReadVar $k@6081 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                      $k@5443)
                    $k@5461)
                  $k@5827)
                $k@5845)
              $k@6019)
            $k@6037)
          $k@6041)
        $k@6059)
      $k@6063))
  (= $t@6080 $t@6058)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                        $k@5443)
                      $k@5461)
                    $k@5827)
                  $k@5845)
                $k@6019)
              $k@6037)
            $k@6041)
          $k@6059)
        $k@6063)
      $k@6081)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                        $k@5443)
                      $k@5461)
                    $k@5827)
                  $k@5845)
                $k@6019)
              $k@6037)
            $k@6041)
          $k@6059)
        $k@6063)
      $k@6081)
    $Perm.No)))
(assert (> $t@6080 0))
(declare-const $k@6082 $Perm)
(assert ($Perm.isValidVar $k@6082))
(assert ($Perm.isReadVar $k@6082 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                      $k@5444)
                    $k@5462)
                  $k@5828)
                $k@5846)
              $k@6020)
            $k@6038)
          $k@6042)
        $k@6060)
      $k@6064))
  (= $t@6079 $t@6057)))
; [eval] diz.BlockingQueue__count != null
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                        $k@5444)
                      $k@5462)
                    $k@5828)
                  $k@5846)
                $k@6020)
              $k@6038)
            $k@6042)
          $k@6060)
        $k@6064)
      $k@6082)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                        $k@5444)
                      $k@5462)
                    $k@5828)
                  $k@5846)
                $k@6020)
              $k@6038)
            $k@6042)
          $k@6060)
        $k@6064)
      $k@6082)
    $Perm.No)))
(assert (not (= $t@6079 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 18
(assert (not (= $t@6076 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not (= $t@6076 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
; [then-branch 690] $t@6076 != Null
(assert (not (= $t@6076 $Ref.null)))
(declare-const $k@6083 $Perm)
(assert ($Perm.isValidVar $k@6083))
(assert ($Perm.isReadVar $k@6083 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                      $k@5445)
                    $k@5825)
                  $k@5829)
                $k@6017)
              $k@6021)
            $k@6039)
          $k@6043)
        $k@6061)
      $k@6065))
  (= $t@6072 $t@6050)))
(declare-const $k@6084 $Perm)
(assert ($Perm.isValidVar $k@6084))
(assert ($Perm.isReadVar $k@6084 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                      $k@5446)
                    $k@5826)
                  $k@5830)
                $k@6018)
              $k@6022)
            $k@6040)
          $k@6044)
        $k@6062)
      $k@6066))
  (= $t@6070 $t@6048)))
; [exec]
; p := __flatten_79
(pop) ; 18
(push) ; 18
; [else-branch 690] $t@6076 == Null
(assert (= $t@6076 $Ref.null))
(declare-const $k@6085 $Perm)
(assert ($Perm.isValidVar $k@6085))
(assert ($Perm.isReadVar $k@6085 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                      $k@5445)
                    $k@5825)
                  $k@5829)
                $k@6017)
              $k@6021)
            $k@6039)
          $k@6043)
        $k@6061)
      $k@6065))
  (= $t@6072 $t@6050)))
(declare-const $k@6086 $Perm)
(assert ($Perm.isValidVar $k@6086))
(assert ($Perm.isReadVar $k@6086 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                      $k@5446)
                    $k@5826)
                  $k@5830)
                $k@6018)
              $k@6022)
            $k@6040)
          $k@6044)
        $k@6062)
      $k@6066))
  (= $t@6070 $t@6048)))
; [exec]
; p := __flatten_79
(pop) ; 18
(pop) ; 17
; [dead else-branch 689] $t@6054 == Null
(pop) ; 16
(push) ; 16
; [else-branch 688] $t@6054 == Null
(assert (= $t@6054 $Ref.null))
(declare-const $k@6087 $Perm)
(assert ($Perm.isValidVar $k@6087))
(assert ($Perm.isReadVar $k@6087 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                  $k@5445)
                $k@5825)
              $k@5829)
            $k@6017)
          $k@6021)
        $k@6039)
      $k@6043))
  (= $t@6050 $t@6028)))
(declare-const $k@6088 $Perm)
(assert ($Perm.isValidVar $k@6088))
(assert ($Perm.isReadVar $k@6088 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                  $k@5446)
                $k@5826)
              $k@5830)
            $k@6018)
          $k@6022)
        $k@6040)
      $k@6044))
  (= $t@6048 $t@6026)))
; [exec]
; o := __flatten_78
; [exec]
; __flatten_79 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@6089 $Perm)
(assert ($Perm.isValidVar $k@6089))
(assert ($Perm.isReadVar $k@6089 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@6089 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@6089
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                  $k@5443)
                $k@5461)
              $k@5827)
            $k@5845)
          $k@6019)
        $k@6037)
      $k@6041)
    $k@6059)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@6090 $Perm)
(assert ($Perm.isValidVar $k@6090))
(assert ($Perm.isReadVar $k@6090 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@6090 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@6090
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                  $k@5444)
                $k@5462)
              $k@5828)
            $k@5846)
          $k@6020)
        $k@6038)
      $k@6042)
    $k@6060)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 17
(assert (not (not (= $t@6054 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 17
; [dead then-branch 691] $t@6054 != Null
(push) ; 17
; [else-branch 691] $t@6054 == Null
(declare-const $k@6091 $Perm)
(assert ($Perm.isValidVar $k@6091))
(assert ($Perm.isReadVar $k@6091 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@6091 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                    $k@5445)
                  $k@5825)
                $k@5829)
              $k@6017)
            $k@6021)
          $k@6039)
        $k@6043)
      $k@6087)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                    $k@5445)
                  $k@5825)
                $k@5829)
              $k@6017)
            $k@6021)
          $k@6039)
        $k@6043)
      $k@6087)
    $Perm.No)))
(assert (<
  $k@6091
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                  $k@5445)
                $k@5825)
              $k@5829)
            $k@6017)
          $k@6021)
        $k@6039)
      $k@6043)
    $k@6087)))
(declare-const $k@6092 $Perm)
(assert ($Perm.isValidVar $k@6092))
(assert ($Perm.isReadVar $k@6092 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@6092 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                    $k@5446)
                  $k@5826)
                $k@5830)
              $k@6018)
            $k@6022)
          $k@6040)
        $k@6044)
      $k@6088)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                    $k@5446)
                  $k@5826)
                $k@5830)
              $k@6018)
            $k@6022)
          $k@6040)
        $k@6044)
      $k@6088)
    $Perm.No)))
(assert (<
  $k@6092
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                  $k@5446)
                $k@5826)
              $k@5830)
            $k@6018)
          $k@6022)
        $k@6040)
      $k@6044)
    $k@6088)))
(declare-const sys__result@6093 $Ref)
(declare-const $t@6094 $Snap)
(declare-const $t@6095 $Snap)
(declare-const $t@6096 $Ref)
(assert (= $t@6094 ($Snap.combine $t@6095 ($SortWrappers.$RefTo$Snap $t@6096))))
(declare-const $t@6097 $Snap)
(declare-const $t@6098 $Ref)
(assert (= $t@6095 ($Snap.combine $t@6097 ($SortWrappers.$RefTo$Snap $t@6098))))
(declare-const $t@6099 $Snap)
(declare-const $t@6100 $Snap)
(assert (= $t@6097 ($Snap.combine $t@6099 $t@6100)))
(declare-const $t@6101 $Snap)
(declare-const $t@6102 $Ref)
(assert (= $t@6099 ($Snap.combine $t@6101 ($SortWrappers.$RefTo$Snap $t@6102))))
(declare-const $t@6103 $Snap)
(assert (= $t@6101 ($Snap.combine $t@6103 $Snap.unit)))
(declare-const $t@6104 Int)
(declare-const $t@6105 $Ref)
(assert (=
  $t@6103
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@6104)
    ($SortWrappers.$RefTo$Snap $t@6105))))
(declare-const $t@6106 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@6104)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@6106) $Snap.unit)))
(declare-const $k@6107 $Perm)
(assert ($Perm.isValidVar $k@6107))
(assert ($Perm.isReadVar $k@6107 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                      $k@5443)
                    $k@5461)
                  $k@5827)
                $k@5845)
              $k@6019)
            $k@6037)
          $k@6041)
        $k@6059)
      $k@6089))
  (= $t@6106 $t@6058)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                        $k@5443)
                      $k@5461)
                    $k@5827)
                  $k@5845)
                $k@6019)
              $k@6037)
            $k@6041)
          $k@6059)
        $k@6089)
      $k@6107)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                        $k@5443)
                      $k@5461)
                    $k@5827)
                  $k@5845)
                $k@6019)
              $k@6037)
            $k@6041)
          $k@6059)
        $k@6089)
      $k@6107)
    $Perm.No)))
(assert (> $t@6106 0))
(declare-const $k@6108 $Perm)
(assert ($Perm.isValidVar $k@6108))
(assert ($Perm.isReadVar $k@6108 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                      $k@5444)
                    $k@5462)
                  $k@5828)
                $k@5846)
              $k@6020)
            $k@6038)
          $k@6042)
        $k@6060)
      $k@6090))
  (= $t@6105 $t@6057)))
; [eval] diz.BlockingQueue__count != null
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                        $k@5444)
                      $k@5462)
                    $k@5828)
                  $k@5846)
                $k@6020)
              $k@6038)
            $k@6042)
          $k@6060)
        $k@6090)
      $k@6108)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                        $k@5444)
                      $k@5462)
                    $k@5828)
                  $k@5846)
                $k@6020)
              $k@6038)
            $k@6042)
          $k@6060)
        $k@6090)
      $k@6108)
    $Perm.No)))
(assert (not (= $t@6105 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 18
(assert (not (= $t@6102 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not (= $t@6102 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
; [then-branch 692] $t@6102 != Null
(assert (not (= $t@6102 $Ref.null)))
(declare-const $k@6109 $Perm)
(assert ($Perm.isValidVar $k@6109))
(assert ($Perm.isReadVar $k@6109 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                      $k@5445)
                    $k@5825)
                  $k@5829)
                $k@6017)
              $k@6021)
            $k@6039)
          $k@6043)
        $k@6087)
      $k@6091))
  (= $t@6098 $t@6050)))
(declare-const $k@6110 $Perm)
(assert ($Perm.isValidVar $k@6110))
(assert ($Perm.isReadVar $k@6110 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                      $k@5446)
                    $k@5826)
                  $k@5830)
                $k@6018)
              $k@6022)
            $k@6040)
          $k@6044)
        $k@6088)
      $k@6092))
  (= $t@6096 $t@6048)))
; [exec]
; p := __flatten_79
(pop) ; 18
(push) ; 18
; [else-branch 692] $t@6102 == Null
(assert (= $t@6102 $Ref.null))
(declare-const $k@6111 $Perm)
(assert ($Perm.isValidVar $k@6111))
(assert ($Perm.isReadVar $k@6111 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                      $k@5445)
                    $k@5825)
                  $k@5829)
                $k@6017)
              $k@6021)
            $k@6039)
          $k@6043)
        $k@6087)
      $k@6091))
  (= $t@6098 $t@6050)))
(declare-const $k@6112 $Perm)
(assert ($Perm.isValidVar $k@6112))
(assert ($Perm.isReadVar $k@6112 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                      $k@5446)
                    $k@5826)
                  $k@5830)
                $k@6018)
              $k@6022)
            $k@6040)
          $k@6044)
        $k@6088)
      $k@6092))
  (= $t@6096 $t@6048)))
; [exec]
; p := __flatten_79
(pop) ; 18
(pop) ; 17
(pop) ; 16
(pop) ; 15
; [dead else-branch 687] $t@6032 == Null
(pop) ; 14
(push) ; 14
; [else-branch 686] $t@6032 == Null
(assert (= $t@6032 $Ref.null))
(declare-const $k@6113 $Perm)
(assert ($Perm.isValidVar $k@6113))
(assert ($Perm.isReadVar $k@6113 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441) $k@5445)
            $k@5825)
          $k@5829)
        $k@6017)
      $k@6021))
  (= $t@6028 $t@5836)))
(declare-const $k@6114 $Perm)
(assert ($Perm.isValidVar $k@6114))
(assert ($Perm.isReadVar $k@6114 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442) $k@5446)
            $k@5826)
          $k@5830)
        $k@6018)
      $k@6022))
  (= $t@6026 $t@5834)))
; [exec]
; n := __flatten_77
; [exec]
; __flatten_78 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@6115 $Perm)
(assert ($Perm.isValidVar $k@6115))
(assert ($Perm.isReadVar $k@6115 $Perm.Write))
(push) ; 15
(assert (not (or (= $k@6115 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 15
(assert (<
  $k@6115
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693) $k@5443)
            $k@5461)
          $k@5827)
        $k@5845)
      $k@6019)
    $k@6037)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@6116 $Perm)
(assert ($Perm.isValidVar $k@6116))
(assert ($Perm.isReadVar $k@6116 $Perm.Write))
(push) ; 15
(assert (not (or (= $k@6116 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 15
(assert (<
  $k@6116
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694) $k@5444)
            $k@5462)
          $k@5828)
        $k@5846)
      $k@6020)
    $k@6038)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 15
(assert (not (not (= $t@6032 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 15
; [dead then-branch 693] $t@6032 != Null
(push) ; 15
; [else-branch 693] $t@6032 == Null
(declare-const $k@6117 $Perm)
(assert ($Perm.isValidVar $k@6117))
(assert ($Perm.isReadVar $k@6117 $Perm.Write))
(push) ; 16
(assert (not (or (= $k@6117 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441) $k@5445)
              $k@5825)
            $k@5829)
          $k@6017)
        $k@6021)
      $k@6113)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441) $k@5445)
              $k@5825)
            $k@5829)
          $k@6017)
        $k@6021)
      $k@6113)
    $Perm.No)))
(assert (<
  $k@6117
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441) $k@5445)
            $k@5825)
          $k@5829)
        $k@6017)
      $k@6021)
    $k@6113)))
(declare-const $k@6118 $Perm)
(assert ($Perm.isValidVar $k@6118))
(assert ($Perm.isReadVar $k@6118 $Perm.Write))
(push) ; 16
(assert (not (or (= $k@6118 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442) $k@5446)
              $k@5826)
            $k@5830)
          $k@6018)
        $k@6022)
      $k@6114)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442) $k@5446)
              $k@5826)
            $k@5830)
          $k@6018)
        $k@6022)
      $k@6114)
    $Perm.No)))
(assert (<
  $k@6118
  (+
    (-
      (+
        (-
          (+
            (- (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442) $k@5446)
            $k@5826)
          $k@5830)
        $k@6018)
      $k@6022)
    $k@6114)))
(declare-const sys__result@6119 $Ref)
(declare-const $t@6120 $Snap)
(declare-const $t@6121 $Snap)
(declare-const $t@6122 $Ref)
(assert (= $t@6120 ($Snap.combine $t@6121 ($SortWrappers.$RefTo$Snap $t@6122))))
(declare-const $t@6123 $Snap)
(declare-const $t@6124 $Ref)
(assert (= $t@6121 ($Snap.combine $t@6123 ($SortWrappers.$RefTo$Snap $t@6124))))
(declare-const $t@6125 $Snap)
(declare-const $t@6126 $Snap)
(assert (= $t@6123 ($Snap.combine $t@6125 $t@6126)))
(declare-const $t@6127 $Snap)
(declare-const $t@6128 $Ref)
(assert (= $t@6125 ($Snap.combine $t@6127 ($SortWrappers.$RefTo$Snap $t@6128))))
(declare-const $t@6129 $Snap)
(assert (= $t@6127 ($Snap.combine $t@6129 $Snap.unit)))
(declare-const $t@6130 Int)
(declare-const $t@6131 $Ref)
(assert (=
  $t@6129
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@6130)
    ($SortWrappers.$RefTo$Snap $t@6131))))
(declare-const $t@6132 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@6130)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@6132) $Snap.unit)))
(declare-const $k@6133 $Perm)
(assert ($Perm.isValidVar $k@6133))
(assert ($Perm.isReadVar $k@6133 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                  $k@5443)
                $k@5461)
              $k@5827)
            $k@5845)
          $k@6019)
        $k@6037)
      $k@6115))
  (= $t@6132 $t@6036)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                    $k@5443)
                  $k@5461)
                $k@5827)
              $k@5845)
            $k@6019)
          $k@6037)
        $k@6115)
      $k@6133)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                    $k@5443)
                  $k@5461)
                $k@5827)
              $k@5845)
            $k@6019)
          $k@6037)
        $k@6115)
      $k@6133)
    $Perm.No)))
(assert (> $t@6132 0))
(declare-const $k@6134 $Perm)
(assert ($Perm.isValidVar $k@6134))
(assert ($Perm.isReadVar $k@6134 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                  $k@5444)
                $k@5462)
              $k@5828)
            $k@5846)
          $k@6020)
        $k@6038)
      $k@6116))
  (= $t@6131 $t@6035)))
; [eval] diz.BlockingQueue__count != null
(push) ; 16
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                    $k@5444)
                  $k@5462)
                $k@5828)
              $k@5846)
            $k@6020)
          $k@6038)
        $k@6116)
      $k@6134)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 16
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                    $k@5444)
                  $k@5462)
                $k@5828)
              $k@5846)
            $k@6020)
          $k@6038)
        $k@6116)
      $k@6134)
    $Perm.No)))
(assert (not (= $t@6131 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 16
(assert (not (= $t@6128 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 16
(push) ; 16
(assert (not (not (= $t@6128 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 16
(push) ; 16
; [then-branch 694] $t@6128 != Null
(assert (not (= $t@6128 $Ref.null)))
(declare-const $k@6135 $Perm)
(assert ($Perm.isValidVar $k@6135))
(assert ($Perm.isReadVar $k@6135 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                  $k@5445)
                $k@5825)
              $k@5829)
            $k@6017)
          $k@6021)
        $k@6113)
      $k@6117))
  (= $t@6124 $t@6028)))
(declare-const $k@6136 $Perm)
(assert ($Perm.isValidVar $k@6136))
(assert ($Perm.isReadVar $k@6136 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                  $k@5446)
                $k@5826)
              $k@5830)
            $k@6018)
          $k@6022)
        $k@6114)
      $k@6118))
  (= $t@6122 $t@6026)))
; [exec]
; o := __flatten_78
; [exec]
; __flatten_79 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@6137 $Perm)
(assert ($Perm.isValidVar $k@6137))
(assert ($Perm.isReadVar $k@6137 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@6137 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@6137
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                  $k@5443)
                $k@5461)
              $k@5827)
            $k@5845)
          $k@6019)
        $k@6037)
      $k@6115)
    $k@6133)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@6138 $Perm)
(assert ($Perm.isValidVar $k@6138))
(assert ($Perm.isReadVar $k@6138 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@6138 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@6138
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                  $k@5444)
                $k@5462)
              $k@5828)
            $k@5846)
          $k@6020)
        $k@6038)
      $k@6116)
    $k@6134)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 17
(assert (not (= $t@6128 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 17
(push) ; 17
; [then-branch 695] $t@6128 != Null
(declare-const $k@6139 $Perm)
(assert ($Perm.isValidVar $k@6139))
(assert ($Perm.isReadVar $k@6139 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@6139 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                    $k@5445)
                  $k@5825)
                $k@5829)
              $k@6017)
            $k@6021)
          $k@6113)
        $k@6117)
      $k@6135)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                    $k@5445)
                  $k@5825)
                $k@5829)
              $k@6017)
            $k@6021)
          $k@6113)
        $k@6117)
      $k@6135)
    $Perm.No)))
(assert (<
  $k@6139
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                  $k@5445)
                $k@5825)
              $k@5829)
            $k@6017)
          $k@6021)
        $k@6113)
      $k@6117)
    $k@6135)))
(declare-const $k@6140 $Perm)
(assert ($Perm.isValidVar $k@6140))
(assert ($Perm.isReadVar $k@6140 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@6140 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                    $k@5446)
                  $k@5826)
                $k@5830)
              $k@6018)
            $k@6022)
          $k@6114)
        $k@6118)
      $k@6136)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                    $k@5446)
                  $k@5826)
                $k@5830)
              $k@6018)
            $k@6022)
          $k@6114)
        $k@6118)
      $k@6136)
    $Perm.No)))
(assert (<
  $k@6140
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                  $k@5446)
                $k@5826)
              $k@5830)
            $k@6018)
          $k@6022)
        $k@6114)
      $k@6118)
    $k@6136)))
(declare-const sys__result@6141 $Ref)
(declare-const $t@6142 $Snap)
(declare-const $t@6143 $Snap)
(declare-const $t@6144 $Ref)
(assert (= $t@6142 ($Snap.combine $t@6143 ($SortWrappers.$RefTo$Snap $t@6144))))
(declare-const $t@6145 $Snap)
(declare-const $t@6146 $Ref)
(assert (= $t@6143 ($Snap.combine $t@6145 ($SortWrappers.$RefTo$Snap $t@6146))))
(declare-const $t@6147 $Snap)
(declare-const $t@6148 $Snap)
(assert (= $t@6145 ($Snap.combine $t@6147 $t@6148)))
(declare-const $t@6149 $Snap)
(declare-const $t@6150 $Ref)
(assert (= $t@6147 ($Snap.combine $t@6149 ($SortWrappers.$RefTo$Snap $t@6150))))
(declare-const $t@6151 $Snap)
(assert (= $t@6149 ($Snap.combine $t@6151 $Snap.unit)))
(declare-const $t@6152 Int)
(declare-const $t@6153 $Ref)
(assert (=
  $t@6151
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@6152)
    ($SortWrappers.$RefTo$Snap $t@6153))))
(declare-const $t@6154 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@6152)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@6154) $Snap.unit)))
(declare-const $k@6155 $Perm)
(assert ($Perm.isValidVar $k@6155))
(assert ($Perm.isReadVar $k@6155 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                      $k@5443)
                    $k@5461)
                  $k@5827)
                $k@5845)
              $k@6019)
            $k@6037)
          $k@6115)
        $k@6133)
      $k@6137))
  (= $t@6154 $t@6132)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                        $k@5443)
                      $k@5461)
                    $k@5827)
                  $k@5845)
                $k@6019)
              $k@6037)
            $k@6115)
          $k@6133)
        $k@6137)
      $k@6155)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                        $k@5443)
                      $k@5461)
                    $k@5827)
                  $k@5845)
                $k@6019)
              $k@6037)
            $k@6115)
          $k@6133)
        $k@6137)
      $k@6155)
    $Perm.No)))
(assert (> $t@6154 0))
(declare-const $k@6156 $Perm)
(assert ($Perm.isValidVar $k@6156))
(assert ($Perm.isReadVar $k@6156 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                      $k@5444)
                    $k@5462)
                  $k@5828)
                $k@5846)
              $k@6020)
            $k@6038)
          $k@6116)
        $k@6134)
      $k@6138))
  (= $t@6153 $t@6131)))
; [eval] diz.BlockingQueue__count != null
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                        $k@5444)
                      $k@5462)
                    $k@5828)
                  $k@5846)
                $k@6020)
              $k@6038)
            $k@6116)
          $k@6134)
        $k@6138)
      $k@6156)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                        $k@5444)
                      $k@5462)
                    $k@5828)
                  $k@5846)
                $k@6020)
              $k@6038)
            $k@6116)
          $k@6134)
        $k@6138)
      $k@6156)
    $Perm.No)))
(assert (not (= $t@6153 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 18
(assert (not (= $t@6150 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not (= $t@6150 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
; [then-branch 696] $t@6150 != Null
(assert (not (= $t@6150 $Ref.null)))
(declare-const $k@6157 $Perm)
(assert ($Perm.isValidVar $k@6157))
(assert ($Perm.isReadVar $k@6157 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                      $k@5445)
                    $k@5825)
                  $k@5829)
                $k@6017)
              $k@6021)
            $k@6113)
          $k@6117)
        $k@6135)
      $k@6139))
  (= $t@6146 $t@6124)))
(declare-const $k@6158 $Perm)
(assert ($Perm.isValidVar $k@6158))
(assert ($Perm.isReadVar $k@6158 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                      $k@5446)
                    $k@5826)
                  $k@5830)
                $k@6018)
              $k@6022)
            $k@6114)
          $k@6118)
        $k@6136)
      $k@6140))
  (= $t@6144 $t@6122)))
; [exec]
; p := __flatten_79
(pop) ; 18
(push) ; 18
; [else-branch 696] $t@6150 == Null
(assert (= $t@6150 $Ref.null))
(declare-const $k@6159 $Perm)
(assert ($Perm.isValidVar $k@6159))
(assert ($Perm.isReadVar $k@6159 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                      $k@5445)
                    $k@5825)
                  $k@5829)
                $k@6017)
              $k@6021)
            $k@6113)
          $k@6117)
        $k@6135)
      $k@6139))
  (= $t@6146 $t@6124)))
(declare-const $k@6160 $Perm)
(assert ($Perm.isValidVar $k@6160))
(assert ($Perm.isReadVar $k@6160 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                      $k@5446)
                    $k@5826)
                  $k@5830)
                $k@6018)
              $k@6022)
            $k@6114)
          $k@6118)
        $k@6136)
      $k@6140))
  (= $t@6144 $t@6122)))
; [exec]
; p := __flatten_79
(pop) ; 18
(pop) ; 17
; [dead else-branch 695] $t@6128 == Null
(pop) ; 16
(push) ; 16
; [else-branch 694] $t@6128 == Null
(assert (= $t@6128 $Ref.null))
(declare-const $k@6161 $Perm)
(assert ($Perm.isValidVar $k@6161))
(assert ($Perm.isReadVar $k@6161 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                  $k@5445)
                $k@5825)
              $k@5829)
            $k@6017)
          $k@6021)
        $k@6113)
      $k@6117))
  (= $t@6124 $t@6028)))
(declare-const $k@6162 $Perm)
(assert ($Perm.isValidVar $k@6162))
(assert ($Perm.isReadVar $k@6162 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                  $k@5446)
                $k@5826)
              $k@5830)
            $k@6018)
          $k@6022)
        $k@6114)
      $k@6118))
  (= $t@6122 $t@6026)))
; [exec]
; o := __flatten_78
; [exec]
; __flatten_79 := BlockingQueue__poll(queue)
; [eval] diz != null
(declare-const $k@6163 $Perm)
(assert ($Perm.isValidVar $k@6163))
(assert ($Perm.isReadVar $k@6163 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@6163 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@6163
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                  $k@5443)
                $k@5461)
              $k@5827)
            $k@5845)
          $k@6019)
        $k@6037)
      $k@6115)
    $k@6133)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@6164 $Perm)
(assert ($Perm.isValidVar $k@6164))
(assert ($Perm.isReadVar $k@6164 $Perm.Write))
(push) ; 17
(assert (not (or (= $k@6164 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 17
(assert (<
  $k@6164
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                  $k@5444)
                $k@5462)
              $k@5828)
            $k@5846)
          $k@6020)
        $k@6038)
      $k@6116)
    $k@6134)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 17
(assert (not (not (= $t@6128 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 17
; [dead then-branch 697] $t@6128 != Null
(push) ; 17
; [else-branch 697] $t@6128 == Null
(declare-const $k@6165 $Perm)
(assert ($Perm.isValidVar $k@6165))
(assert ($Perm.isReadVar $k@6165 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@6165 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                    $k@5445)
                  $k@5825)
                $k@5829)
              $k@6017)
            $k@6021)
          $k@6113)
        $k@6117)
      $k@6161)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                    $k@5445)
                  $k@5825)
                $k@5829)
              $k@6017)
            $k@6021)
          $k@6113)
        $k@6117)
      $k@6161)
    $Perm.No)))
(assert (<
  $k@6165
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                  $k@5445)
                $k@5825)
              $k@5829)
            $k@6017)
          $k@6021)
        $k@6113)
      $k@6117)
    $k@6161)))
(declare-const $k@6166 $Perm)
(assert ($Perm.isValidVar $k@6166))
(assert ($Perm.isReadVar $k@6166 $Perm.Write))
(push) ; 18
(assert (not (or (= $k@6166 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                    $k@5446)
                  $k@5826)
                $k@5830)
              $k@6018)
            $k@6022)
          $k@6114)
        $k@6118)
      $k@6162)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                    $k@5446)
                  $k@5826)
                $k@5830)
              $k@6018)
            $k@6022)
          $k@6114)
        $k@6118)
      $k@6162)
    $Perm.No)))
(assert (<
  $k@6166
  (+
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                  $k@5446)
                $k@5826)
              $k@5830)
            $k@6018)
          $k@6022)
        $k@6114)
      $k@6118)
    $k@6162)))
(declare-const sys__result@6167 $Ref)
(declare-const $t@6168 $Snap)
(declare-const $t@6169 $Snap)
(declare-const $t@6170 $Ref)
(assert (= $t@6168 ($Snap.combine $t@6169 ($SortWrappers.$RefTo$Snap $t@6170))))
(declare-const $t@6171 $Snap)
(declare-const $t@6172 $Ref)
(assert (= $t@6169 ($Snap.combine $t@6171 ($SortWrappers.$RefTo$Snap $t@6172))))
(declare-const $t@6173 $Snap)
(declare-const $t@6174 $Snap)
(assert (= $t@6171 ($Snap.combine $t@6173 $t@6174)))
(declare-const $t@6175 $Snap)
(declare-const $t@6176 $Ref)
(assert (= $t@6173 ($Snap.combine $t@6175 ($SortWrappers.$RefTo$Snap $t@6176))))
(declare-const $t@6177 $Snap)
(assert (= $t@6175 ($Snap.combine $t@6177 $Snap.unit)))
(declare-const $t@6178 Int)
(declare-const $t@6179 $Ref)
(assert (=
  $t@6177
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@6178)
    ($SortWrappers.$RefTo$Snap $t@6179))))
(declare-const $t@6180 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@6178)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@6180) $Snap.unit)))
(declare-const $k@6181 $Perm)
(assert ($Perm.isValidVar $k@6181))
(assert ($Perm.isReadVar $k@6181 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                      $k@5443)
                    $k@5461)
                  $k@5827)
                $k@5845)
              $k@6019)
            $k@6037)
          $k@6115)
        $k@6133)
      $k@6163))
  (= $t@6180 $t@6132)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                        $k@5443)
                      $k@5461)
                    $k@5827)
                  $k@5845)
                $k@6019)
              $k@6037)
            $k@6115)
          $k@6133)
        $k@6163)
      $k@6181)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3131 $k@3139) $k@3157) $k@4675) $k@4693)
                        $k@5443)
                      $k@5461)
                    $k@5827)
                  $k@5845)
                $k@6019)
              $k@6037)
            $k@6115)
          $k@6133)
        $k@6163)
      $k@6181)
    $Perm.No)))
(assert (> $t@6180 0))
(declare-const $k@6182 $Perm)
(assert ($Perm.isValidVar $k@6182))
(assert ($Perm.isReadVar $k@6182 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                      $k@5444)
                    $k@5462)
                  $k@5828)
                $k@5846)
              $k@6020)
            $k@6038)
          $k@6116)
        $k@6134)
      $k@6164))
  (= $t@6179 $t@6131)))
; [eval] diz.BlockingQueue__count != null
(push) ; 18
(assert (not (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                        $k@5444)
                      $k@5462)
                    $k@5828)
                  $k@5846)
                $k@6020)
              $k@6038)
            $k@6116)
          $k@6134)
        $k@6164)
      $k@6182)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 18
(assert (not
  (=
    (+
      (-
        (+
          (-
            (+
              (-
                (+
                  (-
                    (+
                      (-
                        (+ (- (+ (- $k@3132 $k@3140) $k@3158) $k@4676) $k@4694)
                        $k@5444)
                      $k@5462)
                    $k@5828)
                  $k@5846)
                $k@6020)
              $k@6038)
            $k@6116)
          $k@6134)
        $k@6164)
      $k@6182)
    $Perm.No)))
(assert (not (= $t@6179 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 18
(assert (not (= $t@6176 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
(assert (not (not (= $t@6176 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 18
(push) ; 18
; [then-branch 698] $t@6176 != Null
(assert (not (= $t@6176 $Ref.null)))
(declare-const $k@6183 $Perm)
(assert ($Perm.isValidVar $k@6183))
(assert ($Perm.isReadVar $k@6183 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                      $k@5445)
                    $k@5825)
                  $k@5829)
                $k@6017)
              $k@6021)
            $k@6113)
          $k@6117)
        $k@6161)
      $k@6165))
  (= $t@6172 $t@6124)))
(declare-const $k@6184 $Perm)
(assert ($Perm.isValidVar $k@6184))
(assert ($Perm.isReadVar $k@6184 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                      $k@5446)
                    $k@5826)
                  $k@5830)
                $k@6018)
              $k@6022)
            $k@6114)
          $k@6118)
        $k@6162)
      $k@6166))
  (= $t@6170 $t@6122)))
; [exec]
; p := __flatten_79
(pop) ; 18
(push) ; 18
; [else-branch 698] $t@6176 == Null
(assert (= $t@6176 $Ref.null))
(declare-const $k@6185 $Perm)
(assert ($Perm.isValidVar $k@6185))
(assert ($Perm.isReadVar $k@6185 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3137 $k@3141) $k@4673) $k@4677) $k@5441)
                      $k@5445)
                    $k@5825)
                  $k@5829)
                $k@6017)
              $k@6021)
            $k@6113)
          $k@6117)
        $k@6161)
      $k@6165))
  (= $t@6172 $t@6124)))
(declare-const $k@6186 $Perm)
(assert ($Perm.isValidVar $k@6186))
(assert ($Perm.isReadVar $k@6186 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (-
          (+
            (-
              (+
                (-
                  (+
                    (-
                      (+ (- (+ (- $k@3138 $k@3142) $k@4674) $k@4678) $k@5442)
                      $k@5446)
                    $k@5826)
                  $k@5830)
                $k@6018)
              $k@6022)
            $k@6114)
          $k@6118)
        $k@6162)
      $k@6166))
  (= $t@6170 $t@6122)))
; [exec]
; p := __flatten_79
(pop) ; 18
(pop) ; 17
(pop) ; 16
(pop) ; 15
(pop) ; 14
(pop) ; 13
(pop) ; 12
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
; ---------- Test__testFillAndPeek ----------
(declare-const diz@6187 $Ref)
(declare-const queue@6188 $Ref)
(declare-const __flatten_80@6189 $Ref)
(declare-const b@6190 Bool)
(declare-const __flatten_81@6191 Bool)
(declare-const __flatten_82@6192 Bool)
(declare-const i@6193 $Ref)
(declare-const __flatten_83@6194 $Ref)
(declare-const j@6195 $Ref)
(declare-const __flatten_84@6196 $Ref)
(push) ; 2
; [eval] diz != null
(assert (not (= diz@6187 $Ref.null)))
(push) ; 3
(pop) ; 3
(push) ; 3
; [exec]
; __flatten_80 := BlockingQueue__BlockingQueue(10)
; [eval] capacity > 0
(declare-const sys__result@6197 $Ref)
(declare-const $t@6198 $Snap)
(declare-const $t@6199 $Snap)
(assert (= $t@6198 ($Snap.combine $t@6199 $Snap.unit)))
(declare-const $t@6200 $Snap)
(assert (= $t@6199 ($Snap.combine $t@6200 $Snap.unit)))
(declare-const $t@6201 $Snap)
(declare-const $t@6202 $Ref)
(assert (= $t@6200 ($Snap.combine $t@6201 ($SortWrappers.$RefTo$Snap $t@6202))))
(declare-const $t@6203 $Snap)
(declare-const $t@6204 $Ref)
(assert (= $t@6201 ($Snap.combine $t@6203 ($SortWrappers.$RefTo$Snap $t@6204))))
(declare-const $t@6205 $Snap)
(declare-const $t@6206 $Snap)
(assert (= $t@6203 ($Snap.combine $t@6205 $t@6206)))
(declare-const $t@6207 $Snap)
(declare-const $t@6208 $Ref)
(assert (= $t@6205 ($Snap.combine $t@6207 ($SortWrappers.$RefTo$Snap $t@6208))))
(declare-const $t@6209 $Snap)
(assert (= $t@6207 ($Snap.combine $t@6209 $Snap.unit)))
(declare-const $t@6210 Int)
(declare-const $t@6211 $Ref)
(assert (=
  $t@6209
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@6210)
    ($SortWrappers.$RefTo$Snap $t@6211))))
(declare-const $t@6212 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@6210)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@6212) $Snap.unit)))
(declare-const $t@6213 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@6212)
  ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@6213))))
; [eval] sys__result != null
(assert (not (= sys__result@6197 $Ref.null)))
(declare-const $k@6214 $Perm)
(assert ($Perm.isValidVar $k@6214))
(assert ($Perm.isReadVar $k@6214 $Perm.Write))
; [eval] sys__result.BlockingQueue__capacity > 0
(push) ; 4
(assert (not (not (= $k@6214 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 4
(assert (not (= $k@6214 $Perm.No)))
(assert (> $t@6213 0))
(declare-const $k@6215 $Perm)
(assert ($Perm.isValidVar $k@6215))
(assert ($Perm.isReadVar $k@6215 $Perm.Write))
; [eval] sys__result.BlockingQueue__count != null
(push) ; 4
(assert (not (not (= $k@6215 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 4
(assert (not (= $k@6215 $Perm.No)))
(assert (not (= $t@6211 $Ref.null)))
; [eval] sys__result.BlockingQueue__first != null
(push) ; 4
(assert (not (= $t@6208 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 4
(push) ; 4
(assert (not (not (= $t@6208 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 4
(push) ; 4
; [then-branch 699] $t@6208 != Null
(assert (not (= $t@6208 $Ref.null)))
(declare-const $k@6216 $Perm)
(assert ($Perm.isValidVar $k@6216))
(assert ($Perm.isReadVar $k@6216 $Perm.Write))
(declare-const $k@6217 $Perm)
(assert ($Perm.isValidVar $k@6217))
(assert ($Perm.isReadVar $k@6217 $Perm.Write))
; [eval] sys__result.BlockingQueue__capacity == capacity
(assert (= $t@6213 10))
; [eval] sys__result.BlockingQueue__first == null
(assert (= $t@6208 $Ref.null))
; [exec]
; queue := __flatten_80
; [exec]
; __flatten_81 := BlockingQueue__offer(queue, 3)
; [eval] diz != null
(declare-const $k@6218 $Perm)
(assert ($Perm.isValidVar $k@6218))
(assert ($Perm.isReadVar $k@6218 $Perm.Write))
(push) ; 5
(assert (not (or (= $k@6218 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (< $k@6218 $k@6214))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@6219 $Perm)
(assert ($Perm.isValidVar $k@6219))
(assert ($Perm.isReadVar $k@6219 $Perm.Write))
(push) ; 5
(assert (not (or (= $k@6219 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (< $k@6219 $k@6215))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
; [dead then-branch 700] $t@6208 != Null
; [dead else-branch 700] $t@6208 == Null
(pop) ; 4
(push) ; 4
; [else-branch 699] $t@6208 == Null
(assert (= $t@6208 $Ref.null))
(declare-const $k@6220 $Perm)
(assert ($Perm.isValidVar $k@6220))
(assert ($Perm.isReadVar $k@6220 $Perm.Write))
(declare-const $k@6221 $Perm)
(assert ($Perm.isValidVar $k@6221))
(assert ($Perm.isReadVar $k@6221 $Perm.Write))
; [eval] sys__result.BlockingQueue__capacity == capacity
(assert (= $t@6213 10))
; [eval] sys__result.BlockingQueue__first == null
; [exec]
; queue := __flatten_80
; [exec]
; __flatten_81 := BlockingQueue__offer(queue, 3)
; [eval] diz != null
(declare-const $k@6222 $Perm)
(assert ($Perm.isValidVar $k@6222))
(assert ($Perm.isReadVar $k@6222 $Perm.Write))
(push) ; 5
(assert (not (or (= $k@6222 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (< $k@6222 $k@6214))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@6223 $Perm)
(assert ($Perm.isValidVar $k@6223))
(assert ($Perm.isReadVar $k@6223 $Perm.Write))
(push) ; 5
(assert (not (or (= $k@6223 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (< $k@6223 $k@6215))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 5
(assert (not (not (= $t@6208 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
; [dead then-branch 701] $t@6208 != Null
(push) ; 5
; [else-branch 701] $t@6208 == Null
(declare-const $k@6224 $Perm)
(assert ($Perm.isValidVar $k@6224))
(assert ($Perm.isReadVar $k@6224 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@6224 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(push) ; 6
(assert (not (not (= $k@6220 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= $k@6220 $Perm.No)))
(assert (< $k@6224 $k@6220))
(declare-const $k@6225 $Perm)
(assert ($Perm.isValidVar $k@6225))
(assert ($Perm.isReadVar $k@6225 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@6225 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(push) ; 6
(assert (not (not (= $k@6221 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= $k@6221 $Perm.No)))
(assert (< $k@6225 $k@6221))
(declare-const sys__result@6226 Bool)
(declare-const $t@6227 $Snap)
(declare-const $t@6228 $Snap)
(declare-const $t@6229 $Ref)
(assert (= $t@6227 ($Snap.combine $t@6228 ($SortWrappers.$RefTo$Snap $t@6229))))
(declare-const $t@6230 $Snap)
(declare-const $t@6231 $Ref)
(assert (= $t@6228 ($Snap.combine $t@6230 ($SortWrappers.$RefTo$Snap $t@6231))))
(declare-const $t@6232 $Snap)
(declare-const $t@6233 $Snap)
(assert (= $t@6230 ($Snap.combine $t@6232 $t@6233)))
(declare-const $t@6234 $Snap)
(declare-const $t@6235 $Ref)
(assert (= $t@6232 ($Snap.combine $t@6234 ($SortWrappers.$RefTo$Snap $t@6235))))
(declare-const $t@6236 $Snap)
(assert (= $t@6234 ($Snap.combine $t@6236 $Snap.unit)))
(declare-const $t@6237 Int)
(declare-const $t@6238 $Ref)
(assert (=
  $t@6236
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@6237)
    ($SortWrappers.$RefTo$Snap $t@6238))))
(declare-const $t@6239 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@6237)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@6239) $Snap.unit)))
(declare-const $k@6240 $Perm)
(assert ($Perm.isValidVar $k@6240))
(assert ($Perm.isReadVar $k@6240 $Perm.Write))
(assert (implies (< $Perm.No (- $k@6214 $k@6222)) (= $t@6239 $t@6213)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 6
(assert (not (not (= (+ (- $k@6214 $k@6222) $k@6240) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= (+ (- $k@6214 $k@6222) $k@6240) $Perm.No)))
(assert (> $t@6239 0))
(declare-const $k@6241 $Perm)
(assert ($Perm.isValidVar $k@6241))
(assert ($Perm.isReadVar $k@6241 $Perm.Write))
(assert (implies (< $Perm.No (- $k@6215 $k@6223)) (= $t@6238 $t@6211)))
; [eval] diz.BlockingQueue__count != null
(push) ; 6
(assert (not (not (= (+ (- $k@6215 $k@6223) $k@6241) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= (+ (- $k@6215 $k@6223) $k@6241) $Perm.No)))
(assert (not (= $t@6238 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 6
(assert (not (= $t@6235 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 6
(push) ; 6
(assert (not (not (= $t@6235 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 6
(push) ; 6
; [then-branch 702] $t@6235 != Null
(assert (not (= $t@6235 $Ref.null)))
(declare-const $k@6242 $Perm)
(assert ($Perm.isValidVar $k@6242))
(assert ($Perm.isReadVar $k@6242 $Perm.Write))
(assert (implies (< $Perm.No (- $k@6220 $k@6224)) (= $t@6231 $t@6204)))
(declare-const $k@6243 $Perm)
(assert ($Perm.isValidVar $k@6243))
(assert ($Perm.isReadVar $k@6243 $Perm.Write))
(assert (implies (< $Perm.No (- $k@6221 $k@6225)) (= $t@6229 $t@6202)))
; [exec]
; b := __flatten_81
; [exec]
; __flatten_82 := BlockingQueue__offer(queue, 5)
; [eval] diz != null
(declare-const $k@6244 $Perm)
(assert ($Perm.isValidVar $k@6244))
(assert ($Perm.isReadVar $k@6244 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@6244 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@6244 (+ (- $k@6214 $k@6222) $k@6240)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@6245 $Perm)
(assert ($Perm.isValidVar $k@6245))
(assert ($Perm.isReadVar $k@6245 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@6245 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@6245 (+ (- $k@6215 $k@6223) $k@6241)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 7
(assert (not (= $t@6235 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 7
(push) ; 7
; [then-branch 703] $t@6235 != Null
(declare-const $k@6246 $Perm)
(assert ($Perm.isValidVar $k@6246))
(assert ($Perm.isReadVar $k@6246 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@6246 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= (+ (- $k@6220 $k@6224) $k@6242) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- $k@6220 $k@6224) $k@6242) $Perm.No)))
(assert (< $k@6246 (+ (- $k@6220 $k@6224) $k@6242)))
(declare-const $k@6247 $Perm)
(assert ($Perm.isValidVar $k@6247))
(assert ($Perm.isReadVar $k@6247 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@6247 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= (+ (- $k@6221 $k@6225) $k@6243) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- $k@6221 $k@6225) $k@6243) $Perm.No)))
(assert (< $k@6247 (+ (- $k@6221 $k@6225) $k@6243)))
(declare-const sys__result@6248 Bool)
(declare-const $t@6249 $Snap)
(declare-const $t@6250 $Snap)
(declare-const $t@6251 $Ref)
(assert (= $t@6249 ($Snap.combine $t@6250 ($SortWrappers.$RefTo$Snap $t@6251))))
(declare-const $t@6252 $Snap)
(declare-const $t@6253 $Ref)
(assert (= $t@6250 ($Snap.combine $t@6252 ($SortWrappers.$RefTo$Snap $t@6253))))
(declare-const $t@6254 $Snap)
(declare-const $t@6255 $Snap)
(assert (= $t@6252 ($Snap.combine $t@6254 $t@6255)))
(declare-const $t@6256 $Snap)
(declare-const $t@6257 $Ref)
(assert (= $t@6254 ($Snap.combine $t@6256 ($SortWrappers.$RefTo$Snap $t@6257))))
(declare-const $t@6258 $Snap)
(assert (= $t@6256 ($Snap.combine $t@6258 $Snap.unit)))
(declare-const $t@6259 Int)
(declare-const $t@6260 $Ref)
(assert (=
  $t@6258
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@6259)
    ($SortWrappers.$RefTo$Snap $t@6260))))
(declare-const $t@6261 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@6259)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@6261) $Snap.unit)))
(declare-const $k@6262 $Perm)
(assert ($Perm.isValidVar $k@6262))
(assert ($Perm.isReadVar $k@6262 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@6214 $k@6222) $k@6240) $k@6244))
  (= $t@6261 $t@6239)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 8
(assert (not (not (= (+ (- (+ (- $k@6214 $k@6222) $k@6240) $k@6244) $k@6262) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- (+ (- $k@6214 $k@6222) $k@6240) $k@6244) $k@6262) $Perm.No)))
(assert (> $t@6261 0))
(declare-const $k@6263 $Perm)
(assert ($Perm.isValidVar $k@6263))
(assert ($Perm.isReadVar $k@6263 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@6215 $k@6223) $k@6241) $k@6245))
  (= $t@6260 $t@6238)))
; [eval] diz.BlockingQueue__count != null
(push) ; 8
(assert (not (not (= (+ (- (+ (- $k@6215 $k@6223) $k@6241) $k@6245) $k@6263) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- (+ (- $k@6215 $k@6223) $k@6241) $k@6245) $k@6263) $Perm.No)))
(assert (not (= $t@6260 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 8
(assert (not (= $t@6257 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= $t@6257 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
(push) ; 8
; [then-branch 704] $t@6257 != Null
(assert (not (= $t@6257 $Ref.null)))
(declare-const $k@6264 $Perm)
(assert ($Perm.isValidVar $k@6264))
(assert ($Perm.isReadVar $k@6264 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@6220 $k@6224) $k@6242) $k@6246))
  (= $t@6253 $t@6231)))
(declare-const $k@6265 $Perm)
(assert ($Perm.isValidVar $k@6265))
(assert ($Perm.isReadVar $k@6265 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@6221 $k@6225) $k@6243) $k@6247))
  (= $t@6251 $t@6229)))
; [exec]
; b := __flatten_82
; [exec]
; __flatten_83 := BlockingQueue__peek(queue)
; [eval] diz != null
(declare-const $k@6266 $Perm)
(assert ($Perm.isValidVar $k@6266))
(assert ($Perm.isReadVar $k@6266 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@6266 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@6266 (+ (- (+ (- $k@6214 $k@6222) $k@6240) $k@6244) $k@6262)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@6267 $Perm)
(assert ($Perm.isValidVar $k@6267))
(assert ($Perm.isReadVar $k@6267 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@6267 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@6267 (+ (- (+ (- $k@6215 $k@6223) $k@6241) $k@6245) $k@6263)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 9
(assert (not (= $t@6257 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
(push) ; 9
; [then-branch 705] $t@6257 != Null
(declare-const $k@6268 $Perm)
(assert ($Perm.isValidVar $k@6268))
(assert ($Perm.isReadVar $k@6268 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@6268 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= (+ (- (+ (- $k@6220 $k@6224) $k@6242) $k@6246) $k@6264) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not (= (+ (- (+ (- $k@6220 $k@6224) $k@6242) $k@6246) $k@6264) $Perm.No)))
(assert (< $k@6268 (+ (- (+ (- $k@6220 $k@6224) $k@6242) $k@6246) $k@6264)))
(declare-const $k@6269 $Perm)
(assert ($Perm.isValidVar $k@6269))
(assert ($Perm.isReadVar $k@6269 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@6269 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= (+ (- (+ (- $k@6221 $k@6225) $k@6243) $k@6247) $k@6265) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not (= (+ (- (+ (- $k@6221 $k@6225) $k@6243) $k@6247) $k@6265) $Perm.No)))
(assert (< $k@6269 (+ (- (+ (- $k@6221 $k@6225) $k@6243) $k@6247) $k@6265)))
(declare-const sys__result@6270 $Ref)
(declare-const $t@6271 $Snap)
(declare-const $t@6272 $Snap)
(declare-const $t@6273 $Ref)
(assert (= $t@6271 ($Snap.combine $t@6272 ($SortWrappers.$RefTo$Snap $t@6273))))
(declare-const $t@6274 $Snap)
(declare-const $t@6275 $Ref)
(assert (= $t@6272 ($Snap.combine $t@6274 ($SortWrappers.$RefTo$Snap $t@6275))))
(declare-const $t@6276 $Snap)
(declare-const $t@6277 $Snap)
(assert (= $t@6274 ($Snap.combine $t@6276 $t@6277)))
(declare-const $t@6278 $Snap)
(declare-const $t@6279 $Ref)
(assert (= $t@6276 ($Snap.combine $t@6278 ($SortWrappers.$RefTo$Snap $t@6279))))
(declare-const $t@6280 $Snap)
(assert (= $t@6278 ($Snap.combine $t@6280 $Snap.unit)))
(declare-const $t@6281 Int)
(declare-const $t@6282 $Ref)
(assert (=
  $t@6280
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@6281)
    ($SortWrappers.$RefTo$Snap $t@6282))))
(declare-const $t@6283 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@6281)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@6283) $Snap.unit)))
(declare-const $k@6284 $Perm)
(assert ($Perm.isValidVar $k@6284))
(assert ($Perm.isReadVar $k@6284 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (- (+ (- (+ (- $k@6214 $k@6222) $k@6240) $k@6244) $k@6262) $k@6266))
  (= $t@6283 $t@6261)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 10
(assert (not (not
  (=
    (+
      (- (+ (- (+ (- $k@6214 $k@6222) $k@6240) $k@6244) $k@6262) $k@6266)
      $k@6284)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not
  (=
    (+
      (- (+ (- (+ (- $k@6214 $k@6222) $k@6240) $k@6244) $k@6262) $k@6266)
      $k@6284)
    $Perm.No)))
(assert (> $t@6283 0))
(declare-const $k@6285 $Perm)
(assert ($Perm.isValidVar $k@6285))
(assert ($Perm.isReadVar $k@6285 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (- (+ (- (+ (- $k@6215 $k@6223) $k@6241) $k@6245) $k@6263) $k@6267))
  (= $t@6282 $t@6260)))
; [eval] diz.BlockingQueue__count != null
(push) ; 10
(assert (not (not
  (=
    (+
      (- (+ (- (+ (- $k@6215 $k@6223) $k@6241) $k@6245) $k@6263) $k@6267)
      $k@6285)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not
  (=
    (+
      (- (+ (- (+ (- $k@6215 $k@6223) $k@6241) $k@6245) $k@6263) $k@6267)
      $k@6285)
    $Perm.No)))
(assert (not (= $t@6282 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 10
(assert (not (= $t@6279 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= $t@6279 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 10
(push) ; 10
; [then-branch 706] $t@6279 != Null
(assert (not (= $t@6279 $Ref.null)))
(declare-const $k@6286 $Perm)
(assert ($Perm.isValidVar $k@6286))
(assert ($Perm.isReadVar $k@6286 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (- (+ (- (+ (- $k@6220 $k@6224) $k@6242) $k@6246) $k@6264) $k@6268))
  (= $t@6275 $t@6253)))
(declare-const $k@6287 $Perm)
(assert ($Perm.isValidVar $k@6287))
(assert ($Perm.isReadVar $k@6287 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (- (+ (- (+ (- $k@6221 $k@6225) $k@6243) $k@6247) $k@6265) $k@6269))
  (= $t@6273 $t@6251)))
; [exec]
; i := __flatten_83
; [exec]
; __flatten_84 := BlockingQueue__peek(queue)
; [eval] diz != null
(declare-const $k@6288 $Perm)
(assert ($Perm.isValidVar $k@6288))
(assert ($Perm.isReadVar $k@6288 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@6288 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (<
  $k@6288
  (+ (- (+ (- (+ (- $k@6214 $k@6222) $k@6240) $k@6244) $k@6262) $k@6266) $k@6284)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@6289 $Perm)
(assert ($Perm.isValidVar $k@6289))
(assert ($Perm.isReadVar $k@6289 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@6289 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (<
  $k@6289
  (+ (- (+ (- (+ (- $k@6215 $k@6223) $k@6241) $k@6245) $k@6263) $k@6267) $k@6285)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 11
(assert (not (= $t@6279 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 11
(push) ; 11
; [then-branch 707] $t@6279 != Null
(declare-const $k@6290 $Perm)
(assert ($Perm.isValidVar $k@6290))
(assert ($Perm.isReadVar $k@6290 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@6290 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(push) ; 12
(assert (not (not
  (=
    (+
      (- (+ (- (+ (- $k@6220 $k@6224) $k@6242) $k@6246) $k@6264) $k@6268)
      $k@6286)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (- (+ (- (+ (- $k@6220 $k@6224) $k@6242) $k@6246) $k@6264) $k@6268)
      $k@6286)
    $Perm.No)))
(assert (<
  $k@6290
  (+ (- (+ (- (+ (- $k@6220 $k@6224) $k@6242) $k@6246) $k@6264) $k@6268) $k@6286)))
(declare-const $k@6291 $Perm)
(assert ($Perm.isValidVar $k@6291))
(assert ($Perm.isReadVar $k@6291 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@6291 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(push) ; 12
(assert (not (not
  (=
    (+
      (- (+ (- (+ (- $k@6221 $k@6225) $k@6243) $k@6247) $k@6265) $k@6269)
      $k@6287)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (- (+ (- (+ (- $k@6221 $k@6225) $k@6243) $k@6247) $k@6265) $k@6269)
      $k@6287)
    $Perm.No)))
(assert (<
  $k@6291
  (+ (- (+ (- (+ (- $k@6221 $k@6225) $k@6243) $k@6247) $k@6265) $k@6269) $k@6287)))
(declare-const sys__result@6292 $Ref)
(declare-const $t@6293 $Snap)
(declare-const $t@6294 $Snap)
(declare-const $t@6295 $Ref)
(assert (= $t@6293 ($Snap.combine $t@6294 ($SortWrappers.$RefTo$Snap $t@6295))))
(declare-const $t@6296 $Snap)
(declare-const $t@6297 $Ref)
(assert (= $t@6294 ($Snap.combine $t@6296 ($SortWrappers.$RefTo$Snap $t@6297))))
(declare-const $t@6298 $Snap)
(declare-const $t@6299 $Snap)
(assert (= $t@6296 ($Snap.combine $t@6298 $t@6299)))
(declare-const $t@6300 $Snap)
(declare-const $t@6301 $Ref)
(assert (= $t@6298 ($Snap.combine $t@6300 ($SortWrappers.$RefTo$Snap $t@6301))))
(declare-const $t@6302 $Snap)
(assert (= $t@6300 ($Snap.combine $t@6302 $Snap.unit)))
(declare-const $t@6303 Int)
(declare-const $t@6304 $Ref)
(assert (=
  $t@6302
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@6303)
    ($SortWrappers.$RefTo$Snap $t@6304))))
(declare-const $t@6305 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@6303)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@6305) $Snap.unit)))
(declare-const $k@6306 $Perm)
(assert ($Perm.isValidVar $k@6306))
(assert ($Perm.isReadVar $k@6306 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6214 $k@6222) $k@6240) $k@6244) $k@6262) $k@6266)
        $k@6284)
      $k@6288))
  (= $t@6305 $t@6283)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 12
(assert (not (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@6214 $k@6222) $k@6240) $k@6244) $k@6262) $k@6266)
          $k@6284)
        $k@6288)
      $k@6306)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@6214 $k@6222) $k@6240) $k@6244) $k@6262) $k@6266)
          $k@6284)
        $k@6288)
      $k@6306)
    $Perm.No)))
(assert (> $t@6305 0))
(declare-const $k@6307 $Perm)
(assert ($Perm.isValidVar $k@6307))
(assert ($Perm.isReadVar $k@6307 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6215 $k@6223) $k@6241) $k@6245) $k@6263) $k@6267)
        $k@6285)
      $k@6289))
  (= $t@6304 $t@6282)))
; [eval] diz.BlockingQueue__count != null
(push) ; 12
(assert (not (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@6215 $k@6223) $k@6241) $k@6245) $k@6263) $k@6267)
          $k@6285)
        $k@6289)
      $k@6307)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@6215 $k@6223) $k@6241) $k@6245) $k@6263) $k@6267)
          $k@6285)
        $k@6289)
      $k@6307)
    $Perm.No)))
(assert (not (= $t@6304 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 12
(assert (not (= $t@6301 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 12
(push) ; 12
(assert (not (not (= $t@6301 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 12
(push) ; 12
; [then-branch 708] $t@6301 != Null
(assert (not (= $t@6301 $Ref.null)))
(declare-const $k@6308 $Perm)
(assert ($Perm.isValidVar $k@6308))
(assert ($Perm.isReadVar $k@6308 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6220 $k@6224) $k@6242) $k@6246) $k@6264) $k@6268)
        $k@6286)
      $k@6290))
  (= $t@6297 $t@6275)))
(declare-const $k@6309 $Perm)
(assert ($Perm.isValidVar $k@6309))
(assert ($Perm.isReadVar $k@6309 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6221 $k@6225) $k@6243) $k@6247) $k@6265) $k@6269)
        $k@6287)
      $k@6291))
  (= $t@6295 $t@6273)))
; [exec]
; j := __flatten_84
(pop) ; 12
(push) ; 12
; [else-branch 708] $t@6301 == Null
(assert (= $t@6301 $Ref.null))
(declare-const $k@6310 $Perm)
(assert ($Perm.isValidVar $k@6310))
(assert ($Perm.isReadVar $k@6310 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6220 $k@6224) $k@6242) $k@6246) $k@6264) $k@6268)
        $k@6286)
      $k@6290))
  (= $t@6297 $t@6275)))
(declare-const $k@6311 $Perm)
(assert ($Perm.isValidVar $k@6311))
(assert ($Perm.isReadVar $k@6311 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6221 $k@6225) $k@6243) $k@6247) $k@6265) $k@6269)
        $k@6287)
      $k@6291))
  (= $t@6295 $t@6273)))
; [exec]
; j := __flatten_84
(pop) ; 12
(pop) ; 11
; [dead else-branch 707] $t@6279 == Null
(pop) ; 10
(push) ; 10
; [else-branch 706] $t@6279 == Null
(assert (= $t@6279 $Ref.null))
(declare-const $k@6312 $Perm)
(assert ($Perm.isValidVar $k@6312))
(assert ($Perm.isReadVar $k@6312 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (- (+ (- (+ (- $k@6220 $k@6224) $k@6242) $k@6246) $k@6264) $k@6268))
  (= $t@6275 $t@6253)))
(declare-const $k@6313 $Perm)
(assert ($Perm.isValidVar $k@6313))
(assert ($Perm.isReadVar $k@6313 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (- (+ (- (+ (- $k@6221 $k@6225) $k@6243) $k@6247) $k@6265) $k@6269))
  (= $t@6273 $t@6251)))
; [exec]
; i := __flatten_83
; [exec]
; __flatten_84 := BlockingQueue__peek(queue)
; [eval] diz != null
(declare-const $k@6314 $Perm)
(assert ($Perm.isValidVar $k@6314))
(assert ($Perm.isReadVar $k@6314 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@6314 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (<
  $k@6314
  (+ (- (+ (- (+ (- $k@6214 $k@6222) $k@6240) $k@6244) $k@6262) $k@6266) $k@6284)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@6315 $Perm)
(assert ($Perm.isValidVar $k@6315))
(assert ($Perm.isReadVar $k@6315 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@6315 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (<
  $k@6315
  (+ (- (+ (- (+ (- $k@6215 $k@6223) $k@6241) $k@6245) $k@6263) $k@6267) $k@6285)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 11
(assert (not (not (= $t@6279 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 11
; [dead then-branch 709] $t@6279 != Null
(push) ; 11
; [else-branch 709] $t@6279 == Null
(declare-const $k@6316 $Perm)
(assert ($Perm.isValidVar $k@6316))
(assert ($Perm.isReadVar $k@6316 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@6316 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(push) ; 12
(assert (not (not
  (=
    (+
      (- (+ (- (+ (- $k@6220 $k@6224) $k@6242) $k@6246) $k@6264) $k@6268)
      $k@6312)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (- (+ (- (+ (- $k@6220 $k@6224) $k@6242) $k@6246) $k@6264) $k@6268)
      $k@6312)
    $Perm.No)))
(assert (<
  $k@6316
  (+ (- (+ (- (+ (- $k@6220 $k@6224) $k@6242) $k@6246) $k@6264) $k@6268) $k@6312)))
(declare-const $k@6317 $Perm)
(assert ($Perm.isValidVar $k@6317))
(assert ($Perm.isReadVar $k@6317 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@6317 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(push) ; 12
(assert (not (not
  (=
    (+
      (- (+ (- (+ (- $k@6221 $k@6225) $k@6243) $k@6247) $k@6265) $k@6269)
      $k@6313)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (- (+ (- (+ (- $k@6221 $k@6225) $k@6243) $k@6247) $k@6265) $k@6269)
      $k@6313)
    $Perm.No)))
(assert (<
  $k@6317
  (+ (- (+ (- (+ (- $k@6221 $k@6225) $k@6243) $k@6247) $k@6265) $k@6269) $k@6313)))
(declare-const sys__result@6318 $Ref)
(declare-const $t@6319 $Snap)
(declare-const $t@6320 $Snap)
(declare-const $t@6321 $Ref)
(assert (= $t@6319 ($Snap.combine $t@6320 ($SortWrappers.$RefTo$Snap $t@6321))))
(declare-const $t@6322 $Snap)
(declare-const $t@6323 $Ref)
(assert (= $t@6320 ($Snap.combine $t@6322 ($SortWrappers.$RefTo$Snap $t@6323))))
(declare-const $t@6324 $Snap)
(declare-const $t@6325 $Snap)
(assert (= $t@6322 ($Snap.combine $t@6324 $t@6325)))
(declare-const $t@6326 $Snap)
(declare-const $t@6327 $Ref)
(assert (= $t@6324 ($Snap.combine $t@6326 ($SortWrappers.$RefTo$Snap $t@6327))))
(declare-const $t@6328 $Snap)
(assert (= $t@6326 ($Snap.combine $t@6328 $Snap.unit)))
(declare-const $t@6329 Int)
(declare-const $t@6330 $Ref)
(assert (=
  $t@6328
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@6329)
    ($SortWrappers.$RefTo$Snap $t@6330))))
(declare-const $t@6331 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@6329)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@6331) $Snap.unit)))
(declare-const $k@6332 $Perm)
(assert ($Perm.isValidVar $k@6332))
(assert ($Perm.isReadVar $k@6332 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6214 $k@6222) $k@6240) $k@6244) $k@6262) $k@6266)
        $k@6284)
      $k@6314))
  (= $t@6331 $t@6283)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 12
(assert (not (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@6214 $k@6222) $k@6240) $k@6244) $k@6262) $k@6266)
          $k@6284)
        $k@6314)
      $k@6332)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@6214 $k@6222) $k@6240) $k@6244) $k@6262) $k@6266)
          $k@6284)
        $k@6314)
      $k@6332)
    $Perm.No)))
(assert (> $t@6331 0))
(declare-const $k@6333 $Perm)
(assert ($Perm.isValidVar $k@6333))
(assert ($Perm.isReadVar $k@6333 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6215 $k@6223) $k@6241) $k@6245) $k@6263) $k@6267)
        $k@6285)
      $k@6315))
  (= $t@6330 $t@6282)))
; [eval] diz.BlockingQueue__count != null
(push) ; 12
(assert (not (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@6215 $k@6223) $k@6241) $k@6245) $k@6263) $k@6267)
          $k@6285)
        $k@6315)
      $k@6333)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@6215 $k@6223) $k@6241) $k@6245) $k@6263) $k@6267)
          $k@6285)
        $k@6315)
      $k@6333)
    $Perm.No)))
(assert (not (= $t@6330 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 12
(assert (not (= $t@6327 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 12
(push) ; 12
(assert (not (not (= $t@6327 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 12
(push) ; 12
; [then-branch 710] $t@6327 != Null
(assert (not (= $t@6327 $Ref.null)))
(declare-const $k@6334 $Perm)
(assert ($Perm.isValidVar $k@6334))
(assert ($Perm.isReadVar $k@6334 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6220 $k@6224) $k@6242) $k@6246) $k@6264) $k@6268)
        $k@6312)
      $k@6316))
  (= $t@6323 $t@6275)))
(declare-const $k@6335 $Perm)
(assert ($Perm.isValidVar $k@6335))
(assert ($Perm.isReadVar $k@6335 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6221 $k@6225) $k@6243) $k@6247) $k@6265) $k@6269)
        $k@6313)
      $k@6317))
  (= $t@6321 $t@6273)))
; [exec]
; j := __flatten_84
(pop) ; 12
(push) ; 12
; [else-branch 710] $t@6327 == Null
(assert (= $t@6327 $Ref.null))
(declare-const $k@6336 $Perm)
(assert ($Perm.isValidVar $k@6336))
(assert ($Perm.isReadVar $k@6336 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6220 $k@6224) $k@6242) $k@6246) $k@6264) $k@6268)
        $k@6312)
      $k@6316))
  (= $t@6323 $t@6275)))
(declare-const $k@6337 $Perm)
(assert ($Perm.isValidVar $k@6337))
(assert ($Perm.isReadVar $k@6337 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6221 $k@6225) $k@6243) $k@6247) $k@6265) $k@6269)
        $k@6313)
      $k@6317))
  (= $t@6321 $t@6273)))
; [exec]
; j := __flatten_84
(pop) ; 12
(pop) ; 11
(pop) ; 10
(pop) ; 9
; [dead else-branch 705] $t@6257 == Null
(pop) ; 8
(push) ; 8
; [else-branch 704] $t@6257 == Null
(assert (= $t@6257 $Ref.null))
(declare-const $k@6338 $Perm)
(assert ($Perm.isValidVar $k@6338))
(assert ($Perm.isReadVar $k@6338 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@6220 $k@6224) $k@6242) $k@6246))
  (= $t@6253 $t@6231)))
(declare-const $k@6339 $Perm)
(assert ($Perm.isValidVar $k@6339))
(assert ($Perm.isReadVar $k@6339 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@6221 $k@6225) $k@6243) $k@6247))
  (= $t@6251 $t@6229)))
; [exec]
; b := __flatten_82
; [exec]
; __flatten_83 := BlockingQueue__peek(queue)
; [eval] diz != null
(declare-const $k@6340 $Perm)
(assert ($Perm.isValidVar $k@6340))
(assert ($Perm.isReadVar $k@6340 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@6340 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@6340 (+ (- (+ (- $k@6214 $k@6222) $k@6240) $k@6244) $k@6262)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@6341 $Perm)
(assert ($Perm.isValidVar $k@6341))
(assert ($Perm.isReadVar $k@6341 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@6341 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@6341 (+ (- (+ (- $k@6215 $k@6223) $k@6241) $k@6245) $k@6263)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 9
(assert (not (not (= $t@6257 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
; [dead then-branch 711] $t@6257 != Null
(push) ; 9
; [else-branch 711] $t@6257 == Null
(declare-const $k@6342 $Perm)
(assert ($Perm.isValidVar $k@6342))
(assert ($Perm.isReadVar $k@6342 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@6342 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= (+ (- (+ (- $k@6220 $k@6224) $k@6242) $k@6246) $k@6338) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not (= (+ (- (+ (- $k@6220 $k@6224) $k@6242) $k@6246) $k@6338) $Perm.No)))
(assert (< $k@6342 (+ (- (+ (- $k@6220 $k@6224) $k@6242) $k@6246) $k@6338)))
(declare-const $k@6343 $Perm)
(assert ($Perm.isValidVar $k@6343))
(assert ($Perm.isReadVar $k@6343 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@6343 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= (+ (- (+ (- $k@6221 $k@6225) $k@6243) $k@6247) $k@6339) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not (= (+ (- (+ (- $k@6221 $k@6225) $k@6243) $k@6247) $k@6339) $Perm.No)))
(assert (< $k@6343 (+ (- (+ (- $k@6221 $k@6225) $k@6243) $k@6247) $k@6339)))
(declare-const sys__result@6344 $Ref)
(declare-const $t@6345 $Snap)
(declare-const $t@6346 $Snap)
(declare-const $t@6347 $Ref)
(assert (= $t@6345 ($Snap.combine $t@6346 ($SortWrappers.$RefTo$Snap $t@6347))))
(declare-const $t@6348 $Snap)
(declare-const $t@6349 $Ref)
(assert (= $t@6346 ($Snap.combine $t@6348 ($SortWrappers.$RefTo$Snap $t@6349))))
(declare-const $t@6350 $Snap)
(declare-const $t@6351 $Snap)
(assert (= $t@6348 ($Snap.combine $t@6350 $t@6351)))
(declare-const $t@6352 $Snap)
(declare-const $t@6353 $Ref)
(assert (= $t@6350 ($Snap.combine $t@6352 ($SortWrappers.$RefTo$Snap $t@6353))))
(declare-const $t@6354 $Snap)
(assert (= $t@6352 ($Snap.combine $t@6354 $Snap.unit)))
(declare-const $t@6355 Int)
(declare-const $t@6356 $Ref)
(assert (=
  $t@6354
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@6355)
    ($SortWrappers.$RefTo$Snap $t@6356))))
(declare-const $t@6357 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@6355)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@6357) $Snap.unit)))
(declare-const $k@6358 $Perm)
(assert ($Perm.isValidVar $k@6358))
(assert ($Perm.isReadVar $k@6358 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (- (+ (- (+ (- $k@6214 $k@6222) $k@6240) $k@6244) $k@6262) $k@6340))
  (= $t@6357 $t@6261)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 10
(assert (not (not
  (=
    (+
      (- (+ (- (+ (- $k@6214 $k@6222) $k@6240) $k@6244) $k@6262) $k@6340)
      $k@6358)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not
  (=
    (+
      (- (+ (- (+ (- $k@6214 $k@6222) $k@6240) $k@6244) $k@6262) $k@6340)
      $k@6358)
    $Perm.No)))
(assert (> $t@6357 0))
(declare-const $k@6359 $Perm)
(assert ($Perm.isValidVar $k@6359))
(assert ($Perm.isReadVar $k@6359 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (- (+ (- (+ (- $k@6215 $k@6223) $k@6241) $k@6245) $k@6263) $k@6341))
  (= $t@6356 $t@6260)))
; [eval] diz.BlockingQueue__count != null
(push) ; 10
(assert (not (not
  (=
    (+
      (- (+ (- (+ (- $k@6215 $k@6223) $k@6241) $k@6245) $k@6263) $k@6341)
      $k@6359)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not
  (=
    (+
      (- (+ (- (+ (- $k@6215 $k@6223) $k@6241) $k@6245) $k@6263) $k@6341)
      $k@6359)
    $Perm.No)))
(assert (not (= $t@6356 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 10
(assert (not (= $t@6353 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= $t@6353 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 10
(push) ; 10
; [then-branch 712] $t@6353 != Null
(assert (not (= $t@6353 $Ref.null)))
(declare-const $k@6360 $Perm)
(assert ($Perm.isValidVar $k@6360))
(assert ($Perm.isReadVar $k@6360 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (- (+ (- (+ (- $k@6220 $k@6224) $k@6242) $k@6246) $k@6338) $k@6342))
  (= $t@6349 $t@6253)))
(declare-const $k@6361 $Perm)
(assert ($Perm.isValidVar $k@6361))
(assert ($Perm.isReadVar $k@6361 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (- (+ (- (+ (- $k@6221 $k@6225) $k@6243) $k@6247) $k@6339) $k@6343))
  (= $t@6347 $t@6251)))
; [exec]
; i := __flatten_83
; [exec]
; __flatten_84 := BlockingQueue__peek(queue)
; [eval] diz != null
(declare-const $k@6362 $Perm)
(assert ($Perm.isValidVar $k@6362))
(assert ($Perm.isReadVar $k@6362 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@6362 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (<
  $k@6362
  (+ (- (+ (- (+ (- $k@6214 $k@6222) $k@6240) $k@6244) $k@6262) $k@6340) $k@6358)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@6363 $Perm)
(assert ($Perm.isValidVar $k@6363))
(assert ($Perm.isReadVar $k@6363 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@6363 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (<
  $k@6363
  (+ (- (+ (- (+ (- $k@6215 $k@6223) $k@6241) $k@6245) $k@6263) $k@6341) $k@6359)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 11
(assert (not (= $t@6353 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 11
(push) ; 11
; [then-branch 713] $t@6353 != Null
(declare-const $k@6364 $Perm)
(assert ($Perm.isValidVar $k@6364))
(assert ($Perm.isReadVar $k@6364 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@6364 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(push) ; 12
(assert (not (not
  (=
    (+
      (- (+ (- (+ (- $k@6220 $k@6224) $k@6242) $k@6246) $k@6338) $k@6342)
      $k@6360)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (- (+ (- (+ (- $k@6220 $k@6224) $k@6242) $k@6246) $k@6338) $k@6342)
      $k@6360)
    $Perm.No)))
(assert (<
  $k@6364
  (+ (- (+ (- (+ (- $k@6220 $k@6224) $k@6242) $k@6246) $k@6338) $k@6342) $k@6360)))
(declare-const $k@6365 $Perm)
(assert ($Perm.isValidVar $k@6365))
(assert ($Perm.isReadVar $k@6365 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@6365 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(push) ; 12
(assert (not (not
  (=
    (+
      (- (+ (- (+ (- $k@6221 $k@6225) $k@6243) $k@6247) $k@6339) $k@6343)
      $k@6361)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (- (+ (- (+ (- $k@6221 $k@6225) $k@6243) $k@6247) $k@6339) $k@6343)
      $k@6361)
    $Perm.No)))
(assert (<
  $k@6365
  (+ (- (+ (- (+ (- $k@6221 $k@6225) $k@6243) $k@6247) $k@6339) $k@6343) $k@6361)))
(declare-const sys__result@6366 $Ref)
(declare-const $t@6367 $Snap)
(declare-const $t@6368 $Snap)
(declare-const $t@6369 $Ref)
(assert (= $t@6367 ($Snap.combine $t@6368 ($SortWrappers.$RefTo$Snap $t@6369))))
(declare-const $t@6370 $Snap)
(declare-const $t@6371 $Ref)
(assert (= $t@6368 ($Snap.combine $t@6370 ($SortWrappers.$RefTo$Snap $t@6371))))
(declare-const $t@6372 $Snap)
(declare-const $t@6373 $Snap)
(assert (= $t@6370 ($Snap.combine $t@6372 $t@6373)))
(declare-const $t@6374 $Snap)
(declare-const $t@6375 $Ref)
(assert (= $t@6372 ($Snap.combine $t@6374 ($SortWrappers.$RefTo$Snap $t@6375))))
(declare-const $t@6376 $Snap)
(assert (= $t@6374 ($Snap.combine $t@6376 $Snap.unit)))
(declare-const $t@6377 Int)
(declare-const $t@6378 $Ref)
(assert (=
  $t@6376
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@6377)
    ($SortWrappers.$RefTo$Snap $t@6378))))
(declare-const $t@6379 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@6377)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@6379) $Snap.unit)))
(declare-const $k@6380 $Perm)
(assert ($Perm.isValidVar $k@6380))
(assert ($Perm.isReadVar $k@6380 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6214 $k@6222) $k@6240) $k@6244) $k@6262) $k@6340)
        $k@6358)
      $k@6362))
  (= $t@6379 $t@6357)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 12
(assert (not (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@6214 $k@6222) $k@6240) $k@6244) $k@6262) $k@6340)
          $k@6358)
        $k@6362)
      $k@6380)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@6214 $k@6222) $k@6240) $k@6244) $k@6262) $k@6340)
          $k@6358)
        $k@6362)
      $k@6380)
    $Perm.No)))
(assert (> $t@6379 0))
(declare-const $k@6381 $Perm)
(assert ($Perm.isValidVar $k@6381))
(assert ($Perm.isReadVar $k@6381 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6215 $k@6223) $k@6241) $k@6245) $k@6263) $k@6341)
        $k@6359)
      $k@6363))
  (= $t@6378 $t@6356)))
; [eval] diz.BlockingQueue__count != null
(push) ; 12
(assert (not (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@6215 $k@6223) $k@6241) $k@6245) $k@6263) $k@6341)
          $k@6359)
        $k@6363)
      $k@6381)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@6215 $k@6223) $k@6241) $k@6245) $k@6263) $k@6341)
          $k@6359)
        $k@6363)
      $k@6381)
    $Perm.No)))
(assert (not (= $t@6378 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 12
(assert (not (= $t@6375 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 12
(push) ; 12
(assert (not (not (= $t@6375 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 12
(push) ; 12
; [then-branch 714] $t@6375 != Null
(assert (not (= $t@6375 $Ref.null)))
(declare-const $k@6382 $Perm)
(assert ($Perm.isValidVar $k@6382))
(assert ($Perm.isReadVar $k@6382 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6220 $k@6224) $k@6242) $k@6246) $k@6338) $k@6342)
        $k@6360)
      $k@6364))
  (= $t@6371 $t@6349)))
(declare-const $k@6383 $Perm)
(assert ($Perm.isValidVar $k@6383))
(assert ($Perm.isReadVar $k@6383 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6221 $k@6225) $k@6243) $k@6247) $k@6339) $k@6343)
        $k@6361)
      $k@6365))
  (= $t@6369 $t@6347)))
; [exec]
; j := __flatten_84
(pop) ; 12
(push) ; 12
; [else-branch 714] $t@6375 == Null
(assert (= $t@6375 $Ref.null))
(declare-const $k@6384 $Perm)
(assert ($Perm.isValidVar $k@6384))
(assert ($Perm.isReadVar $k@6384 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6220 $k@6224) $k@6242) $k@6246) $k@6338) $k@6342)
        $k@6360)
      $k@6364))
  (= $t@6371 $t@6349)))
(declare-const $k@6385 $Perm)
(assert ($Perm.isValidVar $k@6385))
(assert ($Perm.isReadVar $k@6385 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6221 $k@6225) $k@6243) $k@6247) $k@6339) $k@6343)
        $k@6361)
      $k@6365))
  (= $t@6369 $t@6347)))
; [exec]
; j := __flatten_84
(pop) ; 12
(pop) ; 11
; [dead else-branch 713] $t@6353 == Null
(pop) ; 10
(push) ; 10
; [else-branch 712] $t@6353 == Null
(assert (= $t@6353 $Ref.null))
(declare-const $k@6386 $Perm)
(assert ($Perm.isValidVar $k@6386))
(assert ($Perm.isReadVar $k@6386 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (- (+ (- (+ (- $k@6220 $k@6224) $k@6242) $k@6246) $k@6338) $k@6342))
  (= $t@6349 $t@6253)))
(declare-const $k@6387 $Perm)
(assert ($Perm.isValidVar $k@6387))
(assert ($Perm.isReadVar $k@6387 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (- (+ (- (+ (- $k@6221 $k@6225) $k@6243) $k@6247) $k@6339) $k@6343))
  (= $t@6347 $t@6251)))
; [exec]
; i := __flatten_83
; [exec]
; __flatten_84 := BlockingQueue__peek(queue)
; [eval] diz != null
(declare-const $k@6388 $Perm)
(assert ($Perm.isValidVar $k@6388))
(assert ($Perm.isReadVar $k@6388 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@6388 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (<
  $k@6388
  (+ (- (+ (- (+ (- $k@6214 $k@6222) $k@6240) $k@6244) $k@6262) $k@6340) $k@6358)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@6389 $Perm)
(assert ($Perm.isValidVar $k@6389))
(assert ($Perm.isReadVar $k@6389 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@6389 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (<
  $k@6389
  (+ (- (+ (- (+ (- $k@6215 $k@6223) $k@6241) $k@6245) $k@6263) $k@6341) $k@6359)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 11
(assert (not (not (= $t@6353 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 11
; [dead then-branch 715] $t@6353 != Null
(push) ; 11
; [else-branch 715] $t@6353 == Null
(declare-const $k@6390 $Perm)
(assert ($Perm.isValidVar $k@6390))
(assert ($Perm.isReadVar $k@6390 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@6390 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(push) ; 12
(assert (not (not
  (=
    (+
      (- (+ (- (+ (- $k@6220 $k@6224) $k@6242) $k@6246) $k@6338) $k@6342)
      $k@6386)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (- (+ (- (+ (- $k@6220 $k@6224) $k@6242) $k@6246) $k@6338) $k@6342)
      $k@6386)
    $Perm.No)))
(assert (<
  $k@6390
  (+ (- (+ (- (+ (- $k@6220 $k@6224) $k@6242) $k@6246) $k@6338) $k@6342) $k@6386)))
(declare-const $k@6391 $Perm)
(assert ($Perm.isValidVar $k@6391))
(assert ($Perm.isReadVar $k@6391 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@6391 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(push) ; 12
(assert (not (not
  (=
    (+
      (- (+ (- (+ (- $k@6221 $k@6225) $k@6243) $k@6247) $k@6339) $k@6343)
      $k@6387)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (- (+ (- (+ (- $k@6221 $k@6225) $k@6243) $k@6247) $k@6339) $k@6343)
      $k@6387)
    $Perm.No)))
(assert (<
  $k@6391
  (+ (- (+ (- (+ (- $k@6221 $k@6225) $k@6243) $k@6247) $k@6339) $k@6343) $k@6387)))
(declare-const sys__result@6392 $Ref)
(declare-const $t@6393 $Snap)
(declare-const $t@6394 $Snap)
(declare-const $t@6395 $Ref)
(assert (= $t@6393 ($Snap.combine $t@6394 ($SortWrappers.$RefTo$Snap $t@6395))))
(declare-const $t@6396 $Snap)
(declare-const $t@6397 $Ref)
(assert (= $t@6394 ($Snap.combine $t@6396 ($SortWrappers.$RefTo$Snap $t@6397))))
(declare-const $t@6398 $Snap)
(declare-const $t@6399 $Snap)
(assert (= $t@6396 ($Snap.combine $t@6398 $t@6399)))
(declare-const $t@6400 $Snap)
(declare-const $t@6401 $Ref)
(assert (= $t@6398 ($Snap.combine $t@6400 ($SortWrappers.$RefTo$Snap $t@6401))))
(declare-const $t@6402 $Snap)
(assert (= $t@6400 ($Snap.combine $t@6402 $Snap.unit)))
(declare-const $t@6403 Int)
(declare-const $t@6404 $Ref)
(assert (=
  $t@6402
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@6403)
    ($SortWrappers.$RefTo$Snap $t@6404))))
(declare-const $t@6405 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@6403)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@6405) $Snap.unit)))
(declare-const $k@6406 $Perm)
(assert ($Perm.isValidVar $k@6406))
(assert ($Perm.isReadVar $k@6406 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6214 $k@6222) $k@6240) $k@6244) $k@6262) $k@6340)
        $k@6358)
      $k@6388))
  (= $t@6405 $t@6357)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 12
(assert (not (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@6214 $k@6222) $k@6240) $k@6244) $k@6262) $k@6340)
          $k@6358)
        $k@6388)
      $k@6406)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@6214 $k@6222) $k@6240) $k@6244) $k@6262) $k@6340)
          $k@6358)
        $k@6388)
      $k@6406)
    $Perm.No)))
(assert (> $t@6405 0))
(declare-const $k@6407 $Perm)
(assert ($Perm.isValidVar $k@6407))
(assert ($Perm.isReadVar $k@6407 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6215 $k@6223) $k@6241) $k@6245) $k@6263) $k@6341)
        $k@6359)
      $k@6389))
  (= $t@6404 $t@6356)))
; [eval] diz.BlockingQueue__count != null
(push) ; 12
(assert (not (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@6215 $k@6223) $k@6241) $k@6245) $k@6263) $k@6341)
          $k@6359)
        $k@6389)
      $k@6407)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@6215 $k@6223) $k@6241) $k@6245) $k@6263) $k@6341)
          $k@6359)
        $k@6389)
      $k@6407)
    $Perm.No)))
(assert (not (= $t@6404 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 12
(assert (not (= $t@6401 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 12
(push) ; 12
(assert (not (not (= $t@6401 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 12
(push) ; 12
; [then-branch 716] $t@6401 != Null
(assert (not (= $t@6401 $Ref.null)))
(declare-const $k@6408 $Perm)
(assert ($Perm.isValidVar $k@6408))
(assert ($Perm.isReadVar $k@6408 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6220 $k@6224) $k@6242) $k@6246) $k@6338) $k@6342)
        $k@6386)
      $k@6390))
  (= $t@6397 $t@6349)))
(declare-const $k@6409 $Perm)
(assert ($Perm.isValidVar $k@6409))
(assert ($Perm.isReadVar $k@6409 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6221 $k@6225) $k@6243) $k@6247) $k@6339) $k@6343)
        $k@6387)
      $k@6391))
  (= $t@6395 $t@6347)))
; [exec]
; j := __flatten_84
(pop) ; 12
(push) ; 12
; [else-branch 716] $t@6401 == Null
(assert (= $t@6401 $Ref.null))
(declare-const $k@6410 $Perm)
(assert ($Perm.isValidVar $k@6410))
(assert ($Perm.isReadVar $k@6410 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6220 $k@6224) $k@6242) $k@6246) $k@6338) $k@6342)
        $k@6386)
      $k@6390))
  (= $t@6397 $t@6349)))
(declare-const $k@6411 $Perm)
(assert ($Perm.isValidVar $k@6411))
(assert ($Perm.isReadVar $k@6411 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6221 $k@6225) $k@6243) $k@6247) $k@6339) $k@6343)
        $k@6387)
      $k@6391))
  (= $t@6395 $t@6347)))
; [exec]
; j := __flatten_84
(pop) ; 12
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
; [dead else-branch 703] $t@6235 == Null
(pop) ; 6
(push) ; 6
; [else-branch 702] $t@6235 == Null
(assert (= $t@6235 $Ref.null))
(declare-const $k@6412 $Perm)
(assert ($Perm.isValidVar $k@6412))
(assert ($Perm.isReadVar $k@6412 $Perm.Write))
(assert (implies (< $Perm.No (- $k@6220 $k@6224)) (= $t@6231 $t@6204)))
(declare-const $k@6413 $Perm)
(assert ($Perm.isValidVar $k@6413))
(assert ($Perm.isReadVar $k@6413 $Perm.Write))
(assert (implies (< $Perm.No (- $k@6221 $k@6225)) (= $t@6229 $t@6202)))
; [exec]
; b := __flatten_81
; [exec]
; __flatten_82 := BlockingQueue__offer(queue, 5)
; [eval] diz != null
(declare-const $k@6414 $Perm)
(assert ($Perm.isValidVar $k@6414))
(assert ($Perm.isReadVar $k@6414 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@6414 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@6414 (+ (- $k@6214 $k@6222) $k@6240)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@6415 $Perm)
(assert ($Perm.isValidVar $k@6415))
(assert ($Perm.isReadVar $k@6415 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@6415 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@6415 (+ (- $k@6215 $k@6223) $k@6241)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 7
(assert (not (not (= $t@6235 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 7
; [dead then-branch 717] $t@6235 != Null
(push) ; 7
; [else-branch 717] $t@6235 == Null
(declare-const $k@6416 $Perm)
(assert ($Perm.isValidVar $k@6416))
(assert ($Perm.isReadVar $k@6416 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@6416 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= (+ (- $k@6220 $k@6224) $k@6412) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- $k@6220 $k@6224) $k@6412) $Perm.No)))
(assert (< $k@6416 (+ (- $k@6220 $k@6224) $k@6412)))
(declare-const $k@6417 $Perm)
(assert ($Perm.isValidVar $k@6417))
(assert ($Perm.isReadVar $k@6417 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@6417 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= (+ (- $k@6221 $k@6225) $k@6413) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- $k@6221 $k@6225) $k@6413) $Perm.No)))
(assert (< $k@6417 (+ (- $k@6221 $k@6225) $k@6413)))
(declare-const sys__result@6418 Bool)
(declare-const $t@6419 $Snap)
(declare-const $t@6420 $Snap)
(declare-const $t@6421 $Ref)
(assert (= $t@6419 ($Snap.combine $t@6420 ($SortWrappers.$RefTo$Snap $t@6421))))
(declare-const $t@6422 $Snap)
(declare-const $t@6423 $Ref)
(assert (= $t@6420 ($Snap.combine $t@6422 ($SortWrappers.$RefTo$Snap $t@6423))))
(declare-const $t@6424 $Snap)
(declare-const $t@6425 $Snap)
(assert (= $t@6422 ($Snap.combine $t@6424 $t@6425)))
(declare-const $t@6426 $Snap)
(declare-const $t@6427 $Ref)
(assert (= $t@6424 ($Snap.combine $t@6426 ($SortWrappers.$RefTo$Snap $t@6427))))
(declare-const $t@6428 $Snap)
(assert (= $t@6426 ($Snap.combine $t@6428 $Snap.unit)))
(declare-const $t@6429 Int)
(declare-const $t@6430 $Ref)
(assert (=
  $t@6428
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@6429)
    ($SortWrappers.$RefTo$Snap $t@6430))))
(declare-const $t@6431 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@6429)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@6431) $Snap.unit)))
(declare-const $k@6432 $Perm)
(assert ($Perm.isValidVar $k@6432))
(assert ($Perm.isReadVar $k@6432 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@6214 $k@6222) $k@6240) $k@6414))
  (= $t@6431 $t@6239)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 8
(assert (not (not (= (+ (- (+ (- $k@6214 $k@6222) $k@6240) $k@6414) $k@6432) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- (+ (- $k@6214 $k@6222) $k@6240) $k@6414) $k@6432) $Perm.No)))
(assert (> $t@6431 0))
(declare-const $k@6433 $Perm)
(assert ($Perm.isValidVar $k@6433))
(assert ($Perm.isReadVar $k@6433 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@6215 $k@6223) $k@6241) $k@6415))
  (= $t@6430 $t@6238)))
; [eval] diz.BlockingQueue__count != null
(push) ; 8
(assert (not (not (= (+ (- (+ (- $k@6215 $k@6223) $k@6241) $k@6415) $k@6433) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- (+ (- $k@6215 $k@6223) $k@6241) $k@6415) $k@6433) $Perm.No)))
(assert (not (= $t@6430 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 8
(assert (not (= $t@6427 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= $t@6427 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
(push) ; 8
; [then-branch 718] $t@6427 != Null
(assert (not (= $t@6427 $Ref.null)))
(declare-const $k@6434 $Perm)
(assert ($Perm.isValidVar $k@6434))
(assert ($Perm.isReadVar $k@6434 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@6220 $k@6224) $k@6412) $k@6416))
  (= $t@6423 $t@6231)))
(declare-const $k@6435 $Perm)
(assert ($Perm.isValidVar $k@6435))
(assert ($Perm.isReadVar $k@6435 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@6221 $k@6225) $k@6413) $k@6417))
  (= $t@6421 $t@6229)))
; [exec]
; b := __flatten_82
; [exec]
; __flatten_83 := BlockingQueue__peek(queue)
; [eval] diz != null
(declare-const $k@6436 $Perm)
(assert ($Perm.isValidVar $k@6436))
(assert ($Perm.isReadVar $k@6436 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@6436 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@6436 (+ (- (+ (- $k@6214 $k@6222) $k@6240) $k@6414) $k@6432)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@6437 $Perm)
(assert ($Perm.isValidVar $k@6437))
(assert ($Perm.isReadVar $k@6437 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@6437 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@6437 (+ (- (+ (- $k@6215 $k@6223) $k@6241) $k@6415) $k@6433)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 9
(assert (not (= $t@6427 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
(push) ; 9
; [then-branch 719] $t@6427 != Null
(declare-const $k@6438 $Perm)
(assert ($Perm.isValidVar $k@6438))
(assert ($Perm.isReadVar $k@6438 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@6438 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= (+ (- (+ (- $k@6220 $k@6224) $k@6412) $k@6416) $k@6434) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not (= (+ (- (+ (- $k@6220 $k@6224) $k@6412) $k@6416) $k@6434) $Perm.No)))
(assert (< $k@6438 (+ (- (+ (- $k@6220 $k@6224) $k@6412) $k@6416) $k@6434)))
(declare-const $k@6439 $Perm)
(assert ($Perm.isValidVar $k@6439))
(assert ($Perm.isReadVar $k@6439 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@6439 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= (+ (- (+ (- $k@6221 $k@6225) $k@6413) $k@6417) $k@6435) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not (= (+ (- (+ (- $k@6221 $k@6225) $k@6413) $k@6417) $k@6435) $Perm.No)))
(assert (< $k@6439 (+ (- (+ (- $k@6221 $k@6225) $k@6413) $k@6417) $k@6435)))
(declare-const sys__result@6440 $Ref)
(declare-const $t@6441 $Snap)
(declare-const $t@6442 $Snap)
(declare-const $t@6443 $Ref)
(assert (= $t@6441 ($Snap.combine $t@6442 ($SortWrappers.$RefTo$Snap $t@6443))))
(declare-const $t@6444 $Snap)
(declare-const $t@6445 $Ref)
(assert (= $t@6442 ($Snap.combine $t@6444 ($SortWrappers.$RefTo$Snap $t@6445))))
(declare-const $t@6446 $Snap)
(declare-const $t@6447 $Snap)
(assert (= $t@6444 ($Snap.combine $t@6446 $t@6447)))
(declare-const $t@6448 $Snap)
(declare-const $t@6449 $Ref)
(assert (= $t@6446 ($Snap.combine $t@6448 ($SortWrappers.$RefTo$Snap $t@6449))))
(declare-const $t@6450 $Snap)
(assert (= $t@6448 ($Snap.combine $t@6450 $Snap.unit)))
(declare-const $t@6451 Int)
(declare-const $t@6452 $Ref)
(assert (=
  $t@6450
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@6451)
    ($SortWrappers.$RefTo$Snap $t@6452))))
(declare-const $t@6453 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@6451)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@6453) $Snap.unit)))
(declare-const $k@6454 $Perm)
(assert ($Perm.isValidVar $k@6454))
(assert ($Perm.isReadVar $k@6454 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (- (+ (- (+ (- $k@6214 $k@6222) $k@6240) $k@6414) $k@6432) $k@6436))
  (= $t@6453 $t@6431)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 10
(assert (not (not
  (=
    (+
      (- (+ (- (+ (- $k@6214 $k@6222) $k@6240) $k@6414) $k@6432) $k@6436)
      $k@6454)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not
  (=
    (+
      (- (+ (- (+ (- $k@6214 $k@6222) $k@6240) $k@6414) $k@6432) $k@6436)
      $k@6454)
    $Perm.No)))
(assert (> $t@6453 0))
(declare-const $k@6455 $Perm)
(assert ($Perm.isValidVar $k@6455))
(assert ($Perm.isReadVar $k@6455 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (- (+ (- (+ (- $k@6215 $k@6223) $k@6241) $k@6415) $k@6433) $k@6437))
  (= $t@6452 $t@6430)))
; [eval] diz.BlockingQueue__count != null
(push) ; 10
(assert (not (not
  (=
    (+
      (- (+ (- (+ (- $k@6215 $k@6223) $k@6241) $k@6415) $k@6433) $k@6437)
      $k@6455)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not
  (=
    (+
      (- (+ (- (+ (- $k@6215 $k@6223) $k@6241) $k@6415) $k@6433) $k@6437)
      $k@6455)
    $Perm.No)))
(assert (not (= $t@6452 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 10
(assert (not (= $t@6449 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= $t@6449 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 10
(push) ; 10
; [then-branch 720] $t@6449 != Null
(assert (not (= $t@6449 $Ref.null)))
(declare-const $k@6456 $Perm)
(assert ($Perm.isValidVar $k@6456))
(assert ($Perm.isReadVar $k@6456 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (- (+ (- (+ (- $k@6220 $k@6224) $k@6412) $k@6416) $k@6434) $k@6438))
  (= $t@6445 $t@6423)))
(declare-const $k@6457 $Perm)
(assert ($Perm.isValidVar $k@6457))
(assert ($Perm.isReadVar $k@6457 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (- (+ (- (+ (- $k@6221 $k@6225) $k@6413) $k@6417) $k@6435) $k@6439))
  (= $t@6443 $t@6421)))
; [exec]
; i := __flatten_83
; [exec]
; __flatten_84 := BlockingQueue__peek(queue)
; [eval] diz != null
(declare-const $k@6458 $Perm)
(assert ($Perm.isValidVar $k@6458))
(assert ($Perm.isReadVar $k@6458 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@6458 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (<
  $k@6458
  (+ (- (+ (- (+ (- $k@6214 $k@6222) $k@6240) $k@6414) $k@6432) $k@6436) $k@6454)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@6459 $Perm)
(assert ($Perm.isValidVar $k@6459))
(assert ($Perm.isReadVar $k@6459 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@6459 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (<
  $k@6459
  (+ (- (+ (- (+ (- $k@6215 $k@6223) $k@6241) $k@6415) $k@6433) $k@6437) $k@6455)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 11
(assert (not (= $t@6449 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 11
(push) ; 11
; [then-branch 721] $t@6449 != Null
(declare-const $k@6460 $Perm)
(assert ($Perm.isValidVar $k@6460))
(assert ($Perm.isReadVar $k@6460 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@6460 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(push) ; 12
(assert (not (not
  (=
    (+
      (- (+ (- (+ (- $k@6220 $k@6224) $k@6412) $k@6416) $k@6434) $k@6438)
      $k@6456)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (- (+ (- (+ (- $k@6220 $k@6224) $k@6412) $k@6416) $k@6434) $k@6438)
      $k@6456)
    $Perm.No)))
(assert (<
  $k@6460
  (+ (- (+ (- (+ (- $k@6220 $k@6224) $k@6412) $k@6416) $k@6434) $k@6438) $k@6456)))
(declare-const $k@6461 $Perm)
(assert ($Perm.isValidVar $k@6461))
(assert ($Perm.isReadVar $k@6461 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@6461 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(push) ; 12
(assert (not (not
  (=
    (+
      (- (+ (- (+ (- $k@6221 $k@6225) $k@6413) $k@6417) $k@6435) $k@6439)
      $k@6457)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (- (+ (- (+ (- $k@6221 $k@6225) $k@6413) $k@6417) $k@6435) $k@6439)
      $k@6457)
    $Perm.No)))
(assert (<
  $k@6461
  (+ (- (+ (- (+ (- $k@6221 $k@6225) $k@6413) $k@6417) $k@6435) $k@6439) $k@6457)))
(declare-const sys__result@6462 $Ref)
(declare-const $t@6463 $Snap)
(declare-const $t@6464 $Snap)
(declare-const $t@6465 $Ref)
(assert (= $t@6463 ($Snap.combine $t@6464 ($SortWrappers.$RefTo$Snap $t@6465))))
(declare-const $t@6466 $Snap)
(declare-const $t@6467 $Ref)
(assert (= $t@6464 ($Snap.combine $t@6466 ($SortWrappers.$RefTo$Snap $t@6467))))
(declare-const $t@6468 $Snap)
(declare-const $t@6469 $Snap)
(assert (= $t@6466 ($Snap.combine $t@6468 $t@6469)))
(declare-const $t@6470 $Snap)
(declare-const $t@6471 $Ref)
(assert (= $t@6468 ($Snap.combine $t@6470 ($SortWrappers.$RefTo$Snap $t@6471))))
(declare-const $t@6472 $Snap)
(assert (= $t@6470 ($Snap.combine $t@6472 $Snap.unit)))
(declare-const $t@6473 Int)
(declare-const $t@6474 $Ref)
(assert (=
  $t@6472
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@6473)
    ($SortWrappers.$RefTo$Snap $t@6474))))
(declare-const $t@6475 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@6473)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@6475) $Snap.unit)))
(declare-const $k@6476 $Perm)
(assert ($Perm.isValidVar $k@6476))
(assert ($Perm.isReadVar $k@6476 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6214 $k@6222) $k@6240) $k@6414) $k@6432) $k@6436)
        $k@6454)
      $k@6458))
  (= $t@6475 $t@6453)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 12
(assert (not (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@6214 $k@6222) $k@6240) $k@6414) $k@6432) $k@6436)
          $k@6454)
        $k@6458)
      $k@6476)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@6214 $k@6222) $k@6240) $k@6414) $k@6432) $k@6436)
          $k@6454)
        $k@6458)
      $k@6476)
    $Perm.No)))
(assert (> $t@6475 0))
(declare-const $k@6477 $Perm)
(assert ($Perm.isValidVar $k@6477))
(assert ($Perm.isReadVar $k@6477 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6215 $k@6223) $k@6241) $k@6415) $k@6433) $k@6437)
        $k@6455)
      $k@6459))
  (= $t@6474 $t@6452)))
; [eval] diz.BlockingQueue__count != null
(push) ; 12
(assert (not (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@6215 $k@6223) $k@6241) $k@6415) $k@6433) $k@6437)
          $k@6455)
        $k@6459)
      $k@6477)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@6215 $k@6223) $k@6241) $k@6415) $k@6433) $k@6437)
          $k@6455)
        $k@6459)
      $k@6477)
    $Perm.No)))
(assert (not (= $t@6474 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 12
(assert (not (= $t@6471 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 12
(push) ; 12
(assert (not (not (= $t@6471 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 12
(push) ; 12
; [then-branch 722] $t@6471 != Null
(assert (not (= $t@6471 $Ref.null)))
(declare-const $k@6478 $Perm)
(assert ($Perm.isValidVar $k@6478))
(assert ($Perm.isReadVar $k@6478 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6220 $k@6224) $k@6412) $k@6416) $k@6434) $k@6438)
        $k@6456)
      $k@6460))
  (= $t@6467 $t@6445)))
(declare-const $k@6479 $Perm)
(assert ($Perm.isValidVar $k@6479))
(assert ($Perm.isReadVar $k@6479 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6221 $k@6225) $k@6413) $k@6417) $k@6435) $k@6439)
        $k@6457)
      $k@6461))
  (= $t@6465 $t@6443)))
; [exec]
; j := __flatten_84
(pop) ; 12
(push) ; 12
; [else-branch 722] $t@6471 == Null
(assert (= $t@6471 $Ref.null))
(declare-const $k@6480 $Perm)
(assert ($Perm.isValidVar $k@6480))
(assert ($Perm.isReadVar $k@6480 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6220 $k@6224) $k@6412) $k@6416) $k@6434) $k@6438)
        $k@6456)
      $k@6460))
  (= $t@6467 $t@6445)))
(declare-const $k@6481 $Perm)
(assert ($Perm.isValidVar $k@6481))
(assert ($Perm.isReadVar $k@6481 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6221 $k@6225) $k@6413) $k@6417) $k@6435) $k@6439)
        $k@6457)
      $k@6461))
  (= $t@6465 $t@6443)))
; [exec]
; j := __flatten_84
(pop) ; 12
(pop) ; 11
; [dead else-branch 721] $t@6449 == Null
(pop) ; 10
(push) ; 10
; [else-branch 720] $t@6449 == Null
(assert (= $t@6449 $Ref.null))
(declare-const $k@6482 $Perm)
(assert ($Perm.isValidVar $k@6482))
(assert ($Perm.isReadVar $k@6482 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (- (+ (- (+ (- $k@6220 $k@6224) $k@6412) $k@6416) $k@6434) $k@6438))
  (= $t@6445 $t@6423)))
(declare-const $k@6483 $Perm)
(assert ($Perm.isValidVar $k@6483))
(assert ($Perm.isReadVar $k@6483 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (- (+ (- (+ (- $k@6221 $k@6225) $k@6413) $k@6417) $k@6435) $k@6439))
  (= $t@6443 $t@6421)))
; [exec]
; i := __flatten_83
; [exec]
; __flatten_84 := BlockingQueue__peek(queue)
; [eval] diz != null
(declare-const $k@6484 $Perm)
(assert ($Perm.isValidVar $k@6484))
(assert ($Perm.isReadVar $k@6484 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@6484 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (<
  $k@6484
  (+ (- (+ (- (+ (- $k@6214 $k@6222) $k@6240) $k@6414) $k@6432) $k@6436) $k@6454)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@6485 $Perm)
(assert ($Perm.isValidVar $k@6485))
(assert ($Perm.isReadVar $k@6485 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@6485 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (<
  $k@6485
  (+ (- (+ (- (+ (- $k@6215 $k@6223) $k@6241) $k@6415) $k@6433) $k@6437) $k@6455)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 11
(assert (not (not (= $t@6449 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 11
; [dead then-branch 723] $t@6449 != Null
(push) ; 11
; [else-branch 723] $t@6449 == Null
(declare-const $k@6486 $Perm)
(assert ($Perm.isValidVar $k@6486))
(assert ($Perm.isReadVar $k@6486 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@6486 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(push) ; 12
(assert (not (not
  (=
    (+
      (- (+ (- (+ (- $k@6220 $k@6224) $k@6412) $k@6416) $k@6434) $k@6438)
      $k@6482)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (- (+ (- (+ (- $k@6220 $k@6224) $k@6412) $k@6416) $k@6434) $k@6438)
      $k@6482)
    $Perm.No)))
(assert (<
  $k@6486
  (+ (- (+ (- (+ (- $k@6220 $k@6224) $k@6412) $k@6416) $k@6434) $k@6438) $k@6482)))
(declare-const $k@6487 $Perm)
(assert ($Perm.isValidVar $k@6487))
(assert ($Perm.isReadVar $k@6487 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@6487 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(push) ; 12
(assert (not (not
  (=
    (+
      (- (+ (- (+ (- $k@6221 $k@6225) $k@6413) $k@6417) $k@6435) $k@6439)
      $k@6483)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (- (+ (- (+ (- $k@6221 $k@6225) $k@6413) $k@6417) $k@6435) $k@6439)
      $k@6483)
    $Perm.No)))
(assert (<
  $k@6487
  (+ (- (+ (- (+ (- $k@6221 $k@6225) $k@6413) $k@6417) $k@6435) $k@6439) $k@6483)))
(declare-const sys__result@6488 $Ref)
(declare-const $t@6489 $Snap)
(declare-const $t@6490 $Snap)
(declare-const $t@6491 $Ref)
(assert (= $t@6489 ($Snap.combine $t@6490 ($SortWrappers.$RefTo$Snap $t@6491))))
(declare-const $t@6492 $Snap)
(declare-const $t@6493 $Ref)
(assert (= $t@6490 ($Snap.combine $t@6492 ($SortWrappers.$RefTo$Snap $t@6493))))
(declare-const $t@6494 $Snap)
(declare-const $t@6495 $Snap)
(assert (= $t@6492 ($Snap.combine $t@6494 $t@6495)))
(declare-const $t@6496 $Snap)
(declare-const $t@6497 $Ref)
(assert (= $t@6494 ($Snap.combine $t@6496 ($SortWrappers.$RefTo$Snap $t@6497))))
(declare-const $t@6498 $Snap)
(assert (= $t@6496 ($Snap.combine $t@6498 $Snap.unit)))
(declare-const $t@6499 Int)
(declare-const $t@6500 $Ref)
(assert (=
  $t@6498
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@6499)
    ($SortWrappers.$RefTo$Snap $t@6500))))
(declare-const $t@6501 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@6499)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@6501) $Snap.unit)))
(declare-const $k@6502 $Perm)
(assert ($Perm.isValidVar $k@6502))
(assert ($Perm.isReadVar $k@6502 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6214 $k@6222) $k@6240) $k@6414) $k@6432) $k@6436)
        $k@6454)
      $k@6484))
  (= $t@6501 $t@6453)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 12
(assert (not (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@6214 $k@6222) $k@6240) $k@6414) $k@6432) $k@6436)
          $k@6454)
        $k@6484)
      $k@6502)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@6214 $k@6222) $k@6240) $k@6414) $k@6432) $k@6436)
          $k@6454)
        $k@6484)
      $k@6502)
    $Perm.No)))
(assert (> $t@6501 0))
(declare-const $k@6503 $Perm)
(assert ($Perm.isValidVar $k@6503))
(assert ($Perm.isReadVar $k@6503 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6215 $k@6223) $k@6241) $k@6415) $k@6433) $k@6437)
        $k@6455)
      $k@6485))
  (= $t@6500 $t@6452)))
; [eval] diz.BlockingQueue__count != null
(push) ; 12
(assert (not (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@6215 $k@6223) $k@6241) $k@6415) $k@6433) $k@6437)
          $k@6455)
        $k@6485)
      $k@6503)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@6215 $k@6223) $k@6241) $k@6415) $k@6433) $k@6437)
          $k@6455)
        $k@6485)
      $k@6503)
    $Perm.No)))
(assert (not (= $t@6500 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 12
(assert (not (= $t@6497 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 12
(push) ; 12
(assert (not (not (= $t@6497 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 12
(push) ; 12
; [then-branch 724] $t@6497 != Null
(assert (not (= $t@6497 $Ref.null)))
(declare-const $k@6504 $Perm)
(assert ($Perm.isValidVar $k@6504))
(assert ($Perm.isReadVar $k@6504 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6220 $k@6224) $k@6412) $k@6416) $k@6434) $k@6438)
        $k@6482)
      $k@6486))
  (= $t@6493 $t@6445)))
(declare-const $k@6505 $Perm)
(assert ($Perm.isValidVar $k@6505))
(assert ($Perm.isReadVar $k@6505 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6221 $k@6225) $k@6413) $k@6417) $k@6435) $k@6439)
        $k@6483)
      $k@6487))
  (= $t@6491 $t@6443)))
; [exec]
; j := __flatten_84
(pop) ; 12
(push) ; 12
; [else-branch 724] $t@6497 == Null
(assert (= $t@6497 $Ref.null))
(declare-const $k@6506 $Perm)
(assert ($Perm.isValidVar $k@6506))
(assert ($Perm.isReadVar $k@6506 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6220 $k@6224) $k@6412) $k@6416) $k@6434) $k@6438)
        $k@6482)
      $k@6486))
  (= $t@6493 $t@6445)))
(declare-const $k@6507 $Perm)
(assert ($Perm.isValidVar $k@6507))
(assert ($Perm.isReadVar $k@6507 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6221 $k@6225) $k@6413) $k@6417) $k@6435) $k@6439)
        $k@6483)
      $k@6487))
  (= $t@6491 $t@6443)))
; [exec]
; j := __flatten_84
(pop) ; 12
(pop) ; 11
(pop) ; 10
(pop) ; 9
; [dead else-branch 719] $t@6427 == Null
(pop) ; 8
(push) ; 8
; [else-branch 718] $t@6427 == Null
(assert (= $t@6427 $Ref.null))
(declare-const $k@6508 $Perm)
(assert ($Perm.isValidVar $k@6508))
(assert ($Perm.isReadVar $k@6508 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@6220 $k@6224) $k@6412) $k@6416))
  (= $t@6423 $t@6231)))
(declare-const $k@6509 $Perm)
(assert ($Perm.isValidVar $k@6509))
(assert ($Perm.isReadVar $k@6509 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@6221 $k@6225) $k@6413) $k@6417))
  (= $t@6421 $t@6229)))
; [exec]
; b := __flatten_82
; [exec]
; __flatten_83 := BlockingQueue__peek(queue)
; [eval] diz != null
(declare-const $k@6510 $Perm)
(assert ($Perm.isValidVar $k@6510))
(assert ($Perm.isReadVar $k@6510 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@6510 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@6510 (+ (- (+ (- $k@6214 $k@6222) $k@6240) $k@6414) $k@6432)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@6511 $Perm)
(assert ($Perm.isValidVar $k@6511))
(assert ($Perm.isReadVar $k@6511 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@6511 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@6511 (+ (- (+ (- $k@6215 $k@6223) $k@6241) $k@6415) $k@6433)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 9
(assert (not (not (= $t@6427 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
; [dead then-branch 725] $t@6427 != Null
(push) ; 9
; [else-branch 725] $t@6427 == Null
(declare-const $k@6512 $Perm)
(assert ($Perm.isValidVar $k@6512))
(assert ($Perm.isReadVar $k@6512 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@6512 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= (+ (- (+ (- $k@6220 $k@6224) $k@6412) $k@6416) $k@6508) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not (= (+ (- (+ (- $k@6220 $k@6224) $k@6412) $k@6416) $k@6508) $Perm.No)))
(assert (< $k@6512 (+ (- (+ (- $k@6220 $k@6224) $k@6412) $k@6416) $k@6508)))
(declare-const $k@6513 $Perm)
(assert ($Perm.isValidVar $k@6513))
(assert ($Perm.isReadVar $k@6513 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@6513 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= (+ (- (+ (- $k@6221 $k@6225) $k@6413) $k@6417) $k@6509) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not (= (+ (- (+ (- $k@6221 $k@6225) $k@6413) $k@6417) $k@6509) $Perm.No)))
(assert (< $k@6513 (+ (- (+ (- $k@6221 $k@6225) $k@6413) $k@6417) $k@6509)))
(declare-const sys__result@6514 $Ref)
(declare-const $t@6515 $Snap)
(declare-const $t@6516 $Snap)
(declare-const $t@6517 $Ref)
(assert (= $t@6515 ($Snap.combine $t@6516 ($SortWrappers.$RefTo$Snap $t@6517))))
(declare-const $t@6518 $Snap)
(declare-const $t@6519 $Ref)
(assert (= $t@6516 ($Snap.combine $t@6518 ($SortWrappers.$RefTo$Snap $t@6519))))
(declare-const $t@6520 $Snap)
(declare-const $t@6521 $Snap)
(assert (= $t@6518 ($Snap.combine $t@6520 $t@6521)))
(declare-const $t@6522 $Snap)
(declare-const $t@6523 $Ref)
(assert (= $t@6520 ($Snap.combine $t@6522 ($SortWrappers.$RefTo$Snap $t@6523))))
(declare-const $t@6524 $Snap)
(assert (= $t@6522 ($Snap.combine $t@6524 $Snap.unit)))
(declare-const $t@6525 Int)
(declare-const $t@6526 $Ref)
(assert (=
  $t@6524
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@6525)
    ($SortWrappers.$RefTo$Snap $t@6526))))
(declare-const $t@6527 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@6525)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@6527) $Snap.unit)))
(declare-const $k@6528 $Perm)
(assert ($Perm.isValidVar $k@6528))
(assert ($Perm.isReadVar $k@6528 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (- (+ (- (+ (- $k@6214 $k@6222) $k@6240) $k@6414) $k@6432) $k@6510))
  (= $t@6527 $t@6431)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 10
(assert (not (not
  (=
    (+
      (- (+ (- (+ (- $k@6214 $k@6222) $k@6240) $k@6414) $k@6432) $k@6510)
      $k@6528)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not
  (=
    (+
      (- (+ (- (+ (- $k@6214 $k@6222) $k@6240) $k@6414) $k@6432) $k@6510)
      $k@6528)
    $Perm.No)))
(assert (> $t@6527 0))
(declare-const $k@6529 $Perm)
(assert ($Perm.isValidVar $k@6529))
(assert ($Perm.isReadVar $k@6529 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (- (+ (- (+ (- $k@6215 $k@6223) $k@6241) $k@6415) $k@6433) $k@6511))
  (= $t@6526 $t@6430)))
; [eval] diz.BlockingQueue__count != null
(push) ; 10
(assert (not (not
  (=
    (+
      (- (+ (- (+ (- $k@6215 $k@6223) $k@6241) $k@6415) $k@6433) $k@6511)
      $k@6529)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not
  (=
    (+
      (- (+ (- (+ (- $k@6215 $k@6223) $k@6241) $k@6415) $k@6433) $k@6511)
      $k@6529)
    $Perm.No)))
(assert (not (= $t@6526 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 10
(assert (not (= $t@6523 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= $t@6523 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 10
(push) ; 10
; [then-branch 726] $t@6523 != Null
(assert (not (= $t@6523 $Ref.null)))
(declare-const $k@6530 $Perm)
(assert ($Perm.isValidVar $k@6530))
(assert ($Perm.isReadVar $k@6530 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (- (+ (- (+ (- $k@6220 $k@6224) $k@6412) $k@6416) $k@6508) $k@6512))
  (= $t@6519 $t@6423)))
(declare-const $k@6531 $Perm)
(assert ($Perm.isValidVar $k@6531))
(assert ($Perm.isReadVar $k@6531 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (- (+ (- (+ (- $k@6221 $k@6225) $k@6413) $k@6417) $k@6509) $k@6513))
  (= $t@6517 $t@6421)))
; [exec]
; i := __flatten_83
; [exec]
; __flatten_84 := BlockingQueue__peek(queue)
; [eval] diz != null
(declare-const $k@6532 $Perm)
(assert ($Perm.isValidVar $k@6532))
(assert ($Perm.isReadVar $k@6532 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@6532 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (<
  $k@6532
  (+ (- (+ (- (+ (- $k@6214 $k@6222) $k@6240) $k@6414) $k@6432) $k@6510) $k@6528)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@6533 $Perm)
(assert ($Perm.isValidVar $k@6533))
(assert ($Perm.isReadVar $k@6533 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@6533 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (<
  $k@6533
  (+ (- (+ (- (+ (- $k@6215 $k@6223) $k@6241) $k@6415) $k@6433) $k@6511) $k@6529)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 11
(assert (not (= $t@6523 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 11
(push) ; 11
; [then-branch 727] $t@6523 != Null
(declare-const $k@6534 $Perm)
(assert ($Perm.isValidVar $k@6534))
(assert ($Perm.isReadVar $k@6534 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@6534 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(push) ; 12
(assert (not (not
  (=
    (+
      (- (+ (- (+ (- $k@6220 $k@6224) $k@6412) $k@6416) $k@6508) $k@6512)
      $k@6530)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (- (+ (- (+ (- $k@6220 $k@6224) $k@6412) $k@6416) $k@6508) $k@6512)
      $k@6530)
    $Perm.No)))
(assert (<
  $k@6534
  (+ (- (+ (- (+ (- $k@6220 $k@6224) $k@6412) $k@6416) $k@6508) $k@6512) $k@6530)))
(declare-const $k@6535 $Perm)
(assert ($Perm.isValidVar $k@6535))
(assert ($Perm.isReadVar $k@6535 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@6535 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(push) ; 12
(assert (not (not
  (=
    (+
      (- (+ (- (+ (- $k@6221 $k@6225) $k@6413) $k@6417) $k@6509) $k@6513)
      $k@6531)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (- (+ (- (+ (- $k@6221 $k@6225) $k@6413) $k@6417) $k@6509) $k@6513)
      $k@6531)
    $Perm.No)))
(assert (<
  $k@6535
  (+ (- (+ (- (+ (- $k@6221 $k@6225) $k@6413) $k@6417) $k@6509) $k@6513) $k@6531)))
(declare-const sys__result@6536 $Ref)
(declare-const $t@6537 $Snap)
(declare-const $t@6538 $Snap)
(declare-const $t@6539 $Ref)
(assert (= $t@6537 ($Snap.combine $t@6538 ($SortWrappers.$RefTo$Snap $t@6539))))
(declare-const $t@6540 $Snap)
(declare-const $t@6541 $Ref)
(assert (= $t@6538 ($Snap.combine $t@6540 ($SortWrappers.$RefTo$Snap $t@6541))))
(declare-const $t@6542 $Snap)
(declare-const $t@6543 $Snap)
(assert (= $t@6540 ($Snap.combine $t@6542 $t@6543)))
(declare-const $t@6544 $Snap)
(declare-const $t@6545 $Ref)
(assert (= $t@6542 ($Snap.combine $t@6544 ($SortWrappers.$RefTo$Snap $t@6545))))
(declare-const $t@6546 $Snap)
(assert (= $t@6544 ($Snap.combine $t@6546 $Snap.unit)))
(declare-const $t@6547 Int)
(declare-const $t@6548 $Ref)
(assert (=
  $t@6546
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@6547)
    ($SortWrappers.$RefTo$Snap $t@6548))))
(declare-const $t@6549 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@6547)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@6549) $Snap.unit)))
(declare-const $k@6550 $Perm)
(assert ($Perm.isValidVar $k@6550))
(assert ($Perm.isReadVar $k@6550 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6214 $k@6222) $k@6240) $k@6414) $k@6432) $k@6510)
        $k@6528)
      $k@6532))
  (= $t@6549 $t@6527)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 12
(assert (not (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@6214 $k@6222) $k@6240) $k@6414) $k@6432) $k@6510)
          $k@6528)
        $k@6532)
      $k@6550)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@6214 $k@6222) $k@6240) $k@6414) $k@6432) $k@6510)
          $k@6528)
        $k@6532)
      $k@6550)
    $Perm.No)))
(assert (> $t@6549 0))
(declare-const $k@6551 $Perm)
(assert ($Perm.isValidVar $k@6551))
(assert ($Perm.isReadVar $k@6551 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6215 $k@6223) $k@6241) $k@6415) $k@6433) $k@6511)
        $k@6529)
      $k@6533))
  (= $t@6548 $t@6526)))
; [eval] diz.BlockingQueue__count != null
(push) ; 12
(assert (not (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@6215 $k@6223) $k@6241) $k@6415) $k@6433) $k@6511)
          $k@6529)
        $k@6533)
      $k@6551)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@6215 $k@6223) $k@6241) $k@6415) $k@6433) $k@6511)
          $k@6529)
        $k@6533)
      $k@6551)
    $Perm.No)))
(assert (not (= $t@6548 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 12
(assert (not (= $t@6545 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 12
(push) ; 12
(assert (not (not (= $t@6545 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 12
(push) ; 12
; [then-branch 728] $t@6545 != Null
(assert (not (= $t@6545 $Ref.null)))
(declare-const $k@6552 $Perm)
(assert ($Perm.isValidVar $k@6552))
(assert ($Perm.isReadVar $k@6552 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6220 $k@6224) $k@6412) $k@6416) $k@6508) $k@6512)
        $k@6530)
      $k@6534))
  (= $t@6541 $t@6519)))
(declare-const $k@6553 $Perm)
(assert ($Perm.isValidVar $k@6553))
(assert ($Perm.isReadVar $k@6553 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6221 $k@6225) $k@6413) $k@6417) $k@6509) $k@6513)
        $k@6531)
      $k@6535))
  (= $t@6539 $t@6517)))
; [exec]
; j := __flatten_84
(pop) ; 12
(push) ; 12
; [else-branch 728] $t@6545 == Null
(assert (= $t@6545 $Ref.null))
(declare-const $k@6554 $Perm)
(assert ($Perm.isValidVar $k@6554))
(assert ($Perm.isReadVar $k@6554 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6220 $k@6224) $k@6412) $k@6416) $k@6508) $k@6512)
        $k@6530)
      $k@6534))
  (= $t@6541 $t@6519)))
(declare-const $k@6555 $Perm)
(assert ($Perm.isValidVar $k@6555))
(assert ($Perm.isReadVar $k@6555 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6221 $k@6225) $k@6413) $k@6417) $k@6509) $k@6513)
        $k@6531)
      $k@6535))
  (= $t@6539 $t@6517)))
; [exec]
; j := __flatten_84
(pop) ; 12
(pop) ; 11
; [dead else-branch 727] $t@6523 == Null
(pop) ; 10
(push) ; 10
; [else-branch 726] $t@6523 == Null
(assert (= $t@6523 $Ref.null))
(declare-const $k@6556 $Perm)
(assert ($Perm.isValidVar $k@6556))
(assert ($Perm.isReadVar $k@6556 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (- (+ (- (+ (- $k@6220 $k@6224) $k@6412) $k@6416) $k@6508) $k@6512))
  (= $t@6519 $t@6423)))
(declare-const $k@6557 $Perm)
(assert ($Perm.isValidVar $k@6557))
(assert ($Perm.isReadVar $k@6557 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (- (+ (- (+ (- $k@6221 $k@6225) $k@6413) $k@6417) $k@6509) $k@6513))
  (= $t@6517 $t@6421)))
; [exec]
; i := __flatten_83
; [exec]
; __flatten_84 := BlockingQueue__peek(queue)
; [eval] diz != null
(declare-const $k@6558 $Perm)
(assert ($Perm.isValidVar $k@6558))
(assert ($Perm.isReadVar $k@6558 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@6558 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (<
  $k@6558
  (+ (- (+ (- (+ (- $k@6214 $k@6222) $k@6240) $k@6414) $k@6432) $k@6510) $k@6528)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@6559 $Perm)
(assert ($Perm.isValidVar $k@6559))
(assert ($Perm.isReadVar $k@6559 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@6559 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (<
  $k@6559
  (+ (- (+ (- (+ (- $k@6215 $k@6223) $k@6241) $k@6415) $k@6433) $k@6511) $k@6529)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 11
(assert (not (not (= $t@6523 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 11
; [dead then-branch 729] $t@6523 != Null
(push) ; 11
; [else-branch 729] $t@6523 == Null
(declare-const $k@6560 $Perm)
(assert ($Perm.isValidVar $k@6560))
(assert ($Perm.isReadVar $k@6560 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@6560 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(push) ; 12
(assert (not (not
  (=
    (+
      (- (+ (- (+ (- $k@6220 $k@6224) $k@6412) $k@6416) $k@6508) $k@6512)
      $k@6556)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (- (+ (- (+ (- $k@6220 $k@6224) $k@6412) $k@6416) $k@6508) $k@6512)
      $k@6556)
    $Perm.No)))
(assert (<
  $k@6560
  (+ (- (+ (- (+ (- $k@6220 $k@6224) $k@6412) $k@6416) $k@6508) $k@6512) $k@6556)))
(declare-const $k@6561 $Perm)
(assert ($Perm.isValidVar $k@6561))
(assert ($Perm.isReadVar $k@6561 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@6561 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(push) ; 12
(assert (not (not
  (=
    (+
      (- (+ (- (+ (- $k@6221 $k@6225) $k@6413) $k@6417) $k@6509) $k@6513)
      $k@6557)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (- (+ (- (+ (- $k@6221 $k@6225) $k@6413) $k@6417) $k@6509) $k@6513)
      $k@6557)
    $Perm.No)))
(assert (<
  $k@6561
  (+ (- (+ (- (+ (- $k@6221 $k@6225) $k@6413) $k@6417) $k@6509) $k@6513) $k@6557)))
(declare-const sys__result@6562 $Ref)
(declare-const $t@6563 $Snap)
(declare-const $t@6564 $Snap)
(declare-const $t@6565 $Ref)
(assert (= $t@6563 ($Snap.combine $t@6564 ($SortWrappers.$RefTo$Snap $t@6565))))
(declare-const $t@6566 $Snap)
(declare-const $t@6567 $Ref)
(assert (= $t@6564 ($Snap.combine $t@6566 ($SortWrappers.$RefTo$Snap $t@6567))))
(declare-const $t@6568 $Snap)
(declare-const $t@6569 $Snap)
(assert (= $t@6566 ($Snap.combine $t@6568 $t@6569)))
(declare-const $t@6570 $Snap)
(declare-const $t@6571 $Ref)
(assert (= $t@6568 ($Snap.combine $t@6570 ($SortWrappers.$RefTo$Snap $t@6571))))
(declare-const $t@6572 $Snap)
(assert (= $t@6570 ($Snap.combine $t@6572 $Snap.unit)))
(declare-const $t@6573 Int)
(declare-const $t@6574 $Ref)
(assert (=
  $t@6572
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@6573)
    ($SortWrappers.$RefTo$Snap $t@6574))))
(declare-const $t@6575 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@6573)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@6575) $Snap.unit)))
(declare-const $k@6576 $Perm)
(assert ($Perm.isValidVar $k@6576))
(assert ($Perm.isReadVar $k@6576 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6214 $k@6222) $k@6240) $k@6414) $k@6432) $k@6510)
        $k@6528)
      $k@6558))
  (= $t@6575 $t@6527)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 12
(assert (not (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@6214 $k@6222) $k@6240) $k@6414) $k@6432) $k@6510)
          $k@6528)
        $k@6558)
      $k@6576)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@6214 $k@6222) $k@6240) $k@6414) $k@6432) $k@6510)
          $k@6528)
        $k@6558)
      $k@6576)
    $Perm.No)))
(assert (> $t@6575 0))
(declare-const $k@6577 $Perm)
(assert ($Perm.isValidVar $k@6577))
(assert ($Perm.isReadVar $k@6577 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6215 $k@6223) $k@6241) $k@6415) $k@6433) $k@6511)
        $k@6529)
      $k@6559))
  (= $t@6574 $t@6526)))
; [eval] diz.BlockingQueue__count != null
(push) ; 12
(assert (not (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@6215 $k@6223) $k@6241) $k@6415) $k@6433) $k@6511)
          $k@6529)
        $k@6559)
      $k@6577)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@6215 $k@6223) $k@6241) $k@6415) $k@6433) $k@6511)
          $k@6529)
        $k@6559)
      $k@6577)
    $Perm.No)))
(assert (not (= $t@6574 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 12
(assert (not (= $t@6571 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 12
(push) ; 12
(assert (not (not (= $t@6571 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 12
(push) ; 12
; [then-branch 730] $t@6571 != Null
(assert (not (= $t@6571 $Ref.null)))
(declare-const $k@6578 $Perm)
(assert ($Perm.isValidVar $k@6578))
(assert ($Perm.isReadVar $k@6578 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6220 $k@6224) $k@6412) $k@6416) $k@6508) $k@6512)
        $k@6556)
      $k@6560))
  (= $t@6567 $t@6519)))
(declare-const $k@6579 $Perm)
(assert ($Perm.isValidVar $k@6579))
(assert ($Perm.isReadVar $k@6579 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6221 $k@6225) $k@6413) $k@6417) $k@6509) $k@6513)
        $k@6557)
      $k@6561))
  (= $t@6565 $t@6517)))
; [exec]
; j := __flatten_84
(pop) ; 12
(push) ; 12
; [else-branch 730] $t@6571 == Null
(assert (= $t@6571 $Ref.null))
(declare-const $k@6580 $Perm)
(assert ($Perm.isValidVar $k@6580))
(assert ($Perm.isReadVar $k@6580 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6220 $k@6224) $k@6412) $k@6416) $k@6508) $k@6512)
        $k@6556)
      $k@6560))
  (= $t@6567 $t@6519)))
(declare-const $k@6581 $Perm)
(assert ($Perm.isValidVar $k@6581))
(assert ($Perm.isReadVar $k@6581 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6221 $k@6225) $k@6413) $k@6417) $k@6509) $k@6513)
        $k@6557)
      $k@6561))
  (= $t@6565 $t@6517)))
; [exec]
; j := __flatten_84
(pop) ; 12
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
; ---------- Test__testFullAndFill ----------
(declare-const diz@6582 $Ref)
(declare-const queue@6583 $Ref)
(declare-const __flatten_85@6584 $Ref)
(declare-const b@6585 Bool)
(declare-const __flatten_89@6586 Bool)
(push) ; 2
; [eval] diz != null
(assert (not (= diz@6582 $Ref.null)))
(push) ; 3
(pop) ; 3
(push) ; 3
; [exec]
; __flatten_85 := BlockingQueue__BlockingQueue(3)
; [eval] capacity > 0
(declare-const sys__result@6587 $Ref)
(declare-const $t@6588 $Snap)
(declare-const $t@6589 $Snap)
(assert (= $t@6588 ($Snap.combine $t@6589 $Snap.unit)))
(declare-const $t@6590 $Snap)
(assert (= $t@6589 ($Snap.combine $t@6590 $Snap.unit)))
(declare-const $t@6591 $Snap)
(declare-const $t@6592 $Ref)
(assert (= $t@6590 ($Snap.combine $t@6591 ($SortWrappers.$RefTo$Snap $t@6592))))
(declare-const $t@6593 $Snap)
(declare-const $t@6594 $Ref)
(assert (= $t@6591 ($Snap.combine $t@6593 ($SortWrappers.$RefTo$Snap $t@6594))))
(declare-const $t@6595 $Snap)
(declare-const $t@6596 $Snap)
(assert (= $t@6593 ($Snap.combine $t@6595 $t@6596)))
(declare-const $t@6597 $Snap)
(declare-const $t@6598 $Ref)
(assert (= $t@6595 ($Snap.combine $t@6597 ($SortWrappers.$RefTo$Snap $t@6598))))
(declare-const $t@6599 $Snap)
(assert (= $t@6597 ($Snap.combine $t@6599 $Snap.unit)))
(declare-const $t@6600 Int)
(declare-const $t@6601 $Ref)
(assert (=
  $t@6599
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@6600)
    ($SortWrappers.$RefTo$Snap $t@6601))))
(declare-const $t@6602 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@6600)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@6602) $Snap.unit)))
(declare-const $t@6603 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@6602)
  ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@6603))))
; [eval] sys__result != null
(assert (not (= sys__result@6587 $Ref.null)))
(declare-const $k@6604 $Perm)
(assert ($Perm.isValidVar $k@6604))
(assert ($Perm.isReadVar $k@6604 $Perm.Write))
; [eval] sys__result.BlockingQueue__capacity > 0
(push) ; 4
(assert (not (not (= $k@6604 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 4
(assert (not (= $k@6604 $Perm.No)))
(assert (> $t@6603 0))
(declare-const $k@6605 $Perm)
(assert ($Perm.isValidVar $k@6605))
(assert ($Perm.isReadVar $k@6605 $Perm.Write))
; [eval] sys__result.BlockingQueue__count != null
(push) ; 4
(assert (not (not (= $k@6605 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 4
(assert (not (= $k@6605 $Perm.No)))
(assert (not (= $t@6601 $Ref.null)))
; [eval] sys__result.BlockingQueue__first != null
(push) ; 4
(assert (not (= $t@6598 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 4
(push) ; 4
(assert (not (not (= $t@6598 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 4
(push) ; 4
; [then-branch 731] $t@6598 != Null
(assert (not (= $t@6598 $Ref.null)))
(declare-const $k@6606 $Perm)
(assert ($Perm.isValidVar $k@6606))
(assert ($Perm.isReadVar $k@6606 $Perm.Write))
(declare-const $k@6607 $Perm)
(assert ($Perm.isValidVar $k@6607))
(assert ($Perm.isReadVar $k@6607 $Perm.Write))
; [eval] sys__result.BlockingQueue__capacity == capacity
(assert (= $t@6603 3))
; [eval] sys__result.BlockingQueue__first == null
(assert (= $t@6598 $Ref.null))
; [exec]
; queue := __flatten_85
; [exec]
; BlockingQueue__put(queue, 1)
; [eval] diz != null
(declare-const $k@6608 $Perm)
(assert ($Perm.isValidVar $k@6608))
(assert ($Perm.isReadVar $k@6608 $Perm.Write))
(push) ; 5
(assert (not (or (= $k@6608 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (< $k@6608 $k@6604))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@6609 $Perm)
(assert ($Perm.isValidVar $k@6609))
(assert ($Perm.isReadVar $k@6609 $Perm.Write))
(push) ; 5
(assert (not (or (= $k@6609 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (< $k@6609 $k@6605))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
; [dead then-branch 732] $t@6598 != Null
; [dead else-branch 732] $t@6598 == Null
(pop) ; 4
(push) ; 4
; [else-branch 731] $t@6598 == Null
(assert (= $t@6598 $Ref.null))
(declare-const $k@6610 $Perm)
(assert ($Perm.isValidVar $k@6610))
(assert ($Perm.isReadVar $k@6610 $Perm.Write))
(declare-const $k@6611 $Perm)
(assert ($Perm.isValidVar $k@6611))
(assert ($Perm.isReadVar $k@6611 $Perm.Write))
; [eval] sys__result.BlockingQueue__capacity == capacity
(assert (= $t@6603 3))
; [eval] sys__result.BlockingQueue__first == null
; [exec]
; queue := __flatten_85
; [exec]
; BlockingQueue__put(queue, 1)
; [eval] diz != null
(declare-const $k@6612 $Perm)
(assert ($Perm.isValidVar $k@6612))
(assert ($Perm.isReadVar $k@6612 $Perm.Write))
(push) ; 5
(assert (not (or (= $k@6612 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (< $k@6612 $k@6604))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@6613 $Perm)
(assert ($Perm.isValidVar $k@6613))
(assert ($Perm.isReadVar $k@6613 $Perm.Write))
(push) ; 5
(assert (not (or (= $k@6613 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (< $k@6613 $k@6605))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 5
(assert (not (not (= $t@6598 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
; [dead then-branch 733] $t@6598 != Null
(push) ; 5
; [else-branch 733] $t@6598 == Null
(declare-const $k@6614 $Perm)
(assert ($Perm.isValidVar $k@6614))
(assert ($Perm.isReadVar $k@6614 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@6614 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(push) ; 6
(assert (not (not (= $k@6610 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= $k@6610 $Perm.No)))
(assert (< $k@6614 $k@6610))
(declare-const $k@6615 $Perm)
(assert ($Perm.isValidVar $k@6615))
(assert ($Perm.isReadVar $k@6615 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@6615 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(push) ; 6
(assert (not (not (= $k@6611 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= $k@6611 $Perm.No)))
(assert (< $k@6615 $k@6611))
(declare-const $t@6616 $Snap)
(declare-const $t@6617 $Snap)
(declare-const $t@6618 $Ref)
(assert (= $t@6616 ($Snap.combine $t@6617 ($SortWrappers.$RefTo$Snap $t@6618))))
(declare-const $t@6619 $Snap)
(declare-const $t@6620 $Ref)
(assert (= $t@6617 ($Snap.combine $t@6619 ($SortWrappers.$RefTo$Snap $t@6620))))
(declare-const $t@6621 $Snap)
(declare-const $t@6622 $Snap)
(assert (= $t@6619 ($Snap.combine $t@6621 $t@6622)))
(declare-const $t@6623 $Snap)
(declare-const $t@6624 $Ref)
(assert (= $t@6621 ($Snap.combine $t@6623 ($SortWrappers.$RefTo$Snap $t@6624))))
(declare-const $t@6625 $Snap)
(assert (= $t@6623 ($Snap.combine $t@6625 $Snap.unit)))
(declare-const $t@6626 Int)
(declare-const $t@6627 $Ref)
(assert (=
  $t@6625
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@6626)
    ($SortWrappers.$RefTo$Snap $t@6627))))
(declare-const $t@6628 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@6626)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@6628) $Snap.unit)))
(declare-const $k@6629 $Perm)
(assert ($Perm.isValidVar $k@6629))
(assert ($Perm.isReadVar $k@6629 $Perm.Write))
(assert (implies (< $Perm.No (- $k@6604 $k@6612)) (= $t@6628 $t@6603)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 6
(assert (not (not (= (+ (- $k@6604 $k@6612) $k@6629) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= (+ (- $k@6604 $k@6612) $k@6629) $Perm.No)))
(assert (> $t@6628 0))
(declare-const $k@6630 $Perm)
(assert ($Perm.isValidVar $k@6630))
(assert ($Perm.isReadVar $k@6630 $Perm.Write))
(assert (implies (< $Perm.No (- $k@6605 $k@6613)) (= $t@6627 $t@6601)))
; [eval] diz.BlockingQueue__count != null
(push) ; 6
(assert (not (not (= (+ (- $k@6605 $k@6613) $k@6630) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= (+ (- $k@6605 $k@6613) $k@6630) $Perm.No)))
(assert (not (= $t@6627 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 6
(assert (not (= $t@6624 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 6
(push) ; 6
(assert (not (not (= $t@6624 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 6
(push) ; 6
; [then-branch 734] $t@6624 != Null
(assert (not (= $t@6624 $Ref.null)))
(declare-const $k@6631 $Perm)
(assert ($Perm.isValidVar $k@6631))
(assert ($Perm.isReadVar $k@6631 $Perm.Write))
(assert (implies (< $Perm.No (- $k@6610 $k@6614)) (= $t@6620 $t@6594)))
(declare-const $k@6632 $Perm)
(assert ($Perm.isValidVar $k@6632))
(assert ($Perm.isReadVar $k@6632 $Perm.Write))
(assert (implies (< $Perm.No (- $k@6611 $k@6615)) (= $t@6618 $t@6592)))
; [exec]
; BlockingQueue__put(queue, 2)
; [eval] diz != null
(declare-const $k@6633 $Perm)
(assert ($Perm.isValidVar $k@6633))
(assert ($Perm.isReadVar $k@6633 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@6633 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@6633 (+ (- $k@6604 $k@6612) $k@6629)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@6634 $Perm)
(assert ($Perm.isValidVar $k@6634))
(assert ($Perm.isReadVar $k@6634 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@6634 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@6634 (+ (- $k@6605 $k@6613) $k@6630)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 7
(assert (not (= $t@6624 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 7
(push) ; 7
; [then-branch 735] $t@6624 != Null
(declare-const $k@6635 $Perm)
(assert ($Perm.isValidVar $k@6635))
(assert ($Perm.isReadVar $k@6635 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@6635 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= (+ (- $k@6610 $k@6614) $k@6631) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- $k@6610 $k@6614) $k@6631) $Perm.No)))
(assert (< $k@6635 (+ (- $k@6610 $k@6614) $k@6631)))
(declare-const $k@6636 $Perm)
(assert ($Perm.isValidVar $k@6636))
(assert ($Perm.isReadVar $k@6636 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@6636 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= (+ (- $k@6611 $k@6615) $k@6632) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- $k@6611 $k@6615) $k@6632) $Perm.No)))
(assert (< $k@6636 (+ (- $k@6611 $k@6615) $k@6632)))
(declare-const $t@6637 $Snap)
(declare-const $t@6638 $Snap)
(declare-const $t@6639 $Ref)
(assert (= $t@6637 ($Snap.combine $t@6638 ($SortWrappers.$RefTo$Snap $t@6639))))
(declare-const $t@6640 $Snap)
(declare-const $t@6641 $Ref)
(assert (= $t@6638 ($Snap.combine $t@6640 ($SortWrappers.$RefTo$Snap $t@6641))))
(declare-const $t@6642 $Snap)
(declare-const $t@6643 $Snap)
(assert (= $t@6640 ($Snap.combine $t@6642 $t@6643)))
(declare-const $t@6644 $Snap)
(declare-const $t@6645 $Ref)
(assert (= $t@6642 ($Snap.combine $t@6644 ($SortWrappers.$RefTo$Snap $t@6645))))
(declare-const $t@6646 $Snap)
(assert (= $t@6644 ($Snap.combine $t@6646 $Snap.unit)))
(declare-const $t@6647 Int)
(declare-const $t@6648 $Ref)
(assert (=
  $t@6646
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@6647)
    ($SortWrappers.$RefTo$Snap $t@6648))))
(declare-const $t@6649 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@6647)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@6649) $Snap.unit)))
(declare-const $k@6650 $Perm)
(assert ($Perm.isValidVar $k@6650))
(assert ($Perm.isReadVar $k@6650 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@6604 $k@6612) $k@6629) $k@6633))
  (= $t@6649 $t@6628)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 8
(assert (not (not (= (+ (- (+ (- $k@6604 $k@6612) $k@6629) $k@6633) $k@6650) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- (+ (- $k@6604 $k@6612) $k@6629) $k@6633) $k@6650) $Perm.No)))
(assert (> $t@6649 0))
(declare-const $k@6651 $Perm)
(assert ($Perm.isValidVar $k@6651))
(assert ($Perm.isReadVar $k@6651 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@6605 $k@6613) $k@6630) $k@6634))
  (= $t@6648 $t@6627)))
; [eval] diz.BlockingQueue__count != null
(push) ; 8
(assert (not (not (= (+ (- (+ (- $k@6605 $k@6613) $k@6630) $k@6634) $k@6651) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- (+ (- $k@6605 $k@6613) $k@6630) $k@6634) $k@6651) $Perm.No)))
(assert (not (= $t@6648 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 8
(assert (not (= $t@6645 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= $t@6645 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
(push) ; 8
; [then-branch 736] $t@6645 != Null
(assert (not (= $t@6645 $Ref.null)))
(declare-const $k@6652 $Perm)
(assert ($Perm.isValidVar $k@6652))
(assert ($Perm.isReadVar $k@6652 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@6610 $k@6614) $k@6631) $k@6635))
  (= $t@6641 $t@6620)))
(declare-const $k@6653 $Perm)
(assert ($Perm.isValidVar $k@6653))
(assert ($Perm.isReadVar $k@6653 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@6611 $k@6615) $k@6632) $k@6636))
  (= $t@6639 $t@6618)))
; [exec]
; BlockingQueue__put(queue, 3)
; [eval] diz != null
(declare-const $k@6654 $Perm)
(assert ($Perm.isValidVar $k@6654))
(assert ($Perm.isReadVar $k@6654 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@6654 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@6654 (+ (- (+ (- $k@6604 $k@6612) $k@6629) $k@6633) $k@6650)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@6655 $Perm)
(assert ($Perm.isValidVar $k@6655))
(assert ($Perm.isReadVar $k@6655 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@6655 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@6655 (+ (- (+ (- $k@6605 $k@6613) $k@6630) $k@6634) $k@6651)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 9
(assert (not (= $t@6645 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
(push) ; 9
; [then-branch 737] $t@6645 != Null
(declare-const $k@6656 $Perm)
(assert ($Perm.isValidVar $k@6656))
(assert ($Perm.isReadVar $k@6656 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@6656 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= (+ (- (+ (- $k@6610 $k@6614) $k@6631) $k@6635) $k@6652) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not (= (+ (- (+ (- $k@6610 $k@6614) $k@6631) $k@6635) $k@6652) $Perm.No)))
(assert (< $k@6656 (+ (- (+ (- $k@6610 $k@6614) $k@6631) $k@6635) $k@6652)))
(declare-const $k@6657 $Perm)
(assert ($Perm.isValidVar $k@6657))
(assert ($Perm.isReadVar $k@6657 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@6657 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= (+ (- (+ (- $k@6611 $k@6615) $k@6632) $k@6636) $k@6653) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not (= (+ (- (+ (- $k@6611 $k@6615) $k@6632) $k@6636) $k@6653) $Perm.No)))
(assert (< $k@6657 (+ (- (+ (- $k@6611 $k@6615) $k@6632) $k@6636) $k@6653)))
(declare-const $t@6658 $Snap)
(declare-const $t@6659 $Snap)
(declare-const $t@6660 $Ref)
(assert (= $t@6658 ($Snap.combine $t@6659 ($SortWrappers.$RefTo$Snap $t@6660))))
(declare-const $t@6661 $Snap)
(declare-const $t@6662 $Ref)
(assert (= $t@6659 ($Snap.combine $t@6661 ($SortWrappers.$RefTo$Snap $t@6662))))
(declare-const $t@6663 $Snap)
(declare-const $t@6664 $Snap)
(assert (= $t@6661 ($Snap.combine $t@6663 $t@6664)))
(declare-const $t@6665 $Snap)
(declare-const $t@6666 $Ref)
(assert (= $t@6663 ($Snap.combine $t@6665 ($SortWrappers.$RefTo$Snap $t@6666))))
(declare-const $t@6667 $Snap)
(assert (= $t@6665 ($Snap.combine $t@6667 $Snap.unit)))
(declare-const $t@6668 Int)
(declare-const $t@6669 $Ref)
(assert (=
  $t@6667
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@6668)
    ($SortWrappers.$RefTo$Snap $t@6669))))
(declare-const $t@6670 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@6668)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@6670) $Snap.unit)))
(declare-const $k@6671 $Perm)
(assert ($Perm.isValidVar $k@6671))
(assert ($Perm.isReadVar $k@6671 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (- (+ (- (+ (- $k@6604 $k@6612) $k@6629) $k@6633) $k@6650) $k@6654))
  (= $t@6670 $t@6649)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 10
(assert (not (not
  (=
    (+
      (- (+ (- (+ (- $k@6604 $k@6612) $k@6629) $k@6633) $k@6650) $k@6654)
      $k@6671)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not
  (=
    (+
      (- (+ (- (+ (- $k@6604 $k@6612) $k@6629) $k@6633) $k@6650) $k@6654)
      $k@6671)
    $Perm.No)))
(assert (> $t@6670 0))
(declare-const $k@6672 $Perm)
(assert ($Perm.isValidVar $k@6672))
(assert ($Perm.isReadVar $k@6672 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (- (+ (- (+ (- $k@6605 $k@6613) $k@6630) $k@6634) $k@6651) $k@6655))
  (= $t@6669 $t@6648)))
; [eval] diz.BlockingQueue__count != null
(push) ; 10
(assert (not (not
  (=
    (+
      (- (+ (- (+ (- $k@6605 $k@6613) $k@6630) $k@6634) $k@6651) $k@6655)
      $k@6672)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not
  (=
    (+
      (- (+ (- (+ (- $k@6605 $k@6613) $k@6630) $k@6634) $k@6651) $k@6655)
      $k@6672)
    $Perm.No)))
(assert (not (= $t@6669 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 10
(assert (not (= $t@6666 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= $t@6666 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 10
(push) ; 10
; [then-branch 738] $t@6666 != Null
(assert (not (= $t@6666 $Ref.null)))
(declare-const $k@6673 $Perm)
(assert ($Perm.isValidVar $k@6673))
(assert ($Perm.isReadVar $k@6673 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (- (+ (- (+ (- $k@6610 $k@6614) $k@6631) $k@6635) $k@6652) $k@6656))
  (= $t@6662 $t@6641)))
(declare-const $k@6674 $Perm)
(assert ($Perm.isValidVar $k@6674))
(assert ($Perm.isReadVar $k@6674 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (- (+ (- (+ (- $k@6611 $k@6615) $k@6632) $k@6636) $k@6653) $k@6657))
  (= $t@6660 $t@6639)))
; [exec]
; __flatten_89 := BlockingQueue__offer(queue, 4)
; [eval] diz != null
(declare-const $k@6675 $Perm)
(assert ($Perm.isValidVar $k@6675))
(assert ($Perm.isReadVar $k@6675 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@6675 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (<
  $k@6675
  (+ (- (+ (- (+ (- $k@6604 $k@6612) $k@6629) $k@6633) $k@6650) $k@6654) $k@6671)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@6676 $Perm)
(assert ($Perm.isValidVar $k@6676))
(assert ($Perm.isReadVar $k@6676 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@6676 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (<
  $k@6676
  (+ (- (+ (- (+ (- $k@6605 $k@6613) $k@6630) $k@6634) $k@6651) $k@6655) $k@6672)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 11
(assert (not (= $t@6666 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 11
(push) ; 11
; [then-branch 739] $t@6666 != Null
(declare-const $k@6677 $Perm)
(assert ($Perm.isValidVar $k@6677))
(assert ($Perm.isReadVar $k@6677 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@6677 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(push) ; 12
(assert (not (not
  (=
    (+
      (- (+ (- (+ (- $k@6610 $k@6614) $k@6631) $k@6635) $k@6652) $k@6656)
      $k@6673)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (- (+ (- (+ (- $k@6610 $k@6614) $k@6631) $k@6635) $k@6652) $k@6656)
      $k@6673)
    $Perm.No)))
(assert (<
  $k@6677
  (+ (- (+ (- (+ (- $k@6610 $k@6614) $k@6631) $k@6635) $k@6652) $k@6656) $k@6673)))
(declare-const $k@6678 $Perm)
(assert ($Perm.isValidVar $k@6678))
(assert ($Perm.isReadVar $k@6678 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@6678 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(push) ; 12
(assert (not (not
  (=
    (+
      (- (+ (- (+ (- $k@6611 $k@6615) $k@6632) $k@6636) $k@6653) $k@6657)
      $k@6674)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (- (+ (- (+ (- $k@6611 $k@6615) $k@6632) $k@6636) $k@6653) $k@6657)
      $k@6674)
    $Perm.No)))
(assert (<
  $k@6678
  (+ (- (+ (- (+ (- $k@6611 $k@6615) $k@6632) $k@6636) $k@6653) $k@6657) $k@6674)))
(declare-const sys__result@6679 Bool)
(declare-const $t@6680 $Snap)
(declare-const $t@6681 $Snap)
(declare-const $t@6682 $Ref)
(assert (= $t@6680 ($Snap.combine $t@6681 ($SortWrappers.$RefTo$Snap $t@6682))))
(declare-const $t@6683 $Snap)
(declare-const $t@6684 $Ref)
(assert (= $t@6681 ($Snap.combine $t@6683 ($SortWrappers.$RefTo$Snap $t@6684))))
(declare-const $t@6685 $Snap)
(declare-const $t@6686 $Snap)
(assert (= $t@6683 ($Snap.combine $t@6685 $t@6686)))
(declare-const $t@6687 $Snap)
(declare-const $t@6688 $Ref)
(assert (= $t@6685 ($Snap.combine $t@6687 ($SortWrappers.$RefTo$Snap $t@6688))))
(declare-const $t@6689 $Snap)
(assert (= $t@6687 ($Snap.combine $t@6689 $Snap.unit)))
(declare-const $t@6690 Int)
(declare-const $t@6691 $Ref)
(assert (=
  $t@6689
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@6690)
    ($SortWrappers.$RefTo$Snap $t@6691))))
(declare-const $t@6692 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@6690)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@6692) $Snap.unit)))
(declare-const $k@6693 $Perm)
(assert ($Perm.isValidVar $k@6693))
(assert ($Perm.isReadVar $k@6693 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6604 $k@6612) $k@6629) $k@6633) $k@6650) $k@6654)
        $k@6671)
      $k@6675))
  (= $t@6692 $t@6670)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 12
(assert (not (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@6604 $k@6612) $k@6629) $k@6633) $k@6650) $k@6654)
          $k@6671)
        $k@6675)
      $k@6693)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@6604 $k@6612) $k@6629) $k@6633) $k@6650) $k@6654)
          $k@6671)
        $k@6675)
      $k@6693)
    $Perm.No)))
(assert (> $t@6692 0))
(declare-const $k@6694 $Perm)
(assert ($Perm.isValidVar $k@6694))
(assert ($Perm.isReadVar $k@6694 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6605 $k@6613) $k@6630) $k@6634) $k@6651) $k@6655)
        $k@6672)
      $k@6676))
  (= $t@6691 $t@6669)))
; [eval] diz.BlockingQueue__count != null
(push) ; 12
(assert (not (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@6605 $k@6613) $k@6630) $k@6634) $k@6651) $k@6655)
          $k@6672)
        $k@6676)
      $k@6694)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@6605 $k@6613) $k@6630) $k@6634) $k@6651) $k@6655)
          $k@6672)
        $k@6676)
      $k@6694)
    $Perm.No)))
(assert (not (= $t@6691 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 12
(assert (not (= $t@6688 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 12
(push) ; 12
(assert (not (not (= $t@6688 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 12
(push) ; 12
; [then-branch 740] $t@6688 != Null
(assert (not (= $t@6688 $Ref.null)))
(declare-const $k@6695 $Perm)
(assert ($Perm.isValidVar $k@6695))
(assert ($Perm.isReadVar $k@6695 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6610 $k@6614) $k@6631) $k@6635) $k@6652) $k@6656)
        $k@6673)
      $k@6677))
  (= $t@6684 $t@6662)))
(declare-const $k@6696 $Perm)
(assert ($Perm.isValidVar $k@6696))
(assert ($Perm.isReadVar $k@6696 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6611 $k@6615) $k@6632) $k@6636) $k@6653) $k@6657)
        $k@6674)
      $k@6678))
  (= $t@6682 $t@6660)))
; [exec]
; b := __flatten_89
(pop) ; 12
(push) ; 12
; [else-branch 740] $t@6688 == Null
(assert (= $t@6688 $Ref.null))
(declare-const $k@6697 $Perm)
(assert ($Perm.isValidVar $k@6697))
(assert ($Perm.isReadVar $k@6697 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6610 $k@6614) $k@6631) $k@6635) $k@6652) $k@6656)
        $k@6673)
      $k@6677))
  (= $t@6684 $t@6662)))
(declare-const $k@6698 $Perm)
(assert ($Perm.isValidVar $k@6698))
(assert ($Perm.isReadVar $k@6698 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6611 $k@6615) $k@6632) $k@6636) $k@6653) $k@6657)
        $k@6674)
      $k@6678))
  (= $t@6682 $t@6660)))
; [exec]
; b := __flatten_89
(pop) ; 12
(pop) ; 11
; [dead else-branch 739] $t@6666 == Null
(pop) ; 10
(push) ; 10
; [else-branch 738] $t@6666 == Null
(assert (= $t@6666 $Ref.null))
(declare-const $k@6699 $Perm)
(assert ($Perm.isValidVar $k@6699))
(assert ($Perm.isReadVar $k@6699 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (- (+ (- (+ (- $k@6610 $k@6614) $k@6631) $k@6635) $k@6652) $k@6656))
  (= $t@6662 $t@6641)))
(declare-const $k@6700 $Perm)
(assert ($Perm.isValidVar $k@6700))
(assert ($Perm.isReadVar $k@6700 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (- (+ (- (+ (- $k@6611 $k@6615) $k@6632) $k@6636) $k@6653) $k@6657))
  (= $t@6660 $t@6639)))
; [exec]
; __flatten_89 := BlockingQueue__offer(queue, 4)
; [eval] diz != null
(declare-const $k@6701 $Perm)
(assert ($Perm.isValidVar $k@6701))
(assert ($Perm.isReadVar $k@6701 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@6701 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (<
  $k@6701
  (+ (- (+ (- (+ (- $k@6604 $k@6612) $k@6629) $k@6633) $k@6650) $k@6654) $k@6671)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@6702 $Perm)
(assert ($Perm.isValidVar $k@6702))
(assert ($Perm.isReadVar $k@6702 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@6702 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (<
  $k@6702
  (+ (- (+ (- (+ (- $k@6605 $k@6613) $k@6630) $k@6634) $k@6651) $k@6655) $k@6672)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 11
(assert (not (not (= $t@6666 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 11
; [dead then-branch 741] $t@6666 != Null
(push) ; 11
; [else-branch 741] $t@6666 == Null
(declare-const $k@6703 $Perm)
(assert ($Perm.isValidVar $k@6703))
(assert ($Perm.isReadVar $k@6703 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@6703 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(push) ; 12
(assert (not (not
  (=
    (+
      (- (+ (- (+ (- $k@6610 $k@6614) $k@6631) $k@6635) $k@6652) $k@6656)
      $k@6699)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (- (+ (- (+ (- $k@6610 $k@6614) $k@6631) $k@6635) $k@6652) $k@6656)
      $k@6699)
    $Perm.No)))
(assert (<
  $k@6703
  (+ (- (+ (- (+ (- $k@6610 $k@6614) $k@6631) $k@6635) $k@6652) $k@6656) $k@6699)))
(declare-const $k@6704 $Perm)
(assert ($Perm.isValidVar $k@6704))
(assert ($Perm.isReadVar $k@6704 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@6704 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(push) ; 12
(assert (not (not
  (=
    (+
      (- (+ (- (+ (- $k@6611 $k@6615) $k@6632) $k@6636) $k@6653) $k@6657)
      $k@6700)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (- (+ (- (+ (- $k@6611 $k@6615) $k@6632) $k@6636) $k@6653) $k@6657)
      $k@6700)
    $Perm.No)))
(assert (<
  $k@6704
  (+ (- (+ (- (+ (- $k@6611 $k@6615) $k@6632) $k@6636) $k@6653) $k@6657) $k@6700)))
(declare-const sys__result@6705 Bool)
(declare-const $t@6706 $Snap)
(declare-const $t@6707 $Snap)
(declare-const $t@6708 $Ref)
(assert (= $t@6706 ($Snap.combine $t@6707 ($SortWrappers.$RefTo$Snap $t@6708))))
(declare-const $t@6709 $Snap)
(declare-const $t@6710 $Ref)
(assert (= $t@6707 ($Snap.combine $t@6709 ($SortWrappers.$RefTo$Snap $t@6710))))
(declare-const $t@6711 $Snap)
(declare-const $t@6712 $Snap)
(assert (= $t@6709 ($Snap.combine $t@6711 $t@6712)))
(declare-const $t@6713 $Snap)
(declare-const $t@6714 $Ref)
(assert (= $t@6711 ($Snap.combine $t@6713 ($SortWrappers.$RefTo$Snap $t@6714))))
(declare-const $t@6715 $Snap)
(assert (= $t@6713 ($Snap.combine $t@6715 $Snap.unit)))
(declare-const $t@6716 Int)
(declare-const $t@6717 $Ref)
(assert (=
  $t@6715
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@6716)
    ($SortWrappers.$RefTo$Snap $t@6717))))
(declare-const $t@6718 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@6716)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@6718) $Snap.unit)))
(declare-const $k@6719 $Perm)
(assert ($Perm.isValidVar $k@6719))
(assert ($Perm.isReadVar $k@6719 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6604 $k@6612) $k@6629) $k@6633) $k@6650) $k@6654)
        $k@6671)
      $k@6701))
  (= $t@6718 $t@6670)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 12
(assert (not (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@6604 $k@6612) $k@6629) $k@6633) $k@6650) $k@6654)
          $k@6671)
        $k@6701)
      $k@6719)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@6604 $k@6612) $k@6629) $k@6633) $k@6650) $k@6654)
          $k@6671)
        $k@6701)
      $k@6719)
    $Perm.No)))
(assert (> $t@6718 0))
(declare-const $k@6720 $Perm)
(assert ($Perm.isValidVar $k@6720))
(assert ($Perm.isReadVar $k@6720 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6605 $k@6613) $k@6630) $k@6634) $k@6651) $k@6655)
        $k@6672)
      $k@6702))
  (= $t@6717 $t@6669)))
; [eval] diz.BlockingQueue__count != null
(push) ; 12
(assert (not (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@6605 $k@6613) $k@6630) $k@6634) $k@6651) $k@6655)
          $k@6672)
        $k@6702)
      $k@6720)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@6605 $k@6613) $k@6630) $k@6634) $k@6651) $k@6655)
          $k@6672)
        $k@6702)
      $k@6720)
    $Perm.No)))
(assert (not (= $t@6717 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 12
(assert (not (= $t@6714 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 12
(push) ; 12
(assert (not (not (= $t@6714 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 12
(push) ; 12
; [then-branch 742] $t@6714 != Null
(assert (not (= $t@6714 $Ref.null)))
(declare-const $k@6721 $Perm)
(assert ($Perm.isValidVar $k@6721))
(assert ($Perm.isReadVar $k@6721 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6610 $k@6614) $k@6631) $k@6635) $k@6652) $k@6656)
        $k@6699)
      $k@6703))
  (= $t@6710 $t@6662)))
(declare-const $k@6722 $Perm)
(assert ($Perm.isValidVar $k@6722))
(assert ($Perm.isReadVar $k@6722 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6611 $k@6615) $k@6632) $k@6636) $k@6653) $k@6657)
        $k@6700)
      $k@6704))
  (= $t@6708 $t@6660)))
; [exec]
; b := __flatten_89
(pop) ; 12
(push) ; 12
; [else-branch 742] $t@6714 == Null
(assert (= $t@6714 $Ref.null))
(declare-const $k@6723 $Perm)
(assert ($Perm.isValidVar $k@6723))
(assert ($Perm.isReadVar $k@6723 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6610 $k@6614) $k@6631) $k@6635) $k@6652) $k@6656)
        $k@6699)
      $k@6703))
  (= $t@6710 $t@6662)))
(declare-const $k@6724 $Perm)
(assert ($Perm.isValidVar $k@6724))
(assert ($Perm.isReadVar $k@6724 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6611 $k@6615) $k@6632) $k@6636) $k@6653) $k@6657)
        $k@6700)
      $k@6704))
  (= $t@6708 $t@6660)))
; [exec]
; b := __flatten_89
(pop) ; 12
(pop) ; 11
(pop) ; 10
(pop) ; 9
; [dead else-branch 737] $t@6645 == Null
(pop) ; 8
(push) ; 8
; [else-branch 736] $t@6645 == Null
(assert (= $t@6645 $Ref.null))
(declare-const $k@6725 $Perm)
(assert ($Perm.isValidVar $k@6725))
(assert ($Perm.isReadVar $k@6725 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@6610 $k@6614) $k@6631) $k@6635))
  (= $t@6641 $t@6620)))
(declare-const $k@6726 $Perm)
(assert ($Perm.isValidVar $k@6726))
(assert ($Perm.isReadVar $k@6726 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@6611 $k@6615) $k@6632) $k@6636))
  (= $t@6639 $t@6618)))
; [exec]
; BlockingQueue__put(queue, 3)
; [eval] diz != null
(declare-const $k@6727 $Perm)
(assert ($Perm.isValidVar $k@6727))
(assert ($Perm.isReadVar $k@6727 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@6727 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@6727 (+ (- (+ (- $k@6604 $k@6612) $k@6629) $k@6633) $k@6650)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@6728 $Perm)
(assert ($Perm.isValidVar $k@6728))
(assert ($Perm.isReadVar $k@6728 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@6728 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@6728 (+ (- (+ (- $k@6605 $k@6613) $k@6630) $k@6634) $k@6651)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 9
(assert (not (not (= $t@6645 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
; [dead then-branch 743] $t@6645 != Null
(push) ; 9
; [else-branch 743] $t@6645 == Null
(declare-const $k@6729 $Perm)
(assert ($Perm.isValidVar $k@6729))
(assert ($Perm.isReadVar $k@6729 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@6729 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= (+ (- (+ (- $k@6610 $k@6614) $k@6631) $k@6635) $k@6725) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not (= (+ (- (+ (- $k@6610 $k@6614) $k@6631) $k@6635) $k@6725) $Perm.No)))
(assert (< $k@6729 (+ (- (+ (- $k@6610 $k@6614) $k@6631) $k@6635) $k@6725)))
(declare-const $k@6730 $Perm)
(assert ($Perm.isValidVar $k@6730))
(assert ($Perm.isReadVar $k@6730 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@6730 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= (+ (- (+ (- $k@6611 $k@6615) $k@6632) $k@6636) $k@6726) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not (= (+ (- (+ (- $k@6611 $k@6615) $k@6632) $k@6636) $k@6726) $Perm.No)))
(assert (< $k@6730 (+ (- (+ (- $k@6611 $k@6615) $k@6632) $k@6636) $k@6726)))
(declare-const $t@6731 $Snap)
(declare-const $t@6732 $Snap)
(declare-const $t@6733 $Ref)
(assert (= $t@6731 ($Snap.combine $t@6732 ($SortWrappers.$RefTo$Snap $t@6733))))
(declare-const $t@6734 $Snap)
(declare-const $t@6735 $Ref)
(assert (= $t@6732 ($Snap.combine $t@6734 ($SortWrappers.$RefTo$Snap $t@6735))))
(declare-const $t@6736 $Snap)
(declare-const $t@6737 $Snap)
(assert (= $t@6734 ($Snap.combine $t@6736 $t@6737)))
(declare-const $t@6738 $Snap)
(declare-const $t@6739 $Ref)
(assert (= $t@6736 ($Snap.combine $t@6738 ($SortWrappers.$RefTo$Snap $t@6739))))
(declare-const $t@6740 $Snap)
(assert (= $t@6738 ($Snap.combine $t@6740 $Snap.unit)))
(declare-const $t@6741 Int)
(declare-const $t@6742 $Ref)
(assert (=
  $t@6740
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@6741)
    ($SortWrappers.$RefTo$Snap $t@6742))))
(declare-const $t@6743 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@6741)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@6743) $Snap.unit)))
(declare-const $k@6744 $Perm)
(assert ($Perm.isValidVar $k@6744))
(assert ($Perm.isReadVar $k@6744 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (- (+ (- (+ (- $k@6604 $k@6612) $k@6629) $k@6633) $k@6650) $k@6727))
  (= $t@6743 $t@6649)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 10
(assert (not (not
  (=
    (+
      (- (+ (- (+ (- $k@6604 $k@6612) $k@6629) $k@6633) $k@6650) $k@6727)
      $k@6744)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not
  (=
    (+
      (- (+ (- (+ (- $k@6604 $k@6612) $k@6629) $k@6633) $k@6650) $k@6727)
      $k@6744)
    $Perm.No)))
(assert (> $t@6743 0))
(declare-const $k@6745 $Perm)
(assert ($Perm.isValidVar $k@6745))
(assert ($Perm.isReadVar $k@6745 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (- (+ (- (+ (- $k@6605 $k@6613) $k@6630) $k@6634) $k@6651) $k@6728))
  (= $t@6742 $t@6648)))
; [eval] diz.BlockingQueue__count != null
(push) ; 10
(assert (not (not
  (=
    (+
      (- (+ (- (+ (- $k@6605 $k@6613) $k@6630) $k@6634) $k@6651) $k@6728)
      $k@6745)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not
  (=
    (+
      (- (+ (- (+ (- $k@6605 $k@6613) $k@6630) $k@6634) $k@6651) $k@6728)
      $k@6745)
    $Perm.No)))
(assert (not (= $t@6742 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 10
(assert (not (= $t@6739 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= $t@6739 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 10
(push) ; 10
; [then-branch 744] $t@6739 != Null
(assert (not (= $t@6739 $Ref.null)))
(declare-const $k@6746 $Perm)
(assert ($Perm.isValidVar $k@6746))
(assert ($Perm.isReadVar $k@6746 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (- (+ (- (+ (- $k@6610 $k@6614) $k@6631) $k@6635) $k@6725) $k@6729))
  (= $t@6735 $t@6641)))
(declare-const $k@6747 $Perm)
(assert ($Perm.isValidVar $k@6747))
(assert ($Perm.isReadVar $k@6747 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (- (+ (- (+ (- $k@6611 $k@6615) $k@6632) $k@6636) $k@6726) $k@6730))
  (= $t@6733 $t@6639)))
; [exec]
; __flatten_89 := BlockingQueue__offer(queue, 4)
; [eval] diz != null
(declare-const $k@6748 $Perm)
(assert ($Perm.isValidVar $k@6748))
(assert ($Perm.isReadVar $k@6748 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@6748 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (<
  $k@6748
  (+ (- (+ (- (+ (- $k@6604 $k@6612) $k@6629) $k@6633) $k@6650) $k@6727) $k@6744)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@6749 $Perm)
(assert ($Perm.isValidVar $k@6749))
(assert ($Perm.isReadVar $k@6749 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@6749 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (<
  $k@6749
  (+ (- (+ (- (+ (- $k@6605 $k@6613) $k@6630) $k@6634) $k@6651) $k@6728) $k@6745)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 11
(assert (not (= $t@6739 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 11
(push) ; 11
; [then-branch 745] $t@6739 != Null
(declare-const $k@6750 $Perm)
(assert ($Perm.isValidVar $k@6750))
(assert ($Perm.isReadVar $k@6750 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@6750 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(push) ; 12
(assert (not (not
  (=
    (+
      (- (+ (- (+ (- $k@6610 $k@6614) $k@6631) $k@6635) $k@6725) $k@6729)
      $k@6746)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (- (+ (- (+ (- $k@6610 $k@6614) $k@6631) $k@6635) $k@6725) $k@6729)
      $k@6746)
    $Perm.No)))
(assert (<
  $k@6750
  (+ (- (+ (- (+ (- $k@6610 $k@6614) $k@6631) $k@6635) $k@6725) $k@6729) $k@6746)))
(declare-const $k@6751 $Perm)
(assert ($Perm.isValidVar $k@6751))
(assert ($Perm.isReadVar $k@6751 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@6751 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(push) ; 12
(assert (not (not
  (=
    (+
      (- (+ (- (+ (- $k@6611 $k@6615) $k@6632) $k@6636) $k@6726) $k@6730)
      $k@6747)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (- (+ (- (+ (- $k@6611 $k@6615) $k@6632) $k@6636) $k@6726) $k@6730)
      $k@6747)
    $Perm.No)))
(assert (<
  $k@6751
  (+ (- (+ (- (+ (- $k@6611 $k@6615) $k@6632) $k@6636) $k@6726) $k@6730) $k@6747)))
(declare-const sys__result@6752 Bool)
(declare-const $t@6753 $Snap)
(declare-const $t@6754 $Snap)
(declare-const $t@6755 $Ref)
(assert (= $t@6753 ($Snap.combine $t@6754 ($SortWrappers.$RefTo$Snap $t@6755))))
(declare-const $t@6756 $Snap)
(declare-const $t@6757 $Ref)
(assert (= $t@6754 ($Snap.combine $t@6756 ($SortWrappers.$RefTo$Snap $t@6757))))
(declare-const $t@6758 $Snap)
(declare-const $t@6759 $Snap)
(assert (= $t@6756 ($Snap.combine $t@6758 $t@6759)))
(declare-const $t@6760 $Snap)
(declare-const $t@6761 $Ref)
(assert (= $t@6758 ($Snap.combine $t@6760 ($SortWrappers.$RefTo$Snap $t@6761))))
(declare-const $t@6762 $Snap)
(assert (= $t@6760 ($Snap.combine $t@6762 $Snap.unit)))
(declare-const $t@6763 Int)
(declare-const $t@6764 $Ref)
(assert (=
  $t@6762
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@6763)
    ($SortWrappers.$RefTo$Snap $t@6764))))
(declare-const $t@6765 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@6763)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@6765) $Snap.unit)))
(declare-const $k@6766 $Perm)
(assert ($Perm.isValidVar $k@6766))
(assert ($Perm.isReadVar $k@6766 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6604 $k@6612) $k@6629) $k@6633) $k@6650) $k@6727)
        $k@6744)
      $k@6748))
  (= $t@6765 $t@6743)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 12
(assert (not (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@6604 $k@6612) $k@6629) $k@6633) $k@6650) $k@6727)
          $k@6744)
        $k@6748)
      $k@6766)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@6604 $k@6612) $k@6629) $k@6633) $k@6650) $k@6727)
          $k@6744)
        $k@6748)
      $k@6766)
    $Perm.No)))
(assert (> $t@6765 0))
(declare-const $k@6767 $Perm)
(assert ($Perm.isValidVar $k@6767))
(assert ($Perm.isReadVar $k@6767 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6605 $k@6613) $k@6630) $k@6634) $k@6651) $k@6728)
        $k@6745)
      $k@6749))
  (= $t@6764 $t@6742)))
; [eval] diz.BlockingQueue__count != null
(push) ; 12
(assert (not (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@6605 $k@6613) $k@6630) $k@6634) $k@6651) $k@6728)
          $k@6745)
        $k@6749)
      $k@6767)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@6605 $k@6613) $k@6630) $k@6634) $k@6651) $k@6728)
          $k@6745)
        $k@6749)
      $k@6767)
    $Perm.No)))
(assert (not (= $t@6764 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 12
(assert (not (= $t@6761 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 12
(push) ; 12
(assert (not (not (= $t@6761 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 12
(push) ; 12
; [then-branch 746] $t@6761 != Null
(assert (not (= $t@6761 $Ref.null)))
(declare-const $k@6768 $Perm)
(assert ($Perm.isValidVar $k@6768))
(assert ($Perm.isReadVar $k@6768 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6610 $k@6614) $k@6631) $k@6635) $k@6725) $k@6729)
        $k@6746)
      $k@6750))
  (= $t@6757 $t@6735)))
(declare-const $k@6769 $Perm)
(assert ($Perm.isValidVar $k@6769))
(assert ($Perm.isReadVar $k@6769 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6611 $k@6615) $k@6632) $k@6636) $k@6726) $k@6730)
        $k@6747)
      $k@6751))
  (= $t@6755 $t@6733)))
; [exec]
; b := __flatten_89
(pop) ; 12
(push) ; 12
; [else-branch 746] $t@6761 == Null
(assert (= $t@6761 $Ref.null))
(declare-const $k@6770 $Perm)
(assert ($Perm.isValidVar $k@6770))
(assert ($Perm.isReadVar $k@6770 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6610 $k@6614) $k@6631) $k@6635) $k@6725) $k@6729)
        $k@6746)
      $k@6750))
  (= $t@6757 $t@6735)))
(declare-const $k@6771 $Perm)
(assert ($Perm.isValidVar $k@6771))
(assert ($Perm.isReadVar $k@6771 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6611 $k@6615) $k@6632) $k@6636) $k@6726) $k@6730)
        $k@6747)
      $k@6751))
  (= $t@6755 $t@6733)))
; [exec]
; b := __flatten_89
(pop) ; 12
(pop) ; 11
; [dead else-branch 745] $t@6739 == Null
(pop) ; 10
(push) ; 10
; [else-branch 744] $t@6739 == Null
(assert (= $t@6739 $Ref.null))
(declare-const $k@6772 $Perm)
(assert ($Perm.isValidVar $k@6772))
(assert ($Perm.isReadVar $k@6772 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (- (+ (- (+ (- $k@6610 $k@6614) $k@6631) $k@6635) $k@6725) $k@6729))
  (= $t@6735 $t@6641)))
(declare-const $k@6773 $Perm)
(assert ($Perm.isValidVar $k@6773))
(assert ($Perm.isReadVar $k@6773 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (- (+ (- (+ (- $k@6611 $k@6615) $k@6632) $k@6636) $k@6726) $k@6730))
  (= $t@6733 $t@6639)))
; [exec]
; __flatten_89 := BlockingQueue__offer(queue, 4)
; [eval] diz != null
(declare-const $k@6774 $Perm)
(assert ($Perm.isValidVar $k@6774))
(assert ($Perm.isReadVar $k@6774 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@6774 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (<
  $k@6774
  (+ (- (+ (- (+ (- $k@6604 $k@6612) $k@6629) $k@6633) $k@6650) $k@6727) $k@6744)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@6775 $Perm)
(assert ($Perm.isValidVar $k@6775))
(assert ($Perm.isReadVar $k@6775 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@6775 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (<
  $k@6775
  (+ (- (+ (- (+ (- $k@6605 $k@6613) $k@6630) $k@6634) $k@6651) $k@6728) $k@6745)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 11
(assert (not (not (= $t@6739 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 11
; [dead then-branch 747] $t@6739 != Null
(push) ; 11
; [else-branch 747] $t@6739 == Null
(declare-const $k@6776 $Perm)
(assert ($Perm.isValidVar $k@6776))
(assert ($Perm.isReadVar $k@6776 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@6776 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(push) ; 12
(assert (not (not
  (=
    (+
      (- (+ (- (+ (- $k@6610 $k@6614) $k@6631) $k@6635) $k@6725) $k@6729)
      $k@6772)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (- (+ (- (+ (- $k@6610 $k@6614) $k@6631) $k@6635) $k@6725) $k@6729)
      $k@6772)
    $Perm.No)))
(assert (<
  $k@6776
  (+ (- (+ (- (+ (- $k@6610 $k@6614) $k@6631) $k@6635) $k@6725) $k@6729) $k@6772)))
(declare-const $k@6777 $Perm)
(assert ($Perm.isValidVar $k@6777))
(assert ($Perm.isReadVar $k@6777 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@6777 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(push) ; 12
(assert (not (not
  (=
    (+
      (- (+ (- (+ (- $k@6611 $k@6615) $k@6632) $k@6636) $k@6726) $k@6730)
      $k@6773)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (- (+ (- (+ (- $k@6611 $k@6615) $k@6632) $k@6636) $k@6726) $k@6730)
      $k@6773)
    $Perm.No)))
(assert (<
  $k@6777
  (+ (- (+ (- (+ (- $k@6611 $k@6615) $k@6632) $k@6636) $k@6726) $k@6730) $k@6773)))
(declare-const sys__result@6778 Bool)
(declare-const $t@6779 $Snap)
(declare-const $t@6780 $Snap)
(declare-const $t@6781 $Ref)
(assert (= $t@6779 ($Snap.combine $t@6780 ($SortWrappers.$RefTo$Snap $t@6781))))
(declare-const $t@6782 $Snap)
(declare-const $t@6783 $Ref)
(assert (= $t@6780 ($Snap.combine $t@6782 ($SortWrappers.$RefTo$Snap $t@6783))))
(declare-const $t@6784 $Snap)
(declare-const $t@6785 $Snap)
(assert (= $t@6782 ($Snap.combine $t@6784 $t@6785)))
(declare-const $t@6786 $Snap)
(declare-const $t@6787 $Ref)
(assert (= $t@6784 ($Snap.combine $t@6786 ($SortWrappers.$RefTo$Snap $t@6787))))
(declare-const $t@6788 $Snap)
(assert (= $t@6786 ($Snap.combine $t@6788 $Snap.unit)))
(declare-const $t@6789 Int)
(declare-const $t@6790 $Ref)
(assert (=
  $t@6788
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@6789)
    ($SortWrappers.$RefTo$Snap $t@6790))))
(declare-const $t@6791 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@6789)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@6791) $Snap.unit)))
(declare-const $k@6792 $Perm)
(assert ($Perm.isValidVar $k@6792))
(assert ($Perm.isReadVar $k@6792 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6604 $k@6612) $k@6629) $k@6633) $k@6650) $k@6727)
        $k@6744)
      $k@6774))
  (= $t@6791 $t@6743)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 12
(assert (not (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@6604 $k@6612) $k@6629) $k@6633) $k@6650) $k@6727)
          $k@6744)
        $k@6774)
      $k@6792)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@6604 $k@6612) $k@6629) $k@6633) $k@6650) $k@6727)
          $k@6744)
        $k@6774)
      $k@6792)
    $Perm.No)))
(assert (> $t@6791 0))
(declare-const $k@6793 $Perm)
(assert ($Perm.isValidVar $k@6793))
(assert ($Perm.isReadVar $k@6793 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6605 $k@6613) $k@6630) $k@6634) $k@6651) $k@6728)
        $k@6745)
      $k@6775))
  (= $t@6790 $t@6742)))
; [eval] diz.BlockingQueue__count != null
(push) ; 12
(assert (not (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@6605 $k@6613) $k@6630) $k@6634) $k@6651) $k@6728)
          $k@6745)
        $k@6775)
      $k@6793)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@6605 $k@6613) $k@6630) $k@6634) $k@6651) $k@6728)
          $k@6745)
        $k@6775)
      $k@6793)
    $Perm.No)))
(assert (not (= $t@6790 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 12
(assert (not (= $t@6787 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 12
(push) ; 12
(assert (not (not (= $t@6787 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 12
(push) ; 12
; [then-branch 748] $t@6787 != Null
(assert (not (= $t@6787 $Ref.null)))
(declare-const $k@6794 $Perm)
(assert ($Perm.isValidVar $k@6794))
(assert ($Perm.isReadVar $k@6794 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6610 $k@6614) $k@6631) $k@6635) $k@6725) $k@6729)
        $k@6772)
      $k@6776))
  (= $t@6783 $t@6735)))
(declare-const $k@6795 $Perm)
(assert ($Perm.isValidVar $k@6795))
(assert ($Perm.isReadVar $k@6795 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6611 $k@6615) $k@6632) $k@6636) $k@6726) $k@6730)
        $k@6773)
      $k@6777))
  (= $t@6781 $t@6733)))
; [exec]
; b := __flatten_89
(pop) ; 12
(push) ; 12
; [else-branch 748] $t@6787 == Null
(assert (= $t@6787 $Ref.null))
(declare-const $k@6796 $Perm)
(assert ($Perm.isValidVar $k@6796))
(assert ($Perm.isReadVar $k@6796 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6610 $k@6614) $k@6631) $k@6635) $k@6725) $k@6729)
        $k@6772)
      $k@6776))
  (= $t@6783 $t@6735)))
(declare-const $k@6797 $Perm)
(assert ($Perm.isValidVar $k@6797))
(assert ($Perm.isReadVar $k@6797 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6611 $k@6615) $k@6632) $k@6636) $k@6726) $k@6730)
        $k@6773)
      $k@6777))
  (= $t@6781 $t@6733)))
; [exec]
; b := __flatten_89
(pop) ; 12
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
; [dead else-branch 735] $t@6624 == Null
(pop) ; 6
(push) ; 6
; [else-branch 734] $t@6624 == Null
(assert (= $t@6624 $Ref.null))
(declare-const $k@6798 $Perm)
(assert ($Perm.isValidVar $k@6798))
(assert ($Perm.isReadVar $k@6798 $Perm.Write))
(assert (implies (< $Perm.No (- $k@6610 $k@6614)) (= $t@6620 $t@6594)))
(declare-const $k@6799 $Perm)
(assert ($Perm.isValidVar $k@6799))
(assert ($Perm.isReadVar $k@6799 $Perm.Write))
(assert (implies (< $Perm.No (- $k@6611 $k@6615)) (= $t@6618 $t@6592)))
; [exec]
; BlockingQueue__put(queue, 2)
; [eval] diz != null
(declare-const $k@6800 $Perm)
(assert ($Perm.isValidVar $k@6800))
(assert ($Perm.isReadVar $k@6800 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@6800 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@6800 (+ (- $k@6604 $k@6612) $k@6629)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@6801 $Perm)
(assert ($Perm.isValidVar $k@6801))
(assert ($Perm.isReadVar $k@6801 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@6801 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (< $k@6801 (+ (- $k@6605 $k@6613) $k@6630)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 7
(assert (not (not (= $t@6624 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 7
; [dead then-branch 749] $t@6624 != Null
(push) ; 7
; [else-branch 749] $t@6624 == Null
(declare-const $k@6802 $Perm)
(assert ($Perm.isValidVar $k@6802))
(assert ($Perm.isReadVar $k@6802 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@6802 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= (+ (- $k@6610 $k@6614) $k@6798) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- $k@6610 $k@6614) $k@6798) $Perm.No)))
(assert (< $k@6802 (+ (- $k@6610 $k@6614) $k@6798)))
(declare-const $k@6803 $Perm)
(assert ($Perm.isValidVar $k@6803))
(assert ($Perm.isReadVar $k@6803 $Perm.Write))
(push) ; 8
(assert (not (or (= $k@6803 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= (+ (- $k@6611 $k@6615) $k@6799) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- $k@6611 $k@6615) $k@6799) $Perm.No)))
(assert (< $k@6803 (+ (- $k@6611 $k@6615) $k@6799)))
(declare-const $t@6804 $Snap)
(declare-const $t@6805 $Snap)
(declare-const $t@6806 $Ref)
(assert (= $t@6804 ($Snap.combine $t@6805 ($SortWrappers.$RefTo$Snap $t@6806))))
(declare-const $t@6807 $Snap)
(declare-const $t@6808 $Ref)
(assert (= $t@6805 ($Snap.combine $t@6807 ($SortWrappers.$RefTo$Snap $t@6808))))
(declare-const $t@6809 $Snap)
(declare-const $t@6810 $Snap)
(assert (= $t@6807 ($Snap.combine $t@6809 $t@6810)))
(declare-const $t@6811 $Snap)
(declare-const $t@6812 $Ref)
(assert (= $t@6809 ($Snap.combine $t@6811 ($SortWrappers.$RefTo$Snap $t@6812))))
(declare-const $t@6813 $Snap)
(assert (= $t@6811 ($Snap.combine $t@6813 $Snap.unit)))
(declare-const $t@6814 Int)
(declare-const $t@6815 $Ref)
(assert (=
  $t@6813
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@6814)
    ($SortWrappers.$RefTo$Snap $t@6815))))
(declare-const $t@6816 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@6814)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@6816) $Snap.unit)))
(declare-const $k@6817 $Perm)
(assert ($Perm.isValidVar $k@6817))
(assert ($Perm.isReadVar $k@6817 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@6604 $k@6612) $k@6629) $k@6800))
  (= $t@6816 $t@6628)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 8
(assert (not (not (= (+ (- (+ (- $k@6604 $k@6612) $k@6629) $k@6800) $k@6817) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- (+ (- $k@6604 $k@6612) $k@6629) $k@6800) $k@6817) $Perm.No)))
(assert (> $t@6816 0))
(declare-const $k@6818 $Perm)
(assert ($Perm.isValidVar $k@6818))
(assert ($Perm.isReadVar $k@6818 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@6605 $k@6613) $k@6630) $k@6801))
  (= $t@6815 $t@6627)))
; [eval] diz.BlockingQueue__count != null
(push) ; 8
(assert (not (not (= (+ (- (+ (- $k@6605 $k@6613) $k@6630) $k@6801) $k@6818) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 8
(assert (not (= (+ (- (+ (- $k@6605 $k@6613) $k@6630) $k@6801) $k@6818) $Perm.No)))
(assert (not (= $t@6815 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 8
(assert (not (= $t@6812 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (not (= $t@6812 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
(push) ; 8
; [then-branch 750] $t@6812 != Null
(assert (not (= $t@6812 $Ref.null)))
(declare-const $k@6819 $Perm)
(assert ($Perm.isValidVar $k@6819))
(assert ($Perm.isReadVar $k@6819 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@6610 $k@6614) $k@6798) $k@6802))
  (= $t@6808 $t@6620)))
(declare-const $k@6820 $Perm)
(assert ($Perm.isValidVar $k@6820))
(assert ($Perm.isReadVar $k@6820 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@6611 $k@6615) $k@6799) $k@6803))
  (= $t@6806 $t@6618)))
; [exec]
; BlockingQueue__put(queue, 3)
; [eval] diz != null
(declare-const $k@6821 $Perm)
(assert ($Perm.isValidVar $k@6821))
(assert ($Perm.isReadVar $k@6821 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@6821 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@6821 (+ (- (+ (- $k@6604 $k@6612) $k@6629) $k@6800) $k@6817)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@6822 $Perm)
(assert ($Perm.isValidVar $k@6822))
(assert ($Perm.isReadVar $k@6822 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@6822 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@6822 (+ (- (+ (- $k@6605 $k@6613) $k@6630) $k@6801) $k@6818)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 9
(assert (not (= $t@6812 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
(push) ; 9
; [then-branch 751] $t@6812 != Null
(declare-const $k@6823 $Perm)
(assert ($Perm.isValidVar $k@6823))
(assert ($Perm.isReadVar $k@6823 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@6823 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= (+ (- (+ (- $k@6610 $k@6614) $k@6798) $k@6802) $k@6819) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not (= (+ (- (+ (- $k@6610 $k@6614) $k@6798) $k@6802) $k@6819) $Perm.No)))
(assert (< $k@6823 (+ (- (+ (- $k@6610 $k@6614) $k@6798) $k@6802) $k@6819)))
(declare-const $k@6824 $Perm)
(assert ($Perm.isValidVar $k@6824))
(assert ($Perm.isReadVar $k@6824 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@6824 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= (+ (- (+ (- $k@6611 $k@6615) $k@6799) $k@6803) $k@6820) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not (= (+ (- (+ (- $k@6611 $k@6615) $k@6799) $k@6803) $k@6820) $Perm.No)))
(assert (< $k@6824 (+ (- (+ (- $k@6611 $k@6615) $k@6799) $k@6803) $k@6820)))
(declare-const $t@6825 $Snap)
(declare-const $t@6826 $Snap)
(declare-const $t@6827 $Ref)
(assert (= $t@6825 ($Snap.combine $t@6826 ($SortWrappers.$RefTo$Snap $t@6827))))
(declare-const $t@6828 $Snap)
(declare-const $t@6829 $Ref)
(assert (= $t@6826 ($Snap.combine $t@6828 ($SortWrappers.$RefTo$Snap $t@6829))))
(declare-const $t@6830 $Snap)
(declare-const $t@6831 $Snap)
(assert (= $t@6828 ($Snap.combine $t@6830 $t@6831)))
(declare-const $t@6832 $Snap)
(declare-const $t@6833 $Ref)
(assert (= $t@6830 ($Snap.combine $t@6832 ($SortWrappers.$RefTo$Snap $t@6833))))
(declare-const $t@6834 $Snap)
(assert (= $t@6832 ($Snap.combine $t@6834 $Snap.unit)))
(declare-const $t@6835 Int)
(declare-const $t@6836 $Ref)
(assert (=
  $t@6834
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@6835)
    ($SortWrappers.$RefTo$Snap $t@6836))))
(declare-const $t@6837 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@6835)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@6837) $Snap.unit)))
(declare-const $k@6838 $Perm)
(assert ($Perm.isValidVar $k@6838))
(assert ($Perm.isReadVar $k@6838 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (- (+ (- (+ (- $k@6604 $k@6612) $k@6629) $k@6800) $k@6817) $k@6821))
  (= $t@6837 $t@6816)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 10
(assert (not (not
  (=
    (+
      (- (+ (- (+ (- $k@6604 $k@6612) $k@6629) $k@6800) $k@6817) $k@6821)
      $k@6838)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not
  (=
    (+
      (- (+ (- (+ (- $k@6604 $k@6612) $k@6629) $k@6800) $k@6817) $k@6821)
      $k@6838)
    $Perm.No)))
(assert (> $t@6837 0))
(declare-const $k@6839 $Perm)
(assert ($Perm.isValidVar $k@6839))
(assert ($Perm.isReadVar $k@6839 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (- (+ (- (+ (- $k@6605 $k@6613) $k@6630) $k@6801) $k@6818) $k@6822))
  (= $t@6836 $t@6815)))
; [eval] diz.BlockingQueue__count != null
(push) ; 10
(assert (not (not
  (=
    (+
      (- (+ (- (+ (- $k@6605 $k@6613) $k@6630) $k@6801) $k@6818) $k@6822)
      $k@6839)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not
  (=
    (+
      (- (+ (- (+ (- $k@6605 $k@6613) $k@6630) $k@6801) $k@6818) $k@6822)
      $k@6839)
    $Perm.No)))
(assert (not (= $t@6836 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 10
(assert (not (= $t@6833 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= $t@6833 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 10
(push) ; 10
; [then-branch 752] $t@6833 != Null
(assert (not (= $t@6833 $Ref.null)))
(declare-const $k@6840 $Perm)
(assert ($Perm.isValidVar $k@6840))
(assert ($Perm.isReadVar $k@6840 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (- (+ (- (+ (- $k@6610 $k@6614) $k@6798) $k@6802) $k@6819) $k@6823))
  (= $t@6829 $t@6808)))
(declare-const $k@6841 $Perm)
(assert ($Perm.isValidVar $k@6841))
(assert ($Perm.isReadVar $k@6841 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (- (+ (- (+ (- $k@6611 $k@6615) $k@6799) $k@6803) $k@6820) $k@6824))
  (= $t@6827 $t@6806)))
; [exec]
; __flatten_89 := BlockingQueue__offer(queue, 4)
; [eval] diz != null
(declare-const $k@6842 $Perm)
(assert ($Perm.isValidVar $k@6842))
(assert ($Perm.isReadVar $k@6842 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@6842 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (<
  $k@6842
  (+ (- (+ (- (+ (- $k@6604 $k@6612) $k@6629) $k@6800) $k@6817) $k@6821) $k@6838)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@6843 $Perm)
(assert ($Perm.isValidVar $k@6843))
(assert ($Perm.isReadVar $k@6843 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@6843 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (<
  $k@6843
  (+ (- (+ (- (+ (- $k@6605 $k@6613) $k@6630) $k@6801) $k@6818) $k@6822) $k@6839)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 11
(assert (not (= $t@6833 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 11
(push) ; 11
; [then-branch 753] $t@6833 != Null
(declare-const $k@6844 $Perm)
(assert ($Perm.isValidVar $k@6844))
(assert ($Perm.isReadVar $k@6844 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@6844 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(push) ; 12
(assert (not (not
  (=
    (+
      (- (+ (- (+ (- $k@6610 $k@6614) $k@6798) $k@6802) $k@6819) $k@6823)
      $k@6840)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (- (+ (- (+ (- $k@6610 $k@6614) $k@6798) $k@6802) $k@6819) $k@6823)
      $k@6840)
    $Perm.No)))
(assert (<
  $k@6844
  (+ (- (+ (- (+ (- $k@6610 $k@6614) $k@6798) $k@6802) $k@6819) $k@6823) $k@6840)))
(declare-const $k@6845 $Perm)
(assert ($Perm.isValidVar $k@6845))
(assert ($Perm.isReadVar $k@6845 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@6845 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(push) ; 12
(assert (not (not
  (=
    (+
      (- (+ (- (+ (- $k@6611 $k@6615) $k@6799) $k@6803) $k@6820) $k@6824)
      $k@6841)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (- (+ (- (+ (- $k@6611 $k@6615) $k@6799) $k@6803) $k@6820) $k@6824)
      $k@6841)
    $Perm.No)))
(assert (<
  $k@6845
  (+ (- (+ (- (+ (- $k@6611 $k@6615) $k@6799) $k@6803) $k@6820) $k@6824) $k@6841)))
(declare-const sys__result@6846 Bool)
(declare-const $t@6847 $Snap)
(declare-const $t@6848 $Snap)
(declare-const $t@6849 $Ref)
(assert (= $t@6847 ($Snap.combine $t@6848 ($SortWrappers.$RefTo$Snap $t@6849))))
(declare-const $t@6850 $Snap)
(declare-const $t@6851 $Ref)
(assert (= $t@6848 ($Snap.combine $t@6850 ($SortWrappers.$RefTo$Snap $t@6851))))
(declare-const $t@6852 $Snap)
(declare-const $t@6853 $Snap)
(assert (= $t@6850 ($Snap.combine $t@6852 $t@6853)))
(declare-const $t@6854 $Snap)
(declare-const $t@6855 $Ref)
(assert (= $t@6852 ($Snap.combine $t@6854 ($SortWrappers.$RefTo$Snap $t@6855))))
(declare-const $t@6856 $Snap)
(assert (= $t@6854 ($Snap.combine $t@6856 $Snap.unit)))
(declare-const $t@6857 Int)
(declare-const $t@6858 $Ref)
(assert (=
  $t@6856
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@6857)
    ($SortWrappers.$RefTo$Snap $t@6858))))
(declare-const $t@6859 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@6857)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@6859) $Snap.unit)))
(declare-const $k@6860 $Perm)
(assert ($Perm.isValidVar $k@6860))
(assert ($Perm.isReadVar $k@6860 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6604 $k@6612) $k@6629) $k@6800) $k@6817) $k@6821)
        $k@6838)
      $k@6842))
  (= $t@6859 $t@6837)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 12
(assert (not (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@6604 $k@6612) $k@6629) $k@6800) $k@6817) $k@6821)
          $k@6838)
        $k@6842)
      $k@6860)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@6604 $k@6612) $k@6629) $k@6800) $k@6817) $k@6821)
          $k@6838)
        $k@6842)
      $k@6860)
    $Perm.No)))
(assert (> $t@6859 0))
(declare-const $k@6861 $Perm)
(assert ($Perm.isValidVar $k@6861))
(assert ($Perm.isReadVar $k@6861 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6605 $k@6613) $k@6630) $k@6801) $k@6818) $k@6822)
        $k@6839)
      $k@6843))
  (= $t@6858 $t@6836)))
; [eval] diz.BlockingQueue__count != null
(push) ; 12
(assert (not (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@6605 $k@6613) $k@6630) $k@6801) $k@6818) $k@6822)
          $k@6839)
        $k@6843)
      $k@6861)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@6605 $k@6613) $k@6630) $k@6801) $k@6818) $k@6822)
          $k@6839)
        $k@6843)
      $k@6861)
    $Perm.No)))
(assert (not (= $t@6858 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 12
(assert (not (= $t@6855 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 12
(push) ; 12
(assert (not (not (= $t@6855 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 12
(push) ; 12
; [then-branch 754] $t@6855 != Null
(assert (not (= $t@6855 $Ref.null)))
(declare-const $k@6862 $Perm)
(assert ($Perm.isValidVar $k@6862))
(assert ($Perm.isReadVar $k@6862 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6610 $k@6614) $k@6798) $k@6802) $k@6819) $k@6823)
        $k@6840)
      $k@6844))
  (= $t@6851 $t@6829)))
(declare-const $k@6863 $Perm)
(assert ($Perm.isValidVar $k@6863))
(assert ($Perm.isReadVar $k@6863 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6611 $k@6615) $k@6799) $k@6803) $k@6820) $k@6824)
        $k@6841)
      $k@6845))
  (= $t@6849 $t@6827)))
; [exec]
; b := __flatten_89
(pop) ; 12
(push) ; 12
; [else-branch 754] $t@6855 == Null
(assert (= $t@6855 $Ref.null))
(declare-const $k@6864 $Perm)
(assert ($Perm.isValidVar $k@6864))
(assert ($Perm.isReadVar $k@6864 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6610 $k@6614) $k@6798) $k@6802) $k@6819) $k@6823)
        $k@6840)
      $k@6844))
  (= $t@6851 $t@6829)))
(declare-const $k@6865 $Perm)
(assert ($Perm.isValidVar $k@6865))
(assert ($Perm.isReadVar $k@6865 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6611 $k@6615) $k@6799) $k@6803) $k@6820) $k@6824)
        $k@6841)
      $k@6845))
  (= $t@6849 $t@6827)))
; [exec]
; b := __flatten_89
(pop) ; 12
(pop) ; 11
; [dead else-branch 753] $t@6833 == Null
(pop) ; 10
(push) ; 10
; [else-branch 752] $t@6833 == Null
(assert (= $t@6833 $Ref.null))
(declare-const $k@6866 $Perm)
(assert ($Perm.isValidVar $k@6866))
(assert ($Perm.isReadVar $k@6866 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (- (+ (- (+ (- $k@6610 $k@6614) $k@6798) $k@6802) $k@6819) $k@6823))
  (= $t@6829 $t@6808)))
(declare-const $k@6867 $Perm)
(assert ($Perm.isValidVar $k@6867))
(assert ($Perm.isReadVar $k@6867 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (- (+ (- (+ (- $k@6611 $k@6615) $k@6799) $k@6803) $k@6820) $k@6824))
  (= $t@6827 $t@6806)))
; [exec]
; __flatten_89 := BlockingQueue__offer(queue, 4)
; [eval] diz != null
(declare-const $k@6868 $Perm)
(assert ($Perm.isValidVar $k@6868))
(assert ($Perm.isReadVar $k@6868 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@6868 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (<
  $k@6868
  (+ (- (+ (- (+ (- $k@6604 $k@6612) $k@6629) $k@6800) $k@6817) $k@6821) $k@6838)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@6869 $Perm)
(assert ($Perm.isValidVar $k@6869))
(assert ($Perm.isReadVar $k@6869 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@6869 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (<
  $k@6869
  (+ (- (+ (- (+ (- $k@6605 $k@6613) $k@6630) $k@6801) $k@6818) $k@6822) $k@6839)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 11
(assert (not (not (= $t@6833 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 11
; [dead then-branch 755] $t@6833 != Null
(push) ; 11
; [else-branch 755] $t@6833 == Null
(declare-const $k@6870 $Perm)
(assert ($Perm.isValidVar $k@6870))
(assert ($Perm.isReadVar $k@6870 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@6870 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(push) ; 12
(assert (not (not
  (=
    (+
      (- (+ (- (+ (- $k@6610 $k@6614) $k@6798) $k@6802) $k@6819) $k@6823)
      $k@6866)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (- (+ (- (+ (- $k@6610 $k@6614) $k@6798) $k@6802) $k@6819) $k@6823)
      $k@6866)
    $Perm.No)))
(assert (<
  $k@6870
  (+ (- (+ (- (+ (- $k@6610 $k@6614) $k@6798) $k@6802) $k@6819) $k@6823) $k@6866)))
(declare-const $k@6871 $Perm)
(assert ($Perm.isValidVar $k@6871))
(assert ($Perm.isReadVar $k@6871 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@6871 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(push) ; 12
(assert (not (not
  (=
    (+
      (- (+ (- (+ (- $k@6611 $k@6615) $k@6799) $k@6803) $k@6820) $k@6824)
      $k@6867)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (- (+ (- (+ (- $k@6611 $k@6615) $k@6799) $k@6803) $k@6820) $k@6824)
      $k@6867)
    $Perm.No)))
(assert (<
  $k@6871
  (+ (- (+ (- (+ (- $k@6611 $k@6615) $k@6799) $k@6803) $k@6820) $k@6824) $k@6867)))
(declare-const sys__result@6872 Bool)
(declare-const $t@6873 $Snap)
(declare-const $t@6874 $Snap)
(declare-const $t@6875 $Ref)
(assert (= $t@6873 ($Snap.combine $t@6874 ($SortWrappers.$RefTo$Snap $t@6875))))
(declare-const $t@6876 $Snap)
(declare-const $t@6877 $Ref)
(assert (= $t@6874 ($Snap.combine $t@6876 ($SortWrappers.$RefTo$Snap $t@6877))))
(declare-const $t@6878 $Snap)
(declare-const $t@6879 $Snap)
(assert (= $t@6876 ($Snap.combine $t@6878 $t@6879)))
(declare-const $t@6880 $Snap)
(declare-const $t@6881 $Ref)
(assert (= $t@6878 ($Snap.combine $t@6880 ($SortWrappers.$RefTo$Snap $t@6881))))
(declare-const $t@6882 $Snap)
(assert (= $t@6880 ($Snap.combine $t@6882 $Snap.unit)))
(declare-const $t@6883 Int)
(declare-const $t@6884 $Ref)
(assert (=
  $t@6882
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@6883)
    ($SortWrappers.$RefTo$Snap $t@6884))))
(declare-const $t@6885 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@6883)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@6885) $Snap.unit)))
(declare-const $k@6886 $Perm)
(assert ($Perm.isValidVar $k@6886))
(assert ($Perm.isReadVar $k@6886 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6604 $k@6612) $k@6629) $k@6800) $k@6817) $k@6821)
        $k@6838)
      $k@6868))
  (= $t@6885 $t@6837)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 12
(assert (not (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@6604 $k@6612) $k@6629) $k@6800) $k@6817) $k@6821)
          $k@6838)
        $k@6868)
      $k@6886)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@6604 $k@6612) $k@6629) $k@6800) $k@6817) $k@6821)
          $k@6838)
        $k@6868)
      $k@6886)
    $Perm.No)))
(assert (> $t@6885 0))
(declare-const $k@6887 $Perm)
(assert ($Perm.isValidVar $k@6887))
(assert ($Perm.isReadVar $k@6887 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6605 $k@6613) $k@6630) $k@6801) $k@6818) $k@6822)
        $k@6839)
      $k@6869))
  (= $t@6884 $t@6836)))
; [eval] diz.BlockingQueue__count != null
(push) ; 12
(assert (not (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@6605 $k@6613) $k@6630) $k@6801) $k@6818) $k@6822)
          $k@6839)
        $k@6869)
      $k@6887)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@6605 $k@6613) $k@6630) $k@6801) $k@6818) $k@6822)
          $k@6839)
        $k@6869)
      $k@6887)
    $Perm.No)))
(assert (not (= $t@6884 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 12
(assert (not (= $t@6881 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 12
(push) ; 12
(assert (not (not (= $t@6881 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 12
(push) ; 12
; [then-branch 756] $t@6881 != Null
(assert (not (= $t@6881 $Ref.null)))
(declare-const $k@6888 $Perm)
(assert ($Perm.isValidVar $k@6888))
(assert ($Perm.isReadVar $k@6888 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6610 $k@6614) $k@6798) $k@6802) $k@6819) $k@6823)
        $k@6866)
      $k@6870))
  (= $t@6877 $t@6829)))
(declare-const $k@6889 $Perm)
(assert ($Perm.isValidVar $k@6889))
(assert ($Perm.isReadVar $k@6889 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6611 $k@6615) $k@6799) $k@6803) $k@6820) $k@6824)
        $k@6867)
      $k@6871))
  (= $t@6875 $t@6827)))
; [exec]
; b := __flatten_89
(pop) ; 12
(push) ; 12
; [else-branch 756] $t@6881 == Null
(assert (= $t@6881 $Ref.null))
(declare-const $k@6890 $Perm)
(assert ($Perm.isValidVar $k@6890))
(assert ($Perm.isReadVar $k@6890 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6610 $k@6614) $k@6798) $k@6802) $k@6819) $k@6823)
        $k@6866)
      $k@6870))
  (= $t@6877 $t@6829)))
(declare-const $k@6891 $Perm)
(assert ($Perm.isValidVar $k@6891))
(assert ($Perm.isReadVar $k@6891 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6611 $k@6615) $k@6799) $k@6803) $k@6820) $k@6824)
        $k@6867)
      $k@6871))
  (= $t@6875 $t@6827)))
; [exec]
; b := __flatten_89
(pop) ; 12
(pop) ; 11
(pop) ; 10
(pop) ; 9
; [dead else-branch 751] $t@6812 == Null
(pop) ; 8
(push) ; 8
; [else-branch 750] $t@6812 == Null
(assert (= $t@6812 $Ref.null))
(declare-const $k@6892 $Perm)
(assert ($Perm.isValidVar $k@6892))
(assert ($Perm.isReadVar $k@6892 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@6610 $k@6614) $k@6798) $k@6802))
  (= $t@6808 $t@6620)))
(declare-const $k@6893 $Perm)
(assert ($Perm.isValidVar $k@6893))
(assert ($Perm.isReadVar $k@6893 $Perm.Write))
(assert (implies
  (< $Perm.No (- (+ (- $k@6611 $k@6615) $k@6799) $k@6803))
  (= $t@6806 $t@6618)))
; [exec]
; BlockingQueue__put(queue, 3)
; [eval] diz != null
(declare-const $k@6894 $Perm)
(assert ($Perm.isValidVar $k@6894))
(assert ($Perm.isReadVar $k@6894 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@6894 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@6894 (+ (- (+ (- $k@6604 $k@6612) $k@6629) $k@6800) $k@6817)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@6895 $Perm)
(assert ($Perm.isValidVar $k@6895))
(assert ($Perm.isReadVar $k@6895 $Perm.Write))
(push) ; 9
(assert (not (or (= $k@6895 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 9
(assert (< $k@6895 (+ (- (+ (- $k@6605 $k@6613) $k@6630) $k@6801) $k@6818)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 9
(assert (not (not (= $t@6812 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 9
; [dead then-branch 757] $t@6812 != Null
(push) ; 9
; [else-branch 757] $t@6812 == Null
(declare-const $k@6896 $Perm)
(assert ($Perm.isValidVar $k@6896))
(assert ($Perm.isReadVar $k@6896 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@6896 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= (+ (- (+ (- $k@6610 $k@6614) $k@6798) $k@6802) $k@6892) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not (= (+ (- (+ (- $k@6610 $k@6614) $k@6798) $k@6802) $k@6892) $Perm.No)))
(assert (< $k@6896 (+ (- (+ (- $k@6610 $k@6614) $k@6798) $k@6802) $k@6892)))
(declare-const $k@6897 $Perm)
(assert ($Perm.isValidVar $k@6897))
(assert ($Perm.isReadVar $k@6897 $Perm.Write))
(push) ; 10
(assert (not (or (= $k@6897 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= (+ (- (+ (- $k@6611 $k@6615) $k@6799) $k@6803) $k@6893) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not (= (+ (- (+ (- $k@6611 $k@6615) $k@6799) $k@6803) $k@6893) $Perm.No)))
(assert (< $k@6897 (+ (- (+ (- $k@6611 $k@6615) $k@6799) $k@6803) $k@6893)))
(declare-const $t@6898 $Snap)
(declare-const $t@6899 $Snap)
(declare-const $t@6900 $Ref)
(assert (= $t@6898 ($Snap.combine $t@6899 ($SortWrappers.$RefTo$Snap $t@6900))))
(declare-const $t@6901 $Snap)
(declare-const $t@6902 $Ref)
(assert (= $t@6899 ($Snap.combine $t@6901 ($SortWrappers.$RefTo$Snap $t@6902))))
(declare-const $t@6903 $Snap)
(declare-const $t@6904 $Snap)
(assert (= $t@6901 ($Snap.combine $t@6903 $t@6904)))
(declare-const $t@6905 $Snap)
(declare-const $t@6906 $Ref)
(assert (= $t@6903 ($Snap.combine $t@6905 ($SortWrappers.$RefTo$Snap $t@6906))))
(declare-const $t@6907 $Snap)
(assert (= $t@6905 ($Snap.combine $t@6907 $Snap.unit)))
(declare-const $t@6908 Int)
(declare-const $t@6909 $Ref)
(assert (=
  $t@6907
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@6908)
    ($SortWrappers.$RefTo$Snap $t@6909))))
(declare-const $t@6910 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@6908)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@6910) $Snap.unit)))
(declare-const $k@6911 $Perm)
(assert ($Perm.isValidVar $k@6911))
(assert ($Perm.isReadVar $k@6911 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (- (+ (- (+ (- $k@6604 $k@6612) $k@6629) $k@6800) $k@6817) $k@6894))
  (= $t@6910 $t@6816)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 10
(assert (not (not
  (=
    (+
      (- (+ (- (+ (- $k@6604 $k@6612) $k@6629) $k@6800) $k@6817) $k@6894)
      $k@6911)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not
  (=
    (+
      (- (+ (- (+ (- $k@6604 $k@6612) $k@6629) $k@6800) $k@6817) $k@6894)
      $k@6911)
    $Perm.No)))
(assert (> $t@6910 0))
(declare-const $k@6912 $Perm)
(assert ($Perm.isValidVar $k@6912))
(assert ($Perm.isReadVar $k@6912 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (- (+ (- (+ (- $k@6605 $k@6613) $k@6630) $k@6801) $k@6818) $k@6895))
  (= $t@6909 $t@6815)))
; [eval] diz.BlockingQueue__count != null
(push) ; 10
(assert (not (not
  (=
    (+
      (- (+ (- (+ (- $k@6605 $k@6613) $k@6630) $k@6801) $k@6818) $k@6895)
      $k@6912)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 10
(assert (not
  (=
    (+
      (- (+ (- (+ (- $k@6605 $k@6613) $k@6630) $k@6801) $k@6818) $k@6895)
      $k@6912)
    $Perm.No)))
(assert (not (= $t@6909 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 10
(assert (not (= $t@6906 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 10
(push) ; 10
(assert (not (not (= $t@6906 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 10
(push) ; 10
; [then-branch 758] $t@6906 != Null
(assert (not (= $t@6906 $Ref.null)))
(declare-const $k@6913 $Perm)
(assert ($Perm.isValidVar $k@6913))
(assert ($Perm.isReadVar $k@6913 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (- (+ (- (+ (- $k@6610 $k@6614) $k@6798) $k@6802) $k@6892) $k@6896))
  (= $t@6902 $t@6808)))
(declare-const $k@6914 $Perm)
(assert ($Perm.isValidVar $k@6914))
(assert ($Perm.isReadVar $k@6914 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (- (+ (- (+ (- $k@6611 $k@6615) $k@6799) $k@6803) $k@6893) $k@6897))
  (= $t@6900 $t@6806)))
; [exec]
; __flatten_89 := BlockingQueue__offer(queue, 4)
; [eval] diz != null
(declare-const $k@6915 $Perm)
(assert ($Perm.isValidVar $k@6915))
(assert ($Perm.isReadVar $k@6915 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@6915 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (<
  $k@6915
  (+ (- (+ (- (+ (- $k@6604 $k@6612) $k@6629) $k@6800) $k@6817) $k@6894) $k@6911)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@6916 $Perm)
(assert ($Perm.isValidVar $k@6916))
(assert ($Perm.isReadVar $k@6916 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@6916 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (<
  $k@6916
  (+ (- (+ (- (+ (- $k@6605 $k@6613) $k@6630) $k@6801) $k@6818) $k@6895) $k@6912)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 11
(assert (not (= $t@6906 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 11
(push) ; 11
; [then-branch 759] $t@6906 != Null
(declare-const $k@6917 $Perm)
(assert ($Perm.isValidVar $k@6917))
(assert ($Perm.isReadVar $k@6917 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@6917 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(push) ; 12
(assert (not (not
  (=
    (+
      (- (+ (- (+ (- $k@6610 $k@6614) $k@6798) $k@6802) $k@6892) $k@6896)
      $k@6913)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (- (+ (- (+ (- $k@6610 $k@6614) $k@6798) $k@6802) $k@6892) $k@6896)
      $k@6913)
    $Perm.No)))
(assert (<
  $k@6917
  (+ (- (+ (- (+ (- $k@6610 $k@6614) $k@6798) $k@6802) $k@6892) $k@6896) $k@6913)))
(declare-const $k@6918 $Perm)
(assert ($Perm.isValidVar $k@6918))
(assert ($Perm.isReadVar $k@6918 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@6918 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(push) ; 12
(assert (not (not
  (=
    (+
      (- (+ (- (+ (- $k@6611 $k@6615) $k@6799) $k@6803) $k@6893) $k@6897)
      $k@6914)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (- (+ (- (+ (- $k@6611 $k@6615) $k@6799) $k@6803) $k@6893) $k@6897)
      $k@6914)
    $Perm.No)))
(assert (<
  $k@6918
  (+ (- (+ (- (+ (- $k@6611 $k@6615) $k@6799) $k@6803) $k@6893) $k@6897) $k@6914)))
(declare-const sys__result@6919 Bool)
(declare-const $t@6920 $Snap)
(declare-const $t@6921 $Snap)
(declare-const $t@6922 $Ref)
(assert (= $t@6920 ($Snap.combine $t@6921 ($SortWrappers.$RefTo$Snap $t@6922))))
(declare-const $t@6923 $Snap)
(declare-const $t@6924 $Ref)
(assert (= $t@6921 ($Snap.combine $t@6923 ($SortWrappers.$RefTo$Snap $t@6924))))
(declare-const $t@6925 $Snap)
(declare-const $t@6926 $Snap)
(assert (= $t@6923 ($Snap.combine $t@6925 $t@6926)))
(declare-const $t@6927 $Snap)
(declare-const $t@6928 $Ref)
(assert (= $t@6925 ($Snap.combine $t@6927 ($SortWrappers.$RefTo$Snap $t@6928))))
(declare-const $t@6929 $Snap)
(assert (= $t@6927 ($Snap.combine $t@6929 $Snap.unit)))
(declare-const $t@6930 Int)
(declare-const $t@6931 $Ref)
(assert (=
  $t@6929
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@6930)
    ($SortWrappers.$RefTo$Snap $t@6931))))
(declare-const $t@6932 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@6930)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@6932) $Snap.unit)))
(declare-const $k@6933 $Perm)
(assert ($Perm.isValidVar $k@6933))
(assert ($Perm.isReadVar $k@6933 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6604 $k@6612) $k@6629) $k@6800) $k@6817) $k@6894)
        $k@6911)
      $k@6915))
  (= $t@6932 $t@6910)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 12
(assert (not (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@6604 $k@6612) $k@6629) $k@6800) $k@6817) $k@6894)
          $k@6911)
        $k@6915)
      $k@6933)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@6604 $k@6612) $k@6629) $k@6800) $k@6817) $k@6894)
          $k@6911)
        $k@6915)
      $k@6933)
    $Perm.No)))
(assert (> $t@6932 0))
(declare-const $k@6934 $Perm)
(assert ($Perm.isValidVar $k@6934))
(assert ($Perm.isReadVar $k@6934 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6605 $k@6613) $k@6630) $k@6801) $k@6818) $k@6895)
        $k@6912)
      $k@6916))
  (= $t@6931 $t@6909)))
; [eval] diz.BlockingQueue__count != null
(push) ; 12
(assert (not (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@6605 $k@6613) $k@6630) $k@6801) $k@6818) $k@6895)
          $k@6912)
        $k@6916)
      $k@6934)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@6605 $k@6613) $k@6630) $k@6801) $k@6818) $k@6895)
          $k@6912)
        $k@6916)
      $k@6934)
    $Perm.No)))
(assert (not (= $t@6931 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 12
(assert (not (= $t@6928 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 12
(push) ; 12
(assert (not (not (= $t@6928 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 12
(push) ; 12
; [then-branch 760] $t@6928 != Null
(assert (not (= $t@6928 $Ref.null)))
(declare-const $k@6935 $Perm)
(assert ($Perm.isValidVar $k@6935))
(assert ($Perm.isReadVar $k@6935 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6610 $k@6614) $k@6798) $k@6802) $k@6892) $k@6896)
        $k@6913)
      $k@6917))
  (= $t@6924 $t@6902)))
(declare-const $k@6936 $Perm)
(assert ($Perm.isValidVar $k@6936))
(assert ($Perm.isReadVar $k@6936 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6611 $k@6615) $k@6799) $k@6803) $k@6893) $k@6897)
        $k@6914)
      $k@6918))
  (= $t@6922 $t@6900)))
; [exec]
; b := __flatten_89
(pop) ; 12
(push) ; 12
; [else-branch 760] $t@6928 == Null
(assert (= $t@6928 $Ref.null))
(declare-const $k@6937 $Perm)
(assert ($Perm.isValidVar $k@6937))
(assert ($Perm.isReadVar $k@6937 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6610 $k@6614) $k@6798) $k@6802) $k@6892) $k@6896)
        $k@6913)
      $k@6917))
  (= $t@6924 $t@6902)))
(declare-const $k@6938 $Perm)
(assert ($Perm.isValidVar $k@6938))
(assert ($Perm.isReadVar $k@6938 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6611 $k@6615) $k@6799) $k@6803) $k@6893) $k@6897)
        $k@6914)
      $k@6918))
  (= $t@6922 $t@6900)))
; [exec]
; b := __flatten_89
(pop) ; 12
(pop) ; 11
; [dead else-branch 759] $t@6906 == Null
(pop) ; 10
(push) ; 10
; [else-branch 758] $t@6906 == Null
(assert (= $t@6906 $Ref.null))
(declare-const $k@6939 $Perm)
(assert ($Perm.isValidVar $k@6939))
(assert ($Perm.isReadVar $k@6939 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (- (+ (- (+ (- $k@6610 $k@6614) $k@6798) $k@6802) $k@6892) $k@6896))
  (= $t@6902 $t@6808)))
(declare-const $k@6940 $Perm)
(assert ($Perm.isValidVar $k@6940))
(assert ($Perm.isReadVar $k@6940 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (- (+ (- (+ (- $k@6611 $k@6615) $k@6799) $k@6803) $k@6893) $k@6897))
  (= $t@6900 $t@6806)))
; [exec]
; __flatten_89 := BlockingQueue__offer(queue, 4)
; [eval] diz != null
(declare-const $k@6941 $Perm)
(assert ($Perm.isValidVar $k@6941))
(assert ($Perm.isReadVar $k@6941 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@6941 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (<
  $k@6941
  (+ (- (+ (- (+ (- $k@6604 $k@6612) $k@6629) $k@6800) $k@6817) $k@6894) $k@6911)))
; [eval] diz.BlockingQueue__capacity > 0
(declare-const $k@6942 $Perm)
(assert ($Perm.isValidVar $k@6942))
(assert ($Perm.isReadVar $k@6942 $Perm.Write))
(push) ; 11
(assert (not (or (= $k@6942 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 11
(assert (<
  $k@6942
  (+ (- (+ (- (+ (- $k@6605 $k@6613) $k@6630) $k@6801) $k@6818) $k@6895) $k@6912)))
; [eval] diz.BlockingQueue__count != null
; [eval] diz.BlockingQueue__first != null
(push) ; 11
(assert (not (not (= $t@6906 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 11
; [dead then-branch 761] $t@6906 != Null
(push) ; 11
; [else-branch 761] $t@6906 == Null
(declare-const $k@6943 $Perm)
(assert ($Perm.isValidVar $k@6943))
(assert ($Perm.isReadVar $k@6943 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@6943 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(push) ; 12
(assert (not (not
  (=
    (+
      (- (+ (- (+ (- $k@6610 $k@6614) $k@6798) $k@6802) $k@6892) $k@6896)
      $k@6939)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (- (+ (- (+ (- $k@6610 $k@6614) $k@6798) $k@6802) $k@6892) $k@6896)
      $k@6939)
    $Perm.No)))
(assert (<
  $k@6943
  (+ (- (+ (- (+ (- $k@6610 $k@6614) $k@6798) $k@6802) $k@6892) $k@6896) $k@6939)))
(declare-const $k@6944 $Perm)
(assert ($Perm.isValidVar $k@6944))
(assert ($Perm.isReadVar $k@6944 $Perm.Write))
(push) ; 12
(assert (not (or (= $k@6944 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(push) ; 12
(assert (not (not
  (=
    (+
      (- (+ (- (+ (- $k@6611 $k@6615) $k@6799) $k@6803) $k@6893) $k@6897)
      $k@6940)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (- (+ (- (+ (- $k@6611 $k@6615) $k@6799) $k@6803) $k@6893) $k@6897)
      $k@6940)
    $Perm.No)))
(assert (<
  $k@6944
  (+ (- (+ (- (+ (- $k@6611 $k@6615) $k@6799) $k@6803) $k@6893) $k@6897) $k@6940)))
(declare-const sys__result@6945 Bool)
(declare-const $t@6946 $Snap)
(declare-const $t@6947 $Snap)
(declare-const $t@6948 $Ref)
(assert (= $t@6946 ($Snap.combine $t@6947 ($SortWrappers.$RefTo$Snap $t@6948))))
(declare-const $t@6949 $Snap)
(declare-const $t@6950 $Ref)
(assert (= $t@6947 ($Snap.combine $t@6949 ($SortWrappers.$RefTo$Snap $t@6950))))
(declare-const $t@6951 $Snap)
(declare-const $t@6952 $Snap)
(assert (= $t@6949 ($Snap.combine $t@6951 $t@6952)))
(declare-const $t@6953 $Snap)
(declare-const $t@6954 $Ref)
(assert (= $t@6951 ($Snap.combine $t@6953 ($SortWrappers.$RefTo$Snap $t@6954))))
(declare-const $t@6955 $Snap)
(assert (= $t@6953 ($Snap.combine $t@6955 $Snap.unit)))
(declare-const $t@6956 Int)
(declare-const $t@6957 $Ref)
(assert (=
  $t@6955
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@6956)
    ($SortWrappers.$RefTo$Snap $t@6957))))
(declare-const $t@6958 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@6956)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@6958) $Snap.unit)))
(declare-const $k@6959 $Perm)
(assert ($Perm.isValidVar $k@6959))
(assert ($Perm.isReadVar $k@6959 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6604 $k@6612) $k@6629) $k@6800) $k@6817) $k@6894)
        $k@6911)
      $k@6941))
  (= $t@6958 $t@6910)))
; [eval] diz.BlockingQueue__capacity > 0
(push) ; 12
(assert (not (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@6604 $k@6612) $k@6629) $k@6800) $k@6817) $k@6894)
          $k@6911)
        $k@6941)
      $k@6959)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@6604 $k@6612) $k@6629) $k@6800) $k@6817) $k@6894)
          $k@6911)
        $k@6941)
      $k@6959)
    $Perm.No)))
(assert (> $t@6958 0))
(declare-const $k@6960 $Perm)
(assert ($Perm.isValidVar $k@6960))
(assert ($Perm.isReadVar $k@6960 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6605 $k@6613) $k@6630) $k@6801) $k@6818) $k@6895)
        $k@6912)
      $k@6942))
  (= $t@6957 $t@6909)))
; [eval] diz.BlockingQueue__count != null
(push) ; 12
(assert (not (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@6605 $k@6613) $k@6630) $k@6801) $k@6818) $k@6895)
          $k@6912)
        $k@6942)
      $k@6960)
    $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 12
(assert (not
  (=
    (+
      (-
        (+
          (- (+ (- (+ (- $k@6605 $k@6613) $k@6630) $k@6801) $k@6818) $k@6895)
          $k@6912)
        $k@6942)
      $k@6960)
    $Perm.No)))
(assert (not (= $t@6957 $Ref.null)))
; [eval] diz.BlockingQueue__first != null
(push) ; 12
(assert (not (= $t@6954 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 12
(push) ; 12
(assert (not (not (= $t@6954 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 12
(push) ; 12
; [then-branch 762] $t@6954 != Null
(assert (not (= $t@6954 $Ref.null)))
(declare-const $k@6961 $Perm)
(assert ($Perm.isValidVar $k@6961))
(assert ($Perm.isReadVar $k@6961 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6610 $k@6614) $k@6798) $k@6802) $k@6892) $k@6896)
        $k@6939)
      $k@6943))
  (= $t@6950 $t@6902)))
(declare-const $k@6962 $Perm)
(assert ($Perm.isValidVar $k@6962))
(assert ($Perm.isReadVar $k@6962 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6611 $k@6615) $k@6799) $k@6803) $k@6893) $k@6897)
        $k@6940)
      $k@6944))
  (= $t@6948 $t@6900)))
; [exec]
; b := __flatten_89
(pop) ; 12
(push) ; 12
; [else-branch 762] $t@6954 == Null
(assert (= $t@6954 $Ref.null))
(declare-const $k@6963 $Perm)
(assert ($Perm.isValidVar $k@6963))
(assert ($Perm.isReadVar $k@6963 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6610 $k@6614) $k@6798) $k@6802) $k@6892) $k@6896)
        $k@6939)
      $k@6943))
  (= $t@6950 $t@6902)))
(declare-const $k@6964 $Perm)
(assert ($Perm.isValidVar $k@6964))
(assert ($Perm.isReadVar $k@6964 $Perm.Write))
(assert (implies
  (<
    $Perm.No
    (-
      (+
        (- (+ (- (+ (- $k@6611 $k@6615) $k@6799) $k@6803) $k@6893) $k@6897)
        $k@6940)
      $k@6944))
  (= $t@6948 $t@6900)))
; [exec]
; b := __flatten_89
(pop) ; 12
(pop) ; 11
(pop) ; 10
(pop) ; 9
(pop) ; 8
(pop) ; 7
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
; ---------- Test__test1 ----------
(declare-const diz@6965 $Ref)
(declare-const queue@6966 $Ref)
(declare-const __flatten_90@6967 $Ref)
(declare-const t1@6968 $Ref)
(declare-const __flatten_91@6969 $Ref)
(declare-const t2@6970 $Ref)
(declare-const __flatten_92@6971 $Ref)
(push) ; 2
; [eval] diz != null
(assert (not (= diz@6965 $Ref.null)))
(push) ; 3
(pop) ; 3
(push) ; 3
; [exec]
; __flatten_90 := BlockingQueue__BlockingQueue(2)
; [eval] capacity > 0
(declare-const sys__result@6972 $Ref)
(declare-const $t@6973 $Snap)
(declare-const $t@6974 $Snap)
(assert (= $t@6973 ($Snap.combine $t@6974 $Snap.unit)))
(declare-const $t@6975 $Snap)
(assert (= $t@6974 ($Snap.combine $t@6975 $Snap.unit)))
(declare-const $t@6976 $Snap)
(declare-const $t@6977 $Ref)
(assert (= $t@6975 ($Snap.combine $t@6976 ($SortWrappers.$RefTo$Snap $t@6977))))
(declare-const $t@6978 $Snap)
(declare-const $t@6979 $Ref)
(assert (= $t@6976 ($Snap.combine $t@6978 ($SortWrappers.$RefTo$Snap $t@6979))))
(declare-const $t@6980 $Snap)
(declare-const $t@6981 $Snap)
(assert (= $t@6978 ($Snap.combine $t@6980 $t@6981)))
(declare-const $t@6982 $Snap)
(declare-const $t@6983 $Ref)
(assert (= $t@6980 ($Snap.combine $t@6982 ($SortWrappers.$RefTo$Snap $t@6983))))
(declare-const $t@6984 $Snap)
(assert (= $t@6982 ($Snap.combine $t@6984 $Snap.unit)))
(declare-const $t@6985 Int)
(declare-const $t@6986 $Ref)
(assert (=
  $t@6984
  ($Snap.combine
    ($SortWrappers.IntTo$Snap $t@6985)
    ($SortWrappers.$RefTo$Snap $t@6986))))
(declare-const $t@6987 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@6985)
  ($Snap.combine ($SortWrappers.IntTo$Snap $t@6987) $Snap.unit)))
(declare-const $t@6988 Int)
(assert (=
  ($SortWrappers.IntTo$Snap $t@6987)
  ($Snap.combine $Snap.unit ($SortWrappers.IntTo$Snap $t@6988))))
; [eval] sys__result != null
(assert (not (= sys__result@6972 $Ref.null)))
(declare-const $k@6989 $Perm)
(assert ($Perm.isValidVar $k@6989))
(assert ($Perm.isReadVar $k@6989 $Perm.Write))
; [eval] sys__result.BlockingQueue__capacity > 0
(push) ; 4
(assert (not (not (= $k@6989 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 4
(assert (not (= $k@6989 $Perm.No)))
(assert (> $t@6988 0))
(declare-const $k@6990 $Perm)
(assert ($Perm.isValidVar $k@6990))
(assert ($Perm.isReadVar $k@6990 $Perm.Write))
; [eval] sys__result.BlockingQueue__count != null
(push) ; 4
(assert (not (not (= $k@6990 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 4
(assert (not (= $k@6990 $Perm.No)))
(assert (not (= $t@6986 $Ref.null)))
; [eval] sys__result.BlockingQueue__first != null
(push) ; 4
(assert (not (= $t@6983 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 4
(push) ; 4
(assert (not (not (= $t@6983 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 4
(push) ; 4
; [then-branch 763] $t@6983 != Null
(assert (not (= $t@6983 $Ref.null)))
(declare-const $k@6991 $Perm)
(assert ($Perm.isValidVar $k@6991))
(assert ($Perm.isReadVar $k@6991 $Perm.Write))
(declare-const $k@6992 $Perm)
(assert ($Perm.isValidVar $k@6992))
(assert ($Perm.isReadVar $k@6992 $Perm.Write))
; [eval] sys__result.BlockingQueue__capacity == capacity
(assert (= $t@6988 2))
; [eval] sys__result.BlockingQueue__first == null
(assert (= $t@6983 $Ref.null))
; [exec]
; queue := __flatten_90
; [exec]
; __flatten_91 := LBQThread1a__LBQThread1a(queue)
(declare-const $k@6993 $Perm)
(assert ($Perm.isValidVar $k@6993))
(assert ($Perm.isReadVar $k@6993 $Perm.Write))
(push) ; 5
(assert (not (or (= $k@6993 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (< $k@6993 $k@6989))
; [eval] queue.BlockingQueue__capacity > 0
(declare-const $k@6994 $Perm)
(assert ($Perm.isValidVar $k@6994))
(assert ($Perm.isReadVar $k@6994 $Perm.Write))
(push) ; 5
(assert (not (or (= $k@6994 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (< $k@6994 $k@6990))
; [eval] queue.BlockingQueue__count != null
; [eval] queue.BlockingQueue__first != null
; [dead then-branch 764] $t@6983 != Null
; [dead else-branch 764] $t@6983 == Null
(pop) ; 4
(push) ; 4
; [else-branch 763] $t@6983 == Null
(assert (= $t@6983 $Ref.null))
(declare-const $k@6995 $Perm)
(assert ($Perm.isValidVar $k@6995))
(assert ($Perm.isReadVar $k@6995 $Perm.Write))
(declare-const $k@6996 $Perm)
(assert ($Perm.isValidVar $k@6996))
(assert ($Perm.isReadVar $k@6996 $Perm.Write))
; [eval] sys__result.BlockingQueue__capacity == capacity
(assert (= $t@6988 2))
; [eval] sys__result.BlockingQueue__first == null
; [exec]
; queue := __flatten_90
; [exec]
; __flatten_91 := LBQThread1a__LBQThread1a(queue)
(declare-const $k@6997 $Perm)
(assert ($Perm.isValidVar $k@6997))
(assert ($Perm.isReadVar $k@6997 $Perm.Write))
(push) ; 5
(assert (not (or (= $k@6997 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (< $k@6997 $k@6989))
; [eval] queue.BlockingQueue__capacity > 0
(declare-const $k@6998 $Perm)
(assert ($Perm.isValidVar $k@6998))
(assert ($Perm.isReadVar $k@6998 $Perm.Write))
(push) ; 5
(assert (not (or (= $k@6998 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 5
(assert (< $k@6998 $k@6990))
; [eval] queue.BlockingQueue__count != null
; [eval] queue.BlockingQueue__first != null
(push) ; 5
(assert (not (not (= $t@6983 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 5
; [dead then-branch 765] $t@6983 != Null
(push) ; 5
; [else-branch 765] $t@6983 == Null
(declare-const $k@6999 $Perm)
(assert ($Perm.isValidVar $k@6999))
(assert ($Perm.isReadVar $k@6999 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@6999 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(push) ; 6
(assert (not (not (= $k@6995 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= $k@6995 $Perm.No)))
(assert (< $k@6999 $k@6995))
(declare-const $k@7000 $Perm)
(assert ($Perm.isValidVar $k@7000))
(assert ($Perm.isReadVar $k@7000 $Perm.Write))
(push) ; 6
(assert (not (or (= $k@7000 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(push) ; 6
(assert (not (not (= $k@6996 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= $k@6996 $Perm.No)))
(assert (< $k@7000 $k@6996))
(declare-const sys__result@7001 $Ref)
(declare-const $t@7002 $Snap)
(declare-const $t@7003 $Snap)
(declare-const $t@7004 $Ref)
(assert (= $t@7002 ($Snap.combine $t@7003 ($SortWrappers.$RefTo$Snap $t@7004))))
(declare-const $t@7005 $Snap)
(declare-const $t@7006 $Ref)
(assert (= $t@7003 ($Snap.combine $t@7005 ($SortWrappers.$RefTo$Snap $t@7006))))
(declare-const $t@7007 $Snap)
(declare-const $t@7008 $Snap)
(assert (= $t@7005 ($Snap.combine $t@7007 $t@7008)))
(declare-const $t@7009 $Snap)
(declare-const $t@7010 $Ref)
(assert (= $t@7007 ($Snap.combine $t@7009 ($SortWrappers.$RefTo$Snap $t@7010))))
(declare-const $t@7011 $Snap)
(assert (= $t@7009 ($Snap.combine $t@7011 $Snap.unit)))
(declare-const $t@7012 $Snap)
(declare-const $t@7013 $Ref)
(assert (= $t@7011 ($Snap.combine $t@7012 ($SortWrappers.$RefTo$Snap $t@7013))))
(declare-const $t@7014 $Snap)
(assert (= $t@7012 ($Snap.combine $t@7014 $Snap.unit)))
(declare-const $t@7015 $Ref)
(declare-const $t@7016 Int)
(assert (=
  $t@7014
  ($Snap.combine
    ($SortWrappers.$RefTo$Snap $t@7015)
    ($SortWrappers.IntTo$Snap $t@7016))))
(declare-const $t@7017 $Ref)
(assert (=
  ($SortWrappers.$RefTo$Snap $t@7015)
  ($Snap.combine $Snap.unit ($SortWrappers.$RefTo$Snap $t@7017))))
; [eval] sys__result != null
(assert (not (= sys__result@7001 $Ref.null)))
(declare-const $k@7018 $Perm)
(assert ($Perm.isValidVar $k@7018))
(assert ($Perm.isReadVar $k@7018 $Perm.Write))
(push) ; 6
(assert (not (not (= $k@7018 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= $k@7018 $Perm.No)))
(assert (not (= $t@7017 $Ref.null)))
(declare-const $k@7019 $Perm)
(assert ($Perm.isValidVar $k@7019))
(assert ($Perm.isReadVar $k@7019 $Perm.Write))
(push) ; 6
(assert (not (= sys__result@6972 $t@7017)))
(check-sat)
; unknown
; 0.00s
(pop) ; 6
; [eval] sys__result.LBQThread1a__queue.BlockingQueue__capacity > 0
(push) ; 6
(assert (not (not (= $k@7019 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= $k@7019 $Perm.No)))
(assert (> $t@7016 0))
(declare-const $k@7020 $Perm)
(assert ($Perm.isValidVar $k@7020))
(assert ($Perm.isReadVar $k@7020 $Perm.Write))
(push) ; 6
(assert (not (= sys__result@6972 $t@7017)))
(check-sat)
; unknown
; 0.00s
(pop) ; 6
; [eval] sys__result.LBQThread1a__queue.BlockingQueue__count != null
(push) ; 6
(assert (not (not (= $k@7020 $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 6
(assert (not (= $k@7020 $Perm.No)))
(assert (not (= $t@7013 $Ref.null)))
; [eval] sys__result.LBQThread1a__queue.BlockingQueue__first != null
(push) ; 6
(assert (not (= $t@7010 $Ref.null)))
(check-sat)
; unknown
; 0.00s
(pop) ; 6
(push) ; 6
(assert (not (not (= $t@7010 $Ref.null))))
(check-sat)
; unknown
; 0.00s
(pop) ; 6
(push) ; 6
; [then-branch 766] $t@7010 != Null
(assert (not (= $t@7010 $Ref.null)))
(declare-const $k@7021 $Perm)
(assert ($Perm.isValidVar $k@7021))
(assert ($Perm.isReadVar $k@7021 $Perm.Write))
(push) ; 7
(assert (not (= sys__result@6972 $t@7017)))
(check-sat)
; unknown
; 0.00s
(pop) ; 7
(declare-const $k@7022 $Perm)
(assert ($Perm.isValidVar $k@7022))
(assert ($Perm.isReadVar $k@7022 $Perm.Write))
(push) ; 7
(assert (not (= sys__result@6972 $t@7017)))
(check-sat)
; unknown
; 0.00s
(pop) ; 7
; [exec]
; t1 := __flatten_91
; [exec]
; __flatten_92 := LBQThread1b__LBQThread1b(queue)
(declare-const $k@7023 $Perm)
(assert ($Perm.isValidVar $k@7023))
(assert ($Perm.isReadVar $k@7023 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@7023 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(push) ; 7
(assert (not (not (= (- $k@6989 $k@6997) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (not (= (- $k@6989 $k@6997) $Perm.No)))
(assert (< $k@7023 (- $k@6989 $k@6997)))
; [eval] queue.BlockingQueue__capacity > 0
(declare-const $k@7024 $Perm)
(assert ($Perm.isValidVar $k@7024))
(assert ($Perm.isReadVar $k@7024 $Perm.Write))
(push) ; 7
(assert (not (or (= $k@7024 $Perm.No) true)))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(push) ; 7
(assert (not (not (= (- $k@6990 $k@6998) $Perm.No))))
(check-sat)
; unsat
; 0.00s
(pop) ; 7
(assert (not (= (- $k@6990 $k@6998) $Perm.No)))
(assert (< $k@7024 (- $k@6990 $k@6998)))
; [eval] queue.BlockingQueue__count != null
(push) ; 7
(assert (not (= $t@7017 sys__result@6972)))
(check-sat)
; unknown
; 0.00s
(pop) ; 7
(check-sat)
; unknown
(push) ; 7
(push) ; 8
(assert (not (= sys__result@6972 $t@7017)))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (= sys__result@6972 $t@7017)))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (= $t@7017 sys__result@6972)))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
(push) ; 8
(assert (not (= $t@7017 sys__result@6972)))
(check-sat)
; unknown
; 0.00s
(pop) ; 8
(pop) ; 7
(assert (or (= $Perm.Write (- $k@6995 $k@6999)) (< (- $k@6995 $k@6999) $Perm.Write)))
(assert (or (= $Perm.Write (- $k@6996 $k@7000)) (< (- $k@6996 $k@7000) $Perm.Write)))
(assert (or (= $Perm.Write $k@7018) (< $k@7018 $Perm.Write)))
(assert (or (= $Perm.Write $k@7019) (< $k@7019 $Perm.Write)))
(assert (or (= $Perm.Write $k@7020) (< $k@7020 $Perm.Write)))
(assert (or (= $Perm.Write $k@7021) (< $k@7021 $Perm.Write)))
(assert (or (= $Perm.Write $k@7022) (< $k@7022 $Perm.Write)))
(assert (or
  (= $Perm.Write (- (- $k@6989 $k@6997) $k@7023))
  (< (- (- $k@6989 $k@6997) $k@7023) $Perm.Write)))
(assert (or
  (= $Perm.Write (- (- $k@6990 $k@6998) $k@7024))
  (< (- (- $k@6990 $k@6998) $k@7024) $Perm.Write)))
(push) ; 7
(assert (not (< $Perm.Write (+ (- (- $k@6990 $k@6998) $k@7024) $k@7020))))
(check-sat)
; unknown
; 0.00s
(pop) ; 7
(push) ; 7
(assert (not (< $Perm.Write (+ (- (- $k@6989 $k@6997) $k@7023) $k@7019))))
(check-sat)
; unknown
; 0.00s
(pop) ; 7
(push) ; 7
(assert (not (< $Perm.Write (+ $k@7022 (- $k@6996 $k@7000)))))
(check-sat)
; unknown
; 0.00s
(pop) ; 7
(push) ; 7
(assert (not (< $Perm.Write (+ $k@7021 (- $k@6995 $k@6999)))))
(check-sat)
; unknown
; 0.00s
(pop) ; 7
(push) ; 7
(assert (not (< $Perm.Write (+ $k@7020 (- (- $k@6990 $k@6998) $k@7024)))))
(check-sat)
; unknown
; 0.00s
(pop) ; 7
(push) ; 7
(assert (not (< $Perm.Write (+ $k@7019 (- (- $k@6989 $k@6997) $k@7023)))))
(check-sat)
; unknown
; 0.00s
(pop) ; 7
(push) ; 7
(assert (not (< $Perm.Write (+ (- $k@6996 $k@7000) $k@7022))))
(check-sat)
; unknown
; 0.00s
(pop) ; 7
(push) ; 7
(assert (not (< $Perm.Write (+ (- $k@6995 $k@6999) $k@7021))))
(check-sat)
; unknown
; 0.00s
(pop) ; 7
(push) ; 7
(assert (not (= $t@7017 sys__result@6972)))
(check-sat)
; unknown
; 0.00s
(pop) ; 7
(check-sat)
; unknown
(pop) ; 6
(pop) ; 5
(pop) ; 4
(pop) ; 3
(pop) ; 2
; ---------- Test__Test ----------
(declare-const sys__result@7025 $Ref)
(declare-const diz@7026 $Ref)
(push) ; 2
(push) ; 3
; [eval] sys__result != null
(assert (not (= sys__result@7025 $Ref.null)))
(pop) ; 3
(push) ; 3
; [exec]
; diz := new()
(declare-const diz@7027 $Ref)
(assert (not (= diz@7027 $Ref.null)))
(assert (not (= sys__result@7025 diz@7027)))
; [exec]
; sys__result := diz
; [exec]
; assert sys__result != null
; [eval] sys__result != null
; [exec]
; inhale false
(pop) ; 3
(pop) ; 2
