class Queue {
  
  int capacity;
  Node first;
  AtomicInteger count;

  resource state() = Perm(first, 1) ** first->state() ** Value(capacity) ** Perm(count, 1);

  requires state();
  seq<int> contents() = 
      first == null
      ? seq<int>{}
      : first.contents(); 

  ensures state();
  ensures first == null;
  ensures this.capacity == capacity;
  ensures count != null ** count.state() ** count.getVal() == 0;
  Queue(int capacity) {
    first = null;
    this.capacity = capacity;
    this.count = new AtomicInteger(0);
    fold state();
  }

  // private void insert(E x) { ... } in java
  requires state();
  ensures  state() ** first != null;
  ensures  \old(|contents()|) == 0 ==> contents() == seq<int>{val};
  ensures  \old(|contents()|) != 0 ==> contents() == \old(contents()) + seq<int>{val};
  void linkLast(int val) {
    if (first == null) {
      first = new Node(val, null);
    } else {
      first.append(new Node(val, null));
    }
  }
  /*

  requires state() ** first != null;
  ensures  state();
  ensures  \result == \old(head(contents()));
  ensures  contents() == \old(tail(contents()));
  int unlinkFirst() {
    unfold first.state();
    int value = first.val; 
    first = first.next;
    return value;
  }
  
  requires state();
  ensures  state();    
  ensures  contents() == \old(contents());
  ensures  |contents()| == 0 ==> \result == null;
  ensures  |contents()| != 0 ==> \result != null ** Value(\result.val) ** \result.val == head(contents());
  Integer peek() {
    Integer res;

    if (first == null) {
      res = null;
    } else {
      unfold first.state();
      res = new Integer(first.val);
      fold first.state();
    }

    return res;
  }

  requires state();
  ensures  state();
  ensures  \old(|contents()|) == 0 ==> \result == null;
  ensures  \old(|contents()|) != 0 ==> \result != null ** Value(\result.val) ** \result.val == \old(head(contents()));
  ensures  \result == null ==> contents() == \old(contents());
  ensures  \result != null ==> contents() == \old(tail(contents()));
  Integer poll() {
    Integer res;

    if (first == null) {
      res = null;
    } else {
      res = new Integer(unlinkFirst());
    }

    return res;
  }

  requires state();
  ensures  state();  
  ensures  contents() == \old(contents()) + seq<int>{\old(i)}; 
  ensures  \result == true;
  boolean offer(int i) {
    linkLast(i);
    return true;
  }
*/
}
